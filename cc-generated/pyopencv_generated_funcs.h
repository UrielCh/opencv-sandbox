#include <napi.h>
#include <../parse.hh>
#include <../node/cv2_convert.hpp>
#include <opencv2/opencv.hpp>

static Napi::Value pyopencv_cv_AKAZE_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_descriptor_type = NULL;
    AKAZE_DescriptorType descriptor_type=AKAZE::DESCRIPTOR_MLDB;
    Napi::Value* pyobj_descriptor_size = NULL;
    int descriptor_size=0;
    Napi::Value* pyobj_descriptor_channels = NULL;
    int descriptor_channels=3;
    Napi::Value* pyobj_threshold = NULL;
    float threshold=0.001f;
    Napi::Value* pyobj_nOctaves = NULL;
    int nOctaves=4;
    Napi::Value* pyobj_nOctaveLayers = NULL;
    int nOctaveLayers=4;
    Napi::Value* pyobj_diffusivity = NULL;
    KAZE_DiffusivityType diffusivity=KAZE::DIFF_PM_G2;
    Ptr<AKAZE> retval;

    const char* keywords[] = { "descriptor_type", "descriptor_size", "descriptor_channels", "threshold", "nOctaves", "nOctaveLayers", "diffusivity", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOOOOO:AKAZE_create", (char**)keywords, &pyobj_descriptor_type, &pyobj_descriptor_size, &pyobj_descriptor_channels, &pyobj_threshold, &pyobj_nOctaves, &pyobj_nOctaveLayers, &pyobj_diffusivity) &&
        jsopencv_to_safe(info, pyobj_descriptor_type, descriptor_type, ArgInfo("descriptor_type", 0)) &&
        jsopencv_to_safe(info, pyobj_descriptor_size, descriptor_size, ArgInfo("descriptor_size", 0)) &&
        jsopencv_to_safe(info, pyobj_descriptor_channels, descriptor_channels, ArgInfo("descriptor_channels", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_nOctaves, nOctaves, ArgInfo("nOctaves", 0)) &&
        jsopencv_to_safe(info, pyobj_nOctaveLayers, nOctaveLayers, ArgInfo("nOctaveLayers", 0)) &&
        jsopencv_to_safe(info, pyobj_diffusivity, diffusivity, ArgInfo("diffusivity", 0)))
    {
        ERRWRAP2(retval = cv::AKAZE::create(descriptor_type, descriptor_size, descriptor_channels, threshold, nOctaves, nOctaveLayers, diffusivity));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_AffineFeature_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_backend = NULL;
    Ptr<Feature2D> backend;
    Napi::Value* pyobj_maxTilt = NULL;
    int maxTilt=5;
    Napi::Value* pyobj_minTilt = NULL;
    int minTilt=0;
    Napi::Value* pyobj_tiltStep = NULL;
    float tiltStep=1.4142135623730951f;
    Napi::Value* pyobj_rotateStepBase = NULL;
    float rotateStepBase=72;
    Ptr<AffineFeature> retval;

    const char* keywords[] = { "backend", "maxTilt", "minTilt", "tiltStep", "rotateStepBase", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOO:AffineFeature_create", (char**)keywords, &pyobj_backend, &pyobj_maxTilt, &pyobj_minTilt, &pyobj_tiltStep, &pyobj_rotateStepBase) &&
        jsopencv_to_safe(info, pyobj_backend, backend, ArgInfo("backend", 0)) &&
        jsopencv_to_safe(info, pyobj_maxTilt, maxTilt, ArgInfo("maxTilt", 0)) &&
        jsopencv_to_safe(info, pyobj_minTilt, minTilt, ArgInfo("minTilt", 0)) &&
        jsopencv_to_safe(info, pyobj_tiltStep, tiltStep, ArgInfo("tiltStep", 0)) &&
        jsopencv_to_safe(info, pyobj_rotateStepBase, rotateStepBase, ArgInfo("rotateStepBase", 0)))
    {
        ERRWRAP2(retval = cv::AffineFeature::create(backend, maxTilt, minTilt, tiltStep, rotateStepBase));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_AgastFeatureDetector_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_threshold = NULL;
    int threshold=10;
    Napi::Value* pyobj_nonmaxSuppression = NULL;
    bool nonmaxSuppression=true;
    Napi::Value* pyobj_type = NULL;
    AgastFeatureDetector_DetectorType type=AgastFeatureDetector::OAST_9_16;
    Ptr<AgastFeatureDetector> retval;

    const char* keywords[] = { "threshold", "nonmaxSuppression", "type", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOO:AgastFeatureDetector_create", (char**)keywords, &pyobj_threshold, &pyobj_nonmaxSuppression, &pyobj_type) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_nonmaxSuppression, nonmaxSuppression, ArgInfo("nonmaxSuppression", 0)) &&
        jsopencv_to_safe(info, pyobj_type, type, ArgInfo("type", 0)))
    {
        ERRWRAP2(retval = cv::AgastFeatureDetector::create(threshold, nonmaxSuppression, type));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_BFMatcher_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_normType = NULL;
    int normType=NORM_L2;
    Napi::Value* pyobj_crossCheck = NULL;
    bool crossCheck=false;
    Ptr<BFMatcher> retval;

    const char* keywords[] = { "normType", "crossCheck", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OO:BFMatcher_create", (char**)keywords, &pyobj_normType, &pyobj_crossCheck) &&
        jsopencv_to_safe(info, pyobj_normType, normType, ArgInfo("normType", 0)) &&
        jsopencv_to_safe(info, pyobj_crossCheck, crossCheck, ArgInfo("crossCheck", 0)))
    {
        ERRWRAP2(retval = cv::BFMatcher::create(normType, crossCheck));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_BRISK_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(3);

    {
    Napi::Value* pyobj_thresh = NULL;
    int thresh=30;
    Napi::Value* pyobj_octaves = NULL;
    int octaves=3;
    Napi::Value* pyobj_patternScale = NULL;
    float patternScale=1.0f;
    Ptr<BRISK> retval;

    const char* keywords[] = { "thresh", "octaves", "patternScale", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOO:BRISK_create", (char**)keywords, &pyobj_thresh, &pyobj_octaves, &pyobj_patternScale) &&
        jsopencv_to_safe(info, pyobj_thresh, thresh, ArgInfo("thresh", 0)) &&
        jsopencv_to_safe(info, pyobj_octaves, octaves, ArgInfo("octaves", 0)) &&
        jsopencv_to_safe(info, pyobj_patternScale, patternScale, ArgInfo("patternScale", 0)))
    {
        ERRWRAP2(retval = cv::BRISK::create(thresh, octaves, patternScale));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_radiusList = NULL;
    vector_float radiusList;
    Napi::Value* pyobj_numberList = NULL;
    vector_int numberList;
    Napi::Value* pyobj_dMax = NULL;
    float dMax=5.85f;
    Napi::Value* pyobj_dMin = NULL;
    float dMin=8.2f;
    Napi::Value* pyobj_indexChange = NULL;
    vector_int indexChange=std::vector<int>();
    Ptr<BRISK> retval;

    const char* keywords[] = { "radiusList", "numberList", "dMax", "dMin", "indexChange", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:BRISK_create", (char**)keywords, &pyobj_radiusList, &pyobj_numberList, &pyobj_dMax, &pyobj_dMin, &pyobj_indexChange) &&
        jsopencv_to_safe(info, pyobj_radiusList, radiusList, ArgInfo("radiusList", 0)) &&
        jsopencv_to_safe(info, pyobj_numberList, numberList, ArgInfo("numberList", 0)) &&
        jsopencv_to_safe(info, pyobj_dMax, dMax, ArgInfo("dMax", 0)) &&
        jsopencv_to_safe(info, pyobj_dMin, dMin, ArgInfo("dMin", 0)) &&
        jsopencv_to_safe(info, pyobj_indexChange, indexChange, ArgInfo("indexChange", 0)))
    {
        ERRWRAP2(retval = cv::BRISK::create(radiusList, numberList, dMax, dMin, indexChange));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_thresh = NULL;
    int thresh=0;
    Napi::Value* pyobj_octaves = NULL;
    int octaves=0;
    Napi::Value* pyobj_radiusList = NULL;
    vector_float radiusList;
    Napi::Value* pyobj_numberList = NULL;
    vector_int numberList;
    Napi::Value* pyobj_dMax = NULL;
    float dMax=5.85f;
    Napi::Value* pyobj_dMin = NULL;
    float dMin=8.2f;
    Napi::Value* pyobj_indexChange = NULL;
    vector_int indexChange=std::vector<int>();
    Ptr<BRISK> retval;

    const char* keywords[] = { "thresh", "octaves", "radiusList", "numberList", "dMax", "dMin", "indexChange", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:BRISK_create", (char**)keywords, &pyobj_thresh, &pyobj_octaves, &pyobj_radiusList, &pyobj_numberList, &pyobj_dMax, &pyobj_dMin, &pyobj_indexChange) &&
        jsopencv_to_safe(info, pyobj_thresh, thresh, ArgInfo("thresh", 0)) &&
        jsopencv_to_safe(info, pyobj_octaves, octaves, ArgInfo("octaves", 0)) &&
        jsopencv_to_safe(info, pyobj_radiusList, radiusList, ArgInfo("radiusList", 0)) &&
        jsopencv_to_safe(info, pyobj_numberList, numberList, ArgInfo("numberList", 0)) &&
        jsopencv_to_safe(info, pyobj_dMax, dMax, ArgInfo("dMax", 0)) &&
        jsopencv_to_safe(info, pyobj_dMin, dMin, ArgInfo("dMin", 0)) &&
        jsopencv_to_safe(info, pyobj_indexChange, indexChange, ArgInfo("indexChange", 0)))
    {
        ERRWRAP2(retval = cv::BRISK::create(thresh, octaves, radiusList, numberList, dMax, dMin, indexChange));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("BRISK_create");

    return NULL;
}

static Napi::Value pyopencv_cv_CamShift(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_probImage = NULL;
    Mat probImage;
    Napi::Value* pyobj_window = NULL;
    Rect window;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria;
    RotatedRect retval;

    const char* keywords[] = { "probImage", "window", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:CamShift", (char**)keywords, &pyobj_probImage, &pyobj_window, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_probImage, probImage, ArgInfo("probImage", 0)) &&
        jsopencv_to_safe(info, pyobj_window, window, ArgInfo("window", 1)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(retval = cv::CamShift(probImage, window, criteria));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(window));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_probImage = NULL;
    UMat probImage;
    Napi::Value* pyobj_window = NULL;
    Rect window;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria;
    RotatedRect retval;

    const char* keywords[] = { "probImage", "window", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:CamShift", (char**)keywords, &pyobj_probImage, &pyobj_window, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_probImage, probImage, ArgInfo("probImage", 0)) &&
        jsopencv_to_safe(info, pyobj_window, window, ArgInfo("window", 1)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(retval = cv::CamShift(probImage, window, criteria));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(window));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("CamShift");

    return NULL;
}

static Napi::Value pyopencv_cv_Canny(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_edges = NULL;
    Mat edges;
    Napi::Value* pyobj_threshold1 = NULL;
    double threshold1=0;
    Napi::Value* pyobj_threshold2 = NULL;
    double threshold2=0;
    Napi::Value* pyobj_apertureSize = NULL;
    int apertureSize=3;
    Napi::Value* pyobj_L2gradient = NULL;
    bool L2gradient=false;

    const char* keywords[] = { "image", "threshold1", "threshold2", "edges", "apertureSize", "L2gradient", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:Canny", (char**)keywords, &pyobj_image, &pyobj_threshold1, &pyobj_threshold2, &pyobj_edges, &pyobj_apertureSize, &pyobj_L2gradient) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_edges, edges, ArgInfo("edges", 1)) &&
        jsopencv_to_safe(info, pyobj_threshold1, threshold1, ArgInfo("threshold1", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold2, threshold2, ArgInfo("threshold2", 0)) &&
        jsopencv_to_safe(info, pyobj_apertureSize, apertureSize, ArgInfo("apertureSize", 0)) &&
        jsopencv_to_safe(info, pyobj_L2gradient, L2gradient, ArgInfo("L2gradient", 0)))
    {
        ERRWRAP2(cv::Canny(image, edges, threshold1, threshold2, apertureSize, L2gradient));
        return jsopencv_from(edges);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_edges = NULL;
    UMat edges;
    Napi::Value* pyobj_threshold1 = NULL;
    double threshold1=0;
    Napi::Value* pyobj_threshold2 = NULL;
    double threshold2=0;
    Napi::Value* pyobj_apertureSize = NULL;
    int apertureSize=3;
    Napi::Value* pyobj_L2gradient = NULL;
    bool L2gradient=false;

    const char* keywords[] = { "image", "threshold1", "threshold2", "edges", "apertureSize", "L2gradient", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:Canny", (char**)keywords, &pyobj_image, &pyobj_threshold1, &pyobj_threshold2, &pyobj_edges, &pyobj_apertureSize, &pyobj_L2gradient) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_edges, edges, ArgInfo("edges", 1)) &&
        jsopencv_to_safe(info, pyobj_threshold1, threshold1, ArgInfo("threshold1", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold2, threshold2, ArgInfo("threshold2", 0)) &&
        jsopencv_to_safe(info, pyobj_apertureSize, apertureSize, ArgInfo("apertureSize", 0)) &&
        jsopencv_to_safe(info, pyobj_L2gradient, L2gradient, ArgInfo("L2gradient", 0)))
    {
        ERRWRAP2(cv::Canny(image, edges, threshold1, threshold2, apertureSize, L2gradient));
        return jsopencv_from(edges);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_dx = NULL;
    Mat dx;
    Napi::Value* pyobj_dy = NULL;
    Mat dy;
    Napi::Value* pyobj_edges = NULL;
    Mat edges;
    Napi::Value* pyobj_threshold1 = NULL;
    double threshold1=0;
    Napi::Value* pyobj_threshold2 = NULL;
    double threshold2=0;
    Napi::Value* pyobj_L2gradient = NULL;
    bool L2gradient=false;

    const char* keywords[] = { "dx", "dy", "threshold1", "threshold2", "edges", "L2gradient", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OO:Canny", (char**)keywords, &pyobj_dx, &pyobj_dy, &pyobj_threshold1, &pyobj_threshold2, &pyobj_edges, &pyobj_L2gradient) &&
        jsopencv_to_safe(info, pyobj_dx, dx, ArgInfo("dx", 0)) &&
        jsopencv_to_safe(info, pyobj_dy, dy, ArgInfo("dy", 0)) &&
        jsopencv_to_safe(info, pyobj_edges, edges, ArgInfo("edges", 1)) &&
        jsopencv_to_safe(info, pyobj_threshold1, threshold1, ArgInfo("threshold1", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold2, threshold2, ArgInfo("threshold2", 0)) &&
        jsopencv_to_safe(info, pyobj_L2gradient, L2gradient, ArgInfo("L2gradient", 0)))
    {
        ERRWRAP2(cv::Canny(dx, dy, edges, threshold1, threshold2, L2gradient));
        return jsopencv_from(edges);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_dx = NULL;
    UMat dx;
    Napi::Value* pyobj_dy = NULL;
    UMat dy;
    Napi::Value* pyobj_edges = NULL;
    UMat edges;
    Napi::Value* pyobj_threshold1 = NULL;
    double threshold1=0;
    Napi::Value* pyobj_threshold2 = NULL;
    double threshold2=0;
    Napi::Value* pyobj_L2gradient = NULL;
    bool L2gradient=false;

    const char* keywords[] = { "dx", "dy", "threshold1", "threshold2", "edges", "L2gradient", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OO:Canny", (char**)keywords, &pyobj_dx, &pyobj_dy, &pyobj_threshold1, &pyobj_threshold2, &pyobj_edges, &pyobj_L2gradient) &&
        jsopencv_to_safe(info, pyobj_dx, dx, ArgInfo("dx", 0)) &&
        jsopencv_to_safe(info, pyobj_dy, dy, ArgInfo("dy", 0)) &&
        jsopencv_to_safe(info, pyobj_edges, edges, ArgInfo("edges", 1)) &&
        jsopencv_to_safe(info, pyobj_threshold1, threshold1, ArgInfo("threshold1", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold2, threshold2, ArgInfo("threshold2", 0)) &&
        jsopencv_to_safe(info, pyobj_L2gradient, L2gradient, ArgInfo("L2gradient", 0)))
    {
        ERRWRAP2(cv::Canny(dx, dy, edges, threshold1, threshold2, L2gradient));
        return jsopencv_from(edges);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("Canny");

    return NULL;
}

static Napi::Value pyopencv_cv_CascadeClassifier_convert(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_oldcascade = NULL;
    String oldcascade;
    Napi::Value* pyobj_newcascade = NULL;
    String newcascade;
    bool retval;

    const char* keywords[] = { "oldcascade", "newcascade", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:CascadeClassifier_convert", (char**)keywords, &pyobj_oldcascade, &pyobj_newcascade) &&
        jsopencv_to_safe(info, pyobj_oldcascade, oldcascade, ArgInfo("oldcascade", 0)) &&
        jsopencv_to_safe(info, pyobj_newcascade, newcascade, ArgInfo("newcascade", 0)))
    {
        ERRWRAP2(retval = cv::CascadeClassifier::convert(oldcascade, newcascade));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_DISOpticalFlow_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_preset = NULL;
    int preset=DISOpticalFlow::PRESET_FAST;
    Ptr<DISOpticalFlow> retval;

    const char* keywords[] = { "preset", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|O:DISOpticalFlow_create", (char**)keywords, &pyobj_preset) &&
        jsopencv_to_safe(info, pyobj_preset, preset, ArgInfo("preset", 0)))
    {
        ERRWRAP2(retval = cv::DISOpticalFlow::create(preset));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_DescriptorMatcher_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_descriptorMatcherType = NULL;
    String descriptorMatcherType;
    Ptr<DescriptorMatcher> retval;

    const char* keywords[] = { "descriptorMatcherType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:DescriptorMatcher_create", (char**)keywords, &pyobj_descriptorMatcherType) &&
        jsopencv_to_safe(info, pyobj_descriptorMatcherType, descriptorMatcherType, ArgInfo("descriptorMatcherType", 0)))
    {
        ERRWRAP2(retval = cv::DescriptorMatcher::create(descriptorMatcherType));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_matcherType = NULL;
    DescriptorMatcher_MatcherType matcherType=static_cast<DescriptorMatcher_MatcherType>(0);
    Ptr<DescriptorMatcher> retval;

    const char* keywords[] = { "matcherType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:DescriptorMatcher_create", (char**)keywords, &pyobj_matcherType) &&
        jsopencv_to_safe(info, pyobj_matcherType, matcherType, ArgInfo("matcherType", 0)))
    {
        ERRWRAP2(retval = cv::DescriptorMatcher::create(matcherType));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("DescriptorMatcher_create");

    return NULL;
}

static Napi::Value pyopencv_cv_EMD(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_signature1 = NULL;
    Mat signature1;
    Napi::Value* pyobj_signature2 = NULL;
    Mat signature2;
    Napi::Value* pyobj_distType = NULL;
    int distType=0;
    Napi::Value* pyobj_cost = NULL;
    Mat cost;
    Napi::Value* pyobj_lowerBound = NULL;
    Ptr<float> lowerBound;
    Napi::Value* pyobj_flow = NULL;
    Mat flow;
    float retval;

    const char* keywords[] = { "signature1", "signature2", "distType", "cost", "lowerBound", "flow", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:EMD", (char**)keywords, &pyobj_signature1, &pyobj_signature2, &pyobj_distType, &pyobj_cost, &pyobj_lowerBound, &pyobj_flow) &&
        jsopencv_to_safe(info, pyobj_signature1, signature1, ArgInfo("signature1", 0)) &&
        jsopencv_to_safe(info, pyobj_signature2, signature2, ArgInfo("signature2", 0)) &&
        jsopencv_to_safe(info, pyobj_distType, distType, ArgInfo("distType", 0)) &&
        jsopencv_to_safe(info, pyobj_cost, cost, ArgInfo("cost", 0)) &&
        jsopencv_to_safe(info, pyobj_lowerBound, lowerBound, ArgInfo("lowerBound", 1)) &&
        jsopencv_to_safe(info, pyobj_flow, flow, ArgInfo("flow", 1)))
    {
        ERRWRAP2(retval = cv::wrapperEMD(signature1, signature2, distType, cost, lowerBound, flow));
        return Py_BuildValue("(NNN)", jsopencv_from(retval), jsopencv_from(lowerBound), jsopencv_from(flow));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_signature1 = NULL;
    UMat signature1;
    Napi::Value* pyobj_signature2 = NULL;
    UMat signature2;
    Napi::Value* pyobj_distType = NULL;
    int distType=0;
    Napi::Value* pyobj_cost = NULL;
    UMat cost;
    Napi::Value* pyobj_lowerBound = NULL;
    Ptr<float> lowerBound;
    Napi::Value* pyobj_flow = NULL;
    UMat flow;
    float retval;

    const char* keywords[] = { "signature1", "signature2", "distType", "cost", "lowerBound", "flow", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:EMD", (char**)keywords, &pyobj_signature1, &pyobj_signature2, &pyobj_distType, &pyobj_cost, &pyobj_lowerBound, &pyobj_flow) &&
        jsopencv_to_safe(info, pyobj_signature1, signature1, ArgInfo("signature1", 0)) &&
        jsopencv_to_safe(info, pyobj_signature2, signature2, ArgInfo("signature2", 0)) &&
        jsopencv_to_safe(info, pyobj_distType, distType, ArgInfo("distType", 0)) &&
        jsopencv_to_safe(info, pyobj_cost, cost, ArgInfo("cost", 0)) &&
        jsopencv_to_safe(info, pyobj_lowerBound, lowerBound, ArgInfo("lowerBound", 1)) &&
        jsopencv_to_safe(info, pyobj_flow, flow, ArgInfo("flow", 1)))
    {
        ERRWRAP2(retval = cv::wrapperEMD(signature1, signature2, distType, cost, lowerBound, flow));
        return Py_BuildValue("(NNN)", jsopencv_from(retval), jsopencv_from(lowerBound), jsopencv_from(flow));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("EMD");

    return NULL;
}

static Napi::Value pyopencv_cv_FaceDetectorYN_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_model = NULL;
    String model;
    Napi::Value* pyobj_config = NULL;
    String config;
    Napi::Value* pyobj_input_size = NULL;
    Size input_size;
    Napi::Value* pyobj_score_threshold = NULL;
    float score_threshold=0.9f;
    Napi::Value* pyobj_nms_threshold = NULL;
    float nms_threshold=0.3f;
    Napi::Value* pyobj_top_k = NULL;
    int top_k=5000;
    Napi::Value* pyobj_backend_id = NULL;
    int backend_id=0;
    Napi::Value* pyobj_target_id = NULL;
    int target_id=0;
    Ptr<FaceDetectorYN> retval;

    const char* keywords[] = { "model", "config", "input_size", "score_threshold", "nms_threshold", "top_k", "backend_id", "target_id", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOOO:FaceDetectorYN_create", (char**)keywords, &pyobj_model, &pyobj_config, &pyobj_input_size, &pyobj_score_threshold, &pyobj_nms_threshold, &pyobj_top_k, &pyobj_backend_id, &pyobj_target_id) &&
        jsopencv_to_safe(info, pyobj_model, model, ArgInfo("model", 0)) &&
        jsopencv_to_safe(info, pyobj_config, config, ArgInfo("config", 0)) &&
        jsopencv_to_safe(info, pyobj_input_size, input_size, ArgInfo("input_size", 0)) &&
        jsopencv_to_safe(info, pyobj_score_threshold, score_threshold, ArgInfo("score_threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_nms_threshold, nms_threshold, ArgInfo("nms_threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_top_k, top_k, ArgInfo("top_k", 0)) &&
        jsopencv_to_safe(info, pyobj_backend_id, backend_id, ArgInfo("backend_id", 0)) &&
        jsopencv_to_safe(info, pyobj_target_id, target_id, ArgInfo("target_id", 0)))
    {
        ERRWRAP2(retval = cv::FaceDetectorYN::create(model, config, input_size, score_threshold, nms_threshold, top_k, backend_id, target_id));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_FaceRecognizerSF_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_model = NULL;
    String model;
    Napi::Value* pyobj_config = NULL;
    String config;
    Napi::Value* pyobj_backend_id = NULL;
    int backend_id=0;
    Napi::Value* pyobj_target_id = NULL;
    int target_id=0;
    Ptr<FaceRecognizerSF> retval;

    const char* keywords[] = { "model", "config", "backend_id", "target_id", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:FaceRecognizerSF_create", (char**)keywords, &pyobj_model, &pyobj_config, &pyobj_backend_id, &pyobj_target_id) &&
        jsopencv_to_safe(info, pyobj_model, model, ArgInfo("model", 0)) &&
        jsopencv_to_safe(info, pyobj_config, config, ArgInfo("config", 0)) &&
        jsopencv_to_safe(info, pyobj_backend_id, backend_id, ArgInfo("backend_id", 0)) &&
        jsopencv_to_safe(info, pyobj_target_id, target_id, ArgInfo("target_id", 0)))
    {
        ERRWRAP2(retval = cv::FaceRecognizerSF::create(model, config, backend_id, target_id));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_FarnebackOpticalFlow_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_numLevels = NULL;
    int numLevels=5;
    Napi::Value* pyobj_pyrScale = NULL;
    double pyrScale=0.5;
    Napi::Value* pyobj_fastPyramids = NULL;
    bool fastPyramids=false;
    Napi::Value* pyobj_winSize = NULL;
    int winSize=13;
    Napi::Value* pyobj_numIters = NULL;
    int numIters=10;
    Napi::Value* pyobj_polyN = NULL;
    int polyN=5;
    Napi::Value* pyobj_polySigma = NULL;
    double polySigma=1.1;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Ptr<FarnebackOpticalFlow> retval;

    const char* keywords[] = { "numLevels", "pyrScale", "fastPyramids", "winSize", "numIters", "polyN", "polySigma", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOOOOOO:FarnebackOpticalFlow_create", (char**)keywords, &pyobj_numLevels, &pyobj_pyrScale, &pyobj_fastPyramids, &pyobj_winSize, &pyobj_numIters, &pyobj_polyN, &pyobj_polySigma, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_numLevels, numLevels, ArgInfo("numLevels", 0)) &&
        jsopencv_to_safe(info, pyobj_pyrScale, pyrScale, ArgInfo("pyrScale", 0)) &&
        jsopencv_to_safe(info, pyobj_fastPyramids, fastPyramids, ArgInfo("fastPyramids", 0)) &&
        jsopencv_to_safe(info, pyobj_winSize, winSize, ArgInfo("winSize", 0)) &&
        jsopencv_to_safe(info, pyobj_numIters, numIters, ArgInfo("numIters", 0)) &&
        jsopencv_to_safe(info, pyobj_polyN, polyN, ArgInfo("polyN", 0)) &&
        jsopencv_to_safe(info, pyobj_polySigma, polySigma, ArgInfo("polySigma", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::FarnebackOpticalFlow::create(numLevels, pyrScale, fastPyramids, winSize, numIters, polyN, polySigma, flags));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_FastFeatureDetector_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_threshold = NULL;
    int threshold=10;
    Napi::Value* pyobj_nonmaxSuppression = NULL;
    bool nonmaxSuppression=true;
    Napi::Value* pyobj_type = NULL;
    FastFeatureDetector_DetectorType type=FastFeatureDetector::TYPE_9_16;
    Ptr<FastFeatureDetector> retval;

    const char* keywords[] = { "threshold", "nonmaxSuppression", "type", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOO:FastFeatureDetector_create", (char**)keywords, &pyobj_threshold, &pyobj_nonmaxSuppression, &pyobj_type) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_nonmaxSuppression, nonmaxSuppression, ArgInfo("nonmaxSuppression", 0)) &&
        jsopencv_to_safe(info, pyobj_type, type, ArgInfo("type", 0)))
    {
        ERRWRAP2(retval = cv::FastFeatureDetector::create(threshold, nonmaxSuppression, type));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_FlannBasedMatcher_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Ptr<FlannBasedMatcher> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::FlannBasedMatcher::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_GFTTDetector_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_maxCorners = NULL;
    int maxCorners=1000;
    Napi::Value* pyobj_qualityLevel = NULL;
    double qualityLevel=0.01;
    Napi::Value* pyobj_minDistance = NULL;
    double minDistance=1;
    Napi::Value* pyobj_blockSize = NULL;
    int blockSize=3;
    Napi::Value* pyobj_useHarrisDetector = NULL;
    bool useHarrisDetector=false;
    Napi::Value* pyobj_k = NULL;
    double k=0.04;
    Ptr<GFTTDetector> retval;

    const char* keywords[] = { "maxCorners", "qualityLevel", "minDistance", "blockSize", "useHarrisDetector", "k", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOOOO:GFTTDetector_create", (char**)keywords, &pyobj_maxCorners, &pyobj_qualityLevel, &pyobj_minDistance, &pyobj_blockSize, &pyobj_useHarrisDetector, &pyobj_k) &&
        jsopencv_to_safe(info, pyobj_maxCorners, maxCorners, ArgInfo("maxCorners", 0)) &&
        jsopencv_to_safe(info, pyobj_qualityLevel, qualityLevel, ArgInfo("qualityLevel", 0)) &&
        jsopencv_to_safe(info, pyobj_minDistance, minDistance, ArgInfo("minDistance", 0)) &&
        jsopencv_to_safe(info, pyobj_blockSize, blockSize, ArgInfo("blockSize", 0)) &&
        jsopencv_to_safe(info, pyobj_useHarrisDetector, useHarrisDetector, ArgInfo("useHarrisDetector", 0)) &&
        jsopencv_to_safe(info, pyobj_k, k, ArgInfo("k", 0)))
    {
        ERRWRAP2(retval = cv::GFTTDetector::create(maxCorners, qualityLevel, minDistance, blockSize, useHarrisDetector, k));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_maxCorners = NULL;
    int maxCorners=0;
    Napi::Value* pyobj_qualityLevel = NULL;
    double qualityLevel=0;
    Napi::Value* pyobj_minDistance = NULL;
    double minDistance=0;
    Napi::Value* pyobj_blockSize = NULL;
    int blockSize=0;
    Napi::Value* pyobj_gradiantSize = NULL;
    int gradiantSize=0;
    Napi::Value* pyobj_useHarrisDetector = NULL;
    bool useHarrisDetector=false;
    Napi::Value* pyobj_k = NULL;
    double k=0.04;
    Ptr<GFTTDetector> retval;

    const char* keywords[] = { "maxCorners", "qualityLevel", "minDistance", "blockSize", "gradiantSize", "useHarrisDetector", "k", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OO:GFTTDetector_create", (char**)keywords, &pyobj_maxCorners, &pyobj_qualityLevel, &pyobj_minDistance, &pyobj_blockSize, &pyobj_gradiantSize, &pyobj_useHarrisDetector, &pyobj_k) &&
        jsopencv_to_safe(info, pyobj_maxCorners, maxCorners, ArgInfo("maxCorners", 0)) &&
        jsopencv_to_safe(info, pyobj_qualityLevel, qualityLevel, ArgInfo("qualityLevel", 0)) &&
        jsopencv_to_safe(info, pyobj_minDistance, minDistance, ArgInfo("minDistance", 0)) &&
        jsopencv_to_safe(info, pyobj_blockSize, blockSize, ArgInfo("blockSize", 0)) &&
        jsopencv_to_safe(info, pyobj_gradiantSize, gradiantSize, ArgInfo("gradiantSize", 0)) &&
        jsopencv_to_safe(info, pyobj_useHarrisDetector, useHarrisDetector, ArgInfo("useHarrisDetector", 0)) &&
        jsopencv_to_safe(info, pyobj_k, k, ArgInfo("k", 0)))
    {
        ERRWRAP2(retval = cv::GFTTDetector::create(maxCorners, qualityLevel, minDistance, blockSize, gradiantSize, useHarrisDetector, k));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("GFTTDetector_create");

    return NULL;
}

static Napi::Value pyopencv_cv_GaussianBlur(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_ksize = NULL;
    Size ksize;
    Napi::Value* pyobj_sigmaX = NULL;
    double sigmaX=0;
    Napi::Value* pyobj_sigmaY = NULL;
    double sigmaY=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "ksize", "sigmaX", "dst", "sigmaY", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:GaussianBlur", (char**)keywords, &pyobj_src, &pyobj_ksize, &pyobj_sigmaX, &pyobj_dst, &pyobj_sigmaY, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaX, sigmaX, ArgInfo("sigmaX", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaY, sigmaY, ArgInfo("sigmaY", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::GaussianBlur(src, dst, ksize, sigmaX, sigmaY, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_ksize = NULL;
    Size ksize;
    Napi::Value* pyobj_sigmaX = NULL;
    double sigmaX=0;
    Napi::Value* pyobj_sigmaY = NULL;
    double sigmaY=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "ksize", "sigmaX", "dst", "sigmaY", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:GaussianBlur", (char**)keywords, &pyobj_src, &pyobj_ksize, &pyobj_sigmaX, &pyobj_dst, &pyobj_sigmaY, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaX, sigmaX, ArgInfo("sigmaX", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaY, sigmaY, ArgInfo("sigmaY", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::GaussianBlur(src, dst, ksize, sigmaX, sigmaY, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("GaussianBlur");

    return NULL;
}

static Napi::Value pyopencv_cv_HOGDescriptor_getDaimlerPeopleDetector(const Napi::CallbackInfo &info)
{
    using namespace cv;

    std::vector<float> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::HOGDescriptor::getDaimlerPeopleDetector());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_HOGDescriptor_getDefaultPeopleDetector(const Napi::CallbackInfo &info)
{
    using namespace cv;

    std::vector<float> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::HOGDescriptor::getDefaultPeopleDetector());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_HoughCircles(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_circles = NULL;
    Mat circles;
    Napi::Value* pyobj_method = NULL;
    int method=0;
    Napi::Value* pyobj_dp = NULL;
    double dp=0;
    Napi::Value* pyobj_minDist = NULL;
    double minDist=0;
    Napi::Value* pyobj_param1 = NULL;
    double param1=100;
    Napi::Value* pyobj_param2 = NULL;
    double param2=100;
    Napi::Value* pyobj_minRadius = NULL;
    int minRadius=0;
    Napi::Value* pyobj_maxRadius = NULL;
    int maxRadius=0;

    const char* keywords[] = { "image", "method", "dp", "minDist", "circles", "param1", "param2", "minRadius", "maxRadius", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOOO:HoughCircles", (char**)keywords, &pyobj_image, &pyobj_method, &pyobj_dp, &pyobj_minDist, &pyobj_circles, &pyobj_param1, &pyobj_param2, &pyobj_minRadius, &pyobj_maxRadius) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_circles, circles, ArgInfo("circles", 1)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_dp, dp, ArgInfo("dp", 0)) &&
        jsopencv_to_safe(info, pyobj_minDist, minDist, ArgInfo("minDist", 0)) &&
        jsopencv_to_safe(info, pyobj_param1, param1, ArgInfo("param1", 0)) &&
        jsopencv_to_safe(info, pyobj_param2, param2, ArgInfo("param2", 0)) &&
        jsopencv_to_safe(info, pyobj_minRadius, minRadius, ArgInfo("minRadius", 0)) &&
        jsopencv_to_safe(info, pyobj_maxRadius, maxRadius, ArgInfo("maxRadius", 0)))
    {
        ERRWRAP2(cv::HoughCircles(image, circles, method, dp, minDist, param1, param2, minRadius, maxRadius));
        return jsopencv_from(circles);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_circles = NULL;
    UMat circles;
    Napi::Value* pyobj_method = NULL;
    int method=0;
    Napi::Value* pyobj_dp = NULL;
    double dp=0;
    Napi::Value* pyobj_minDist = NULL;
    double minDist=0;
    Napi::Value* pyobj_param1 = NULL;
    double param1=100;
    Napi::Value* pyobj_param2 = NULL;
    double param2=100;
    Napi::Value* pyobj_minRadius = NULL;
    int minRadius=0;
    Napi::Value* pyobj_maxRadius = NULL;
    int maxRadius=0;

    const char* keywords[] = { "image", "method", "dp", "minDist", "circles", "param1", "param2", "minRadius", "maxRadius", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOOO:HoughCircles", (char**)keywords, &pyobj_image, &pyobj_method, &pyobj_dp, &pyobj_minDist, &pyobj_circles, &pyobj_param1, &pyobj_param2, &pyobj_minRadius, &pyobj_maxRadius) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_circles, circles, ArgInfo("circles", 1)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_dp, dp, ArgInfo("dp", 0)) &&
        jsopencv_to_safe(info, pyobj_minDist, minDist, ArgInfo("minDist", 0)) &&
        jsopencv_to_safe(info, pyobj_param1, param1, ArgInfo("param1", 0)) &&
        jsopencv_to_safe(info, pyobj_param2, param2, ArgInfo("param2", 0)) &&
        jsopencv_to_safe(info, pyobj_minRadius, minRadius, ArgInfo("minRadius", 0)) &&
        jsopencv_to_safe(info, pyobj_maxRadius, maxRadius, ArgInfo("maxRadius", 0)))
    {
        ERRWRAP2(cv::HoughCircles(image, circles, method, dp, minDist, param1, param2, minRadius, maxRadius));
        return jsopencv_from(circles);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("HoughCircles");

    return NULL;
}

static Napi::Value pyopencv_cv_HoughLines(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_lines = NULL;
    Mat lines;
    Napi::Value* pyobj_rho = NULL;
    double rho=0;
    Napi::Value* pyobj_theta = NULL;
    double theta=0;
    Napi::Value* pyobj_threshold = NULL;
    int threshold=0;
    Napi::Value* pyobj_srn = NULL;
    double srn=0;
    Napi::Value* pyobj_stn = NULL;
    double stn=0;
    Napi::Value* pyobj_min_theta = NULL;
    double min_theta=0;
    Napi::Value* pyobj_max_theta = NULL;
    double max_theta=CV_PI;

    const char* keywords[] = { "image", "rho", "theta", "threshold", "lines", "srn", "stn", "min_theta", "max_theta", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOOO:HoughLines", (char**)keywords, &pyobj_image, &pyobj_rho, &pyobj_theta, &pyobj_threshold, &pyobj_lines, &pyobj_srn, &pyobj_stn, &pyobj_min_theta, &pyobj_max_theta) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_lines, lines, ArgInfo("lines", 1)) &&
        jsopencv_to_safe(info, pyobj_rho, rho, ArgInfo("rho", 0)) &&
        jsopencv_to_safe(info, pyobj_theta, theta, ArgInfo("theta", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_srn, srn, ArgInfo("srn", 0)) &&
        jsopencv_to_safe(info, pyobj_stn, stn, ArgInfo("stn", 0)) &&
        jsopencv_to_safe(info, pyobj_min_theta, min_theta, ArgInfo("min_theta", 0)) &&
        jsopencv_to_safe(info, pyobj_max_theta, max_theta, ArgInfo("max_theta", 0)))
    {
        ERRWRAP2(cv::HoughLines(image, lines, rho, theta, threshold, srn, stn, min_theta, max_theta));
        return jsopencv_from(lines);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_lines = NULL;
    UMat lines;
    Napi::Value* pyobj_rho = NULL;
    double rho=0;
    Napi::Value* pyobj_theta = NULL;
    double theta=0;
    Napi::Value* pyobj_threshold = NULL;
    int threshold=0;
    Napi::Value* pyobj_srn = NULL;
    double srn=0;
    Napi::Value* pyobj_stn = NULL;
    double stn=0;
    Napi::Value* pyobj_min_theta = NULL;
    double min_theta=0;
    Napi::Value* pyobj_max_theta = NULL;
    double max_theta=CV_PI;

    const char* keywords[] = { "image", "rho", "theta", "threshold", "lines", "srn", "stn", "min_theta", "max_theta", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOOO:HoughLines", (char**)keywords, &pyobj_image, &pyobj_rho, &pyobj_theta, &pyobj_threshold, &pyobj_lines, &pyobj_srn, &pyobj_stn, &pyobj_min_theta, &pyobj_max_theta) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_lines, lines, ArgInfo("lines", 1)) &&
        jsopencv_to_safe(info, pyobj_rho, rho, ArgInfo("rho", 0)) &&
        jsopencv_to_safe(info, pyobj_theta, theta, ArgInfo("theta", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_srn, srn, ArgInfo("srn", 0)) &&
        jsopencv_to_safe(info, pyobj_stn, stn, ArgInfo("stn", 0)) &&
        jsopencv_to_safe(info, pyobj_min_theta, min_theta, ArgInfo("min_theta", 0)) &&
        jsopencv_to_safe(info, pyobj_max_theta, max_theta, ArgInfo("max_theta", 0)))
    {
        ERRWRAP2(cv::HoughLines(image, lines, rho, theta, threshold, srn, stn, min_theta, max_theta));
        return jsopencv_from(lines);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("HoughLines");

    return NULL;
}

static Napi::Value pyopencv_cv_HoughLinesP(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_lines = NULL;
    Mat lines;
    Napi::Value* pyobj_rho = NULL;
    double rho=0;
    Napi::Value* pyobj_theta = NULL;
    double theta=0;
    Napi::Value* pyobj_threshold = NULL;
    int threshold=0;
    Napi::Value* pyobj_minLineLength = NULL;
    double minLineLength=0;
    Napi::Value* pyobj_maxLineGap = NULL;
    double maxLineGap=0;

    const char* keywords[] = { "image", "rho", "theta", "threshold", "lines", "minLineLength", "maxLineGap", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:HoughLinesP", (char**)keywords, &pyobj_image, &pyobj_rho, &pyobj_theta, &pyobj_threshold, &pyobj_lines, &pyobj_minLineLength, &pyobj_maxLineGap) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_lines, lines, ArgInfo("lines", 1)) &&
        jsopencv_to_safe(info, pyobj_rho, rho, ArgInfo("rho", 0)) &&
        jsopencv_to_safe(info, pyobj_theta, theta, ArgInfo("theta", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_minLineLength, minLineLength, ArgInfo("minLineLength", 0)) &&
        jsopencv_to_safe(info, pyobj_maxLineGap, maxLineGap, ArgInfo("maxLineGap", 0)))
    {
        ERRWRAP2(cv::HoughLinesP(image, lines, rho, theta, threshold, minLineLength, maxLineGap));
        return jsopencv_from(lines);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_lines = NULL;
    UMat lines;
    Napi::Value* pyobj_rho = NULL;
    double rho=0;
    Napi::Value* pyobj_theta = NULL;
    double theta=0;
    Napi::Value* pyobj_threshold = NULL;
    int threshold=0;
    Napi::Value* pyobj_minLineLength = NULL;
    double minLineLength=0;
    Napi::Value* pyobj_maxLineGap = NULL;
    double maxLineGap=0;

    const char* keywords[] = { "image", "rho", "theta", "threshold", "lines", "minLineLength", "maxLineGap", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:HoughLinesP", (char**)keywords, &pyobj_image, &pyobj_rho, &pyobj_theta, &pyobj_threshold, &pyobj_lines, &pyobj_minLineLength, &pyobj_maxLineGap) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_lines, lines, ArgInfo("lines", 1)) &&
        jsopencv_to_safe(info, pyobj_rho, rho, ArgInfo("rho", 0)) &&
        jsopencv_to_safe(info, pyobj_theta, theta, ArgInfo("theta", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_minLineLength, minLineLength, ArgInfo("minLineLength", 0)) &&
        jsopencv_to_safe(info, pyobj_maxLineGap, maxLineGap, ArgInfo("maxLineGap", 0)))
    {
        ERRWRAP2(cv::HoughLinesP(image, lines, rho, theta, threshold, minLineLength, maxLineGap));
        return jsopencv_from(lines);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("HoughLinesP");

    return NULL;
}

static Napi::Value pyopencv_cv_HoughLinesPointSet(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_point = NULL;
    Mat point;
    Napi::Value* pyobj_lines = NULL;
    Mat lines;
    Napi::Value* pyobj_lines_max = NULL;
    int lines_max=0;
    Napi::Value* pyobj_threshold = NULL;
    int threshold=0;
    Napi::Value* pyobj_min_rho = NULL;
    double min_rho=0;
    Napi::Value* pyobj_max_rho = NULL;
    double max_rho=0;
    Napi::Value* pyobj_rho_step = NULL;
    double rho_step=0;
    Napi::Value* pyobj_min_theta = NULL;
    double min_theta=0;
    Napi::Value* pyobj_max_theta = NULL;
    double max_theta=0;
    Napi::Value* pyobj_theta_step = NULL;
    double theta_step=0;

    const char* keywords[] = { "point", "lines_max", "threshold", "min_rho", "max_rho", "rho_step", "min_theta", "max_theta", "theta_step", "lines", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOOOO|O:HoughLinesPointSet", (char**)keywords, &pyobj_point, &pyobj_lines_max, &pyobj_threshold, &pyobj_min_rho, &pyobj_max_rho, &pyobj_rho_step, &pyobj_min_theta, &pyobj_max_theta, &pyobj_theta_step, &pyobj_lines) &&
        jsopencv_to_safe(info, pyobj_point, point, ArgInfo("point", 0)) &&
        jsopencv_to_safe(info, pyobj_lines, lines, ArgInfo("lines", 1)) &&
        jsopencv_to_safe(info, pyobj_lines_max, lines_max, ArgInfo("lines_max", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_min_rho, min_rho, ArgInfo("min_rho", 0)) &&
        jsopencv_to_safe(info, pyobj_max_rho, max_rho, ArgInfo("max_rho", 0)) &&
        jsopencv_to_safe(info, pyobj_rho_step, rho_step, ArgInfo("rho_step", 0)) &&
        jsopencv_to_safe(info, pyobj_min_theta, min_theta, ArgInfo("min_theta", 0)) &&
        jsopencv_to_safe(info, pyobj_max_theta, max_theta, ArgInfo("max_theta", 0)) &&
        jsopencv_to_safe(info, pyobj_theta_step, theta_step, ArgInfo("theta_step", 0)))
    {
        ERRWRAP2(cv::HoughLinesPointSet(point, lines, lines_max, threshold, min_rho, max_rho, rho_step, min_theta, max_theta, theta_step));
        return jsopencv_from(lines);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_point = NULL;
    UMat point;
    Napi::Value* pyobj_lines = NULL;
    UMat lines;
    Napi::Value* pyobj_lines_max = NULL;
    int lines_max=0;
    Napi::Value* pyobj_threshold = NULL;
    int threshold=0;
    Napi::Value* pyobj_min_rho = NULL;
    double min_rho=0;
    Napi::Value* pyobj_max_rho = NULL;
    double max_rho=0;
    Napi::Value* pyobj_rho_step = NULL;
    double rho_step=0;
    Napi::Value* pyobj_min_theta = NULL;
    double min_theta=0;
    Napi::Value* pyobj_max_theta = NULL;
    double max_theta=0;
    Napi::Value* pyobj_theta_step = NULL;
    double theta_step=0;

    const char* keywords[] = { "point", "lines_max", "threshold", "min_rho", "max_rho", "rho_step", "min_theta", "max_theta", "theta_step", "lines", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOOOO|O:HoughLinesPointSet", (char**)keywords, &pyobj_point, &pyobj_lines_max, &pyobj_threshold, &pyobj_min_rho, &pyobj_max_rho, &pyobj_rho_step, &pyobj_min_theta, &pyobj_max_theta, &pyobj_theta_step, &pyobj_lines) &&
        jsopencv_to_safe(info, pyobj_point, point, ArgInfo("point", 0)) &&
        jsopencv_to_safe(info, pyobj_lines, lines, ArgInfo("lines", 1)) &&
        jsopencv_to_safe(info, pyobj_lines_max, lines_max, ArgInfo("lines_max", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_min_rho, min_rho, ArgInfo("min_rho", 0)) &&
        jsopencv_to_safe(info, pyobj_max_rho, max_rho, ArgInfo("max_rho", 0)) &&
        jsopencv_to_safe(info, pyobj_rho_step, rho_step, ArgInfo("rho_step", 0)) &&
        jsopencv_to_safe(info, pyobj_min_theta, min_theta, ArgInfo("min_theta", 0)) &&
        jsopencv_to_safe(info, pyobj_max_theta, max_theta, ArgInfo("max_theta", 0)) &&
        jsopencv_to_safe(info, pyobj_theta_step, theta_step, ArgInfo("theta_step", 0)))
    {
        ERRWRAP2(cv::HoughLinesPointSet(point, lines, lines_max, threshold, min_rho, max_rho, rho_step, min_theta, max_theta, theta_step));
        return jsopencv_from(lines);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("HoughLinesPointSet");

    return NULL;
}

static Napi::Value pyopencv_cv_HoughLinesWithAccumulator(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_lines = NULL;
    Mat lines;
    Napi::Value* pyobj_rho = NULL;
    double rho=0;
    Napi::Value* pyobj_theta = NULL;
    double theta=0;
    Napi::Value* pyobj_threshold = NULL;
    int threshold=0;
    Napi::Value* pyobj_srn = NULL;
    double srn=0;
    Napi::Value* pyobj_stn = NULL;
    double stn=0;
    Napi::Value* pyobj_min_theta = NULL;
    double min_theta=0;
    Napi::Value* pyobj_max_theta = NULL;
    double max_theta=CV_PI;

    const char* keywords[] = { "image", "rho", "theta", "threshold", "lines", "srn", "stn", "min_theta", "max_theta", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOOO:HoughLinesWithAccumulator", (char**)keywords, &pyobj_image, &pyobj_rho, &pyobj_theta, &pyobj_threshold, &pyobj_lines, &pyobj_srn, &pyobj_stn, &pyobj_min_theta, &pyobj_max_theta) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_lines, lines, ArgInfo("lines", 1)) &&
        jsopencv_to_safe(info, pyobj_rho, rho, ArgInfo("rho", 0)) &&
        jsopencv_to_safe(info, pyobj_theta, theta, ArgInfo("theta", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_srn, srn, ArgInfo("srn", 0)) &&
        jsopencv_to_safe(info, pyobj_stn, stn, ArgInfo("stn", 0)) &&
        jsopencv_to_safe(info, pyobj_min_theta, min_theta, ArgInfo("min_theta", 0)) &&
        jsopencv_to_safe(info, pyobj_max_theta, max_theta, ArgInfo("max_theta", 0)))
    {
        ERRWRAP2(cv::HoughLinesWithAccumulator(image, lines, rho, theta, threshold, srn, stn, min_theta, max_theta));
        return jsopencv_from(lines);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_lines = NULL;
    UMat lines;
    Napi::Value* pyobj_rho = NULL;
    double rho=0;
    Napi::Value* pyobj_theta = NULL;
    double theta=0;
    Napi::Value* pyobj_threshold = NULL;
    int threshold=0;
    Napi::Value* pyobj_srn = NULL;
    double srn=0;
    Napi::Value* pyobj_stn = NULL;
    double stn=0;
    Napi::Value* pyobj_min_theta = NULL;
    double min_theta=0;
    Napi::Value* pyobj_max_theta = NULL;
    double max_theta=CV_PI;

    const char* keywords[] = { "image", "rho", "theta", "threshold", "lines", "srn", "stn", "min_theta", "max_theta", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOOO:HoughLinesWithAccumulator", (char**)keywords, &pyobj_image, &pyobj_rho, &pyobj_theta, &pyobj_threshold, &pyobj_lines, &pyobj_srn, &pyobj_stn, &pyobj_min_theta, &pyobj_max_theta) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_lines, lines, ArgInfo("lines", 1)) &&
        jsopencv_to_safe(info, pyobj_rho, rho, ArgInfo("rho", 0)) &&
        jsopencv_to_safe(info, pyobj_theta, theta, ArgInfo("theta", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_srn, srn, ArgInfo("srn", 0)) &&
        jsopencv_to_safe(info, pyobj_stn, stn, ArgInfo("stn", 0)) &&
        jsopencv_to_safe(info, pyobj_min_theta, min_theta, ArgInfo("min_theta", 0)) &&
        jsopencv_to_safe(info, pyobj_max_theta, max_theta, ArgInfo("max_theta", 0)))
    {
        ERRWRAP2(cv::HoughLinesWithAccumulator(image, lines, rho, theta, threshold, srn, stn, min_theta, max_theta));
        return jsopencv_from(lines);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("HoughLinesWithAccumulator");

    return NULL;
}

static Napi::Value pyopencv_cv_HuMoments(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_m = NULL;
    Ptr<cv::Moments> m;
    Napi::Value* pyobj_hu = NULL;
    Mat hu;

    const char* keywords[] = { "m", "hu", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:HuMoments", (char**)keywords, &pyobj_m, &pyobj_hu) &&
        jsopencv_to_safe(info, pyobj_m, m, ArgInfo("m", 0)) &&
        jsopencv_to_safe(info, pyobj_hu, hu, ArgInfo("hu", 1)))
    {
        ERRWRAP2(cv::HuMoments(*m, hu));
        return jsopencv_from(hu);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_m = NULL;
    Ptr<cv::Moments> m;
    Napi::Value* pyobj_hu = NULL;
    UMat hu;

    const char* keywords[] = { "m", "hu", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:HuMoments", (char**)keywords, &pyobj_m, &pyobj_hu) &&
        jsopencv_to_safe(info, pyobj_m, m, ArgInfo("m", 0)) &&
        jsopencv_to_safe(info, pyobj_hu, hu, ArgInfo("hu", 1)))
    {
        ERRWRAP2(cv::HuMoments(*m, hu));
        return jsopencv_from(hu);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("HuMoments");

    return NULL;
}

static Napi::Value pyopencv_cv_KAZE_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_extended = NULL;
    bool extended=false;
    Napi::Value* pyobj_upright = NULL;
    bool upright=false;
    Napi::Value* pyobj_threshold = NULL;
    float threshold=0.001f;
    Napi::Value* pyobj_nOctaves = NULL;
    int nOctaves=4;
    Napi::Value* pyobj_nOctaveLayers = NULL;
    int nOctaveLayers=4;
    Napi::Value* pyobj_diffusivity = NULL;
    KAZE_DiffusivityType diffusivity=KAZE::DIFF_PM_G2;
    Ptr<KAZE> retval;

    const char* keywords[] = { "extended", "upright", "threshold", "nOctaves", "nOctaveLayers", "diffusivity", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOOOO:KAZE_create", (char**)keywords, &pyobj_extended, &pyobj_upright, &pyobj_threshold, &pyobj_nOctaves, &pyobj_nOctaveLayers, &pyobj_diffusivity) &&
        jsopencv_to_safe(info, pyobj_extended, extended, ArgInfo("extended", 0)) &&
        jsopencv_to_safe(info, pyobj_upright, upright, ArgInfo("upright", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_nOctaves, nOctaves, ArgInfo("nOctaves", 0)) &&
        jsopencv_to_safe(info, pyobj_nOctaveLayers, nOctaveLayers, ArgInfo("nOctaveLayers", 0)) &&
        jsopencv_to_safe(info, pyobj_diffusivity, diffusivity, ArgInfo("diffusivity", 0)))
    {
        ERRWRAP2(retval = cv::KAZE::create(extended, upright, threshold, nOctaves, nOctaveLayers, diffusivity));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_KeyPoint_convert(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_keypoints = NULL;
    vector_KeyPoint keypoints;
    vector_Point2f points2f;
    Napi::Value* pyobj_keypointIndexes = NULL;
    vector_int keypointIndexes=std::vector<int>();

    const char* keywords[] = { "keypoints", "keypointIndexes", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:KeyPoint_convert", (char**)keywords, &pyobj_keypoints, &pyobj_keypointIndexes) &&
        jsopencv_to_safe(info, pyobj_keypoints, keypoints, ArgInfo("keypoints", 0)) &&
        jsopencv_to_safe(info, pyobj_keypointIndexes, keypointIndexes, ArgInfo("keypointIndexes", 0)))
    {
        ERRWRAP2(cv::KeyPoint::convert(keypoints, points2f, keypointIndexes));
        return jsopencv_from(points2f);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_points2f = NULL;
    vector_Point2f points2f;
    vector_KeyPoint keypoints;
    Napi::Value* pyobj_size = NULL;
    float size=1;
    Napi::Value* pyobj_response = NULL;
    float response=1;
    Napi::Value* pyobj_octave = NULL;
    int octave=0;
    Napi::Value* pyobj_class_id = NULL;
    int class_id=-1;

    const char* keywords[] = { "points2f", "size", "response", "octave", "class_id", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOO:KeyPoint_convert", (char**)keywords, &pyobj_points2f, &pyobj_size, &pyobj_response, &pyobj_octave, &pyobj_class_id) &&
        jsopencv_to_safe(info, pyobj_points2f, points2f, ArgInfo("points2f", 0)) &&
        jsopencv_to_safe(info, pyobj_size, size, ArgInfo("size", 0)) &&
        jsopencv_to_safe(info, pyobj_response, response, ArgInfo("response", 0)) &&
        jsopencv_to_safe(info, pyobj_octave, octave, ArgInfo("octave", 0)) &&
        jsopencv_to_safe(info, pyobj_class_id, class_id, ArgInfo("class_id", 0)))
    {
        ERRWRAP2(cv::KeyPoint::convert(points2f, keypoints, size, response, octave, class_id));
        return jsopencv_from(keypoints);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("KeyPoint_convert");

    return NULL;
}

static Napi::Value pyopencv_cv_KeyPoint_overlap(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_kp1 = NULL;
    cv::KeyPoint kp1;
    Napi::Value* pyobj_kp2 = NULL;
    cv::KeyPoint kp2;
    float retval;

    const char* keywords[] = { "kp1", "kp2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:KeyPoint_overlap", (char**)keywords, &pyobj_kp1, &pyobj_kp2) &&
        jsopencv_to_safe(info, pyobj_kp1, kp1, ArgInfo("kp1", 0)) &&
        jsopencv_to_safe(info, pyobj_kp2, kp2, ArgInfo("kp2", 0)))
    {
        ERRWRAP2(retval = cv::KeyPoint::overlap(kp1, kp2));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_LUT(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_lut = NULL;
    Mat lut;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;

    const char* keywords[] = { "src", "lut", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:LUT", (char**)keywords, &pyobj_src, &pyobj_lut, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_lut, lut, ArgInfo("lut", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::LUT(src, lut, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_lut = NULL;
    UMat lut;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;

    const char* keywords[] = { "src", "lut", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:LUT", (char**)keywords, &pyobj_src, &pyobj_lut, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_lut, lut, ArgInfo("lut", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::LUT(src, lut, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("LUT");

    return NULL;
}

static Napi::Value pyopencv_cv_Laplacian(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=0;
    Napi::Value* pyobj_ksize = NULL;
    int ksize=1;
    Napi::Value* pyobj_scale = NULL;
    double scale=1;
    Napi::Value* pyobj_delta = NULL;
    double delta=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "ddepth", "dst", "ksize", "scale", "delta", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOOO:Laplacian", (char**)keywords, &pyobj_src, &pyobj_ddepth, &pyobj_dst, &pyobj_ksize, &pyobj_scale, &pyobj_delta, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)) &&
        jsopencv_to_safe(info, pyobj_delta, delta, ArgInfo("delta", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::Laplacian(src, dst, ddepth, ksize, scale, delta, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=0;
    Napi::Value* pyobj_ksize = NULL;
    int ksize=1;
    Napi::Value* pyobj_scale = NULL;
    double scale=1;
    Napi::Value* pyobj_delta = NULL;
    double delta=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "ddepth", "dst", "ksize", "scale", "delta", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOOO:Laplacian", (char**)keywords, &pyobj_src, &pyobj_ddepth, &pyobj_dst, &pyobj_ksize, &pyobj_scale, &pyobj_delta, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)) &&
        jsopencv_to_safe(info, pyobj_delta, delta, ArgInfo("delta", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::Laplacian(src, dst, ddepth, ksize, scale, delta, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("Laplacian");

    return NULL;
}

static Napi::Value pyopencv_cv_MSER_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_delta = NULL;
    int delta=5;
    Napi::Value* pyobj_min_area = NULL;
    int min_area=60;
    Napi::Value* pyobj_max_area = NULL;
    int max_area=14400;
    Napi::Value* pyobj_max_variation = NULL;
    double max_variation=0.25;
    Napi::Value* pyobj_min_diversity = NULL;
    double min_diversity=.2;
    Napi::Value* pyobj_max_evolution = NULL;
    int max_evolution=200;
    Napi::Value* pyobj_area_threshold = NULL;
    double area_threshold=1.01;
    Napi::Value* pyobj_min_margin = NULL;
    double min_margin=0.003;
    Napi::Value* pyobj_edge_blur_size = NULL;
    int edge_blur_size=5;
    Ptr<MSER> retval;

    const char* keywords[] = { "delta", "min_area", "max_area", "max_variation", "min_diversity", "max_evolution", "area_threshold", "min_margin", "edge_blur_size", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOOOOOOO:MSER_create", (char**)keywords, &pyobj_delta, &pyobj_min_area, &pyobj_max_area, &pyobj_max_variation, &pyobj_min_diversity, &pyobj_max_evolution, &pyobj_area_threshold, &pyobj_min_margin, &pyobj_edge_blur_size) &&
        jsopencv_to_safe(info, pyobj_delta, delta, ArgInfo("delta", 0)) &&
        jsopencv_to_safe(info, pyobj_min_area, min_area, ArgInfo("min_area", 0)) &&
        jsopencv_to_safe(info, pyobj_max_area, max_area, ArgInfo("max_area", 0)) &&
        jsopencv_to_safe(info, pyobj_max_variation, max_variation, ArgInfo("max_variation", 0)) &&
        jsopencv_to_safe(info, pyobj_min_diversity, min_diversity, ArgInfo("min_diversity", 0)) &&
        jsopencv_to_safe(info, pyobj_max_evolution, max_evolution, ArgInfo("max_evolution", 0)) &&
        jsopencv_to_safe(info, pyobj_area_threshold, area_threshold, ArgInfo("area_threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_min_margin, min_margin, ArgInfo("min_margin", 0)) &&
        jsopencv_to_safe(info, pyobj_edge_blur_size, edge_blur_size, ArgInfo("edge_blur_size", 0)))
    {
        ERRWRAP2(retval = cv::MSER::create(delta, min_area, max_area, max_variation, min_diversity, max_evolution, area_threshold, min_margin, edge_blur_size));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_Mahalanobis(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_v1 = NULL;
    Mat v1;
    Napi::Value* pyobj_v2 = NULL;
    Mat v2;
    Napi::Value* pyobj_icovar = NULL;
    Mat icovar;
    double retval;

    const char* keywords[] = { "v1", "v2", "icovar", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:Mahalanobis", (char**)keywords, &pyobj_v1, &pyobj_v2, &pyobj_icovar) &&
        jsopencv_to_safe(info, pyobj_v1, v1, ArgInfo("v1", 0)) &&
        jsopencv_to_safe(info, pyobj_v2, v2, ArgInfo("v2", 0)) &&
        jsopencv_to_safe(info, pyobj_icovar, icovar, ArgInfo("icovar", 0)))
    {
        ERRWRAP2(retval = cv::Mahalanobis(v1, v2, icovar));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_v1 = NULL;
    UMat v1;
    Napi::Value* pyobj_v2 = NULL;
    UMat v2;
    Napi::Value* pyobj_icovar = NULL;
    UMat icovar;
    double retval;

    const char* keywords[] = { "v1", "v2", "icovar", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:Mahalanobis", (char**)keywords, &pyobj_v1, &pyobj_v2, &pyobj_icovar) &&
        jsopencv_to_safe(info, pyobj_v1, v1, ArgInfo("v1", 0)) &&
        jsopencv_to_safe(info, pyobj_v2, v2, ArgInfo("v2", 0)) &&
        jsopencv_to_safe(info, pyobj_icovar, icovar, ArgInfo("icovar", 0)))
    {
        ERRWRAP2(retval = cv::Mahalanobis(v1, v2, icovar));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("Mahalanobis");

    return NULL;
}

static Napi::Value pyopencv_cv_ORB_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_nfeatures = NULL;
    int nfeatures=500;
    Napi::Value* pyobj_scaleFactor = NULL;
    float scaleFactor=1.2f;
    Napi::Value* pyobj_nlevels = NULL;
    int nlevels=8;
    Napi::Value* pyobj_edgeThreshold = NULL;
    int edgeThreshold=31;
    Napi::Value* pyobj_firstLevel = NULL;
    int firstLevel=0;
    Napi::Value* pyobj_WTA_K = NULL;
    int WTA_K=2;
    Napi::Value* pyobj_scoreType = NULL;
    ORB_ScoreType scoreType=ORB::HARRIS_SCORE;
    Napi::Value* pyobj_patchSize = NULL;
    int patchSize=31;
    Napi::Value* pyobj_fastThreshold = NULL;
    int fastThreshold=20;
    Ptr<ORB> retval;

    const char* keywords[] = { "nfeatures", "scaleFactor", "nlevels", "edgeThreshold", "firstLevel", "WTA_K", "scoreType", "patchSize", "fastThreshold", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOOOOOOO:ORB_create", (char**)keywords, &pyobj_nfeatures, &pyobj_scaleFactor, &pyobj_nlevels, &pyobj_edgeThreshold, &pyobj_firstLevel, &pyobj_WTA_K, &pyobj_scoreType, &pyobj_patchSize, &pyobj_fastThreshold) &&
        jsopencv_to_safe(info, pyobj_nfeatures, nfeatures, ArgInfo("nfeatures", 0)) &&
        jsopencv_to_safe(info, pyobj_scaleFactor, scaleFactor, ArgInfo("scaleFactor", 0)) &&
        jsopencv_to_safe(info, pyobj_nlevels, nlevels, ArgInfo("nlevels", 0)) &&
        jsopencv_to_safe(info, pyobj_edgeThreshold, edgeThreshold, ArgInfo("edgeThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_firstLevel, firstLevel, ArgInfo("firstLevel", 0)) &&
        jsopencv_to_safe(info, pyobj_WTA_K, WTA_K, ArgInfo("WTA_K", 0)) &&
        jsopencv_to_safe(info, pyobj_scoreType, scoreType, ArgInfo("scoreType", 0)) &&
        jsopencv_to_safe(info, pyobj_patchSize, patchSize, ArgInfo("patchSize", 0)) &&
        jsopencv_to_safe(info, pyobj_fastThreshold, fastThreshold, ArgInfo("fastThreshold", 0)))
    {
        ERRWRAP2(retval = cv::ORB::create(nfeatures, scaleFactor, nlevels, edgeThreshold, firstLevel, WTA_K, scoreType, patchSize, fastThreshold));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_PCABackProject(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_data = NULL;
    Mat data;
    Napi::Value* pyobj_mean = NULL;
    Mat mean;
    Napi::Value* pyobj_eigenvectors = NULL;
    Mat eigenvectors;
    Napi::Value* pyobj_result = NULL;
    Mat result;

    const char* keywords[] = { "data", "mean", "eigenvectors", "result", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:PCABackProject", (char**)keywords, &pyobj_data, &pyobj_mean, &pyobj_eigenvectors, &pyobj_result) &&
        jsopencv_to_safe(info, pyobj_data, data, ArgInfo("data", 0)) &&
        jsopencv_to_safe(info, pyobj_mean, mean, ArgInfo("mean", 0)) &&
        jsopencv_to_safe(info, pyobj_eigenvectors, eigenvectors, ArgInfo("eigenvectors", 0)) &&
        jsopencv_to_safe(info, pyobj_result, result, ArgInfo("result", 1)))
    {
        ERRWRAP2(cv::PCABackProject(data, mean, eigenvectors, result));
        return jsopencv_from(result);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_data = NULL;
    UMat data;
    Napi::Value* pyobj_mean = NULL;
    UMat mean;
    Napi::Value* pyobj_eigenvectors = NULL;
    UMat eigenvectors;
    Napi::Value* pyobj_result = NULL;
    UMat result;

    const char* keywords[] = { "data", "mean", "eigenvectors", "result", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:PCABackProject", (char**)keywords, &pyobj_data, &pyobj_mean, &pyobj_eigenvectors, &pyobj_result) &&
        jsopencv_to_safe(info, pyobj_data, data, ArgInfo("data", 0)) &&
        jsopencv_to_safe(info, pyobj_mean, mean, ArgInfo("mean", 0)) &&
        jsopencv_to_safe(info, pyobj_eigenvectors, eigenvectors, ArgInfo("eigenvectors", 0)) &&
        jsopencv_to_safe(info, pyobj_result, result, ArgInfo("result", 1)))
    {
        ERRWRAP2(cv::PCABackProject(data, mean, eigenvectors, result));
        return jsopencv_from(result);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("PCABackProject");

    return NULL;
}

static Napi::Value pyopencv_cv_PCACompute(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_data = NULL;
    Mat data;
    Napi::Value* pyobj_mean = NULL;
    Mat mean;
    Napi::Value* pyobj_eigenvectors = NULL;
    Mat eigenvectors;
    Napi::Value* pyobj_maxComponents = NULL;
    int maxComponents=0;

    const char* keywords[] = { "data", "mean", "eigenvectors", "maxComponents", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:PCACompute", (char**)keywords, &pyobj_data, &pyobj_mean, &pyobj_eigenvectors, &pyobj_maxComponents) &&
        jsopencv_to_safe(info, pyobj_data, data, ArgInfo("data", 0)) &&
        jsopencv_to_safe(info, pyobj_mean, mean, ArgInfo("mean", 1)) &&
        jsopencv_to_safe(info, pyobj_eigenvectors, eigenvectors, ArgInfo("eigenvectors", 1)) &&
        jsopencv_to_safe(info, pyobj_maxComponents, maxComponents, ArgInfo("maxComponents", 0)))
    {
        ERRWRAP2(cv::PCACompute(data, mean, eigenvectors, maxComponents));
        return Py_BuildValue("(NN)", jsopencv_from(mean), jsopencv_from(eigenvectors));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_data = NULL;
    UMat data;
    Napi::Value* pyobj_mean = NULL;
    UMat mean;
    Napi::Value* pyobj_eigenvectors = NULL;
    UMat eigenvectors;
    Napi::Value* pyobj_maxComponents = NULL;
    int maxComponents=0;

    const char* keywords[] = { "data", "mean", "eigenvectors", "maxComponents", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:PCACompute", (char**)keywords, &pyobj_data, &pyobj_mean, &pyobj_eigenvectors, &pyobj_maxComponents) &&
        jsopencv_to_safe(info, pyobj_data, data, ArgInfo("data", 0)) &&
        jsopencv_to_safe(info, pyobj_mean, mean, ArgInfo("mean", 1)) &&
        jsopencv_to_safe(info, pyobj_eigenvectors, eigenvectors, ArgInfo("eigenvectors", 1)) &&
        jsopencv_to_safe(info, pyobj_maxComponents, maxComponents, ArgInfo("maxComponents", 0)))
    {
        ERRWRAP2(cv::PCACompute(data, mean, eigenvectors, maxComponents));
        return Py_BuildValue("(NN)", jsopencv_from(mean), jsopencv_from(eigenvectors));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_data = NULL;
    Mat data;
    Napi::Value* pyobj_mean = NULL;
    Mat mean;
    Napi::Value* pyobj_eigenvectors = NULL;
    Mat eigenvectors;
    Napi::Value* pyobj_retainedVariance = NULL;
    double retainedVariance=0;

    const char* keywords[] = { "data", "mean", "retainedVariance", "eigenvectors", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:PCACompute", (char**)keywords, &pyobj_data, &pyobj_mean, &pyobj_retainedVariance, &pyobj_eigenvectors) &&
        jsopencv_to_safe(info, pyobj_data, data, ArgInfo("data", 0)) &&
        jsopencv_to_safe(info, pyobj_mean, mean, ArgInfo("mean", 1)) &&
        jsopencv_to_safe(info, pyobj_eigenvectors, eigenvectors, ArgInfo("eigenvectors", 1)) &&
        jsopencv_to_safe(info, pyobj_retainedVariance, retainedVariance, ArgInfo("retainedVariance", 0)))
    {
        ERRWRAP2(cv::PCACompute(data, mean, eigenvectors, retainedVariance));
        return Py_BuildValue("(NN)", jsopencv_from(mean), jsopencv_from(eigenvectors));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_data = NULL;
    UMat data;
    Napi::Value* pyobj_mean = NULL;
    UMat mean;
    Napi::Value* pyobj_eigenvectors = NULL;
    UMat eigenvectors;
    Napi::Value* pyobj_retainedVariance = NULL;
    double retainedVariance=0;

    const char* keywords[] = { "data", "mean", "retainedVariance", "eigenvectors", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:PCACompute", (char**)keywords, &pyobj_data, &pyobj_mean, &pyobj_retainedVariance, &pyobj_eigenvectors) &&
        jsopencv_to_safe(info, pyobj_data, data, ArgInfo("data", 0)) &&
        jsopencv_to_safe(info, pyobj_mean, mean, ArgInfo("mean", 1)) &&
        jsopencv_to_safe(info, pyobj_eigenvectors, eigenvectors, ArgInfo("eigenvectors", 1)) &&
        jsopencv_to_safe(info, pyobj_retainedVariance, retainedVariance, ArgInfo("retainedVariance", 0)))
    {
        ERRWRAP2(cv::PCACompute(data, mean, eigenvectors, retainedVariance));
        return Py_BuildValue("(NN)", jsopencv_from(mean), jsopencv_from(eigenvectors));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("PCACompute");

    return NULL;
}

static Napi::Value pyopencv_cv_PCACompute2(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_data = NULL;
    Mat data;
    Napi::Value* pyobj_mean = NULL;
    Mat mean;
    Napi::Value* pyobj_eigenvectors = NULL;
    Mat eigenvectors;
    Napi::Value* pyobj_eigenvalues = NULL;
    Mat eigenvalues;
    Napi::Value* pyobj_maxComponents = NULL;
    int maxComponents=0;

    const char* keywords[] = { "data", "mean", "eigenvectors", "eigenvalues", "maxComponents", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:PCACompute2", (char**)keywords, &pyobj_data, &pyobj_mean, &pyobj_eigenvectors, &pyobj_eigenvalues, &pyobj_maxComponents) &&
        jsopencv_to_safe(info, pyobj_data, data, ArgInfo("data", 0)) &&
        jsopencv_to_safe(info, pyobj_mean, mean, ArgInfo("mean", 1)) &&
        jsopencv_to_safe(info, pyobj_eigenvectors, eigenvectors, ArgInfo("eigenvectors", 1)) &&
        jsopencv_to_safe(info, pyobj_eigenvalues, eigenvalues, ArgInfo("eigenvalues", 1)) &&
        jsopencv_to_safe(info, pyobj_maxComponents, maxComponents, ArgInfo("maxComponents", 0)))
    {
        ERRWRAP2(cv::PCACompute(data, mean, eigenvectors, eigenvalues, maxComponents));
        return Py_BuildValue("(NNN)", jsopencv_from(mean), jsopencv_from(eigenvectors), jsopencv_from(eigenvalues));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_data = NULL;
    UMat data;
    Napi::Value* pyobj_mean = NULL;
    UMat mean;
    Napi::Value* pyobj_eigenvectors = NULL;
    UMat eigenvectors;
    Napi::Value* pyobj_eigenvalues = NULL;
    UMat eigenvalues;
    Napi::Value* pyobj_maxComponents = NULL;
    int maxComponents=0;

    const char* keywords[] = { "data", "mean", "eigenvectors", "eigenvalues", "maxComponents", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:PCACompute2", (char**)keywords, &pyobj_data, &pyobj_mean, &pyobj_eigenvectors, &pyobj_eigenvalues, &pyobj_maxComponents) &&
        jsopencv_to_safe(info, pyobj_data, data, ArgInfo("data", 0)) &&
        jsopencv_to_safe(info, pyobj_mean, mean, ArgInfo("mean", 1)) &&
        jsopencv_to_safe(info, pyobj_eigenvectors, eigenvectors, ArgInfo("eigenvectors", 1)) &&
        jsopencv_to_safe(info, pyobj_eigenvalues, eigenvalues, ArgInfo("eigenvalues", 1)) &&
        jsopencv_to_safe(info, pyobj_maxComponents, maxComponents, ArgInfo("maxComponents", 0)))
    {
        ERRWRAP2(cv::PCACompute(data, mean, eigenvectors, eigenvalues, maxComponents));
        return Py_BuildValue("(NNN)", jsopencv_from(mean), jsopencv_from(eigenvectors), jsopencv_from(eigenvalues));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_data = NULL;
    Mat data;
    Napi::Value* pyobj_mean = NULL;
    Mat mean;
    Napi::Value* pyobj_eigenvectors = NULL;
    Mat eigenvectors;
    Napi::Value* pyobj_eigenvalues = NULL;
    Mat eigenvalues;
    Napi::Value* pyobj_retainedVariance = NULL;
    double retainedVariance=0;

    const char* keywords[] = { "data", "mean", "retainedVariance", "eigenvectors", "eigenvalues", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:PCACompute2", (char**)keywords, &pyobj_data, &pyobj_mean, &pyobj_retainedVariance, &pyobj_eigenvectors, &pyobj_eigenvalues) &&
        jsopencv_to_safe(info, pyobj_data, data, ArgInfo("data", 0)) &&
        jsopencv_to_safe(info, pyobj_mean, mean, ArgInfo("mean", 1)) &&
        jsopencv_to_safe(info, pyobj_eigenvectors, eigenvectors, ArgInfo("eigenvectors", 1)) &&
        jsopencv_to_safe(info, pyobj_eigenvalues, eigenvalues, ArgInfo("eigenvalues", 1)) &&
        jsopencv_to_safe(info, pyobj_retainedVariance, retainedVariance, ArgInfo("retainedVariance", 0)))
    {
        ERRWRAP2(cv::PCACompute(data, mean, eigenvectors, eigenvalues, retainedVariance));
        return Py_BuildValue("(NNN)", jsopencv_from(mean), jsopencv_from(eigenvectors), jsopencv_from(eigenvalues));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_data = NULL;
    UMat data;
    Napi::Value* pyobj_mean = NULL;
    UMat mean;
    Napi::Value* pyobj_eigenvectors = NULL;
    UMat eigenvectors;
    Napi::Value* pyobj_eigenvalues = NULL;
    UMat eigenvalues;
    Napi::Value* pyobj_retainedVariance = NULL;
    double retainedVariance=0;

    const char* keywords[] = { "data", "mean", "retainedVariance", "eigenvectors", "eigenvalues", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:PCACompute2", (char**)keywords, &pyobj_data, &pyobj_mean, &pyobj_retainedVariance, &pyobj_eigenvectors, &pyobj_eigenvalues) &&
        jsopencv_to_safe(info, pyobj_data, data, ArgInfo("data", 0)) &&
        jsopencv_to_safe(info, pyobj_mean, mean, ArgInfo("mean", 1)) &&
        jsopencv_to_safe(info, pyobj_eigenvectors, eigenvectors, ArgInfo("eigenvectors", 1)) &&
        jsopencv_to_safe(info, pyobj_eigenvalues, eigenvalues, ArgInfo("eigenvalues", 1)) &&
        jsopencv_to_safe(info, pyobj_retainedVariance, retainedVariance, ArgInfo("retainedVariance", 0)))
    {
        ERRWRAP2(cv::PCACompute(data, mean, eigenvectors, eigenvalues, retainedVariance));
        return Py_BuildValue("(NNN)", jsopencv_from(mean), jsopencv_from(eigenvectors), jsopencv_from(eigenvalues));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("PCACompute2");

    return NULL;
}

static Napi::Value pyopencv_cv_PCAProject(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_data = NULL;
    Mat data;
    Napi::Value* pyobj_mean = NULL;
    Mat mean;
    Napi::Value* pyobj_eigenvectors = NULL;
    Mat eigenvectors;
    Napi::Value* pyobj_result = NULL;
    Mat result;

    const char* keywords[] = { "data", "mean", "eigenvectors", "result", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:PCAProject", (char**)keywords, &pyobj_data, &pyobj_mean, &pyobj_eigenvectors, &pyobj_result) &&
        jsopencv_to_safe(info, pyobj_data, data, ArgInfo("data", 0)) &&
        jsopencv_to_safe(info, pyobj_mean, mean, ArgInfo("mean", 0)) &&
        jsopencv_to_safe(info, pyobj_eigenvectors, eigenvectors, ArgInfo("eigenvectors", 0)) &&
        jsopencv_to_safe(info, pyobj_result, result, ArgInfo("result", 1)))
    {
        ERRWRAP2(cv::PCAProject(data, mean, eigenvectors, result));
        return jsopencv_from(result);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_data = NULL;
    UMat data;
    Napi::Value* pyobj_mean = NULL;
    UMat mean;
    Napi::Value* pyobj_eigenvectors = NULL;
    UMat eigenvectors;
    Napi::Value* pyobj_result = NULL;
    UMat result;

    const char* keywords[] = { "data", "mean", "eigenvectors", "result", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:PCAProject", (char**)keywords, &pyobj_data, &pyobj_mean, &pyobj_eigenvectors, &pyobj_result) &&
        jsopencv_to_safe(info, pyobj_data, data, ArgInfo("data", 0)) &&
        jsopencv_to_safe(info, pyobj_mean, mean, ArgInfo("mean", 0)) &&
        jsopencv_to_safe(info, pyobj_eigenvectors, eigenvectors, ArgInfo("eigenvectors", 0)) &&
        jsopencv_to_safe(info, pyobj_result, result, ArgInfo("result", 1)))
    {
        ERRWRAP2(cv::PCAProject(data, mean, eigenvectors, result));
        return jsopencv_from(result);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("PCAProject");

    return NULL;
}

static Napi::Value pyopencv_cv_PSNR(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    Mat src1;
    Napi::Value* pyobj_src2 = NULL;
    Mat src2;
    Napi::Value* pyobj_R = NULL;
    double R=255.;
    double retval;

    const char* keywords[] = { "src1", "src2", "R", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:PSNR", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_R) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 0)))
    {
        ERRWRAP2(retval = cv::PSNR(src1, src2, R));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    UMat src1;
    Napi::Value* pyobj_src2 = NULL;
    UMat src2;
    Napi::Value* pyobj_R = NULL;
    double R=255.;
    double retval;

    const char* keywords[] = { "src1", "src2", "R", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:PSNR", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_R) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 0)))
    {
        ERRWRAP2(retval = cv::PSNR(src1, src2, R));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("PSNR");

    return NULL;
}

static Napi::Value pyopencv_cv_QRCodeEncoder_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_parameters = NULL;
    cv::QRCodeEncoder::Params parameters=QRCodeEncoder::Params();
    Ptr<QRCodeEncoder> retval;

    const char* keywords[] = { "parameters", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|O:QRCodeEncoder_create", (char**)keywords, &pyobj_parameters) &&
        jsopencv_to_safe(info, pyobj_parameters, parameters, ArgInfo("parameters", 0)))
    {
        ERRWRAP2(retval = cv::QRCodeEncoder::create(parameters));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_RQDecomp3x3(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_mtxR = NULL;
    Mat mtxR;
    Napi::Value* pyobj_mtxQ = NULL;
    Mat mtxQ;
    Napi::Value* pyobj_Qx = NULL;
    Mat Qx;
    Napi::Value* pyobj_Qy = NULL;
    Mat Qy;
    Napi::Value* pyobj_Qz = NULL;
    Mat Qz;
    Vec3d retval;

    const char* keywords[] = { "src", "mtxR", "mtxQ", "Qx", "Qy", "Qz", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOO:RQDecomp3x3", (char**)keywords, &pyobj_src, &pyobj_mtxR, &pyobj_mtxQ, &pyobj_Qx, &pyobj_Qy, &pyobj_Qz) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_mtxR, mtxR, ArgInfo("mtxR", 1)) &&
        jsopencv_to_safe(info, pyobj_mtxQ, mtxQ, ArgInfo("mtxQ", 1)) &&
        jsopencv_to_safe(info, pyobj_Qx, Qx, ArgInfo("Qx", 1)) &&
        jsopencv_to_safe(info, pyobj_Qy, Qy, ArgInfo("Qy", 1)) &&
        jsopencv_to_safe(info, pyobj_Qz, Qz, ArgInfo("Qz", 1)))
    {
        ERRWRAP2(retval = cv::RQDecomp3x3(src, mtxR, mtxQ, Qx, Qy, Qz));
        return Py_BuildValue("(NNNNNN)", jsopencv_from(retval), jsopencv_from(mtxR), jsopencv_from(mtxQ), jsopencv_from(Qx), jsopencv_from(Qy), jsopencv_from(Qz));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_mtxR = NULL;
    UMat mtxR;
    Napi::Value* pyobj_mtxQ = NULL;
    UMat mtxQ;
    Napi::Value* pyobj_Qx = NULL;
    UMat Qx;
    Napi::Value* pyobj_Qy = NULL;
    UMat Qy;
    Napi::Value* pyobj_Qz = NULL;
    UMat Qz;
    Vec3d retval;

    const char* keywords[] = { "src", "mtxR", "mtxQ", "Qx", "Qy", "Qz", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOO:RQDecomp3x3", (char**)keywords, &pyobj_src, &pyobj_mtxR, &pyobj_mtxQ, &pyobj_Qx, &pyobj_Qy, &pyobj_Qz) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_mtxR, mtxR, ArgInfo("mtxR", 1)) &&
        jsopencv_to_safe(info, pyobj_mtxQ, mtxQ, ArgInfo("mtxQ", 1)) &&
        jsopencv_to_safe(info, pyobj_Qx, Qx, ArgInfo("Qx", 1)) &&
        jsopencv_to_safe(info, pyobj_Qy, Qy, ArgInfo("Qy", 1)) &&
        jsopencv_to_safe(info, pyobj_Qz, Qz, ArgInfo("Qz", 1)))
    {
        ERRWRAP2(retval = cv::RQDecomp3x3(src, mtxR, mtxQ, Qx, Qy, Qz));
        return Py_BuildValue("(NNNNNN)", jsopencv_from(retval), jsopencv_from(mtxR), jsopencv_from(mtxQ), jsopencv_from(Qx), jsopencv_from(Qy), jsopencv_from(Qz));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("RQDecomp3x3");

    return NULL;
}

static Napi::Value pyopencv_cv_Rodrigues(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_jacobian = NULL;
    Mat jacobian;

    const char* keywords[] = { "src", "dst", "jacobian", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:Rodrigues", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_jacobian) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_jacobian, jacobian, ArgInfo("jacobian", 1)))
    {
        ERRWRAP2(cv::Rodrigues(src, dst, jacobian));
        return Py_BuildValue("(NN)", jsopencv_from(dst), jsopencv_from(jacobian));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_jacobian = NULL;
    UMat jacobian;

    const char* keywords[] = { "src", "dst", "jacobian", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:Rodrigues", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_jacobian) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_jacobian, jacobian, ArgInfo("jacobian", 1)))
    {
        ERRWRAP2(cv::Rodrigues(src, dst, jacobian));
        return Py_BuildValue("(NN)", jsopencv_from(dst), jsopencv_from(jacobian));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("Rodrigues");

    return NULL;
}

static Napi::Value pyopencv_cv_SIFT_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_nfeatures = NULL;
    int nfeatures=0;
    Napi::Value* pyobj_nOctaveLayers = NULL;
    int nOctaveLayers=3;
    Napi::Value* pyobj_contrastThreshold = NULL;
    double contrastThreshold=0.04;
    Napi::Value* pyobj_edgeThreshold = NULL;
    double edgeThreshold=10;
    Napi::Value* pyobj_sigma = NULL;
    double sigma=1.6;
    Ptr<SIFT> retval;

    const char* keywords[] = { "nfeatures", "nOctaveLayers", "contrastThreshold", "edgeThreshold", "sigma", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOOO:SIFT_create", (char**)keywords, &pyobj_nfeatures, &pyobj_nOctaveLayers, &pyobj_contrastThreshold, &pyobj_edgeThreshold, &pyobj_sigma) &&
        jsopencv_to_safe(info, pyobj_nfeatures, nfeatures, ArgInfo("nfeatures", 0)) &&
        jsopencv_to_safe(info, pyobj_nOctaveLayers, nOctaveLayers, ArgInfo("nOctaveLayers", 0)) &&
        jsopencv_to_safe(info, pyobj_contrastThreshold, contrastThreshold, ArgInfo("contrastThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_edgeThreshold, edgeThreshold, ArgInfo("edgeThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma, sigma, ArgInfo("sigma", 0)))
    {
        ERRWRAP2(retval = cv::SIFT::create(nfeatures, nOctaveLayers, contrastThreshold, edgeThreshold, sigma));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_nfeatures = NULL;
    int nfeatures=0;
    Napi::Value* pyobj_nOctaveLayers = NULL;
    int nOctaveLayers=0;
    Napi::Value* pyobj_contrastThreshold = NULL;
    double contrastThreshold=0;
    Napi::Value* pyobj_edgeThreshold = NULL;
    double edgeThreshold=0;
    Napi::Value* pyobj_sigma = NULL;
    double sigma=0;
    Napi::Value* pyobj_descriptorType = NULL;
    int descriptorType=0;
    Ptr<SIFT> retval;

    const char* keywords[] = { "nfeatures", "nOctaveLayers", "contrastThreshold", "edgeThreshold", "sigma", "descriptorType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO:SIFT_create", (char**)keywords, &pyobj_nfeatures, &pyobj_nOctaveLayers, &pyobj_contrastThreshold, &pyobj_edgeThreshold, &pyobj_sigma, &pyobj_descriptorType) &&
        jsopencv_to_safe(info, pyobj_nfeatures, nfeatures, ArgInfo("nfeatures", 0)) &&
        jsopencv_to_safe(info, pyobj_nOctaveLayers, nOctaveLayers, ArgInfo("nOctaveLayers", 0)) &&
        jsopencv_to_safe(info, pyobj_contrastThreshold, contrastThreshold, ArgInfo("contrastThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_edgeThreshold, edgeThreshold, ArgInfo("edgeThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma, sigma, ArgInfo("sigma", 0)) &&
        jsopencv_to_safe(info, pyobj_descriptorType, descriptorType, ArgInfo("descriptorType", 0)))
    {
        ERRWRAP2(retval = cv::SIFT::create(nfeatures, nOctaveLayers, contrastThreshold, edgeThreshold, sigma, descriptorType));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("SIFT_create");

    return NULL;
}

static Napi::Value pyopencv_cv_SVBackSubst(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_w = NULL;
    Mat w;
    Napi::Value* pyobj_u = NULL;
    Mat u;
    Napi::Value* pyobj_vt = NULL;
    Mat vt;
    Napi::Value* pyobj_rhs = NULL;
    Mat rhs;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;

    const char* keywords[] = { "w", "u", "vt", "rhs", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:SVBackSubst", (char**)keywords, &pyobj_w, &pyobj_u, &pyobj_vt, &pyobj_rhs, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_w, w, ArgInfo("w", 0)) &&
        jsopencv_to_safe(info, pyobj_u, u, ArgInfo("u", 0)) &&
        jsopencv_to_safe(info, pyobj_vt, vt, ArgInfo("vt", 0)) &&
        jsopencv_to_safe(info, pyobj_rhs, rhs, ArgInfo("rhs", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::SVBackSubst(w, u, vt, rhs, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_w = NULL;
    UMat w;
    Napi::Value* pyobj_u = NULL;
    UMat u;
    Napi::Value* pyobj_vt = NULL;
    UMat vt;
    Napi::Value* pyobj_rhs = NULL;
    UMat rhs;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;

    const char* keywords[] = { "w", "u", "vt", "rhs", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:SVBackSubst", (char**)keywords, &pyobj_w, &pyobj_u, &pyobj_vt, &pyobj_rhs, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_w, w, ArgInfo("w", 0)) &&
        jsopencv_to_safe(info, pyobj_u, u, ArgInfo("u", 0)) &&
        jsopencv_to_safe(info, pyobj_vt, vt, ArgInfo("vt", 0)) &&
        jsopencv_to_safe(info, pyobj_rhs, rhs, ArgInfo("rhs", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::SVBackSubst(w, u, vt, rhs, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("SVBackSubst");

    return NULL;
}

static Napi::Value pyopencv_cv_SVDecomp(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_w = NULL;
    Mat w;
    Napi::Value* pyobj_u = NULL;
    Mat u;
    Napi::Value* pyobj_vt = NULL;
    Mat vt;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;

    const char* keywords[] = { "src", "w", "u", "vt", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOO:SVDecomp", (char**)keywords, &pyobj_src, &pyobj_w, &pyobj_u, &pyobj_vt, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_w, w, ArgInfo("w", 1)) &&
        jsopencv_to_safe(info, pyobj_u, u, ArgInfo("u", 1)) &&
        jsopencv_to_safe(info, pyobj_vt, vt, ArgInfo("vt", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::SVDecomp(src, w, u, vt, flags));
        return Py_BuildValue("(NNN)", jsopencv_from(w), jsopencv_from(u), jsopencv_from(vt));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_w = NULL;
    UMat w;
    Napi::Value* pyobj_u = NULL;
    UMat u;
    Napi::Value* pyobj_vt = NULL;
    UMat vt;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;

    const char* keywords[] = { "src", "w", "u", "vt", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOO:SVDecomp", (char**)keywords, &pyobj_src, &pyobj_w, &pyobj_u, &pyobj_vt, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_w, w, ArgInfo("w", 1)) &&
        jsopencv_to_safe(info, pyobj_u, u, ArgInfo("u", 1)) &&
        jsopencv_to_safe(info, pyobj_vt, vt, ArgInfo("vt", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::SVDecomp(src, w, u, vt, flags));
        return Py_BuildValue("(NNN)", jsopencv_from(w), jsopencv_from(u), jsopencv_from(vt));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("SVDecomp");

    return NULL;
}

static Napi::Value pyopencv_cv_Scharr(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=0;
    Napi::Value* pyobj_dx = NULL;
    int dx=0;
    Napi::Value* pyobj_dy = NULL;
    int dy=0;
    Napi::Value* pyobj_scale = NULL;
    double scale=1;
    Napi::Value* pyobj_delta = NULL;
    double delta=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "ddepth", "dx", "dy", "dst", "scale", "delta", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOO:Scharr", (char**)keywords, &pyobj_src, &pyobj_ddepth, &pyobj_dx, &pyobj_dy, &pyobj_dst, &pyobj_scale, &pyobj_delta, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)) &&
        jsopencv_to_safe(info, pyobj_dx, dx, ArgInfo("dx", 0)) &&
        jsopencv_to_safe(info, pyobj_dy, dy, ArgInfo("dy", 0)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)) &&
        jsopencv_to_safe(info, pyobj_delta, delta, ArgInfo("delta", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::Scharr(src, dst, ddepth, dx, dy, scale, delta, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=0;
    Napi::Value* pyobj_dx = NULL;
    int dx=0;
    Napi::Value* pyobj_dy = NULL;
    int dy=0;
    Napi::Value* pyobj_scale = NULL;
    double scale=1;
    Napi::Value* pyobj_delta = NULL;
    double delta=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "ddepth", "dx", "dy", "dst", "scale", "delta", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOO:Scharr", (char**)keywords, &pyobj_src, &pyobj_ddepth, &pyobj_dx, &pyobj_dy, &pyobj_dst, &pyobj_scale, &pyobj_delta, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)) &&
        jsopencv_to_safe(info, pyobj_dx, dx, ArgInfo("dx", 0)) &&
        jsopencv_to_safe(info, pyobj_dy, dy, ArgInfo("dy", 0)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)) &&
        jsopencv_to_safe(info, pyobj_delta, delta, ArgInfo("delta", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::Scharr(src, dst, ddepth, dx, dy, scale, delta, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("Scharr");

    return NULL;
}

static Napi::Value pyopencv_cv_SimpleBlobDetector_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_parameters = NULL;
    cv::SimpleBlobDetector::Params parameters=SimpleBlobDetector::Params();
    Ptr<SimpleBlobDetector> retval;

    const char* keywords[] = { "parameters", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|O:SimpleBlobDetector_create", (char**)keywords, &pyobj_parameters) &&
        jsopencv_to_safe(info, pyobj_parameters, parameters, ArgInfo("parameters", 0)))
    {
        ERRWRAP2(retval = cv::SimpleBlobDetector::create(parameters));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_Sobel(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=0;
    Napi::Value* pyobj_dx = NULL;
    int dx=0;
    Napi::Value* pyobj_dy = NULL;
    int dy=0;
    Napi::Value* pyobj_ksize = NULL;
    int ksize=3;
    Napi::Value* pyobj_scale = NULL;
    double scale=1;
    Napi::Value* pyobj_delta = NULL;
    double delta=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "ddepth", "dx", "dy", "dst", "ksize", "scale", "delta", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOOO:Sobel", (char**)keywords, &pyobj_src, &pyobj_ddepth, &pyobj_dx, &pyobj_dy, &pyobj_dst, &pyobj_ksize, &pyobj_scale, &pyobj_delta, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)) &&
        jsopencv_to_safe(info, pyobj_dx, dx, ArgInfo("dx", 0)) &&
        jsopencv_to_safe(info, pyobj_dy, dy, ArgInfo("dy", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)) &&
        jsopencv_to_safe(info, pyobj_delta, delta, ArgInfo("delta", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::Sobel(src, dst, ddepth, dx, dy, ksize, scale, delta, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=0;
    Napi::Value* pyobj_dx = NULL;
    int dx=0;
    Napi::Value* pyobj_dy = NULL;
    int dy=0;
    Napi::Value* pyobj_ksize = NULL;
    int ksize=3;
    Napi::Value* pyobj_scale = NULL;
    double scale=1;
    Napi::Value* pyobj_delta = NULL;
    double delta=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "ddepth", "dx", "dy", "dst", "ksize", "scale", "delta", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOOO:Sobel", (char**)keywords, &pyobj_src, &pyobj_ddepth, &pyobj_dx, &pyobj_dy, &pyobj_dst, &pyobj_ksize, &pyobj_scale, &pyobj_delta, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)) &&
        jsopencv_to_safe(info, pyobj_dx, dx, ArgInfo("dx", 0)) &&
        jsopencv_to_safe(info, pyobj_dy, dy, ArgInfo("dy", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)) &&
        jsopencv_to_safe(info, pyobj_delta, delta, ArgInfo("delta", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::Sobel(src, dst, ddepth, dx, dy, ksize, scale, delta, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("Sobel");

    return NULL;
}

static Napi::Value pyopencv_cv_SparsePyrLKOpticalFlow_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_winSize = NULL;
    Size winSize=Size(21, 21);
    Napi::Value* pyobj_maxLevel = NULL;
    int maxLevel=3;
    Napi::Value* pyobj_crit = NULL;
    TermCriteria crit=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 0.01);
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_minEigThreshold = NULL;
    double minEigThreshold=1e-4;
    Ptr<SparsePyrLKOpticalFlow> retval;

    const char* keywords[] = { "winSize", "maxLevel", "crit", "flags", "minEigThreshold", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOOO:SparsePyrLKOpticalFlow_create", (char**)keywords, &pyobj_winSize, &pyobj_maxLevel, &pyobj_crit, &pyobj_flags, &pyobj_minEigThreshold) &&
        jsopencv_to_safe(info, pyobj_winSize, winSize, ArgInfo("winSize", 0)) &&
        jsopencv_to_safe(info, pyobj_maxLevel, maxLevel, ArgInfo("maxLevel", 0)) &&
        jsopencv_to_safe(info, pyobj_crit, crit, ArgInfo("crit", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_minEigThreshold, minEigThreshold, ArgInfo("minEigThreshold", 0)))
    {
        ERRWRAP2(retval = cv::SparsePyrLKOpticalFlow::create(winSize, maxLevel, crit, flags, minEigThreshold));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_StereoBM_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_numDisparities = NULL;
    int numDisparities=0;
    Napi::Value* pyobj_blockSize = NULL;
    int blockSize=21;
    Ptr<StereoBM> retval;

    const char* keywords[] = { "numDisparities", "blockSize", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OO:StereoBM_create", (char**)keywords, &pyobj_numDisparities, &pyobj_blockSize) &&
        jsopencv_to_safe(info, pyobj_numDisparities, numDisparities, ArgInfo("numDisparities", 0)) &&
        jsopencv_to_safe(info, pyobj_blockSize, blockSize, ArgInfo("blockSize", 0)))
    {
        ERRWRAP2(retval = cv::StereoBM::create(numDisparities, blockSize));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_StereoSGBM_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_minDisparity = NULL;
    int minDisparity=0;
    Napi::Value* pyobj_numDisparities = NULL;
    int numDisparities=16;
    Napi::Value* pyobj_blockSize = NULL;
    int blockSize=3;
    Napi::Value* pyobj_P1 = NULL;
    int P1=0;
    Napi::Value* pyobj_P2 = NULL;
    int P2=0;
    Napi::Value* pyobj_disp12MaxDiff = NULL;
    int disp12MaxDiff=0;
    Napi::Value* pyobj_preFilterCap = NULL;
    int preFilterCap=0;
    Napi::Value* pyobj_uniquenessRatio = NULL;
    int uniquenessRatio=0;
    Napi::Value* pyobj_speckleWindowSize = NULL;
    int speckleWindowSize=0;
    Napi::Value* pyobj_speckleRange = NULL;
    int speckleRange=0;
    Napi::Value* pyobj_mode = NULL;
    int mode=StereoSGBM::MODE_SGBM;
    Ptr<StereoSGBM> retval;

    const char* keywords[] = { "minDisparity", "numDisparities", "blockSize", "P1", "P2", "disp12MaxDiff", "preFilterCap", "uniquenessRatio", "speckleWindowSize", "speckleRange", "mode", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOOOOOOOOO:StereoSGBM_create", (char**)keywords, &pyobj_minDisparity, &pyobj_numDisparities, &pyobj_blockSize, &pyobj_P1, &pyobj_P2, &pyobj_disp12MaxDiff, &pyobj_preFilterCap, &pyobj_uniquenessRatio, &pyobj_speckleWindowSize, &pyobj_speckleRange, &pyobj_mode) &&
        jsopencv_to_safe(info, pyobj_minDisparity, minDisparity, ArgInfo("minDisparity", 0)) &&
        jsopencv_to_safe(info, pyobj_numDisparities, numDisparities, ArgInfo("numDisparities", 0)) &&
        jsopencv_to_safe(info, pyobj_blockSize, blockSize, ArgInfo("blockSize", 0)) &&
        jsopencv_to_safe(info, pyobj_P1, P1, ArgInfo("P1", 0)) &&
        jsopencv_to_safe(info, pyobj_P2, P2, ArgInfo("P2", 0)) &&
        jsopencv_to_safe(info, pyobj_disp12MaxDiff, disp12MaxDiff, ArgInfo("disp12MaxDiff", 0)) &&
        jsopencv_to_safe(info, pyobj_preFilterCap, preFilterCap, ArgInfo("preFilterCap", 0)) &&
        jsopencv_to_safe(info, pyobj_uniquenessRatio, uniquenessRatio, ArgInfo("uniquenessRatio", 0)) &&
        jsopencv_to_safe(info, pyobj_speckleWindowSize, speckleWindowSize, ArgInfo("speckleWindowSize", 0)) &&
        jsopencv_to_safe(info, pyobj_speckleRange, speckleRange, ArgInfo("speckleRange", 0)) &&
        jsopencv_to_safe(info, pyobj_mode, mode, ArgInfo("mode", 0)))
    {
        ERRWRAP2(retval = cv::StereoSGBM::create(minDisparity, numDisparities, blockSize, P1, P2, disp12MaxDiff, preFilterCap, uniquenessRatio, speckleWindowSize, speckleRange, mode));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_TrackerCSRT_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_parameters = NULL;
    cv::TrackerCSRT::Params parameters=TrackerCSRT::Params();
    Ptr<TrackerCSRT> retval;

    const char* keywords[] = { "parameters", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|O:TrackerCSRT_create", (char**)keywords, &pyobj_parameters) &&
        jsopencv_to_safe(info, pyobj_parameters, parameters, ArgInfo("parameters", 0)))
    {
        ERRWRAP2(retval = cv::TrackerCSRT::create(parameters));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_TrackerDaSiamRPN_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_parameters = NULL;
    cv::TrackerDaSiamRPN::Params parameters=TrackerDaSiamRPN::Params();
    Ptr<TrackerDaSiamRPN> retval;

    const char* keywords[] = { "parameters", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|O:TrackerDaSiamRPN_create", (char**)keywords, &pyobj_parameters) &&
        jsopencv_to_safe(info, pyobj_parameters, parameters, ArgInfo("parameters", 0)))
    {
        ERRWRAP2(retval = cv::TrackerDaSiamRPN::create(parameters));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_TrackerGOTURN_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_parameters = NULL;
    cv::TrackerGOTURN::Params parameters=TrackerGOTURN::Params();
    Ptr<TrackerGOTURN> retval;

    const char* keywords[] = { "parameters", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|O:TrackerGOTURN_create", (char**)keywords, &pyobj_parameters) &&
        jsopencv_to_safe(info, pyobj_parameters, parameters, ArgInfo("parameters", 0)))
    {
        ERRWRAP2(retval = cv::TrackerGOTURN::create(parameters));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_TrackerKCF_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_parameters = NULL;
    cv::TrackerKCF::Params parameters=TrackerKCF::Params();
    Ptr<TrackerKCF> retval;

    const char* keywords[] = { "parameters", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|O:TrackerKCF_create", (char**)keywords, &pyobj_parameters) &&
        jsopencv_to_safe(info, pyobj_parameters, parameters, ArgInfo("parameters", 0)))
    {
        ERRWRAP2(retval = cv::TrackerKCF::create(parameters));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_TrackerMIL_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_parameters = NULL;
    cv::TrackerMIL::Params parameters=TrackerMIL::Params();
    Ptr<TrackerMIL> retval;

    const char* keywords[] = { "parameters", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|O:TrackerMIL_create", (char**)keywords, &pyobj_parameters) &&
        jsopencv_to_safe(info, pyobj_parameters, parameters, ArgInfo("parameters", 0)))
    {
        ERRWRAP2(retval = cv::TrackerMIL::create(parameters));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_TrackerNano_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_parameters = NULL;
    cv::TrackerNano::Params parameters=TrackerNano::Params();
    Ptr<TrackerNano> retval;

    const char* keywords[] = { "parameters", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|O:TrackerNano_create", (char**)keywords, &pyobj_parameters) &&
        jsopencv_to_safe(info, pyobj_parameters, parameters, ArgInfo("parameters", 0)))
    {
        ERRWRAP2(retval = cv::TrackerNano::create(parameters));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_UMat_context(const Napi::CallbackInfo &info)
{
    using namespace cv;

    void* retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv_UMat_context());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_UMat_queue(const Napi::CallbackInfo &info)
{
    using namespace cv;

    void* retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv_UMat_queue());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_VariationalRefinement_create(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Ptr<VariationalRefinement> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::VariationalRefinement::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_VideoCapture_waitAny(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_streams = NULL;
    vector_VideoCapture streams;
    vector_int readyIndex;
    Napi::Value* pyobj_timeoutNs = NULL;
    int64 timeoutNs=0;
    bool retval;

    const char* keywords[] = { "streams", "timeoutNs", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:VideoCapture_waitAny", (char**)keywords, &pyobj_streams, &pyobj_timeoutNs) &&
        jsopencv_to_safe(info, pyobj_streams, streams, ArgInfo("streams", 0)) &&
        jsopencv_to_safe(info, pyobj_timeoutNs, timeoutNs, ArgInfo("timeoutNs", 0)))
    {
        ERRWRAP2(retval = cv::VideoCapture::waitAny(streams, readyIndex, timeoutNs));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(readyIndex));
    }

    return NULL;
}

static Napi::Value pyopencv_cv_VideoWriter_fourcc(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_c1 = NULL;
    char c1;
    Napi::Value* pyobj_c2 = NULL;
    char c2;
    Napi::Value* pyobj_c3 = NULL;
    char c3;
    Napi::Value* pyobj_c4 = NULL;
    char c4;
    int retval;

    const char* keywords[] = { "c1", "c2", "c3", "c4", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO:VideoWriter_fourcc", (char**)keywords, &pyobj_c1, &pyobj_c2, &pyobj_c3, &pyobj_c4) &&
        convert_to_char(pyobj_c1, &c1, ArgInfo("c1", 0)) &&
        convert_to_char(pyobj_c2, &c2, ArgInfo("c2", 0)) &&
        convert_to_char(pyobj_c3, &c3, ArgInfo("c3", 0)) &&
        convert_to_char(pyobj_c4, &c4, ArgInfo("c4", 0)))
    {
        ERRWRAP2(retval = cv::VideoWriter::fourcc(c1, c2, c3, c4));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_absdiff(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    Mat src1;
    Napi::Value* pyobj_src2 = NULL;
    Mat src2;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;

    const char* keywords[] = { "src1", "src2", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:absdiff", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::absdiff(src1, src2, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    UMat src1;
    Napi::Value* pyobj_src2 = NULL;
    UMat src2;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;

    const char* keywords[] = { "src1", "src2", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:absdiff", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::absdiff(src1, src2, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("absdiff");

    return NULL;
}

static Napi::Value pyopencv_cv_accumulate(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;

    const char* keywords[] = { "src", "dst", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:accumulate", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::accumulate(src, dst, mask));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;

    const char* keywords[] = { "src", "dst", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:accumulate", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::accumulate(src, dst, mask));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("accumulate");

    return NULL;
}

static Napi::Value pyopencv_cv_accumulateProduct(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    Mat src1;
    Napi::Value* pyobj_src2 = NULL;
    Mat src2;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;

    const char* keywords[] = { "src1", "src2", "dst", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:accumulateProduct", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::accumulateProduct(src1, src2, dst, mask));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    UMat src1;
    Napi::Value* pyobj_src2 = NULL;
    UMat src2;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;

    const char* keywords[] = { "src1", "src2", "dst", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:accumulateProduct", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::accumulateProduct(src1, src2, dst, mask));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("accumulateProduct");

    return NULL;
}

static Napi::Value pyopencv_cv_accumulateSquare(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;

    const char* keywords[] = { "src", "dst", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:accumulateSquare", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::accumulateSquare(src, dst, mask));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;

    const char* keywords[] = { "src", "dst", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:accumulateSquare", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::accumulateSquare(src, dst, mask));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("accumulateSquare");

    return NULL;
}

static Napi::Value pyopencv_cv_accumulateWeighted(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=0;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;

    const char* keywords[] = { "src", "dst", "alpha", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:accumulateWeighted", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_alpha, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::accumulateWeighted(src, dst, alpha, mask));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=0;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;

    const char* keywords[] = { "src", "dst", "alpha", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:accumulateWeighted", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_alpha, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::accumulateWeighted(src, dst, alpha, mask));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("accumulateWeighted");

    return NULL;
}

static Napi::Value pyopencv_cv_adaptiveThreshold(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_maxValue = NULL;
    double maxValue=0;
    Napi::Value* pyobj_adaptiveMethod = NULL;
    int adaptiveMethod=0;
    Napi::Value* pyobj_thresholdType = NULL;
    int thresholdType=0;
    Napi::Value* pyobj_blockSize = NULL;
    int blockSize=0;
    Napi::Value* pyobj_C = NULL;
    double C=0;

    const char* keywords[] = { "src", "maxValue", "adaptiveMethod", "thresholdType", "blockSize", "C", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|O:adaptiveThreshold", (char**)keywords, &pyobj_src, &pyobj_maxValue, &pyobj_adaptiveMethod, &pyobj_thresholdType, &pyobj_blockSize, &pyobj_C, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_maxValue, maxValue, ArgInfo("maxValue", 0)) &&
        jsopencv_to_safe(info, pyobj_adaptiveMethod, adaptiveMethod, ArgInfo("adaptiveMethod", 0)) &&
        jsopencv_to_safe(info, pyobj_thresholdType, thresholdType, ArgInfo("thresholdType", 0)) &&
        jsopencv_to_safe(info, pyobj_blockSize, blockSize, ArgInfo("blockSize", 0)) &&
        jsopencv_to_safe(info, pyobj_C, C, ArgInfo("C", 0)))
    {
        ERRWRAP2(cv::adaptiveThreshold(src, dst, maxValue, adaptiveMethod, thresholdType, blockSize, C));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_maxValue = NULL;
    double maxValue=0;
    Napi::Value* pyobj_adaptiveMethod = NULL;
    int adaptiveMethod=0;
    Napi::Value* pyobj_thresholdType = NULL;
    int thresholdType=0;
    Napi::Value* pyobj_blockSize = NULL;
    int blockSize=0;
    Napi::Value* pyobj_C = NULL;
    double C=0;

    const char* keywords[] = { "src", "maxValue", "adaptiveMethod", "thresholdType", "blockSize", "C", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|O:adaptiveThreshold", (char**)keywords, &pyobj_src, &pyobj_maxValue, &pyobj_adaptiveMethod, &pyobj_thresholdType, &pyobj_blockSize, &pyobj_C, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_maxValue, maxValue, ArgInfo("maxValue", 0)) &&
        jsopencv_to_safe(info, pyobj_adaptiveMethod, adaptiveMethod, ArgInfo("adaptiveMethod", 0)) &&
        jsopencv_to_safe(info, pyobj_thresholdType, thresholdType, ArgInfo("thresholdType", 0)) &&
        jsopencv_to_safe(info, pyobj_blockSize, blockSize, ArgInfo("blockSize", 0)) &&
        jsopencv_to_safe(info, pyobj_C, C, ArgInfo("C", 0)))
    {
        ERRWRAP2(cv::adaptiveThreshold(src, dst, maxValue, adaptiveMethod, thresholdType, blockSize, C));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("adaptiveThreshold");

    return NULL;
}

static Napi::Value pyopencv_cv_add(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    Mat src1;
    Napi::Value* pyobj_src2 = NULL;
    Mat src2;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Napi::Value* pyobj_dtype = NULL;
    int dtype=-1;

    const char* keywords[] = { "src1", "src2", "dst", "mask", "dtype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:add", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst, &pyobj_mask, &pyobj_dtype) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)) &&
        jsopencv_to_safe(info, pyobj_dtype, dtype, ArgInfo("dtype", 0)))
    {
        ERRWRAP2(cv::add(src1, src2, dst, mask, dtype));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    UMat src1;
    Napi::Value* pyobj_src2 = NULL;
    UMat src2;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    Napi::Value* pyobj_dtype = NULL;
    int dtype=-1;

    const char* keywords[] = { "src1", "src2", "dst", "mask", "dtype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:add", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst, &pyobj_mask, &pyobj_dtype) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)) &&
        jsopencv_to_safe(info, pyobj_dtype, dtype, ArgInfo("dtype", 0)))
    {
        ERRWRAP2(cv::add(src1, src2, dst, mask, dtype));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("add");

    return NULL;
}

static Napi::Value pyopencv_cv_addText(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_text = NULL;
    String text;
    Napi::Value* pyobj_org = NULL;
    Point org;
    Napi::Value* pyobj_nameFont = NULL;
    String nameFont;
    Napi::Value* pyobj_pointSize = NULL;
    int pointSize=-1;
    Napi::Value* pyobj_color = NULL;
    Scalar color=Scalar::all(0);
    Napi::Value* pyobj_weight = NULL;
    int weight=QT_FONT_NORMAL;
    Napi::Value* pyobj_style = NULL;
    int style=QT_STYLE_NORMAL;
    Napi::Value* pyobj_spacing = NULL;
    int spacing=0;

    const char* keywords[] = { "img", "text", "org", "nameFont", "pointSize", "color", "weight", "style", "spacing", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOOO:addText", (char**)keywords, &pyobj_img, &pyobj_text, &pyobj_org, &pyobj_nameFont, &pyobj_pointSize, &pyobj_color, &pyobj_weight, &pyobj_style, &pyobj_spacing) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_text, text, ArgInfo("text", 0)) &&
        jsopencv_to_safe(info, pyobj_org, org, ArgInfo("org", 0)) &&
        jsopencv_to_safe(info, pyobj_nameFont, nameFont, ArgInfo("nameFont", 0)) &&
        jsopencv_to_safe(info, pyobj_pointSize, pointSize, ArgInfo("pointSize", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_weight, weight, ArgInfo("weight", 0)) &&
        jsopencv_to_safe(info, pyobj_style, style, ArgInfo("style", 0)) &&
        jsopencv_to_safe(info, pyobj_spacing, spacing, ArgInfo("spacing", 0)))
    {
        ERRWRAP2(cv::addText(img, text, org, nameFont, pointSize, color, weight, style, spacing));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_addWeighted(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    Mat src1;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=0;
    Napi::Value* pyobj_src2 = NULL;
    Mat src2;
    Napi::Value* pyobj_beta = NULL;
    double beta=0;
    Napi::Value* pyobj_gamma = NULL;
    double gamma=0;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_dtype = NULL;
    int dtype=-1;

    const char* keywords[] = { "src1", "alpha", "src2", "beta", "gamma", "dst", "dtype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OO:addWeighted", (char**)keywords, &pyobj_src1, &pyobj_alpha, &pyobj_src2, &pyobj_beta, &pyobj_gamma, &pyobj_dst, &pyobj_dtype) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_beta, beta, ArgInfo("beta", 0)) &&
        jsopencv_to_safe(info, pyobj_gamma, gamma, ArgInfo("gamma", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_dtype, dtype, ArgInfo("dtype", 0)))
    {
        ERRWRAP2(cv::addWeighted(src1, alpha, src2, beta, gamma, dst, dtype));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    UMat src1;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=0;
    Napi::Value* pyobj_src2 = NULL;
    UMat src2;
    Napi::Value* pyobj_beta = NULL;
    double beta=0;
    Napi::Value* pyobj_gamma = NULL;
    double gamma=0;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_dtype = NULL;
    int dtype=-1;

    const char* keywords[] = { "src1", "alpha", "src2", "beta", "gamma", "dst", "dtype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OO:addWeighted", (char**)keywords, &pyobj_src1, &pyobj_alpha, &pyobj_src2, &pyobj_beta, &pyobj_gamma, &pyobj_dst, &pyobj_dtype) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_beta, beta, ArgInfo("beta", 0)) &&
        jsopencv_to_safe(info, pyobj_gamma, gamma, ArgInfo("gamma", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_dtype, dtype, ArgInfo("dtype", 0)))
    {
        ERRWRAP2(cv::addWeighted(src1, alpha, src2, beta, gamma, dst, dtype));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("addWeighted");

    return NULL;
}

static Napi::Value pyopencv_cv_applyColorMap(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_colormap = NULL;
    int colormap=0;

    const char* keywords[] = { "src", "colormap", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:applyColorMap", (char**)keywords, &pyobj_src, &pyobj_colormap, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_colormap, colormap, ArgInfo("colormap", 0)))
    {
        ERRWRAP2(cv::applyColorMap(src, dst, colormap));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_colormap = NULL;
    int colormap=0;

    const char* keywords[] = { "src", "colormap", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:applyColorMap", (char**)keywords, &pyobj_src, &pyobj_colormap, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_colormap, colormap, ArgInfo("colormap", 0)))
    {
        ERRWRAP2(cv::applyColorMap(src, dst, colormap));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_userColor = NULL;
    Mat userColor;

    const char* keywords[] = { "src", "userColor", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:applyColorMap", (char**)keywords, &pyobj_src, &pyobj_userColor, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_userColor, userColor, ArgInfo("userColor", 0)))
    {
        ERRWRAP2(cv::applyColorMap(src, dst, userColor));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_userColor = NULL;
    UMat userColor;

    const char* keywords[] = { "src", "userColor", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:applyColorMap", (char**)keywords, &pyobj_src, &pyobj_userColor, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_userColor, userColor, ArgInfo("userColor", 0)))
    {
        ERRWRAP2(cv::applyColorMap(src, dst, userColor));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("applyColorMap");

    return NULL;
}

static Napi::Value pyopencv_cv_approxPolyDP(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_curve = NULL;
    Mat curve;
    Napi::Value* pyobj_approxCurve = NULL;
    Mat approxCurve;
    Napi::Value* pyobj_epsilon = NULL;
    double epsilon=0;
    Napi::Value* pyobj_closed = NULL;
    bool closed=0;

    const char* keywords[] = { "curve", "epsilon", "closed", "approxCurve", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:approxPolyDP", (char**)keywords, &pyobj_curve, &pyobj_epsilon, &pyobj_closed, &pyobj_approxCurve) &&
        jsopencv_to_safe(info, pyobj_curve, curve, ArgInfo("curve", 0)) &&
        jsopencv_to_safe(info, pyobj_approxCurve, approxCurve, ArgInfo("approxCurve", 1)) &&
        jsopencv_to_safe(info, pyobj_epsilon, epsilon, ArgInfo("epsilon", 0)) &&
        jsopencv_to_safe(info, pyobj_closed, closed, ArgInfo("closed", 0)))
    {
        ERRWRAP2(cv::approxPolyDP(curve, approxCurve, epsilon, closed));
        return jsopencv_from(approxCurve);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_curve = NULL;
    UMat curve;
    Napi::Value* pyobj_approxCurve = NULL;
    UMat approxCurve;
    Napi::Value* pyobj_epsilon = NULL;
    double epsilon=0;
    Napi::Value* pyobj_closed = NULL;
    bool closed=0;

    const char* keywords[] = { "curve", "epsilon", "closed", "approxCurve", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:approxPolyDP", (char**)keywords, &pyobj_curve, &pyobj_epsilon, &pyobj_closed, &pyobj_approxCurve) &&
        jsopencv_to_safe(info, pyobj_curve, curve, ArgInfo("curve", 0)) &&
        jsopencv_to_safe(info, pyobj_approxCurve, approxCurve, ArgInfo("approxCurve", 1)) &&
        jsopencv_to_safe(info, pyobj_epsilon, epsilon, ArgInfo("epsilon", 0)) &&
        jsopencv_to_safe(info, pyobj_closed, closed, ArgInfo("closed", 0)))
    {
        ERRWRAP2(cv::approxPolyDP(curve, approxCurve, epsilon, closed));
        return jsopencv_from(approxCurve);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("approxPolyDP");

    return NULL;
}

static Napi::Value pyopencv_cv_arcLength(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_curve = NULL;
    Mat curve;
    Napi::Value* pyobj_closed = NULL;
    bool closed=0;
    double retval;

    const char* keywords[] = { "curve", "closed", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:arcLength", (char**)keywords, &pyobj_curve, &pyobj_closed) &&
        jsopencv_to_safe(info, pyobj_curve, curve, ArgInfo("curve", 0)) &&
        jsopencv_to_safe(info, pyobj_closed, closed, ArgInfo("closed", 0)))
    {
        ERRWRAP2(retval = cv::arcLength(curve, closed));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_curve = NULL;
    UMat curve;
    Napi::Value* pyobj_closed = NULL;
    bool closed=0;
    double retval;

    const char* keywords[] = { "curve", "closed", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:arcLength", (char**)keywords, &pyobj_curve, &pyobj_closed) &&
        jsopencv_to_safe(info, pyobj_curve, curve, ArgInfo("curve", 0)) &&
        jsopencv_to_safe(info, pyobj_closed, closed, ArgInfo("closed", 0)))
    {
        ERRWRAP2(retval = cv::arcLength(curve, closed));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("arcLength");

    return NULL;
}

static Napi::Value pyopencv_cv_arrowedLine(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_pt1 = NULL;
    Point pt1;
    Napi::Value* pyobj_pt2 = NULL;
    Point pt2;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=1;
    Napi::Value* pyobj_line_type = NULL;
    int line_type=8;
    Napi::Value* pyobj_shift = NULL;
    int shift=0;
    Napi::Value* pyobj_tipLength = NULL;
    double tipLength=0.1;

    const char* keywords[] = { "img", "pt1", "pt2", "color", "thickness", "line_type", "shift", "tipLength", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOO:arrowedLine", (char**)keywords, &pyobj_img, &pyobj_pt1, &pyobj_pt2, &pyobj_color, &pyobj_thickness, &pyobj_line_type, &pyobj_shift, &pyobj_tipLength) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_pt1, pt1, ArgInfo("pt1", 0)) &&
        jsopencv_to_safe(info, pyobj_pt2, pt2, ArgInfo("pt2", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)) &&
        jsopencv_to_safe(info, pyobj_line_type, line_type, ArgInfo("line_type", 0)) &&
        jsopencv_to_safe(info, pyobj_shift, shift, ArgInfo("shift", 0)) &&
        jsopencv_to_safe(info, pyobj_tipLength, tipLength, ArgInfo("tipLength", 0)))
    {
        ERRWRAP2(cv::arrowedLine(img, pt1, pt2, color, thickness, line_type, shift, tipLength));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_pt1 = NULL;
    Point pt1;
    Napi::Value* pyobj_pt2 = NULL;
    Point pt2;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=1;
    Napi::Value* pyobj_line_type = NULL;
    int line_type=8;
    Napi::Value* pyobj_shift = NULL;
    int shift=0;
    Napi::Value* pyobj_tipLength = NULL;
    double tipLength=0.1;

    const char* keywords[] = { "img", "pt1", "pt2", "color", "thickness", "line_type", "shift", "tipLength", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOO:arrowedLine", (char**)keywords, &pyobj_img, &pyobj_pt1, &pyobj_pt2, &pyobj_color, &pyobj_thickness, &pyobj_line_type, &pyobj_shift, &pyobj_tipLength) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_pt1, pt1, ArgInfo("pt1", 0)) &&
        jsopencv_to_safe(info, pyobj_pt2, pt2, ArgInfo("pt2", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)) &&
        jsopencv_to_safe(info, pyobj_line_type, line_type, ArgInfo("line_type", 0)) &&
        jsopencv_to_safe(info, pyobj_shift, shift, ArgInfo("shift", 0)) &&
        jsopencv_to_safe(info, pyobj_tipLength, tipLength, ArgInfo("tipLength", 0)))
    {
        ERRWRAP2(cv::arrowedLine(img, pt1, pt2, color, thickness, line_type, shift, tipLength));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("arrowedLine");

    return NULL;
}

static Napi::Value pyopencv_cv_batchDistance(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    Mat src1;
    Napi::Value* pyobj_src2 = NULL;
    Mat src2;
    Napi::Value* pyobj_dist = NULL;
    Mat dist;
    Napi::Value* pyobj_dtype = NULL;
    int dtype=0;
    Napi::Value* pyobj_nidx = NULL;
    Mat nidx;
    Napi::Value* pyobj_normType = NULL;
    int normType=NORM_L2;
    Napi::Value* pyobj_K = NULL;
    int K=0;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Napi::Value* pyobj_update = NULL;
    int update=0;
    Napi::Value* pyobj_crosscheck = NULL;
    bool crosscheck=false;

    const char* keywords[] = { "src1", "src2", "dtype", "dist", "nidx", "normType", "K", "mask", "update", "crosscheck", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOOOOO:batchDistance", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dtype, &pyobj_dist, &pyobj_nidx, &pyobj_normType, &pyobj_K, &pyobj_mask, &pyobj_update, &pyobj_crosscheck) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dist, dist, ArgInfo("dist", 1)) &&
        jsopencv_to_safe(info, pyobj_dtype, dtype, ArgInfo("dtype", 0)) &&
        jsopencv_to_safe(info, pyobj_nidx, nidx, ArgInfo("nidx", 1)) &&
        jsopencv_to_safe(info, pyobj_normType, normType, ArgInfo("normType", 0)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)) &&
        jsopencv_to_safe(info, pyobj_update, update, ArgInfo("update", 0)) &&
        jsopencv_to_safe(info, pyobj_crosscheck, crosscheck, ArgInfo("crosscheck", 0)))
    {
        ERRWRAP2(cv::batchDistance(src1, src2, dist, dtype, nidx, normType, K, mask, update, crosscheck));
        return Py_BuildValue("(NN)", jsopencv_from(dist), jsopencv_from(nidx));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    UMat src1;
    Napi::Value* pyobj_src2 = NULL;
    UMat src2;
    Napi::Value* pyobj_dist = NULL;
    UMat dist;
    Napi::Value* pyobj_dtype = NULL;
    int dtype=0;
    Napi::Value* pyobj_nidx = NULL;
    UMat nidx;
    Napi::Value* pyobj_normType = NULL;
    int normType=NORM_L2;
    Napi::Value* pyobj_K = NULL;
    int K=0;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    Napi::Value* pyobj_update = NULL;
    int update=0;
    Napi::Value* pyobj_crosscheck = NULL;
    bool crosscheck=false;

    const char* keywords[] = { "src1", "src2", "dtype", "dist", "nidx", "normType", "K", "mask", "update", "crosscheck", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOOOOO:batchDistance", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dtype, &pyobj_dist, &pyobj_nidx, &pyobj_normType, &pyobj_K, &pyobj_mask, &pyobj_update, &pyobj_crosscheck) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dist, dist, ArgInfo("dist", 1)) &&
        jsopencv_to_safe(info, pyobj_dtype, dtype, ArgInfo("dtype", 0)) &&
        jsopencv_to_safe(info, pyobj_nidx, nidx, ArgInfo("nidx", 1)) &&
        jsopencv_to_safe(info, pyobj_normType, normType, ArgInfo("normType", 0)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)) &&
        jsopencv_to_safe(info, pyobj_update, update, ArgInfo("update", 0)) &&
        jsopencv_to_safe(info, pyobj_crosscheck, crosscheck, ArgInfo("crosscheck", 0)))
    {
        ERRWRAP2(cv::batchDistance(src1, src2, dist, dtype, nidx, normType, K, mask, update, crosscheck));
        return Py_BuildValue("(NN)", jsopencv_from(dist), jsopencv_from(nidx));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("batchDistance");

    return NULL;
}

static Napi::Value pyopencv_cv_bilateralFilter(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_d = NULL;
    int d=0;
    Napi::Value* pyobj_sigmaColor = NULL;
    double sigmaColor=0;
    Napi::Value* pyobj_sigmaSpace = NULL;
    double sigmaSpace=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "d", "sigmaColor", "sigmaSpace", "dst", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OO:bilateralFilter", (char**)keywords, &pyobj_src, &pyobj_d, &pyobj_sigmaColor, &pyobj_sigmaSpace, &pyobj_dst, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_d, d, ArgInfo("d", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaColor, sigmaColor, ArgInfo("sigmaColor", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaSpace, sigmaSpace, ArgInfo("sigmaSpace", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::bilateralFilter(src, dst, d, sigmaColor, sigmaSpace, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_d = NULL;
    int d=0;
    Napi::Value* pyobj_sigmaColor = NULL;
    double sigmaColor=0;
    Napi::Value* pyobj_sigmaSpace = NULL;
    double sigmaSpace=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "d", "sigmaColor", "sigmaSpace", "dst", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OO:bilateralFilter", (char**)keywords, &pyobj_src, &pyobj_d, &pyobj_sigmaColor, &pyobj_sigmaSpace, &pyobj_dst, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_d, d, ArgInfo("d", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaColor, sigmaColor, ArgInfo("sigmaColor", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaSpace, sigmaSpace, ArgInfo("sigmaSpace", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::bilateralFilter(src, dst, d, sigmaColor, sigmaSpace, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("bilateralFilter");

    return NULL;
}

static Napi::Value pyopencv_cv_bitwise_and(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    Mat src1;
    Napi::Value* pyobj_src2 = NULL;
    Mat src2;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;

    const char* keywords[] = { "src1", "src2", "dst", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:bitwise_and", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::bitwise_and(src1, src2, dst, mask));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    UMat src1;
    Napi::Value* pyobj_src2 = NULL;
    UMat src2;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;

    const char* keywords[] = { "src1", "src2", "dst", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:bitwise_and", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::bitwise_and(src1, src2, dst, mask));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("bitwise_and");

    return NULL;
}

static Napi::Value pyopencv_cv_bitwise_not(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;

    const char* keywords[] = { "src", "dst", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:bitwise_not", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::bitwise_not(src, dst, mask));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;

    const char* keywords[] = { "src", "dst", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:bitwise_not", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::bitwise_not(src, dst, mask));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("bitwise_not");

    return NULL;
}

static Napi::Value pyopencv_cv_bitwise_or(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    Mat src1;
    Napi::Value* pyobj_src2 = NULL;
    Mat src2;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;

    const char* keywords[] = { "src1", "src2", "dst", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:bitwise_or", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::bitwise_or(src1, src2, dst, mask));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    UMat src1;
    Napi::Value* pyobj_src2 = NULL;
    UMat src2;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;

    const char* keywords[] = { "src1", "src2", "dst", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:bitwise_or", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::bitwise_or(src1, src2, dst, mask));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("bitwise_or");

    return NULL;
}

static Napi::Value pyopencv_cv_bitwise_xor(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    Mat src1;
    Napi::Value* pyobj_src2 = NULL;
    Mat src2;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;

    const char* keywords[] = { "src1", "src2", "dst", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:bitwise_xor", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::bitwise_xor(src1, src2, dst, mask));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    UMat src1;
    Napi::Value* pyobj_src2 = NULL;
    UMat src2;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;

    const char* keywords[] = { "src1", "src2", "dst", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:bitwise_xor", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::bitwise_xor(src1, src2, dst, mask));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("bitwise_xor");

    return NULL;
}

static Napi::Value pyopencv_cv_blendLinear(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    Mat src1;
    Napi::Value* pyobj_src2 = NULL;
    Mat src2;
    Napi::Value* pyobj_weights1 = NULL;
    Mat weights1;
    Napi::Value* pyobj_weights2 = NULL;
    Mat weights2;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;

    const char* keywords[] = { "src1", "src2", "weights1", "weights2", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:blendLinear", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_weights1, &pyobj_weights2, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_weights1, weights1, ArgInfo("weights1", 0)) &&
        jsopencv_to_safe(info, pyobj_weights2, weights2, ArgInfo("weights2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::blendLinear(src1, src2, weights1, weights2, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    UMat src1;
    Napi::Value* pyobj_src2 = NULL;
    UMat src2;
    Napi::Value* pyobj_weights1 = NULL;
    UMat weights1;
    Napi::Value* pyobj_weights2 = NULL;
    UMat weights2;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;

    const char* keywords[] = { "src1", "src2", "weights1", "weights2", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:blendLinear", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_weights1, &pyobj_weights2, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_weights1, weights1, ArgInfo("weights1", 0)) &&
        jsopencv_to_safe(info, pyobj_weights2, weights2, ArgInfo("weights2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::blendLinear(src1, src2, weights1, weights2, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("blendLinear");

    return NULL;
}

static Napi::Value pyopencv_cv_blur(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_ksize = NULL;
    Size ksize;
    Napi::Value* pyobj_anchor = NULL;
    Point anchor=Point(-1,-1);
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "ksize", "dst", "anchor", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:blur", (char**)keywords, &pyobj_src, &pyobj_ksize, &pyobj_dst, &pyobj_anchor, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_anchor, anchor, ArgInfo("anchor", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::blur(src, dst, ksize, anchor, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_ksize = NULL;
    Size ksize;
    Napi::Value* pyobj_anchor = NULL;
    Point anchor=Point(-1,-1);
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "ksize", "dst", "anchor", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:blur", (char**)keywords, &pyobj_src, &pyobj_ksize, &pyobj_dst, &pyobj_anchor, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_anchor, anchor, ArgInfo("anchor", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::blur(src, dst, ksize, anchor, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("blur");

    return NULL;
}

static Napi::Value pyopencv_cv_borderInterpolate(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_p = NULL;
    int p=0;
    Napi::Value* pyobj_len = NULL;
    int len=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=0;
    int retval;

    const char* keywords[] = { "p", "len", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:borderInterpolate", (char**)keywords, &pyobj_p, &pyobj_len, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_p, p, ArgInfo("p", 0)) &&
        jsopencv_to_safe(info, pyobj_len, len, ArgInfo("len", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(retval = cv::borderInterpolate(p, len, borderType));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_boundingRect(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_array = NULL;
    Mat array;
    Rect retval;

    const char* keywords[] = { "array", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:boundingRect", (char**)keywords, &pyobj_array) &&
        jsopencv_to_safe(info, pyobj_array, array, ArgInfo("array", 0)))
    {
        ERRWRAP2(retval = cv::boundingRect(array));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_array = NULL;
    UMat array;
    Rect retval;

    const char* keywords[] = { "array", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:boundingRect", (char**)keywords, &pyobj_array) &&
        jsopencv_to_safe(info, pyobj_array, array, ArgInfo("array", 0)))
    {
        ERRWRAP2(retval = cv::boundingRect(array));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("boundingRect");

    return NULL;
}

static Napi::Value pyopencv_cv_boxFilter(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=0;
    Napi::Value* pyobj_ksize = NULL;
    Size ksize;
    Napi::Value* pyobj_anchor = NULL;
    Point anchor=Point(-1,-1);
    Napi::Value* pyobj_normalize = NULL;
    bool normalize=true;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "ddepth", "ksize", "dst", "anchor", "normalize", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:boxFilter", (char**)keywords, &pyobj_src, &pyobj_ddepth, &pyobj_ksize, &pyobj_dst, &pyobj_anchor, &pyobj_normalize, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_anchor, anchor, ArgInfo("anchor", 0)) &&
        jsopencv_to_safe(info, pyobj_normalize, normalize, ArgInfo("normalize", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::boxFilter(src, dst, ddepth, ksize, anchor, normalize, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=0;
    Napi::Value* pyobj_ksize = NULL;
    Size ksize;
    Napi::Value* pyobj_anchor = NULL;
    Point anchor=Point(-1,-1);
    Napi::Value* pyobj_normalize = NULL;
    bool normalize=true;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "ddepth", "ksize", "dst", "anchor", "normalize", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:boxFilter", (char**)keywords, &pyobj_src, &pyobj_ddepth, &pyobj_ksize, &pyobj_dst, &pyobj_anchor, &pyobj_normalize, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_anchor, anchor, ArgInfo("anchor", 0)) &&
        jsopencv_to_safe(info, pyobj_normalize, normalize, ArgInfo("normalize", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::boxFilter(src, dst, ddepth, ksize, anchor, normalize, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("boxFilter");

    return NULL;
}

static Napi::Value pyopencv_cv_boxPoints(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_box = NULL;
    RotatedRect box;
    Napi::Value* pyobj_points = NULL;
    Mat points;

    const char* keywords[] = { "box", "points", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:boxPoints", (char**)keywords, &pyobj_box, &pyobj_points) &&
        jsopencv_to_safe(info, pyobj_box, box, ArgInfo("box", 0)) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 1)))
    {
        ERRWRAP2(cv::boxPoints(box, points));
        return jsopencv_from(points);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_box = NULL;
    RotatedRect box;
    Napi::Value* pyobj_points = NULL;
    UMat points;

    const char* keywords[] = { "box", "points", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:boxPoints", (char**)keywords, &pyobj_box, &pyobj_points) &&
        jsopencv_to_safe(info, pyobj_box, box, ArgInfo("box", 0)) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 1)))
    {
        ERRWRAP2(cv::boxPoints(box, points));
        return jsopencv_from(points);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("boxPoints");

    return NULL;
}

static Napi::Value pyopencv_cv_buildOpticalFlowPyramid(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_pyramid = NULL;
    vector_Mat pyramid;
    Napi::Value* pyobj_winSize = NULL;
    Size winSize;
    Napi::Value* pyobj_maxLevel = NULL;
    int maxLevel=0;
    Napi::Value* pyobj_withDerivatives = NULL;
    bool withDerivatives=true;
    Napi::Value* pyobj_pyrBorder = NULL;
    int pyrBorder=BORDER_REFLECT_101;
    Napi::Value* pyobj_derivBorder = NULL;
    int derivBorder=BORDER_CONSTANT;
    Napi::Value* pyobj_tryReuseInputImage = NULL;
    bool tryReuseInputImage=true;
    int retval;

    const char* keywords[] = { "img", "winSize", "maxLevel", "pyramid", "withDerivatives", "pyrBorder", "derivBorder", "tryReuseInputImage", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOOO:buildOpticalFlowPyramid", (char**)keywords, &pyobj_img, &pyobj_winSize, &pyobj_maxLevel, &pyobj_pyramid, &pyobj_withDerivatives, &pyobj_pyrBorder, &pyobj_derivBorder, &pyobj_tryReuseInputImage) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_pyramid, pyramid, ArgInfo("pyramid", 1)) &&
        jsopencv_to_safe(info, pyobj_winSize, winSize, ArgInfo("winSize", 0)) &&
        jsopencv_to_safe(info, pyobj_maxLevel, maxLevel, ArgInfo("maxLevel", 0)) &&
        jsopencv_to_safe(info, pyobj_withDerivatives, withDerivatives, ArgInfo("withDerivatives", 0)) &&
        jsopencv_to_safe(info, pyobj_pyrBorder, pyrBorder, ArgInfo("pyrBorder", 0)) &&
        jsopencv_to_safe(info, pyobj_derivBorder, derivBorder, ArgInfo("derivBorder", 0)) &&
        jsopencv_to_safe(info, pyobj_tryReuseInputImage, tryReuseInputImage, ArgInfo("tryReuseInputImage", 0)))
    {
        ERRWRAP2(retval = cv::buildOpticalFlowPyramid(img, pyramid, winSize, maxLevel, withDerivatives, pyrBorder, derivBorder, tryReuseInputImage));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(pyramid));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_pyramid = NULL;
    vector_UMat pyramid;
    Napi::Value* pyobj_winSize = NULL;
    Size winSize;
    Napi::Value* pyobj_maxLevel = NULL;
    int maxLevel=0;
    Napi::Value* pyobj_withDerivatives = NULL;
    bool withDerivatives=true;
    Napi::Value* pyobj_pyrBorder = NULL;
    int pyrBorder=BORDER_REFLECT_101;
    Napi::Value* pyobj_derivBorder = NULL;
    int derivBorder=BORDER_CONSTANT;
    Napi::Value* pyobj_tryReuseInputImage = NULL;
    bool tryReuseInputImage=true;
    int retval;

    const char* keywords[] = { "img", "winSize", "maxLevel", "pyramid", "withDerivatives", "pyrBorder", "derivBorder", "tryReuseInputImage", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOOO:buildOpticalFlowPyramid", (char**)keywords, &pyobj_img, &pyobj_winSize, &pyobj_maxLevel, &pyobj_pyramid, &pyobj_withDerivatives, &pyobj_pyrBorder, &pyobj_derivBorder, &pyobj_tryReuseInputImage) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_pyramid, pyramid, ArgInfo("pyramid", 1)) &&
        jsopencv_to_safe(info, pyobj_winSize, winSize, ArgInfo("winSize", 0)) &&
        jsopencv_to_safe(info, pyobj_maxLevel, maxLevel, ArgInfo("maxLevel", 0)) &&
        jsopencv_to_safe(info, pyobj_withDerivatives, withDerivatives, ArgInfo("withDerivatives", 0)) &&
        jsopencv_to_safe(info, pyobj_pyrBorder, pyrBorder, ArgInfo("pyrBorder", 0)) &&
        jsopencv_to_safe(info, pyobj_derivBorder, derivBorder, ArgInfo("derivBorder", 0)) &&
        jsopencv_to_safe(info, pyobj_tryReuseInputImage, tryReuseInputImage, ArgInfo("tryReuseInputImage", 0)))
    {
        ERRWRAP2(retval = cv::buildOpticalFlowPyramid(img, pyramid, winSize, maxLevel, withDerivatives, pyrBorder, derivBorder, tryReuseInputImage));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(pyramid));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("buildOpticalFlowPyramid");

    return NULL;
}

static Napi::Value pyopencv_cv_calcBackProject(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_images = NULL;
    vector_Mat images;
    Napi::Value* pyobj_channels = NULL;
    vector_int channels;
    Napi::Value* pyobj_hist = NULL;
    Mat hist;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_ranges = NULL;
    vector_float ranges;
    Napi::Value* pyobj_scale = NULL;
    double scale=0;

    const char* keywords[] = { "images", "channels", "hist", "ranges", "scale", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|O:calcBackProject", (char**)keywords, &pyobj_images, &pyobj_channels, &pyobj_hist, &pyobj_ranges, &pyobj_scale, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_images, images, ArgInfo("images", 0)) &&
        jsopencv_to_safe(info, pyobj_channels, channels, ArgInfo("channels", 0)) &&
        jsopencv_to_safe(info, pyobj_hist, hist, ArgInfo("hist", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ranges, ranges, ArgInfo("ranges", 0)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)))
    {
        ERRWRAP2(cv::calcBackProject(images, channels, hist, dst, ranges, scale));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_images = NULL;
    vector_UMat images;
    Napi::Value* pyobj_channels = NULL;
    vector_int channels;
    Napi::Value* pyobj_hist = NULL;
    UMat hist;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_ranges = NULL;
    vector_float ranges;
    Napi::Value* pyobj_scale = NULL;
    double scale=0;

    const char* keywords[] = { "images", "channels", "hist", "ranges", "scale", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|O:calcBackProject", (char**)keywords, &pyobj_images, &pyobj_channels, &pyobj_hist, &pyobj_ranges, &pyobj_scale, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_images, images, ArgInfo("images", 0)) &&
        jsopencv_to_safe(info, pyobj_channels, channels, ArgInfo("channels", 0)) &&
        jsopencv_to_safe(info, pyobj_hist, hist, ArgInfo("hist", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ranges, ranges, ArgInfo("ranges", 0)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)))
    {
        ERRWRAP2(cv::calcBackProject(images, channels, hist, dst, ranges, scale));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("calcBackProject");

    return NULL;
}

static Napi::Value pyopencv_cv_calcCovarMatrix(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_samples = NULL;
    Mat samples;
    Napi::Value* pyobj_covar = NULL;
    Mat covar;
    Napi::Value* pyobj_mean = NULL;
    Mat mean;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_ctype = NULL;
    int ctype=CV_64F;

    const char* keywords[] = { "samples", "mean", "flags", "covar", "ctype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:calcCovarMatrix", (char**)keywords, &pyobj_samples, &pyobj_mean, &pyobj_flags, &pyobj_covar, &pyobj_ctype) &&
        jsopencv_to_safe(info, pyobj_samples, samples, ArgInfo("samples", 0)) &&
        jsopencv_to_safe(info, pyobj_covar, covar, ArgInfo("covar", 1)) &&
        jsopencv_to_safe(info, pyobj_mean, mean, ArgInfo("mean", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_ctype, ctype, ArgInfo("ctype", 0)))
    {
        ERRWRAP2(cv::calcCovarMatrix(samples, covar, mean, flags, ctype));
        return Py_BuildValue("(NN)", jsopencv_from(covar), jsopencv_from(mean));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_samples = NULL;
    UMat samples;
    Napi::Value* pyobj_covar = NULL;
    UMat covar;
    Napi::Value* pyobj_mean = NULL;
    UMat mean;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_ctype = NULL;
    int ctype=CV_64F;

    const char* keywords[] = { "samples", "mean", "flags", "covar", "ctype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:calcCovarMatrix", (char**)keywords, &pyobj_samples, &pyobj_mean, &pyobj_flags, &pyobj_covar, &pyobj_ctype) &&
        jsopencv_to_safe(info, pyobj_samples, samples, ArgInfo("samples", 0)) &&
        jsopencv_to_safe(info, pyobj_covar, covar, ArgInfo("covar", 1)) &&
        jsopencv_to_safe(info, pyobj_mean, mean, ArgInfo("mean", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_ctype, ctype, ArgInfo("ctype", 0)))
    {
        ERRWRAP2(cv::calcCovarMatrix(samples, covar, mean, flags, ctype));
        return Py_BuildValue("(NN)", jsopencv_from(covar), jsopencv_from(mean));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("calcCovarMatrix");

    return NULL;
}

static Napi::Value pyopencv_cv_calcHist(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_images = NULL;
    vector_Mat images;
    Napi::Value* pyobj_channels = NULL;
    vector_int channels;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Napi::Value* pyobj_hist = NULL;
    Mat hist;
    Napi::Value* pyobj_histSize = NULL;
    vector_int histSize;
    Napi::Value* pyobj_ranges = NULL;
    vector_float ranges;
    Napi::Value* pyobj_accumulate = NULL;
    bool accumulate=false;

    const char* keywords[] = { "images", "channels", "mask", "histSize", "ranges", "hist", "accumulate", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OO:calcHist", (char**)keywords, &pyobj_images, &pyobj_channels, &pyobj_mask, &pyobj_histSize, &pyobj_ranges, &pyobj_hist, &pyobj_accumulate) &&
        jsopencv_to_safe(info, pyobj_images, images, ArgInfo("images", 0)) &&
        jsopencv_to_safe(info, pyobj_channels, channels, ArgInfo("channels", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)) &&
        jsopencv_to_safe(info, pyobj_hist, hist, ArgInfo("hist", 1)) &&
        jsopencv_to_safe(info, pyobj_histSize, histSize, ArgInfo("histSize", 0)) &&
        jsopencv_to_safe(info, pyobj_ranges, ranges, ArgInfo("ranges", 0)) &&
        jsopencv_to_safe(info, pyobj_accumulate, accumulate, ArgInfo("accumulate", 0)))
    {
        ERRWRAP2(cv::calcHist(images, channels, mask, hist, histSize, ranges, accumulate));
        return jsopencv_from(hist);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_images = NULL;
    vector_UMat images;
    Napi::Value* pyobj_channels = NULL;
    vector_int channels;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    Napi::Value* pyobj_hist = NULL;
    UMat hist;
    Napi::Value* pyobj_histSize = NULL;
    vector_int histSize;
    Napi::Value* pyobj_ranges = NULL;
    vector_float ranges;
    Napi::Value* pyobj_accumulate = NULL;
    bool accumulate=false;

    const char* keywords[] = { "images", "channels", "mask", "histSize", "ranges", "hist", "accumulate", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OO:calcHist", (char**)keywords, &pyobj_images, &pyobj_channels, &pyobj_mask, &pyobj_histSize, &pyobj_ranges, &pyobj_hist, &pyobj_accumulate) &&
        jsopencv_to_safe(info, pyobj_images, images, ArgInfo("images", 0)) &&
        jsopencv_to_safe(info, pyobj_channels, channels, ArgInfo("channels", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)) &&
        jsopencv_to_safe(info, pyobj_hist, hist, ArgInfo("hist", 1)) &&
        jsopencv_to_safe(info, pyobj_histSize, histSize, ArgInfo("histSize", 0)) &&
        jsopencv_to_safe(info, pyobj_ranges, ranges, ArgInfo("ranges", 0)) &&
        jsopencv_to_safe(info, pyobj_accumulate, accumulate, ArgInfo("accumulate", 0)))
    {
        ERRWRAP2(cv::calcHist(images, channels, mask, hist, histSize, ranges, accumulate));
        return jsopencv_from(hist);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("calcHist");

    return NULL;
}

static Napi::Value pyopencv_cv_calcOpticalFlowFarneback(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_prev = NULL;
    Mat prev;
    Napi::Value* pyobj_next = NULL;
    Mat next;
    Napi::Value* pyobj_flow = NULL;
    Mat flow;
    Napi::Value* pyobj_pyr_scale = NULL;
    double pyr_scale=0;
    Napi::Value* pyobj_levels = NULL;
    int levels=0;
    Napi::Value* pyobj_winsize = NULL;
    int winsize=0;
    Napi::Value* pyobj_iterations = NULL;
    int iterations=0;
    Napi::Value* pyobj_poly_n = NULL;
    int poly_n=0;
    Napi::Value* pyobj_poly_sigma = NULL;
    double poly_sigma=0;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;

    const char* keywords[] = { "prev", "next", "flow", "pyr_scale", "levels", "winsize", "iterations", "poly_n", "poly_sigma", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOOOOO:calcOpticalFlowFarneback", (char**)keywords, &pyobj_prev, &pyobj_next, &pyobj_flow, &pyobj_pyr_scale, &pyobj_levels, &pyobj_winsize, &pyobj_iterations, &pyobj_poly_n, &pyobj_poly_sigma, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_prev, prev, ArgInfo("prev", 0)) &&
        jsopencv_to_safe(info, pyobj_next, next, ArgInfo("next", 0)) &&
        jsopencv_to_safe(info, pyobj_flow, flow, ArgInfo("flow", 1)) &&
        jsopencv_to_safe(info, pyobj_pyr_scale, pyr_scale, ArgInfo("pyr_scale", 0)) &&
        jsopencv_to_safe(info, pyobj_levels, levels, ArgInfo("levels", 0)) &&
        jsopencv_to_safe(info, pyobj_winsize, winsize, ArgInfo("winsize", 0)) &&
        jsopencv_to_safe(info, pyobj_iterations, iterations, ArgInfo("iterations", 0)) &&
        jsopencv_to_safe(info, pyobj_poly_n, poly_n, ArgInfo("poly_n", 0)) &&
        jsopencv_to_safe(info, pyobj_poly_sigma, poly_sigma, ArgInfo("poly_sigma", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::calcOpticalFlowFarneback(prev, next, flow, pyr_scale, levels, winsize, iterations, poly_n, poly_sigma, flags));
        return jsopencv_from(flow);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_prev = NULL;
    UMat prev;
    Napi::Value* pyobj_next = NULL;
    UMat next;
    Napi::Value* pyobj_flow = NULL;
    UMat flow;
    Napi::Value* pyobj_pyr_scale = NULL;
    double pyr_scale=0;
    Napi::Value* pyobj_levels = NULL;
    int levels=0;
    Napi::Value* pyobj_winsize = NULL;
    int winsize=0;
    Napi::Value* pyobj_iterations = NULL;
    int iterations=0;
    Napi::Value* pyobj_poly_n = NULL;
    int poly_n=0;
    Napi::Value* pyobj_poly_sigma = NULL;
    double poly_sigma=0;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;

    const char* keywords[] = { "prev", "next", "flow", "pyr_scale", "levels", "winsize", "iterations", "poly_n", "poly_sigma", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOOOOO:calcOpticalFlowFarneback", (char**)keywords, &pyobj_prev, &pyobj_next, &pyobj_flow, &pyobj_pyr_scale, &pyobj_levels, &pyobj_winsize, &pyobj_iterations, &pyobj_poly_n, &pyobj_poly_sigma, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_prev, prev, ArgInfo("prev", 0)) &&
        jsopencv_to_safe(info, pyobj_next, next, ArgInfo("next", 0)) &&
        jsopencv_to_safe(info, pyobj_flow, flow, ArgInfo("flow", 1)) &&
        jsopencv_to_safe(info, pyobj_pyr_scale, pyr_scale, ArgInfo("pyr_scale", 0)) &&
        jsopencv_to_safe(info, pyobj_levels, levels, ArgInfo("levels", 0)) &&
        jsopencv_to_safe(info, pyobj_winsize, winsize, ArgInfo("winsize", 0)) &&
        jsopencv_to_safe(info, pyobj_iterations, iterations, ArgInfo("iterations", 0)) &&
        jsopencv_to_safe(info, pyobj_poly_n, poly_n, ArgInfo("poly_n", 0)) &&
        jsopencv_to_safe(info, pyobj_poly_sigma, poly_sigma, ArgInfo("poly_sigma", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::calcOpticalFlowFarneback(prev, next, flow, pyr_scale, levels, winsize, iterations, poly_n, poly_sigma, flags));
        return jsopencv_from(flow);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("calcOpticalFlowFarneback");

    return NULL;
}

static Napi::Value pyopencv_cv_calcOpticalFlowPyrLK(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_prevImg = NULL;
    Mat prevImg;
    Napi::Value* pyobj_nextImg = NULL;
    Mat nextImg;
    Napi::Value* pyobj_prevPts = NULL;
    Mat prevPts;
    Napi::Value* pyobj_nextPts = NULL;
    Mat nextPts;
    Napi::Value* pyobj_status = NULL;
    Mat status;
    Napi::Value* pyobj_err = NULL;
    Mat err;
    Napi::Value* pyobj_winSize = NULL;
    Size winSize=Size(21,21);
    Napi::Value* pyobj_maxLevel = NULL;
    int maxLevel=3;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 0.01);
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_minEigThreshold = NULL;
    double minEigThreshold=1e-4;

    const char* keywords[] = { "prevImg", "nextImg", "prevPts", "nextPts", "status", "err", "winSize", "maxLevel", "criteria", "flags", "minEigThreshold", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOOOOO:calcOpticalFlowPyrLK", (char**)keywords, &pyobj_prevImg, &pyobj_nextImg, &pyobj_prevPts, &pyobj_nextPts, &pyobj_status, &pyobj_err, &pyobj_winSize, &pyobj_maxLevel, &pyobj_criteria, &pyobj_flags, &pyobj_minEigThreshold) &&
        jsopencv_to_safe(info, pyobj_prevImg, prevImg, ArgInfo("prevImg", 0)) &&
        jsopencv_to_safe(info, pyobj_nextImg, nextImg, ArgInfo("nextImg", 0)) &&
        jsopencv_to_safe(info, pyobj_prevPts, prevPts, ArgInfo("prevPts", 0)) &&
        jsopencv_to_safe(info, pyobj_nextPts, nextPts, ArgInfo("nextPts", 1)) &&
        jsopencv_to_safe(info, pyobj_status, status, ArgInfo("status", 1)) &&
        jsopencv_to_safe(info, pyobj_err, err, ArgInfo("err", 1)) &&
        jsopencv_to_safe(info, pyobj_winSize, winSize, ArgInfo("winSize", 0)) &&
        jsopencv_to_safe(info, pyobj_maxLevel, maxLevel, ArgInfo("maxLevel", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_minEigThreshold, minEigThreshold, ArgInfo("minEigThreshold", 0)))
    {
        ERRWRAP2(cv::calcOpticalFlowPyrLK(prevImg, nextImg, prevPts, nextPts, status, err, winSize, maxLevel, criteria, flags, minEigThreshold));
        return Py_BuildValue("(NNN)", jsopencv_from(nextPts), jsopencv_from(status), jsopencv_from(err));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_prevImg = NULL;
    UMat prevImg;
    Napi::Value* pyobj_nextImg = NULL;
    UMat nextImg;
    Napi::Value* pyobj_prevPts = NULL;
    UMat prevPts;
    Napi::Value* pyobj_nextPts = NULL;
    UMat nextPts;
    Napi::Value* pyobj_status = NULL;
    UMat status;
    Napi::Value* pyobj_err = NULL;
    UMat err;
    Napi::Value* pyobj_winSize = NULL;
    Size winSize=Size(21,21);
    Napi::Value* pyobj_maxLevel = NULL;
    int maxLevel=3;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 0.01);
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_minEigThreshold = NULL;
    double minEigThreshold=1e-4;

    const char* keywords[] = { "prevImg", "nextImg", "prevPts", "nextPts", "status", "err", "winSize", "maxLevel", "criteria", "flags", "minEigThreshold", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOOOOO:calcOpticalFlowPyrLK", (char**)keywords, &pyobj_prevImg, &pyobj_nextImg, &pyobj_prevPts, &pyobj_nextPts, &pyobj_status, &pyobj_err, &pyobj_winSize, &pyobj_maxLevel, &pyobj_criteria, &pyobj_flags, &pyobj_minEigThreshold) &&
        jsopencv_to_safe(info, pyobj_prevImg, prevImg, ArgInfo("prevImg", 0)) &&
        jsopencv_to_safe(info, pyobj_nextImg, nextImg, ArgInfo("nextImg", 0)) &&
        jsopencv_to_safe(info, pyobj_prevPts, prevPts, ArgInfo("prevPts", 0)) &&
        jsopencv_to_safe(info, pyobj_nextPts, nextPts, ArgInfo("nextPts", 1)) &&
        jsopencv_to_safe(info, pyobj_status, status, ArgInfo("status", 1)) &&
        jsopencv_to_safe(info, pyobj_err, err, ArgInfo("err", 1)) &&
        jsopencv_to_safe(info, pyobj_winSize, winSize, ArgInfo("winSize", 0)) &&
        jsopencv_to_safe(info, pyobj_maxLevel, maxLevel, ArgInfo("maxLevel", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_minEigThreshold, minEigThreshold, ArgInfo("minEigThreshold", 0)))
    {
        ERRWRAP2(cv::calcOpticalFlowPyrLK(prevImg, nextImg, prevPts, nextPts, status, err, winSize, maxLevel, criteria, flags, minEigThreshold));
        return Py_BuildValue("(NNN)", jsopencv_from(nextPts), jsopencv_from(status), jsopencv_from(err));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("calcOpticalFlowPyrLK");

    return NULL;
}

static Napi::Value pyopencv_cv_calibrateCamera(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_objectPoints = NULL;
    vector_Mat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    vector_Mat imagePoints;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    Mat distCoeffs;
    Napi::Value* pyobj_rvecs = NULL;
    vector_Mat rvecs;
    Napi::Value* pyobj_tvecs = NULL;
    vector_Mat tvecs;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON);
    double retval;

    const char* keywords[] = { "objectPoints", "imagePoints", "imageSize", "cameraMatrix", "distCoeffs", "rvecs", "tvecs", "flags", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OOOO:calibrateCamera", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_imageSize, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_rvecs, &pyobj_tvecs, &pyobj_flags, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 1)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 1)) &&
        jsopencv_to_safe(info, pyobj_rvecs, rvecs, ArgInfo("rvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_tvecs, tvecs, ArgInfo("tvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(retval = cv::calibrateCamera(objectPoints, imagePoints, imageSize, cameraMatrix, distCoeffs, rvecs, tvecs, flags, criteria));
        return Py_BuildValue("(NNNNN)", jsopencv_from(retval), jsopencv_from(cameraMatrix), jsopencv_from(distCoeffs), jsopencv_from(rvecs), jsopencv_from(tvecs));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_objectPoints = NULL;
    vector_UMat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    vector_UMat imagePoints;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    UMat distCoeffs;
    Napi::Value* pyobj_rvecs = NULL;
    vector_UMat rvecs;
    Napi::Value* pyobj_tvecs = NULL;
    vector_UMat tvecs;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON);
    double retval;

    const char* keywords[] = { "objectPoints", "imagePoints", "imageSize", "cameraMatrix", "distCoeffs", "rvecs", "tvecs", "flags", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OOOO:calibrateCamera", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_imageSize, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_rvecs, &pyobj_tvecs, &pyobj_flags, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 1)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 1)) &&
        jsopencv_to_safe(info, pyobj_rvecs, rvecs, ArgInfo("rvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_tvecs, tvecs, ArgInfo("tvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(retval = cv::calibrateCamera(objectPoints, imagePoints, imageSize, cameraMatrix, distCoeffs, rvecs, tvecs, flags, criteria));
        return Py_BuildValue("(NNNNN)", jsopencv_from(retval), jsopencv_from(cameraMatrix), jsopencv_from(distCoeffs), jsopencv_from(rvecs), jsopencv_from(tvecs));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("calibrateCamera");

    return NULL;
}

static Napi::Value pyopencv_cv_calibrateCameraExtended(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_objectPoints = NULL;
    vector_Mat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    vector_Mat imagePoints;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    Mat distCoeffs;
    Napi::Value* pyobj_rvecs = NULL;
    vector_Mat rvecs;
    Napi::Value* pyobj_tvecs = NULL;
    vector_Mat tvecs;
    Napi::Value* pyobj_stdDeviationsIntrinsics = NULL;
    Mat stdDeviationsIntrinsics;
    Napi::Value* pyobj_stdDeviationsExtrinsics = NULL;
    Mat stdDeviationsExtrinsics;
    Napi::Value* pyobj_perViewErrors = NULL;
    Mat perViewErrors;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON);
    double retval;

    const char* keywords[] = { "objectPoints", "imagePoints", "imageSize", "cameraMatrix", "distCoeffs", "rvecs", "tvecs", "stdDeviationsIntrinsics", "stdDeviationsExtrinsics", "perViewErrors", "flags", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OOOOOOO:calibrateCameraExtended", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_imageSize, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_rvecs, &pyobj_tvecs, &pyobj_stdDeviationsIntrinsics, &pyobj_stdDeviationsExtrinsics, &pyobj_perViewErrors, &pyobj_flags, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 1)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 1)) &&
        jsopencv_to_safe(info, pyobj_rvecs, rvecs, ArgInfo("rvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_tvecs, tvecs, ArgInfo("tvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_stdDeviationsIntrinsics, stdDeviationsIntrinsics, ArgInfo("stdDeviationsIntrinsics", 1)) &&
        jsopencv_to_safe(info, pyobj_stdDeviationsExtrinsics, stdDeviationsExtrinsics, ArgInfo("stdDeviationsExtrinsics", 1)) &&
        jsopencv_to_safe(info, pyobj_perViewErrors, perViewErrors, ArgInfo("perViewErrors", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(retval = cv::calibrateCamera(objectPoints, imagePoints, imageSize, cameraMatrix, distCoeffs, rvecs, tvecs, stdDeviationsIntrinsics, stdDeviationsExtrinsics, perViewErrors, flags, criteria));
        return Py_BuildValue("(NNNNNNNN)", jsopencv_from(retval), jsopencv_from(cameraMatrix), jsopencv_from(distCoeffs), jsopencv_from(rvecs), jsopencv_from(tvecs), jsopencv_from(stdDeviationsIntrinsics), jsopencv_from(stdDeviationsExtrinsics), jsopencv_from(perViewErrors));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_objectPoints = NULL;
    vector_UMat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    vector_UMat imagePoints;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    UMat distCoeffs;
    Napi::Value* pyobj_rvecs = NULL;
    vector_UMat rvecs;
    Napi::Value* pyobj_tvecs = NULL;
    vector_UMat tvecs;
    Napi::Value* pyobj_stdDeviationsIntrinsics = NULL;
    UMat stdDeviationsIntrinsics;
    Napi::Value* pyobj_stdDeviationsExtrinsics = NULL;
    UMat stdDeviationsExtrinsics;
    Napi::Value* pyobj_perViewErrors = NULL;
    UMat perViewErrors;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON);
    double retval;

    const char* keywords[] = { "objectPoints", "imagePoints", "imageSize", "cameraMatrix", "distCoeffs", "rvecs", "tvecs", "stdDeviationsIntrinsics", "stdDeviationsExtrinsics", "perViewErrors", "flags", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OOOOOOO:calibrateCameraExtended", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_imageSize, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_rvecs, &pyobj_tvecs, &pyobj_stdDeviationsIntrinsics, &pyobj_stdDeviationsExtrinsics, &pyobj_perViewErrors, &pyobj_flags, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 1)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 1)) &&
        jsopencv_to_safe(info, pyobj_rvecs, rvecs, ArgInfo("rvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_tvecs, tvecs, ArgInfo("tvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_stdDeviationsIntrinsics, stdDeviationsIntrinsics, ArgInfo("stdDeviationsIntrinsics", 1)) &&
        jsopencv_to_safe(info, pyobj_stdDeviationsExtrinsics, stdDeviationsExtrinsics, ArgInfo("stdDeviationsExtrinsics", 1)) &&
        jsopencv_to_safe(info, pyobj_perViewErrors, perViewErrors, ArgInfo("perViewErrors", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(retval = cv::calibrateCamera(objectPoints, imagePoints, imageSize, cameraMatrix, distCoeffs, rvecs, tvecs, stdDeviationsIntrinsics, stdDeviationsExtrinsics, perViewErrors, flags, criteria));
        return Py_BuildValue("(NNNNNNNN)", jsopencv_from(retval), jsopencv_from(cameraMatrix), jsopencv_from(distCoeffs), jsopencv_from(rvecs), jsopencv_from(tvecs), jsopencv_from(stdDeviationsIntrinsics), jsopencv_from(stdDeviationsExtrinsics), jsopencv_from(perViewErrors));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("calibrateCameraExtended");

    return NULL;
}

static Napi::Value pyopencv_cv_calibrateCameraRO(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_objectPoints = NULL;
    vector_Mat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    vector_Mat imagePoints;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_iFixedPoint = NULL;
    int iFixedPoint=0;
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    Mat distCoeffs;
    Napi::Value* pyobj_rvecs = NULL;
    vector_Mat rvecs;
    Napi::Value* pyobj_tvecs = NULL;
    vector_Mat tvecs;
    Napi::Value* pyobj_newObjPoints = NULL;
    Mat newObjPoints;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON);
    double retval;

    const char* keywords[] = { "objectPoints", "imagePoints", "imageSize", "iFixedPoint", "cameraMatrix", "distCoeffs", "rvecs", "tvecs", "newObjPoints", "flags", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OOOOO:calibrateCameraRO", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_imageSize, &pyobj_iFixedPoint, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_rvecs, &pyobj_tvecs, &pyobj_newObjPoints, &pyobj_flags, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_iFixedPoint, iFixedPoint, ArgInfo("iFixedPoint", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 1)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 1)) &&
        jsopencv_to_safe(info, pyobj_rvecs, rvecs, ArgInfo("rvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_tvecs, tvecs, ArgInfo("tvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_newObjPoints, newObjPoints, ArgInfo("newObjPoints", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(retval = cv::calibrateCameraRO(objectPoints, imagePoints, imageSize, iFixedPoint, cameraMatrix, distCoeffs, rvecs, tvecs, newObjPoints, flags, criteria));
        return Py_BuildValue("(NNNNNN)", jsopencv_from(retval), jsopencv_from(cameraMatrix), jsopencv_from(distCoeffs), jsopencv_from(rvecs), jsopencv_from(tvecs), jsopencv_from(newObjPoints));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_objectPoints = NULL;
    vector_UMat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    vector_UMat imagePoints;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_iFixedPoint = NULL;
    int iFixedPoint=0;
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    UMat distCoeffs;
    Napi::Value* pyobj_rvecs = NULL;
    vector_UMat rvecs;
    Napi::Value* pyobj_tvecs = NULL;
    vector_UMat tvecs;
    Napi::Value* pyobj_newObjPoints = NULL;
    UMat newObjPoints;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON);
    double retval;

    const char* keywords[] = { "objectPoints", "imagePoints", "imageSize", "iFixedPoint", "cameraMatrix", "distCoeffs", "rvecs", "tvecs", "newObjPoints", "flags", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OOOOO:calibrateCameraRO", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_imageSize, &pyobj_iFixedPoint, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_rvecs, &pyobj_tvecs, &pyobj_newObjPoints, &pyobj_flags, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_iFixedPoint, iFixedPoint, ArgInfo("iFixedPoint", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 1)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 1)) &&
        jsopencv_to_safe(info, pyobj_rvecs, rvecs, ArgInfo("rvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_tvecs, tvecs, ArgInfo("tvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_newObjPoints, newObjPoints, ArgInfo("newObjPoints", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(retval = cv::calibrateCameraRO(objectPoints, imagePoints, imageSize, iFixedPoint, cameraMatrix, distCoeffs, rvecs, tvecs, newObjPoints, flags, criteria));
        return Py_BuildValue("(NNNNNN)", jsopencv_from(retval), jsopencv_from(cameraMatrix), jsopencv_from(distCoeffs), jsopencv_from(rvecs), jsopencv_from(tvecs), jsopencv_from(newObjPoints));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("calibrateCameraRO");

    return NULL;
}

static Napi::Value pyopencv_cv_calibrateCameraROExtended(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_objectPoints = NULL;
    vector_Mat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    vector_Mat imagePoints;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_iFixedPoint = NULL;
    int iFixedPoint=0;
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    Mat distCoeffs;
    Napi::Value* pyobj_rvecs = NULL;
    vector_Mat rvecs;
    Napi::Value* pyobj_tvecs = NULL;
    vector_Mat tvecs;
    Napi::Value* pyobj_newObjPoints = NULL;
    Mat newObjPoints;
    Napi::Value* pyobj_stdDeviationsIntrinsics = NULL;
    Mat stdDeviationsIntrinsics;
    Napi::Value* pyobj_stdDeviationsExtrinsics = NULL;
    Mat stdDeviationsExtrinsics;
    Napi::Value* pyobj_stdDeviationsObjPoints = NULL;
    Mat stdDeviationsObjPoints;
    Napi::Value* pyobj_perViewErrors = NULL;
    Mat perViewErrors;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON);
    double retval;

    const char* keywords[] = { "objectPoints", "imagePoints", "imageSize", "iFixedPoint", "cameraMatrix", "distCoeffs", "rvecs", "tvecs", "newObjPoints", "stdDeviationsIntrinsics", "stdDeviationsExtrinsics", "stdDeviationsObjPoints", "perViewErrors", "flags", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OOOOOOOOO:calibrateCameraROExtended", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_imageSize, &pyobj_iFixedPoint, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_rvecs, &pyobj_tvecs, &pyobj_newObjPoints, &pyobj_stdDeviationsIntrinsics, &pyobj_stdDeviationsExtrinsics, &pyobj_stdDeviationsObjPoints, &pyobj_perViewErrors, &pyobj_flags, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_iFixedPoint, iFixedPoint, ArgInfo("iFixedPoint", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 1)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 1)) &&
        jsopencv_to_safe(info, pyobj_rvecs, rvecs, ArgInfo("rvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_tvecs, tvecs, ArgInfo("tvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_newObjPoints, newObjPoints, ArgInfo("newObjPoints", 1)) &&
        jsopencv_to_safe(info, pyobj_stdDeviationsIntrinsics, stdDeviationsIntrinsics, ArgInfo("stdDeviationsIntrinsics", 1)) &&
        jsopencv_to_safe(info, pyobj_stdDeviationsExtrinsics, stdDeviationsExtrinsics, ArgInfo("stdDeviationsExtrinsics", 1)) &&
        jsopencv_to_safe(info, pyobj_stdDeviationsObjPoints, stdDeviationsObjPoints, ArgInfo("stdDeviationsObjPoints", 1)) &&
        jsopencv_to_safe(info, pyobj_perViewErrors, perViewErrors, ArgInfo("perViewErrors", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(retval = cv::calibrateCameraRO(objectPoints, imagePoints, imageSize, iFixedPoint, cameraMatrix, distCoeffs, rvecs, tvecs, newObjPoints, stdDeviationsIntrinsics, stdDeviationsExtrinsics, stdDeviationsObjPoints, perViewErrors, flags, criteria));
        return Py_BuildValue("(NNNNNNNNNN)", jsopencv_from(retval), jsopencv_from(cameraMatrix), jsopencv_from(distCoeffs), jsopencv_from(rvecs), jsopencv_from(tvecs), jsopencv_from(newObjPoints), jsopencv_from(stdDeviationsIntrinsics), jsopencv_from(stdDeviationsExtrinsics), jsopencv_from(stdDeviationsObjPoints), jsopencv_from(perViewErrors));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_objectPoints = NULL;
    vector_UMat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    vector_UMat imagePoints;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_iFixedPoint = NULL;
    int iFixedPoint=0;
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    UMat distCoeffs;
    Napi::Value* pyobj_rvecs = NULL;
    vector_UMat rvecs;
    Napi::Value* pyobj_tvecs = NULL;
    vector_UMat tvecs;
    Napi::Value* pyobj_newObjPoints = NULL;
    UMat newObjPoints;
    Napi::Value* pyobj_stdDeviationsIntrinsics = NULL;
    UMat stdDeviationsIntrinsics;
    Napi::Value* pyobj_stdDeviationsExtrinsics = NULL;
    UMat stdDeviationsExtrinsics;
    Napi::Value* pyobj_stdDeviationsObjPoints = NULL;
    UMat stdDeviationsObjPoints;
    Napi::Value* pyobj_perViewErrors = NULL;
    UMat perViewErrors;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON);
    double retval;

    const char* keywords[] = { "objectPoints", "imagePoints", "imageSize", "iFixedPoint", "cameraMatrix", "distCoeffs", "rvecs", "tvecs", "newObjPoints", "stdDeviationsIntrinsics", "stdDeviationsExtrinsics", "stdDeviationsObjPoints", "perViewErrors", "flags", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OOOOOOOOO:calibrateCameraROExtended", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_imageSize, &pyobj_iFixedPoint, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_rvecs, &pyobj_tvecs, &pyobj_newObjPoints, &pyobj_stdDeviationsIntrinsics, &pyobj_stdDeviationsExtrinsics, &pyobj_stdDeviationsObjPoints, &pyobj_perViewErrors, &pyobj_flags, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_iFixedPoint, iFixedPoint, ArgInfo("iFixedPoint", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 1)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 1)) &&
        jsopencv_to_safe(info, pyobj_rvecs, rvecs, ArgInfo("rvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_tvecs, tvecs, ArgInfo("tvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_newObjPoints, newObjPoints, ArgInfo("newObjPoints", 1)) &&
        jsopencv_to_safe(info, pyobj_stdDeviationsIntrinsics, stdDeviationsIntrinsics, ArgInfo("stdDeviationsIntrinsics", 1)) &&
        jsopencv_to_safe(info, pyobj_stdDeviationsExtrinsics, stdDeviationsExtrinsics, ArgInfo("stdDeviationsExtrinsics", 1)) &&
        jsopencv_to_safe(info, pyobj_stdDeviationsObjPoints, stdDeviationsObjPoints, ArgInfo("stdDeviationsObjPoints", 1)) &&
        jsopencv_to_safe(info, pyobj_perViewErrors, perViewErrors, ArgInfo("perViewErrors", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(retval = cv::calibrateCameraRO(objectPoints, imagePoints, imageSize, iFixedPoint, cameraMatrix, distCoeffs, rvecs, tvecs, newObjPoints, stdDeviationsIntrinsics, stdDeviationsExtrinsics, stdDeviationsObjPoints, perViewErrors, flags, criteria));
        return Py_BuildValue("(NNNNNNNNNN)", jsopencv_from(retval), jsopencv_from(cameraMatrix), jsopencv_from(distCoeffs), jsopencv_from(rvecs), jsopencv_from(tvecs), jsopencv_from(newObjPoints), jsopencv_from(stdDeviationsIntrinsics), jsopencv_from(stdDeviationsExtrinsics), jsopencv_from(stdDeviationsObjPoints), jsopencv_from(perViewErrors));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("calibrateCameraROExtended");

    return NULL;
}

static Napi::Value pyopencv_cv_calibrateHandEye(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_R_gripper2base = NULL;
    vector_Mat R_gripper2base;
    Napi::Value* pyobj_t_gripper2base = NULL;
    vector_Mat t_gripper2base;
    Napi::Value* pyobj_R_target2cam = NULL;
    vector_Mat R_target2cam;
    Napi::Value* pyobj_t_target2cam = NULL;
    vector_Mat t_target2cam;
    Napi::Value* pyobj_R_cam2gripper = NULL;
    Mat R_cam2gripper;
    Napi::Value* pyobj_t_cam2gripper = NULL;
    Mat t_cam2gripper;
    Napi::Value* pyobj_method = NULL;
    HandEyeCalibrationMethod method=CALIB_HAND_EYE_TSAI;

    const char* keywords[] = { "R_gripper2base", "t_gripper2base", "R_target2cam", "t_target2cam", "R_cam2gripper", "t_cam2gripper", "method", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:calibrateHandEye", (char**)keywords, &pyobj_R_gripper2base, &pyobj_t_gripper2base, &pyobj_R_target2cam, &pyobj_t_target2cam, &pyobj_R_cam2gripper, &pyobj_t_cam2gripper, &pyobj_method) &&
        jsopencv_to_safe(info, pyobj_R_gripper2base, R_gripper2base, ArgInfo("R_gripper2base", 0)) &&
        jsopencv_to_safe(info, pyobj_t_gripper2base, t_gripper2base, ArgInfo("t_gripper2base", 0)) &&
        jsopencv_to_safe(info, pyobj_R_target2cam, R_target2cam, ArgInfo("R_target2cam", 0)) &&
        jsopencv_to_safe(info, pyobj_t_target2cam, t_target2cam, ArgInfo("t_target2cam", 0)) &&
        jsopencv_to_safe(info, pyobj_R_cam2gripper, R_cam2gripper, ArgInfo("R_cam2gripper", 1)) &&
        jsopencv_to_safe(info, pyobj_t_cam2gripper, t_cam2gripper, ArgInfo("t_cam2gripper", 1)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)))
    {
        ERRWRAP2(cv::calibrateHandEye(R_gripper2base, t_gripper2base, R_target2cam, t_target2cam, R_cam2gripper, t_cam2gripper, method));
        return Py_BuildValue("(NN)", jsopencv_from(R_cam2gripper), jsopencv_from(t_cam2gripper));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_R_gripper2base = NULL;
    vector_UMat R_gripper2base;
    Napi::Value* pyobj_t_gripper2base = NULL;
    vector_UMat t_gripper2base;
    Napi::Value* pyobj_R_target2cam = NULL;
    vector_UMat R_target2cam;
    Napi::Value* pyobj_t_target2cam = NULL;
    vector_UMat t_target2cam;
    Napi::Value* pyobj_R_cam2gripper = NULL;
    UMat R_cam2gripper;
    Napi::Value* pyobj_t_cam2gripper = NULL;
    UMat t_cam2gripper;
    Napi::Value* pyobj_method = NULL;
    HandEyeCalibrationMethod method=CALIB_HAND_EYE_TSAI;

    const char* keywords[] = { "R_gripper2base", "t_gripper2base", "R_target2cam", "t_target2cam", "R_cam2gripper", "t_cam2gripper", "method", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:calibrateHandEye", (char**)keywords, &pyobj_R_gripper2base, &pyobj_t_gripper2base, &pyobj_R_target2cam, &pyobj_t_target2cam, &pyobj_R_cam2gripper, &pyobj_t_cam2gripper, &pyobj_method) &&
        jsopencv_to_safe(info, pyobj_R_gripper2base, R_gripper2base, ArgInfo("R_gripper2base", 0)) &&
        jsopencv_to_safe(info, pyobj_t_gripper2base, t_gripper2base, ArgInfo("t_gripper2base", 0)) &&
        jsopencv_to_safe(info, pyobj_R_target2cam, R_target2cam, ArgInfo("R_target2cam", 0)) &&
        jsopencv_to_safe(info, pyobj_t_target2cam, t_target2cam, ArgInfo("t_target2cam", 0)) &&
        jsopencv_to_safe(info, pyobj_R_cam2gripper, R_cam2gripper, ArgInfo("R_cam2gripper", 1)) &&
        jsopencv_to_safe(info, pyobj_t_cam2gripper, t_cam2gripper, ArgInfo("t_cam2gripper", 1)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)))
    {
        ERRWRAP2(cv::calibrateHandEye(R_gripper2base, t_gripper2base, R_target2cam, t_target2cam, R_cam2gripper, t_cam2gripper, method));
        return Py_BuildValue("(NN)", jsopencv_from(R_cam2gripper), jsopencv_from(t_cam2gripper));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("calibrateHandEye");

    return NULL;
}

static Napi::Value pyopencv_cv_calibrateRobotWorldHandEye(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_R_world2cam = NULL;
    vector_Mat R_world2cam;
    Napi::Value* pyobj_t_world2cam = NULL;
    vector_Mat t_world2cam;
    Napi::Value* pyobj_R_base2gripper = NULL;
    vector_Mat R_base2gripper;
    Napi::Value* pyobj_t_base2gripper = NULL;
    vector_Mat t_base2gripper;
    Napi::Value* pyobj_R_base2world = NULL;
    Mat R_base2world;
    Napi::Value* pyobj_t_base2world = NULL;
    Mat t_base2world;
    Napi::Value* pyobj_R_gripper2cam = NULL;
    Mat R_gripper2cam;
    Napi::Value* pyobj_t_gripper2cam = NULL;
    Mat t_gripper2cam;
    Napi::Value* pyobj_method = NULL;
    RobotWorldHandEyeCalibrationMethod method=CALIB_ROBOT_WORLD_HAND_EYE_SHAH;

    const char* keywords[] = { "R_world2cam", "t_world2cam", "R_base2gripper", "t_base2gripper", "R_base2world", "t_base2world", "R_gripper2cam", "t_gripper2cam", "method", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOOO:calibrateRobotWorldHandEye", (char**)keywords, &pyobj_R_world2cam, &pyobj_t_world2cam, &pyobj_R_base2gripper, &pyobj_t_base2gripper, &pyobj_R_base2world, &pyobj_t_base2world, &pyobj_R_gripper2cam, &pyobj_t_gripper2cam, &pyobj_method) &&
        jsopencv_to_safe(info, pyobj_R_world2cam, R_world2cam, ArgInfo("R_world2cam", 0)) &&
        jsopencv_to_safe(info, pyobj_t_world2cam, t_world2cam, ArgInfo("t_world2cam", 0)) &&
        jsopencv_to_safe(info, pyobj_R_base2gripper, R_base2gripper, ArgInfo("R_base2gripper", 0)) &&
        jsopencv_to_safe(info, pyobj_t_base2gripper, t_base2gripper, ArgInfo("t_base2gripper", 0)) &&
        jsopencv_to_safe(info, pyobj_R_base2world, R_base2world, ArgInfo("R_base2world", 1)) &&
        jsopencv_to_safe(info, pyobj_t_base2world, t_base2world, ArgInfo("t_base2world", 1)) &&
        jsopencv_to_safe(info, pyobj_R_gripper2cam, R_gripper2cam, ArgInfo("R_gripper2cam", 1)) &&
        jsopencv_to_safe(info, pyobj_t_gripper2cam, t_gripper2cam, ArgInfo("t_gripper2cam", 1)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)))
    {
        ERRWRAP2(cv::calibrateRobotWorldHandEye(R_world2cam, t_world2cam, R_base2gripper, t_base2gripper, R_base2world, t_base2world, R_gripper2cam, t_gripper2cam, method));
        return Py_BuildValue("(NNNN)", jsopencv_from(R_base2world), jsopencv_from(t_base2world), jsopencv_from(R_gripper2cam), jsopencv_from(t_gripper2cam));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_R_world2cam = NULL;
    vector_UMat R_world2cam;
    Napi::Value* pyobj_t_world2cam = NULL;
    vector_UMat t_world2cam;
    Napi::Value* pyobj_R_base2gripper = NULL;
    vector_UMat R_base2gripper;
    Napi::Value* pyobj_t_base2gripper = NULL;
    vector_UMat t_base2gripper;
    Napi::Value* pyobj_R_base2world = NULL;
    UMat R_base2world;
    Napi::Value* pyobj_t_base2world = NULL;
    UMat t_base2world;
    Napi::Value* pyobj_R_gripper2cam = NULL;
    UMat R_gripper2cam;
    Napi::Value* pyobj_t_gripper2cam = NULL;
    UMat t_gripper2cam;
    Napi::Value* pyobj_method = NULL;
    RobotWorldHandEyeCalibrationMethod method=CALIB_ROBOT_WORLD_HAND_EYE_SHAH;

    const char* keywords[] = { "R_world2cam", "t_world2cam", "R_base2gripper", "t_base2gripper", "R_base2world", "t_base2world", "R_gripper2cam", "t_gripper2cam", "method", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOOO:calibrateRobotWorldHandEye", (char**)keywords, &pyobj_R_world2cam, &pyobj_t_world2cam, &pyobj_R_base2gripper, &pyobj_t_base2gripper, &pyobj_R_base2world, &pyobj_t_base2world, &pyobj_R_gripper2cam, &pyobj_t_gripper2cam, &pyobj_method) &&
        jsopencv_to_safe(info, pyobj_R_world2cam, R_world2cam, ArgInfo("R_world2cam", 0)) &&
        jsopencv_to_safe(info, pyobj_t_world2cam, t_world2cam, ArgInfo("t_world2cam", 0)) &&
        jsopencv_to_safe(info, pyobj_R_base2gripper, R_base2gripper, ArgInfo("R_base2gripper", 0)) &&
        jsopencv_to_safe(info, pyobj_t_base2gripper, t_base2gripper, ArgInfo("t_base2gripper", 0)) &&
        jsopencv_to_safe(info, pyobj_R_base2world, R_base2world, ArgInfo("R_base2world", 1)) &&
        jsopencv_to_safe(info, pyobj_t_base2world, t_base2world, ArgInfo("t_base2world", 1)) &&
        jsopencv_to_safe(info, pyobj_R_gripper2cam, R_gripper2cam, ArgInfo("R_gripper2cam", 1)) &&
        jsopencv_to_safe(info, pyobj_t_gripper2cam, t_gripper2cam, ArgInfo("t_gripper2cam", 1)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)))
    {
        ERRWRAP2(cv::calibrateRobotWorldHandEye(R_world2cam, t_world2cam, R_base2gripper, t_base2gripper, R_base2world, t_base2world, R_gripper2cam, t_gripper2cam, method));
        return Py_BuildValue("(NNNN)", jsopencv_from(R_base2world), jsopencv_from(t_base2world), jsopencv_from(R_gripper2cam), jsopencv_from(t_gripper2cam));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("calibrateRobotWorldHandEye");

    return NULL;
}

static Napi::Value pyopencv_cv_calibrationMatrixValues(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_apertureWidth = NULL;
    double apertureWidth=0;
    Napi::Value* pyobj_apertureHeight = NULL;
    double apertureHeight=0;
    double fovx;
    double fovy;
    double focalLength;
    Point2d principalPoint;
    double aspectRatio;

    const char* keywords[] = { "cameraMatrix", "imageSize", "apertureWidth", "apertureHeight", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO:calibrationMatrixValues", (char**)keywords, &pyobj_cameraMatrix, &pyobj_imageSize, &pyobj_apertureWidth, &pyobj_apertureHeight) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_apertureWidth, apertureWidth, ArgInfo("apertureWidth", 0)) &&
        jsopencv_to_safe(info, pyobj_apertureHeight, apertureHeight, ArgInfo("apertureHeight", 0)))
    {
        ERRWRAP2(cv::calibrationMatrixValues(cameraMatrix, imageSize, apertureWidth, apertureHeight, fovx, fovy, focalLength, principalPoint, aspectRatio));
        return Py_BuildValue("(NNNNN)", jsopencv_from(fovx), jsopencv_from(fovy), jsopencv_from(focalLength), jsopencv_from(principalPoint), jsopencv_from(aspectRatio));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_apertureWidth = NULL;
    double apertureWidth=0;
    Napi::Value* pyobj_apertureHeight = NULL;
    double apertureHeight=0;
    double fovx;
    double fovy;
    double focalLength;
    Point2d principalPoint;
    double aspectRatio;

    const char* keywords[] = { "cameraMatrix", "imageSize", "apertureWidth", "apertureHeight", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO:calibrationMatrixValues", (char**)keywords, &pyobj_cameraMatrix, &pyobj_imageSize, &pyobj_apertureWidth, &pyobj_apertureHeight) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_apertureWidth, apertureWidth, ArgInfo("apertureWidth", 0)) &&
        jsopencv_to_safe(info, pyobj_apertureHeight, apertureHeight, ArgInfo("apertureHeight", 0)))
    {
        ERRWRAP2(cv::calibrationMatrixValues(cameraMatrix, imageSize, apertureWidth, apertureHeight, fovx, fovy, focalLength, principalPoint, aspectRatio));
        return Py_BuildValue("(NNNNN)", jsopencv_from(fovx), jsopencv_from(fovy), jsopencv_from(focalLength), jsopencv_from(principalPoint), jsopencv_from(aspectRatio));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("calibrationMatrixValues");

    return NULL;
}

static Napi::Value pyopencv_cv_cartToPolar(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_x = NULL;
    Mat x;
    Napi::Value* pyobj_y = NULL;
    Mat y;
    Napi::Value* pyobj_magnitude = NULL;
    Mat magnitude;
    Napi::Value* pyobj_angle = NULL;
    Mat angle;
    Napi::Value* pyobj_angleInDegrees = NULL;
    bool angleInDegrees=false;

    const char* keywords[] = { "x", "y", "magnitude", "angle", "angleInDegrees", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:cartToPolar", (char**)keywords, &pyobj_x, &pyobj_y, &pyobj_magnitude, &pyobj_angle, &pyobj_angleInDegrees) &&
        jsopencv_to_safe(info, pyobj_x, x, ArgInfo("x", 0)) &&
        jsopencv_to_safe(info, pyobj_y, y, ArgInfo("y", 0)) &&
        jsopencv_to_safe(info, pyobj_magnitude, magnitude, ArgInfo("magnitude", 1)) &&
        jsopencv_to_safe(info, pyobj_angle, angle, ArgInfo("angle", 1)) &&
        jsopencv_to_safe(info, pyobj_angleInDegrees, angleInDegrees, ArgInfo("angleInDegrees", 0)))
    {
        ERRWRAP2(cv::cartToPolar(x, y, magnitude, angle, angleInDegrees));
        return Py_BuildValue("(NN)", jsopencv_from(magnitude), jsopencv_from(angle));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_x = NULL;
    UMat x;
    Napi::Value* pyobj_y = NULL;
    UMat y;
    Napi::Value* pyobj_magnitude = NULL;
    UMat magnitude;
    Napi::Value* pyobj_angle = NULL;
    UMat angle;
    Napi::Value* pyobj_angleInDegrees = NULL;
    bool angleInDegrees=false;

    const char* keywords[] = { "x", "y", "magnitude", "angle", "angleInDegrees", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:cartToPolar", (char**)keywords, &pyobj_x, &pyobj_y, &pyobj_magnitude, &pyobj_angle, &pyobj_angleInDegrees) &&
        jsopencv_to_safe(info, pyobj_x, x, ArgInfo("x", 0)) &&
        jsopencv_to_safe(info, pyobj_y, y, ArgInfo("y", 0)) &&
        jsopencv_to_safe(info, pyobj_magnitude, magnitude, ArgInfo("magnitude", 1)) &&
        jsopencv_to_safe(info, pyobj_angle, angle, ArgInfo("angle", 1)) &&
        jsopencv_to_safe(info, pyobj_angleInDegrees, angleInDegrees, ArgInfo("angleInDegrees", 0)))
    {
        ERRWRAP2(cv::cartToPolar(x, y, magnitude, angle, angleInDegrees));
        return Py_BuildValue("(NN)", jsopencv_from(magnitude), jsopencv_from(angle));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("cartToPolar");

    return NULL;
}

static Napi::Value pyopencv_cv_checkChessboard(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_size = NULL;
    Size size;
    bool retval;

    const char* keywords[] = { "img", "size", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:checkChessboard", (char**)keywords, &pyobj_img, &pyobj_size) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_size, size, ArgInfo("size", 0)))
    {
        ERRWRAP2(retval = cv::checkChessboard(img, size));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_size = NULL;
    Size size;
    bool retval;

    const char* keywords[] = { "img", "size", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:checkChessboard", (char**)keywords, &pyobj_img, &pyobj_size) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_size, size, ArgInfo("size", 0)))
    {
        ERRWRAP2(retval = cv::checkChessboard(img, size));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("checkChessboard");

    return NULL;
}

static Napi::Value pyopencv_cv_checkHardwareSupport(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_feature = NULL;
    int feature=0;
    bool retval;

    const char* keywords[] = { "feature", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:checkHardwareSupport", (char**)keywords, &pyobj_feature) &&
        jsopencv_to_safe(info, pyobj_feature, feature, ArgInfo("feature", 0)))
    {
        ERRWRAP2(retval = cv::checkHardwareSupport(feature));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_checkRange(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_a = NULL;
    Mat a;
    Napi::Value* pyobj_quiet = NULL;
    bool quiet=true;
    Point pos;
    Napi::Value* pyobj_minVal = NULL;
    double minVal=-DBL_MAX;
    Napi::Value* pyobj_maxVal = NULL;
    double maxVal=DBL_MAX;
    bool retval;

    const char* keywords[] = { "a", "quiet", "minVal", "maxVal", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:checkRange", (char**)keywords, &pyobj_a, &pyobj_quiet, &pyobj_minVal, &pyobj_maxVal) &&
        jsopencv_to_safe(info, pyobj_a, a, ArgInfo("a", 0)) &&
        jsopencv_to_safe(info, pyobj_quiet, quiet, ArgInfo("quiet", 0)) &&
        jsopencv_to_safe(info, pyobj_minVal, minVal, ArgInfo("minVal", 0)) &&
        jsopencv_to_safe(info, pyobj_maxVal, maxVal, ArgInfo("maxVal", 0)))
    {
        ERRWRAP2(retval = cv::checkRange(a, quiet, &pos, minVal, maxVal));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(pos));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_a = NULL;
    UMat a;
    Napi::Value* pyobj_quiet = NULL;
    bool quiet=true;
    Point pos;
    Napi::Value* pyobj_minVal = NULL;
    double minVal=-DBL_MAX;
    Napi::Value* pyobj_maxVal = NULL;
    double maxVal=DBL_MAX;
    bool retval;

    const char* keywords[] = { "a", "quiet", "minVal", "maxVal", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:checkRange", (char**)keywords, &pyobj_a, &pyobj_quiet, &pyobj_minVal, &pyobj_maxVal) &&
        jsopencv_to_safe(info, pyobj_a, a, ArgInfo("a", 0)) &&
        jsopencv_to_safe(info, pyobj_quiet, quiet, ArgInfo("quiet", 0)) &&
        jsopencv_to_safe(info, pyobj_minVal, minVal, ArgInfo("minVal", 0)) &&
        jsopencv_to_safe(info, pyobj_maxVal, maxVal, ArgInfo("maxVal", 0)))
    {
        ERRWRAP2(retval = cv::checkRange(a, quiet, &pos, minVal, maxVal));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(pos));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("checkRange");

    return NULL;
}

static Napi::Value pyopencv_cv_circle(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_center = NULL;
    Point center;
    Napi::Value* pyobj_radius = NULL;
    int radius=0;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=1;
    Napi::Value* pyobj_lineType = NULL;
    int lineType=LINE_8;
    Napi::Value* pyobj_shift = NULL;
    int shift=0;

    const char* keywords[] = { "img", "center", "radius", "color", "thickness", "lineType", "shift", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:circle", (char**)keywords, &pyobj_img, &pyobj_center, &pyobj_radius, &pyobj_color, &pyobj_thickness, &pyobj_lineType, &pyobj_shift) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_center, center, ArgInfo("center", 0)) &&
        jsopencv_to_safe(info, pyobj_radius, radius, ArgInfo("radius", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)) &&
        jsopencv_to_safe(info, pyobj_lineType, lineType, ArgInfo("lineType", 0)) &&
        jsopencv_to_safe(info, pyobj_shift, shift, ArgInfo("shift", 0)))
    {
        ERRWRAP2(cv::circle(img, center, radius, color, thickness, lineType, shift));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_center = NULL;
    Point center;
    Napi::Value* pyobj_radius = NULL;
    int radius=0;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=1;
    Napi::Value* pyobj_lineType = NULL;
    int lineType=LINE_8;
    Napi::Value* pyobj_shift = NULL;
    int shift=0;

    const char* keywords[] = { "img", "center", "radius", "color", "thickness", "lineType", "shift", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:circle", (char**)keywords, &pyobj_img, &pyobj_center, &pyobj_radius, &pyobj_color, &pyobj_thickness, &pyobj_lineType, &pyobj_shift) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_center, center, ArgInfo("center", 0)) &&
        jsopencv_to_safe(info, pyobj_radius, radius, ArgInfo("radius", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)) &&
        jsopencv_to_safe(info, pyobj_lineType, lineType, ArgInfo("lineType", 0)) &&
        jsopencv_to_safe(info, pyobj_shift, shift, ArgInfo("shift", 0)))
    {
        ERRWRAP2(cv::circle(img, center, radius, color, thickness, lineType, shift));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("circle");

    return NULL;
}

static Napi::Value pyopencv_cv_clipLine(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_imgRect = NULL;
    Rect imgRect;
    Napi::Value* pyobj_pt1 = NULL;
    Point pt1;
    Napi::Value* pyobj_pt2 = NULL;
    Point pt2;
    bool retval;

    const char* keywords[] = { "imgRect", "pt1", "pt2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:clipLine", (char**)keywords, &pyobj_imgRect, &pyobj_pt1, &pyobj_pt2) &&
        jsopencv_to_safe(info, pyobj_imgRect, imgRect, ArgInfo("imgRect", 0)) &&
        jsopencv_to_safe(info, pyobj_pt1, pt1, ArgInfo("pt1", 1)) &&
        jsopencv_to_safe(info, pyobj_pt2, pt2, ArgInfo("pt2", 1)))
    {
        ERRWRAP2(retval = cv::clipLine(imgRect, pt1, pt2));
        return Py_BuildValue("(NNN)", jsopencv_from(retval), jsopencv_from(pt1), jsopencv_from(pt2));
    }

    return NULL;
}

static Napi::Value pyopencv_cv_colorChange(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_red_mul = NULL;
    float red_mul=1.0f;
    Napi::Value* pyobj_green_mul = NULL;
    float green_mul=1.0f;
    Napi::Value* pyobj_blue_mul = NULL;
    float blue_mul=1.0f;

    const char* keywords[] = { "src", "mask", "dst", "red_mul", "green_mul", "blue_mul", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOO:colorChange", (char**)keywords, &pyobj_src, &pyobj_mask, &pyobj_dst, &pyobj_red_mul, &pyobj_green_mul, &pyobj_blue_mul) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_red_mul, red_mul, ArgInfo("red_mul", 0)) &&
        jsopencv_to_safe(info, pyobj_green_mul, green_mul, ArgInfo("green_mul", 0)) &&
        jsopencv_to_safe(info, pyobj_blue_mul, blue_mul, ArgInfo("blue_mul", 0)))
    {
        ERRWRAP2(cv::colorChange(src, mask, dst, red_mul, green_mul, blue_mul));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_red_mul = NULL;
    float red_mul=1.0f;
    Napi::Value* pyobj_green_mul = NULL;
    float green_mul=1.0f;
    Napi::Value* pyobj_blue_mul = NULL;
    float blue_mul=1.0f;

    const char* keywords[] = { "src", "mask", "dst", "red_mul", "green_mul", "blue_mul", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOO:colorChange", (char**)keywords, &pyobj_src, &pyobj_mask, &pyobj_dst, &pyobj_red_mul, &pyobj_green_mul, &pyobj_blue_mul) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_red_mul, red_mul, ArgInfo("red_mul", 0)) &&
        jsopencv_to_safe(info, pyobj_green_mul, green_mul, ArgInfo("green_mul", 0)) &&
        jsopencv_to_safe(info, pyobj_blue_mul, blue_mul, ArgInfo("blue_mul", 0)))
    {
        ERRWRAP2(cv::colorChange(src, mask, dst, red_mul, green_mul, blue_mul));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("colorChange");

    return NULL;
}

static Napi::Value pyopencv_cv_compare(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    Mat src1;
    Napi::Value* pyobj_src2 = NULL;
    Mat src2;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_cmpop = NULL;
    int cmpop=0;

    const char* keywords[] = { "src1", "src2", "cmpop", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:compare", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_cmpop, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_cmpop, cmpop, ArgInfo("cmpop", 0)))
    {
        ERRWRAP2(cv::compare(src1, src2, dst, cmpop));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    UMat src1;
    Napi::Value* pyobj_src2 = NULL;
    UMat src2;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_cmpop = NULL;
    int cmpop=0;

    const char* keywords[] = { "src1", "src2", "cmpop", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:compare", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_cmpop, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_cmpop, cmpop, ArgInfo("cmpop", 0)))
    {
        ERRWRAP2(cv::compare(src1, src2, dst, cmpop));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("compare");

    return NULL;
}

static Napi::Value pyopencv_cv_compareHist(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_H1 = NULL;
    Mat H1;
    Napi::Value* pyobj_H2 = NULL;
    Mat H2;
    Napi::Value* pyobj_method = NULL;
    int method=0;
    double retval;

    const char* keywords[] = { "H1", "H2", "method", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:compareHist", (char**)keywords, &pyobj_H1, &pyobj_H2, &pyobj_method) &&
        jsopencv_to_safe(info, pyobj_H1, H1, ArgInfo("H1", 0)) &&
        jsopencv_to_safe(info, pyobj_H2, H2, ArgInfo("H2", 0)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)))
    {
        ERRWRAP2(retval = cv::compareHist(H1, H2, method));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_H1 = NULL;
    UMat H1;
    Napi::Value* pyobj_H2 = NULL;
    UMat H2;
    Napi::Value* pyobj_method = NULL;
    int method=0;
    double retval;

    const char* keywords[] = { "H1", "H2", "method", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:compareHist", (char**)keywords, &pyobj_H1, &pyobj_H2, &pyobj_method) &&
        jsopencv_to_safe(info, pyobj_H1, H1, ArgInfo("H1", 0)) &&
        jsopencv_to_safe(info, pyobj_H2, H2, ArgInfo("H2", 0)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)))
    {
        ERRWRAP2(retval = cv::compareHist(H1, H2, method));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("compareHist");

    return NULL;
}

static Napi::Value pyopencv_cv_completeSymm(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_m = NULL;
    Mat m;
    Napi::Value* pyobj_lowerToUpper = NULL;
    bool lowerToUpper=false;

    const char* keywords[] = { "m", "lowerToUpper", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:completeSymm", (char**)keywords, &pyobj_m, &pyobj_lowerToUpper) &&
        jsopencv_to_safe(info, pyobj_m, m, ArgInfo("m", 1)) &&
        jsopencv_to_safe(info, pyobj_lowerToUpper, lowerToUpper, ArgInfo("lowerToUpper", 0)))
    {
        ERRWRAP2(cv::completeSymm(m, lowerToUpper));
        return jsopencv_from(m);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_m = NULL;
    UMat m;
    Napi::Value* pyobj_lowerToUpper = NULL;
    bool lowerToUpper=false;

    const char* keywords[] = { "m", "lowerToUpper", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:completeSymm", (char**)keywords, &pyobj_m, &pyobj_lowerToUpper) &&
        jsopencv_to_safe(info, pyobj_m, m, ArgInfo("m", 1)) &&
        jsopencv_to_safe(info, pyobj_lowerToUpper, lowerToUpper, ArgInfo("lowerToUpper", 0)))
    {
        ERRWRAP2(cv::completeSymm(m, lowerToUpper));
        return jsopencv_from(m);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("completeSymm");

    return NULL;
}

static Napi::Value pyopencv_cv_composeRT(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_rvec1 = NULL;
    Mat rvec1;
    Napi::Value* pyobj_tvec1 = NULL;
    Mat tvec1;
    Napi::Value* pyobj_rvec2 = NULL;
    Mat rvec2;
    Napi::Value* pyobj_tvec2 = NULL;
    Mat tvec2;
    Napi::Value* pyobj_rvec3 = NULL;
    Mat rvec3;
    Napi::Value* pyobj_tvec3 = NULL;
    Mat tvec3;
    Napi::Value* pyobj_dr3dr1 = NULL;
    Mat dr3dr1;
    Napi::Value* pyobj_dr3dt1 = NULL;
    Mat dr3dt1;
    Napi::Value* pyobj_dr3dr2 = NULL;
    Mat dr3dr2;
    Napi::Value* pyobj_dr3dt2 = NULL;
    Mat dr3dt2;
    Napi::Value* pyobj_dt3dr1 = NULL;
    Mat dt3dr1;
    Napi::Value* pyobj_dt3dt1 = NULL;
    Mat dt3dt1;
    Napi::Value* pyobj_dt3dr2 = NULL;
    Mat dt3dr2;
    Napi::Value* pyobj_dt3dt2 = NULL;
    Mat dt3dt2;

    const char* keywords[] = { "rvec1", "tvec1", "rvec2", "tvec2", "rvec3", "tvec3", "dr3dr1", "dr3dt1", "dr3dr2", "dr3dt2", "dt3dr1", "dt3dt1", "dt3dr2", "dt3dt2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOOOOOOOO:composeRT", (char**)keywords, &pyobj_rvec1, &pyobj_tvec1, &pyobj_rvec2, &pyobj_tvec2, &pyobj_rvec3, &pyobj_tvec3, &pyobj_dr3dr1, &pyobj_dr3dt1, &pyobj_dr3dr2, &pyobj_dr3dt2, &pyobj_dt3dr1, &pyobj_dt3dt1, &pyobj_dt3dr2, &pyobj_dt3dt2) &&
        jsopencv_to_safe(info, pyobj_rvec1, rvec1, ArgInfo("rvec1", 0)) &&
        jsopencv_to_safe(info, pyobj_tvec1, tvec1, ArgInfo("tvec1", 0)) &&
        jsopencv_to_safe(info, pyobj_rvec2, rvec2, ArgInfo("rvec2", 0)) &&
        jsopencv_to_safe(info, pyobj_tvec2, tvec2, ArgInfo("tvec2", 0)) &&
        jsopencv_to_safe(info, pyobj_rvec3, rvec3, ArgInfo("rvec3", 1)) &&
        jsopencv_to_safe(info, pyobj_tvec3, tvec3, ArgInfo("tvec3", 1)) &&
        jsopencv_to_safe(info, pyobj_dr3dr1, dr3dr1, ArgInfo("dr3dr1", 1)) &&
        jsopencv_to_safe(info, pyobj_dr3dt1, dr3dt1, ArgInfo("dr3dt1", 1)) &&
        jsopencv_to_safe(info, pyobj_dr3dr2, dr3dr2, ArgInfo("dr3dr2", 1)) &&
        jsopencv_to_safe(info, pyobj_dr3dt2, dr3dt2, ArgInfo("dr3dt2", 1)) &&
        jsopencv_to_safe(info, pyobj_dt3dr1, dt3dr1, ArgInfo("dt3dr1", 1)) &&
        jsopencv_to_safe(info, pyobj_dt3dt1, dt3dt1, ArgInfo("dt3dt1", 1)) &&
        jsopencv_to_safe(info, pyobj_dt3dr2, dt3dr2, ArgInfo("dt3dr2", 1)) &&
        jsopencv_to_safe(info, pyobj_dt3dt2, dt3dt2, ArgInfo("dt3dt2", 1)))
    {
        ERRWRAP2(cv::composeRT(rvec1, tvec1, rvec2, tvec2, rvec3, tvec3, dr3dr1, dr3dt1, dr3dr2, dr3dt2, dt3dr1, dt3dt1, dt3dr2, dt3dt2));
        return Py_BuildValue("(NNNNNNNNNN)", jsopencv_from(rvec3), jsopencv_from(tvec3), jsopencv_from(dr3dr1), jsopencv_from(dr3dt1), jsopencv_from(dr3dr2), jsopencv_from(dr3dt2), jsopencv_from(dt3dr1), jsopencv_from(dt3dt1), jsopencv_from(dt3dr2), jsopencv_from(dt3dt2));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_rvec1 = NULL;
    UMat rvec1;
    Napi::Value* pyobj_tvec1 = NULL;
    UMat tvec1;
    Napi::Value* pyobj_rvec2 = NULL;
    UMat rvec2;
    Napi::Value* pyobj_tvec2 = NULL;
    UMat tvec2;
    Napi::Value* pyobj_rvec3 = NULL;
    UMat rvec3;
    Napi::Value* pyobj_tvec3 = NULL;
    UMat tvec3;
    Napi::Value* pyobj_dr3dr1 = NULL;
    UMat dr3dr1;
    Napi::Value* pyobj_dr3dt1 = NULL;
    UMat dr3dt1;
    Napi::Value* pyobj_dr3dr2 = NULL;
    UMat dr3dr2;
    Napi::Value* pyobj_dr3dt2 = NULL;
    UMat dr3dt2;
    Napi::Value* pyobj_dt3dr1 = NULL;
    UMat dt3dr1;
    Napi::Value* pyobj_dt3dt1 = NULL;
    UMat dt3dt1;
    Napi::Value* pyobj_dt3dr2 = NULL;
    UMat dt3dr2;
    Napi::Value* pyobj_dt3dt2 = NULL;
    UMat dt3dt2;

    const char* keywords[] = { "rvec1", "tvec1", "rvec2", "tvec2", "rvec3", "tvec3", "dr3dr1", "dr3dt1", "dr3dr2", "dr3dt2", "dt3dr1", "dt3dt1", "dt3dr2", "dt3dt2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOOOOOOOO:composeRT", (char**)keywords, &pyobj_rvec1, &pyobj_tvec1, &pyobj_rvec2, &pyobj_tvec2, &pyobj_rvec3, &pyobj_tvec3, &pyobj_dr3dr1, &pyobj_dr3dt1, &pyobj_dr3dr2, &pyobj_dr3dt2, &pyobj_dt3dr1, &pyobj_dt3dt1, &pyobj_dt3dr2, &pyobj_dt3dt2) &&
        jsopencv_to_safe(info, pyobj_rvec1, rvec1, ArgInfo("rvec1", 0)) &&
        jsopencv_to_safe(info, pyobj_tvec1, tvec1, ArgInfo("tvec1", 0)) &&
        jsopencv_to_safe(info, pyobj_rvec2, rvec2, ArgInfo("rvec2", 0)) &&
        jsopencv_to_safe(info, pyobj_tvec2, tvec2, ArgInfo("tvec2", 0)) &&
        jsopencv_to_safe(info, pyobj_rvec3, rvec3, ArgInfo("rvec3", 1)) &&
        jsopencv_to_safe(info, pyobj_tvec3, tvec3, ArgInfo("tvec3", 1)) &&
        jsopencv_to_safe(info, pyobj_dr3dr1, dr3dr1, ArgInfo("dr3dr1", 1)) &&
        jsopencv_to_safe(info, pyobj_dr3dt1, dr3dt1, ArgInfo("dr3dt1", 1)) &&
        jsopencv_to_safe(info, pyobj_dr3dr2, dr3dr2, ArgInfo("dr3dr2", 1)) &&
        jsopencv_to_safe(info, pyobj_dr3dt2, dr3dt2, ArgInfo("dr3dt2", 1)) &&
        jsopencv_to_safe(info, pyobj_dt3dr1, dt3dr1, ArgInfo("dt3dr1", 1)) &&
        jsopencv_to_safe(info, pyobj_dt3dt1, dt3dt1, ArgInfo("dt3dt1", 1)) &&
        jsopencv_to_safe(info, pyobj_dt3dr2, dt3dr2, ArgInfo("dt3dr2", 1)) &&
        jsopencv_to_safe(info, pyobj_dt3dt2, dt3dt2, ArgInfo("dt3dt2", 1)))
    {
        ERRWRAP2(cv::composeRT(rvec1, tvec1, rvec2, tvec2, rvec3, tvec3, dr3dr1, dr3dt1, dr3dr2, dr3dt2, dt3dr1, dt3dt1, dt3dr2, dt3dt2));
        return Py_BuildValue("(NNNNNNNNNN)", jsopencv_from(rvec3), jsopencv_from(tvec3), jsopencv_from(dr3dr1), jsopencv_from(dr3dt1), jsopencv_from(dr3dr2), jsopencv_from(dr3dt2), jsopencv_from(dt3dr1), jsopencv_from(dt3dt1), jsopencv_from(dt3dr2), jsopencv_from(dt3dt2));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("composeRT");

    return NULL;
}

static Napi::Value pyopencv_cv_computeCorrespondEpilines(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_points = NULL;
    Mat points;
    Napi::Value* pyobj_whichImage = NULL;
    int whichImage=0;
    Napi::Value* pyobj_F = NULL;
    Mat F;
    Napi::Value* pyobj_lines = NULL;
    Mat lines;

    const char* keywords[] = { "points", "whichImage", "F", "lines", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:computeCorrespondEpilines", (char**)keywords, &pyobj_points, &pyobj_whichImage, &pyobj_F, &pyobj_lines) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 0)) &&
        jsopencv_to_safe(info, pyobj_whichImage, whichImage, ArgInfo("whichImage", 0)) &&
        jsopencv_to_safe(info, pyobj_F, F, ArgInfo("F", 0)) &&
        jsopencv_to_safe(info, pyobj_lines, lines, ArgInfo("lines", 1)))
    {
        ERRWRAP2(cv::computeCorrespondEpilines(points, whichImage, F, lines));
        return jsopencv_from(lines);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_points = NULL;
    UMat points;
    Napi::Value* pyobj_whichImage = NULL;
    int whichImage=0;
    Napi::Value* pyobj_F = NULL;
    UMat F;
    Napi::Value* pyobj_lines = NULL;
    UMat lines;

    const char* keywords[] = { "points", "whichImage", "F", "lines", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:computeCorrespondEpilines", (char**)keywords, &pyobj_points, &pyobj_whichImage, &pyobj_F, &pyobj_lines) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 0)) &&
        jsopencv_to_safe(info, pyobj_whichImage, whichImage, ArgInfo("whichImage", 0)) &&
        jsopencv_to_safe(info, pyobj_F, F, ArgInfo("F", 0)) &&
        jsopencv_to_safe(info, pyobj_lines, lines, ArgInfo("lines", 1)))
    {
        ERRWRAP2(cv::computeCorrespondEpilines(points, whichImage, F, lines));
        return jsopencv_from(lines);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("computeCorrespondEpilines");

    return NULL;
}

static Napi::Value pyopencv_cv_computeECC(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_templateImage = NULL;
    Mat templateImage;
    Napi::Value* pyobj_inputImage = NULL;
    Mat inputImage;
    Napi::Value* pyobj_inputMask = NULL;
    Mat inputMask;
    double retval;

    const char* keywords[] = { "templateImage", "inputImage", "inputMask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:computeECC", (char**)keywords, &pyobj_templateImage, &pyobj_inputImage, &pyobj_inputMask) &&
        jsopencv_to_safe(info, pyobj_templateImage, templateImage, ArgInfo("templateImage", 0)) &&
        jsopencv_to_safe(info, pyobj_inputImage, inputImage, ArgInfo("inputImage", 0)) &&
        jsopencv_to_safe(info, pyobj_inputMask, inputMask, ArgInfo("inputMask", 0)))
    {
        ERRWRAP2(retval = cv::computeECC(templateImage, inputImage, inputMask));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_templateImage = NULL;
    UMat templateImage;
    Napi::Value* pyobj_inputImage = NULL;
    UMat inputImage;
    Napi::Value* pyobj_inputMask = NULL;
    UMat inputMask;
    double retval;

    const char* keywords[] = { "templateImage", "inputImage", "inputMask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:computeECC", (char**)keywords, &pyobj_templateImage, &pyobj_inputImage, &pyobj_inputMask) &&
        jsopencv_to_safe(info, pyobj_templateImage, templateImage, ArgInfo("templateImage", 0)) &&
        jsopencv_to_safe(info, pyobj_inputImage, inputImage, ArgInfo("inputImage", 0)) &&
        jsopencv_to_safe(info, pyobj_inputMask, inputMask, ArgInfo("inputMask", 0)))
    {
        ERRWRAP2(retval = cv::computeECC(templateImage, inputImage, inputMask));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("computeECC");

    return NULL;
}

static Napi::Value pyopencv_cv_connectedComponents(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_labels = NULL;
    Mat labels;
    Napi::Value* pyobj_connectivity = NULL;
    int connectivity=8;
    Napi::Value* pyobj_ltype = NULL;
    int ltype=CV_32S;
    int retval;

    const char* keywords[] = { "image", "labels", "connectivity", "ltype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:connectedComponents", (char**)keywords, &pyobj_image, &pyobj_labels, &pyobj_connectivity, &pyobj_ltype) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_labels, labels, ArgInfo("labels", 1)) &&
        jsopencv_to_safe(info, pyobj_connectivity, connectivity, ArgInfo("connectivity", 0)) &&
        jsopencv_to_safe(info, pyobj_ltype, ltype, ArgInfo("ltype", 0)))
    {
        ERRWRAP2(retval = cv::connectedComponents(image, labels, connectivity, ltype));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(labels));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_labels = NULL;
    UMat labels;
    Napi::Value* pyobj_connectivity = NULL;
    int connectivity=8;
    Napi::Value* pyobj_ltype = NULL;
    int ltype=CV_32S;
    int retval;

    const char* keywords[] = { "image", "labels", "connectivity", "ltype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:connectedComponents", (char**)keywords, &pyobj_image, &pyobj_labels, &pyobj_connectivity, &pyobj_ltype) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_labels, labels, ArgInfo("labels", 1)) &&
        jsopencv_to_safe(info, pyobj_connectivity, connectivity, ArgInfo("connectivity", 0)) &&
        jsopencv_to_safe(info, pyobj_ltype, ltype, ArgInfo("ltype", 0)))
    {
        ERRWRAP2(retval = cv::connectedComponents(image, labels, connectivity, ltype));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(labels));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("connectedComponents");

    return NULL;
}

static Napi::Value pyopencv_cv_connectedComponentsWithAlgorithm(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_labels = NULL;
    Mat labels;
    Napi::Value* pyobj_connectivity = NULL;
    int connectivity=0;
    Napi::Value* pyobj_ltype = NULL;
    int ltype=0;
    Napi::Value* pyobj_ccltype = NULL;
    int ccltype=0;
    int retval;

    const char* keywords[] = { "image", "connectivity", "ltype", "ccltype", "labels", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:connectedComponentsWithAlgorithm", (char**)keywords, &pyobj_image, &pyobj_connectivity, &pyobj_ltype, &pyobj_ccltype, &pyobj_labels) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_labels, labels, ArgInfo("labels", 1)) &&
        jsopencv_to_safe(info, pyobj_connectivity, connectivity, ArgInfo("connectivity", 0)) &&
        jsopencv_to_safe(info, pyobj_ltype, ltype, ArgInfo("ltype", 0)) &&
        jsopencv_to_safe(info, pyobj_ccltype, ccltype, ArgInfo("ccltype", 0)))
    {
        ERRWRAP2(retval = cv::connectedComponents(image, labels, connectivity, ltype, ccltype));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(labels));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_labels = NULL;
    UMat labels;
    Napi::Value* pyobj_connectivity = NULL;
    int connectivity=0;
    Napi::Value* pyobj_ltype = NULL;
    int ltype=0;
    Napi::Value* pyobj_ccltype = NULL;
    int ccltype=0;
    int retval;

    const char* keywords[] = { "image", "connectivity", "ltype", "ccltype", "labels", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:connectedComponentsWithAlgorithm", (char**)keywords, &pyobj_image, &pyobj_connectivity, &pyobj_ltype, &pyobj_ccltype, &pyobj_labels) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_labels, labels, ArgInfo("labels", 1)) &&
        jsopencv_to_safe(info, pyobj_connectivity, connectivity, ArgInfo("connectivity", 0)) &&
        jsopencv_to_safe(info, pyobj_ltype, ltype, ArgInfo("ltype", 0)) &&
        jsopencv_to_safe(info, pyobj_ccltype, ccltype, ArgInfo("ccltype", 0)))
    {
        ERRWRAP2(retval = cv::connectedComponents(image, labels, connectivity, ltype, ccltype));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(labels));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("connectedComponentsWithAlgorithm");

    return NULL;
}

static Napi::Value pyopencv_cv_connectedComponentsWithStats(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_labels = NULL;
    Mat labels;
    Napi::Value* pyobj_stats = NULL;
    Mat stats;
    Napi::Value* pyobj_centroids = NULL;
    Mat centroids;
    Napi::Value* pyobj_connectivity = NULL;
    int connectivity=8;
    Napi::Value* pyobj_ltype = NULL;
    int ltype=CV_32S;
    int retval;

    const char* keywords[] = { "image", "labels", "stats", "centroids", "connectivity", "ltype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOO:connectedComponentsWithStats", (char**)keywords, &pyobj_image, &pyobj_labels, &pyobj_stats, &pyobj_centroids, &pyobj_connectivity, &pyobj_ltype) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_labels, labels, ArgInfo("labels", 1)) &&
        jsopencv_to_safe(info, pyobj_stats, stats, ArgInfo("stats", 1)) &&
        jsopencv_to_safe(info, pyobj_centroids, centroids, ArgInfo("centroids", 1)) &&
        jsopencv_to_safe(info, pyobj_connectivity, connectivity, ArgInfo("connectivity", 0)) &&
        jsopencv_to_safe(info, pyobj_ltype, ltype, ArgInfo("ltype", 0)))
    {
        ERRWRAP2(retval = cv::connectedComponentsWithStats(image, labels, stats, centroids, connectivity, ltype));
        return Py_BuildValue("(NNNN)", jsopencv_from(retval), jsopencv_from(labels), jsopencv_from(stats), jsopencv_from(centroids));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_labels = NULL;
    UMat labels;
    Napi::Value* pyobj_stats = NULL;
    UMat stats;
    Napi::Value* pyobj_centroids = NULL;
    UMat centroids;
    Napi::Value* pyobj_connectivity = NULL;
    int connectivity=8;
    Napi::Value* pyobj_ltype = NULL;
    int ltype=CV_32S;
    int retval;

    const char* keywords[] = { "image", "labels", "stats", "centroids", "connectivity", "ltype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOO:connectedComponentsWithStats", (char**)keywords, &pyobj_image, &pyobj_labels, &pyobj_stats, &pyobj_centroids, &pyobj_connectivity, &pyobj_ltype) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_labels, labels, ArgInfo("labels", 1)) &&
        jsopencv_to_safe(info, pyobj_stats, stats, ArgInfo("stats", 1)) &&
        jsopencv_to_safe(info, pyobj_centroids, centroids, ArgInfo("centroids", 1)) &&
        jsopencv_to_safe(info, pyobj_connectivity, connectivity, ArgInfo("connectivity", 0)) &&
        jsopencv_to_safe(info, pyobj_ltype, ltype, ArgInfo("ltype", 0)))
    {
        ERRWRAP2(retval = cv::connectedComponentsWithStats(image, labels, stats, centroids, connectivity, ltype));
        return Py_BuildValue("(NNNN)", jsopencv_from(retval), jsopencv_from(labels), jsopencv_from(stats), jsopencv_from(centroids));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("connectedComponentsWithStats");

    return NULL;
}

static Napi::Value pyopencv_cv_connectedComponentsWithStatsWithAlgorithm(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_labels = NULL;
    Mat labels;
    Napi::Value* pyobj_stats = NULL;
    Mat stats;
    Napi::Value* pyobj_centroids = NULL;
    Mat centroids;
    Napi::Value* pyobj_connectivity = NULL;
    int connectivity=0;
    Napi::Value* pyobj_ltype = NULL;
    int ltype=0;
    Napi::Value* pyobj_ccltype = NULL;
    int ccltype=0;
    int retval;

    const char* keywords[] = { "image", "connectivity", "ltype", "ccltype", "labels", "stats", "centroids", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:connectedComponentsWithStatsWithAlgorithm", (char**)keywords, &pyobj_image, &pyobj_connectivity, &pyobj_ltype, &pyobj_ccltype, &pyobj_labels, &pyobj_stats, &pyobj_centroids) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_labels, labels, ArgInfo("labels", 1)) &&
        jsopencv_to_safe(info, pyobj_stats, stats, ArgInfo("stats", 1)) &&
        jsopencv_to_safe(info, pyobj_centroids, centroids, ArgInfo("centroids", 1)) &&
        jsopencv_to_safe(info, pyobj_connectivity, connectivity, ArgInfo("connectivity", 0)) &&
        jsopencv_to_safe(info, pyobj_ltype, ltype, ArgInfo("ltype", 0)) &&
        jsopencv_to_safe(info, pyobj_ccltype, ccltype, ArgInfo("ccltype", 0)))
    {
        ERRWRAP2(retval = cv::connectedComponentsWithStats(image, labels, stats, centroids, connectivity, ltype, ccltype));
        return Py_BuildValue("(NNNN)", jsopencv_from(retval), jsopencv_from(labels), jsopencv_from(stats), jsopencv_from(centroids));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_labels = NULL;
    UMat labels;
    Napi::Value* pyobj_stats = NULL;
    UMat stats;
    Napi::Value* pyobj_centroids = NULL;
    UMat centroids;
    Napi::Value* pyobj_connectivity = NULL;
    int connectivity=0;
    Napi::Value* pyobj_ltype = NULL;
    int ltype=0;
    Napi::Value* pyobj_ccltype = NULL;
    int ccltype=0;
    int retval;

    const char* keywords[] = { "image", "connectivity", "ltype", "ccltype", "labels", "stats", "centroids", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:connectedComponentsWithStatsWithAlgorithm", (char**)keywords, &pyobj_image, &pyobj_connectivity, &pyobj_ltype, &pyobj_ccltype, &pyobj_labels, &pyobj_stats, &pyobj_centroids) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_labels, labels, ArgInfo("labels", 1)) &&
        jsopencv_to_safe(info, pyobj_stats, stats, ArgInfo("stats", 1)) &&
        jsopencv_to_safe(info, pyobj_centroids, centroids, ArgInfo("centroids", 1)) &&
        jsopencv_to_safe(info, pyobj_connectivity, connectivity, ArgInfo("connectivity", 0)) &&
        jsopencv_to_safe(info, pyobj_ltype, ltype, ArgInfo("ltype", 0)) &&
        jsopencv_to_safe(info, pyobj_ccltype, ccltype, ArgInfo("ccltype", 0)))
    {
        ERRWRAP2(retval = cv::connectedComponentsWithStats(image, labels, stats, centroids, connectivity, ltype, ccltype));
        return Py_BuildValue("(NNNN)", jsopencv_from(retval), jsopencv_from(labels), jsopencv_from(stats), jsopencv_from(centroids));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("connectedComponentsWithStatsWithAlgorithm");

    return NULL;
}

static Napi::Value pyopencv_cv_contourArea(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_contour = NULL;
    Mat contour;
    Napi::Value* pyobj_oriented = NULL;
    bool oriented=false;
    double retval;

    const char* keywords[] = { "contour", "oriented", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:contourArea", (char**)keywords, &pyobj_contour, &pyobj_oriented) &&
        jsopencv_to_safe(info, pyobj_contour, contour, ArgInfo("contour", 0)) &&
        jsopencv_to_safe(info, pyobj_oriented, oriented, ArgInfo("oriented", 0)))
    {
        ERRWRAP2(retval = cv::contourArea(contour, oriented));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_contour = NULL;
    UMat contour;
    Napi::Value* pyobj_oriented = NULL;
    bool oriented=false;
    double retval;

    const char* keywords[] = { "contour", "oriented", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:contourArea", (char**)keywords, &pyobj_contour, &pyobj_oriented) &&
        jsopencv_to_safe(info, pyobj_contour, contour, ArgInfo("contour", 0)) &&
        jsopencv_to_safe(info, pyobj_oriented, oriented, ArgInfo("oriented", 0)))
    {
        ERRWRAP2(retval = cv::contourArea(contour, oriented));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("contourArea");

    return NULL;
}

static Napi::Value pyopencv_cv_convertFp16(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;

    const char* keywords[] = { "src", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:convertFp16", (char**)keywords, &pyobj_src, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::convertFp16(src, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;

    const char* keywords[] = { "src", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:convertFp16", (char**)keywords, &pyobj_src, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::convertFp16(src, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("convertFp16");

    return NULL;
}

static Napi::Value pyopencv_cv_convertMaps(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_map1 = NULL;
    Mat map1;
    Napi::Value* pyobj_map2 = NULL;
    Mat map2;
    Napi::Value* pyobj_dstmap1 = NULL;
    Mat dstmap1;
    Napi::Value* pyobj_dstmap2 = NULL;
    Mat dstmap2;
    Napi::Value* pyobj_dstmap1type = NULL;
    int dstmap1type=0;
    Napi::Value* pyobj_nninterpolation = NULL;
    bool nninterpolation=false;

    const char* keywords[] = { "map1", "map2", "dstmap1type", "dstmap1", "dstmap2", "nninterpolation", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:convertMaps", (char**)keywords, &pyobj_map1, &pyobj_map2, &pyobj_dstmap1type, &pyobj_dstmap1, &pyobj_dstmap2, &pyobj_nninterpolation) &&
        jsopencv_to_safe(info, pyobj_map1, map1, ArgInfo("map1", 0)) &&
        jsopencv_to_safe(info, pyobj_map2, map2, ArgInfo("map2", 0)) &&
        jsopencv_to_safe(info, pyobj_dstmap1, dstmap1, ArgInfo("dstmap1", 1)) &&
        jsopencv_to_safe(info, pyobj_dstmap2, dstmap2, ArgInfo("dstmap2", 1)) &&
        jsopencv_to_safe(info, pyobj_dstmap1type, dstmap1type, ArgInfo("dstmap1type", 0)) &&
        jsopencv_to_safe(info, pyobj_nninterpolation, nninterpolation, ArgInfo("nninterpolation", 0)))
    {
        ERRWRAP2(cv::convertMaps(map1, map2, dstmap1, dstmap2, dstmap1type, nninterpolation));
        return Py_BuildValue("(NN)", jsopencv_from(dstmap1), jsopencv_from(dstmap2));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_map1 = NULL;
    UMat map1;
    Napi::Value* pyobj_map2 = NULL;
    UMat map2;
    Napi::Value* pyobj_dstmap1 = NULL;
    UMat dstmap1;
    Napi::Value* pyobj_dstmap2 = NULL;
    UMat dstmap2;
    Napi::Value* pyobj_dstmap1type = NULL;
    int dstmap1type=0;
    Napi::Value* pyobj_nninterpolation = NULL;
    bool nninterpolation=false;

    const char* keywords[] = { "map1", "map2", "dstmap1type", "dstmap1", "dstmap2", "nninterpolation", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:convertMaps", (char**)keywords, &pyobj_map1, &pyobj_map2, &pyobj_dstmap1type, &pyobj_dstmap1, &pyobj_dstmap2, &pyobj_nninterpolation) &&
        jsopencv_to_safe(info, pyobj_map1, map1, ArgInfo("map1", 0)) &&
        jsopencv_to_safe(info, pyobj_map2, map2, ArgInfo("map2", 0)) &&
        jsopencv_to_safe(info, pyobj_dstmap1, dstmap1, ArgInfo("dstmap1", 1)) &&
        jsopencv_to_safe(info, pyobj_dstmap2, dstmap2, ArgInfo("dstmap2", 1)) &&
        jsopencv_to_safe(info, pyobj_dstmap1type, dstmap1type, ArgInfo("dstmap1type", 0)) &&
        jsopencv_to_safe(info, pyobj_nninterpolation, nninterpolation, ArgInfo("nninterpolation", 0)))
    {
        ERRWRAP2(cv::convertMaps(map1, map2, dstmap1, dstmap2, dstmap1type, nninterpolation));
        return Py_BuildValue("(NN)", jsopencv_from(dstmap1), jsopencv_from(dstmap2));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("convertMaps");

    return NULL;
}

static Napi::Value pyopencv_cv_convertPointsFromHomogeneous(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;

    const char* keywords[] = { "src", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:convertPointsFromHomogeneous", (char**)keywords, &pyobj_src, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::convertPointsFromHomogeneous(src, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;

    const char* keywords[] = { "src", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:convertPointsFromHomogeneous", (char**)keywords, &pyobj_src, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::convertPointsFromHomogeneous(src, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("convertPointsFromHomogeneous");

    return NULL;
}

static Napi::Value pyopencv_cv_convertPointsToHomogeneous(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;

    const char* keywords[] = { "src", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:convertPointsToHomogeneous", (char**)keywords, &pyobj_src, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::convertPointsToHomogeneous(src, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;

    const char* keywords[] = { "src", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:convertPointsToHomogeneous", (char**)keywords, &pyobj_src, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::convertPointsToHomogeneous(src, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("convertPointsToHomogeneous");

    return NULL;
}

static Napi::Value pyopencv_cv_convertScaleAbs(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=1;
    Napi::Value* pyobj_beta = NULL;
    double beta=0;

    const char* keywords[] = { "src", "dst", "alpha", "beta", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:convertScaleAbs", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_alpha, &pyobj_beta) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_beta, beta, ArgInfo("beta", 0)))
    {
        ERRWRAP2(cv::convertScaleAbs(src, dst, alpha, beta));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=1;
    Napi::Value* pyobj_beta = NULL;
    double beta=0;

    const char* keywords[] = { "src", "dst", "alpha", "beta", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:convertScaleAbs", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_alpha, &pyobj_beta) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_beta, beta, ArgInfo("beta", 0)))
    {
        ERRWRAP2(cv::convertScaleAbs(src, dst, alpha, beta));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("convertScaleAbs");

    return NULL;
}

static Napi::Value pyopencv_cv_convexHull(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_points = NULL;
    Mat points;
    Napi::Value* pyobj_hull = NULL;
    Mat hull;
    Napi::Value* pyobj_clockwise = NULL;
    bool clockwise=false;
    Napi::Value* pyobj_returnPoints = NULL;
    bool returnPoints=true;

    const char* keywords[] = { "points", "hull", "clockwise", "returnPoints", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:convexHull", (char**)keywords, &pyobj_points, &pyobj_hull, &pyobj_clockwise, &pyobj_returnPoints) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 0)) &&
        jsopencv_to_safe(info, pyobj_hull, hull, ArgInfo("hull", 1)) &&
        jsopencv_to_safe(info, pyobj_clockwise, clockwise, ArgInfo("clockwise", 0)) &&
        jsopencv_to_safe(info, pyobj_returnPoints, returnPoints, ArgInfo("returnPoints", 0)))
    {
        ERRWRAP2(cv::convexHull(points, hull, clockwise, returnPoints));
        return jsopencv_from(hull);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_points = NULL;
    UMat points;
    Napi::Value* pyobj_hull = NULL;
    UMat hull;
    Napi::Value* pyobj_clockwise = NULL;
    bool clockwise=false;
    Napi::Value* pyobj_returnPoints = NULL;
    bool returnPoints=true;

    const char* keywords[] = { "points", "hull", "clockwise", "returnPoints", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:convexHull", (char**)keywords, &pyobj_points, &pyobj_hull, &pyobj_clockwise, &pyobj_returnPoints) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 0)) &&
        jsopencv_to_safe(info, pyobj_hull, hull, ArgInfo("hull", 1)) &&
        jsopencv_to_safe(info, pyobj_clockwise, clockwise, ArgInfo("clockwise", 0)) &&
        jsopencv_to_safe(info, pyobj_returnPoints, returnPoints, ArgInfo("returnPoints", 0)))
    {
        ERRWRAP2(cv::convexHull(points, hull, clockwise, returnPoints));
        return jsopencv_from(hull);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("convexHull");

    return NULL;
}

static Napi::Value pyopencv_cv_convexityDefects(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_contour = NULL;
    Mat contour;
    Napi::Value* pyobj_convexhull = NULL;
    Mat convexhull;
    Napi::Value* pyobj_convexityDefects = NULL;
    Mat convexityDefects;

    const char* keywords[] = { "contour", "convexhull", "convexityDefects", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:convexityDefects", (char**)keywords, &pyobj_contour, &pyobj_convexhull, &pyobj_convexityDefects) &&
        jsopencv_to_safe(info, pyobj_contour, contour, ArgInfo("contour", 0)) &&
        jsopencv_to_safe(info, pyobj_convexhull, convexhull, ArgInfo("convexhull", 0)) &&
        jsopencv_to_safe(info, pyobj_convexityDefects, convexityDefects, ArgInfo("convexityDefects", 1)))
    {
        ERRWRAP2(cv::convexityDefects(contour, convexhull, convexityDefects));
        return jsopencv_from(convexityDefects);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_contour = NULL;
    UMat contour;
    Napi::Value* pyobj_convexhull = NULL;
    UMat convexhull;
    Napi::Value* pyobj_convexityDefects = NULL;
    UMat convexityDefects;

    const char* keywords[] = { "contour", "convexhull", "convexityDefects", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:convexityDefects", (char**)keywords, &pyobj_contour, &pyobj_convexhull, &pyobj_convexityDefects) &&
        jsopencv_to_safe(info, pyobj_contour, contour, ArgInfo("contour", 0)) &&
        jsopencv_to_safe(info, pyobj_convexhull, convexhull, ArgInfo("convexhull", 0)) &&
        jsopencv_to_safe(info, pyobj_convexityDefects, convexityDefects, ArgInfo("convexityDefects", 1)))
    {
        ERRWRAP2(cv::convexityDefects(contour, convexhull, convexityDefects));
        return jsopencv_from(convexityDefects);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("convexityDefects");

    return NULL;
}

static Napi::Value pyopencv_cv_copyMakeBorder(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_top = NULL;
    int top=0;
    Napi::Value* pyobj_bottom = NULL;
    int bottom=0;
    Napi::Value* pyobj_left = NULL;
    int left=0;
    Napi::Value* pyobj_right = NULL;
    int right=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=0;
    Napi::Value* pyobj_value = NULL;
    Scalar value;

    const char* keywords[] = { "src", "top", "bottom", "left", "right", "borderType", "dst", "value", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OO:copyMakeBorder", (char**)keywords, &pyobj_src, &pyobj_top, &pyobj_bottom, &pyobj_left, &pyobj_right, &pyobj_borderType, &pyobj_dst, &pyobj_value) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_top, top, ArgInfo("top", 0)) &&
        jsopencv_to_safe(info, pyobj_bottom, bottom, ArgInfo("bottom", 0)) &&
        jsopencv_to_safe(info, pyobj_left, left, ArgInfo("left", 0)) &&
        jsopencv_to_safe(info, pyobj_right, right, ArgInfo("right", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)) &&
        jsopencv_to_safe(info, pyobj_value, value, ArgInfo("value", 0)))
    {
        ERRWRAP2(cv::copyMakeBorder(src, dst, top, bottom, left, right, borderType, value));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_top = NULL;
    int top=0;
    Napi::Value* pyobj_bottom = NULL;
    int bottom=0;
    Napi::Value* pyobj_left = NULL;
    int left=0;
    Napi::Value* pyobj_right = NULL;
    int right=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=0;
    Napi::Value* pyobj_value = NULL;
    Scalar value;

    const char* keywords[] = { "src", "top", "bottom", "left", "right", "borderType", "dst", "value", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OO:copyMakeBorder", (char**)keywords, &pyobj_src, &pyobj_top, &pyobj_bottom, &pyobj_left, &pyobj_right, &pyobj_borderType, &pyobj_dst, &pyobj_value) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_top, top, ArgInfo("top", 0)) &&
        jsopencv_to_safe(info, pyobj_bottom, bottom, ArgInfo("bottom", 0)) &&
        jsopencv_to_safe(info, pyobj_left, left, ArgInfo("left", 0)) &&
        jsopencv_to_safe(info, pyobj_right, right, ArgInfo("right", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)) &&
        jsopencv_to_safe(info, pyobj_value, value, ArgInfo("value", 0)))
    {
        ERRWRAP2(cv::copyMakeBorder(src, dst, top, bottom, left, right, borderType, value));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("copyMakeBorder");

    return NULL;
}

static Napi::Value pyopencv_cv_copyTo(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;

    const char* keywords[] = { "src", "mask", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:copyTo", (char**)keywords, &pyobj_src, &pyobj_mask, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::copyTo(src, dst, mask));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;

    const char* keywords[] = { "src", "mask", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:copyTo", (char**)keywords, &pyobj_src, &pyobj_mask, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::copyTo(src, dst, mask));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("copyTo");

    return NULL;
}

static Napi::Value pyopencv_cv_cornerEigenValsAndVecs(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_blockSize = NULL;
    int blockSize=0;
    Napi::Value* pyobj_ksize = NULL;
    int ksize=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "blockSize", "ksize", "dst", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:cornerEigenValsAndVecs", (char**)keywords, &pyobj_src, &pyobj_blockSize, &pyobj_ksize, &pyobj_dst, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_blockSize, blockSize, ArgInfo("blockSize", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::cornerEigenValsAndVecs(src, dst, blockSize, ksize, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_blockSize = NULL;
    int blockSize=0;
    Napi::Value* pyobj_ksize = NULL;
    int ksize=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "blockSize", "ksize", "dst", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:cornerEigenValsAndVecs", (char**)keywords, &pyobj_src, &pyobj_blockSize, &pyobj_ksize, &pyobj_dst, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_blockSize, blockSize, ArgInfo("blockSize", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::cornerEigenValsAndVecs(src, dst, blockSize, ksize, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("cornerEigenValsAndVecs");

    return NULL;
}

static Napi::Value pyopencv_cv_cornerHarris(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_blockSize = NULL;
    int blockSize=0;
    Napi::Value* pyobj_ksize = NULL;
    int ksize=0;
    Napi::Value* pyobj_k = NULL;
    double k=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "blockSize", "ksize", "k", "dst", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OO:cornerHarris", (char**)keywords, &pyobj_src, &pyobj_blockSize, &pyobj_ksize, &pyobj_k, &pyobj_dst, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_blockSize, blockSize, ArgInfo("blockSize", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_k, k, ArgInfo("k", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::cornerHarris(src, dst, blockSize, ksize, k, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_blockSize = NULL;
    int blockSize=0;
    Napi::Value* pyobj_ksize = NULL;
    int ksize=0;
    Napi::Value* pyobj_k = NULL;
    double k=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "blockSize", "ksize", "k", "dst", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OO:cornerHarris", (char**)keywords, &pyobj_src, &pyobj_blockSize, &pyobj_ksize, &pyobj_k, &pyobj_dst, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_blockSize, blockSize, ArgInfo("blockSize", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_k, k, ArgInfo("k", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::cornerHarris(src, dst, blockSize, ksize, k, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("cornerHarris");

    return NULL;
}

static Napi::Value pyopencv_cv_cornerMinEigenVal(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_blockSize = NULL;
    int blockSize=0;
    Napi::Value* pyobj_ksize = NULL;
    int ksize=3;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "blockSize", "dst", "ksize", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:cornerMinEigenVal", (char**)keywords, &pyobj_src, &pyobj_blockSize, &pyobj_dst, &pyobj_ksize, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_blockSize, blockSize, ArgInfo("blockSize", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::cornerMinEigenVal(src, dst, blockSize, ksize, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_blockSize = NULL;
    int blockSize=0;
    Napi::Value* pyobj_ksize = NULL;
    int ksize=3;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "blockSize", "dst", "ksize", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:cornerMinEigenVal", (char**)keywords, &pyobj_src, &pyobj_blockSize, &pyobj_dst, &pyobj_ksize, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_blockSize, blockSize, ArgInfo("blockSize", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::cornerMinEigenVal(src, dst, blockSize, ksize, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("cornerMinEigenVal");

    return NULL;
}

static Napi::Value pyopencv_cv_cornerSubPix(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_corners = NULL;
    Mat corners;
    Napi::Value* pyobj_winSize = NULL;
    Size winSize;
    Napi::Value* pyobj_zeroZone = NULL;
    Size zeroZone;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria;

    const char* keywords[] = { "image", "corners", "winSize", "zeroZone", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO:cornerSubPix", (char**)keywords, &pyobj_image, &pyobj_corners, &pyobj_winSize, &pyobj_zeroZone, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_corners, corners, ArgInfo("corners", 1)) &&
        jsopencv_to_safe(info, pyobj_winSize, winSize, ArgInfo("winSize", 0)) &&
        jsopencv_to_safe(info, pyobj_zeroZone, zeroZone, ArgInfo("zeroZone", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(cv::cornerSubPix(image, corners, winSize, zeroZone, criteria));
        return jsopencv_from(corners);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_corners = NULL;
    UMat corners;
    Napi::Value* pyobj_winSize = NULL;
    Size winSize;
    Napi::Value* pyobj_zeroZone = NULL;
    Size zeroZone;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria;

    const char* keywords[] = { "image", "corners", "winSize", "zeroZone", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO:cornerSubPix", (char**)keywords, &pyobj_image, &pyobj_corners, &pyobj_winSize, &pyobj_zeroZone, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_corners, corners, ArgInfo("corners", 1)) &&
        jsopencv_to_safe(info, pyobj_winSize, winSize, ArgInfo("winSize", 0)) &&
        jsopencv_to_safe(info, pyobj_zeroZone, zeroZone, ArgInfo("zeroZone", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(cv::cornerSubPix(image, corners, winSize, zeroZone, criteria));
        return jsopencv_from(corners);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("cornerSubPix");

    return NULL;
}

static Napi::Value pyopencv_cv_correctMatches(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_F = NULL;
    Mat F;
    Napi::Value* pyobj_points1 = NULL;
    Mat points1;
    Napi::Value* pyobj_points2 = NULL;
    Mat points2;
    Napi::Value* pyobj_newPoints1 = NULL;
    Mat newPoints1;
    Napi::Value* pyobj_newPoints2 = NULL;
    Mat newPoints2;

    const char* keywords[] = { "F", "points1", "points2", "newPoints1", "newPoints2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:correctMatches", (char**)keywords, &pyobj_F, &pyobj_points1, &pyobj_points2, &pyobj_newPoints1, &pyobj_newPoints2) &&
        jsopencv_to_safe(info, pyobj_F, F, ArgInfo("F", 0)) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_newPoints1, newPoints1, ArgInfo("newPoints1", 1)) &&
        jsopencv_to_safe(info, pyobj_newPoints2, newPoints2, ArgInfo("newPoints2", 1)))
    {
        ERRWRAP2(cv::correctMatches(F, points1, points2, newPoints1, newPoints2));
        return Py_BuildValue("(NN)", jsopencv_from(newPoints1), jsopencv_from(newPoints2));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_F = NULL;
    UMat F;
    Napi::Value* pyobj_points1 = NULL;
    UMat points1;
    Napi::Value* pyobj_points2 = NULL;
    UMat points2;
    Napi::Value* pyobj_newPoints1 = NULL;
    UMat newPoints1;
    Napi::Value* pyobj_newPoints2 = NULL;
    UMat newPoints2;

    const char* keywords[] = { "F", "points1", "points2", "newPoints1", "newPoints2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:correctMatches", (char**)keywords, &pyobj_F, &pyobj_points1, &pyobj_points2, &pyobj_newPoints1, &pyobj_newPoints2) &&
        jsopencv_to_safe(info, pyobj_F, F, ArgInfo("F", 0)) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_newPoints1, newPoints1, ArgInfo("newPoints1", 1)) &&
        jsopencv_to_safe(info, pyobj_newPoints2, newPoints2, ArgInfo("newPoints2", 1)))
    {
        ERRWRAP2(cv::correctMatches(F, points1, points2, newPoints1, newPoints2));
        return Py_BuildValue("(NN)", jsopencv_from(newPoints1), jsopencv_from(newPoints2));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("correctMatches");

    return NULL;
}

static Napi::Value pyopencv_cv_countNonZero(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    int retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:countNonZero", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::countNonZero(src));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    int retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:countNonZero", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::countNonZero(src));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("countNonZero");

    return NULL;
}

static Napi::Value pyopencv_cv_createAlignMTB(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_max_bits = NULL;
    int max_bits=6;
    Napi::Value* pyobj_exclude_range = NULL;
    int exclude_range=4;
    Napi::Value* pyobj_cut = NULL;
    bool cut=true;
    Ptr<AlignMTB> retval;

    const char* keywords[] = { "max_bits", "exclude_range", "cut", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOO:createAlignMTB", (char**)keywords, &pyobj_max_bits, &pyobj_exclude_range, &pyobj_cut) &&
        jsopencv_to_safe(info, pyobj_max_bits, max_bits, ArgInfo("max_bits", 0)) &&
        jsopencv_to_safe(info, pyobj_exclude_range, exclude_range, ArgInfo("exclude_range", 0)) &&
        jsopencv_to_safe(info, pyobj_cut, cut, ArgInfo("cut", 0)))
    {
        ERRWRAP2(retval = cv::createAlignMTB(max_bits, exclude_range, cut));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_createBackgroundSubtractorKNN(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_history = NULL;
    int history=500;
    Napi::Value* pyobj_dist2Threshold = NULL;
    double dist2Threshold=400.0;
    Napi::Value* pyobj_detectShadows = NULL;
    bool detectShadows=true;
    Ptr<BackgroundSubtractorKNN> retval;

    const char* keywords[] = { "history", "dist2Threshold", "detectShadows", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOO:createBackgroundSubtractorKNN", (char**)keywords, &pyobj_history, &pyobj_dist2Threshold, &pyobj_detectShadows) &&
        jsopencv_to_safe(info, pyobj_history, history, ArgInfo("history", 0)) &&
        jsopencv_to_safe(info, pyobj_dist2Threshold, dist2Threshold, ArgInfo("dist2Threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_detectShadows, detectShadows, ArgInfo("detectShadows", 0)))
    {
        ERRWRAP2(retval = cv::createBackgroundSubtractorKNN(history, dist2Threshold, detectShadows));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_createBackgroundSubtractorMOG2(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_history = NULL;
    int history=500;
    Napi::Value* pyobj_varThreshold = NULL;
    double varThreshold=16;
    Napi::Value* pyobj_detectShadows = NULL;
    bool detectShadows=true;
    Ptr<BackgroundSubtractorMOG2> retval;

    const char* keywords[] = { "history", "varThreshold", "detectShadows", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOO:createBackgroundSubtractorMOG2", (char**)keywords, &pyobj_history, &pyobj_varThreshold, &pyobj_detectShadows) &&
        jsopencv_to_safe(info, pyobj_history, history, ArgInfo("history", 0)) &&
        jsopencv_to_safe(info, pyobj_varThreshold, varThreshold, ArgInfo("varThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_detectShadows, detectShadows, ArgInfo("detectShadows", 0)))
    {
        ERRWRAP2(retval = cv::createBackgroundSubtractorMOG2(history, varThreshold, detectShadows));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_createCLAHE(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_clipLimit = NULL;
    double clipLimit=40.0;
    Napi::Value* pyobj_tileGridSize = NULL;
    Size tileGridSize=Size(8, 8);
    Ptr<CLAHE> retval;

    const char* keywords[] = { "clipLimit", "tileGridSize", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OO:createCLAHE", (char**)keywords, &pyobj_clipLimit, &pyobj_tileGridSize) &&
        jsopencv_to_safe(info, pyobj_clipLimit, clipLimit, ArgInfo("clipLimit", 0)) &&
        jsopencv_to_safe(info, pyobj_tileGridSize, tileGridSize, ArgInfo("tileGridSize", 0)))
    {
        ERRWRAP2(retval = cv::createCLAHE(clipLimit, tileGridSize));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_createCalibrateDebevec(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_samples = NULL;
    int samples=70;
    Napi::Value* pyobj_lambda = NULL;
    float lambda=10.0f;
    Napi::Value* pyobj_random = NULL;
    bool random=false;
    Ptr<CalibrateDebevec> retval;

    const char* keywords[] = { "samples", "lambda_", "random", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOO:createCalibrateDebevec", (char**)keywords, &pyobj_samples, &pyobj_lambda, &pyobj_random) &&
        jsopencv_to_safe(info, pyobj_samples, samples, ArgInfo("samples", 0)) &&
        jsopencv_to_safe(info, pyobj_lambda, lambda, ArgInfo("lambda", 0)) &&
        jsopencv_to_safe(info, pyobj_random, random, ArgInfo("random", 0)))
    {
        ERRWRAP2(retval = cv::createCalibrateDebevec(samples, lambda, random));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_createCalibrateRobertson(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_max_iter = NULL;
    int max_iter=30;
    Napi::Value* pyobj_threshold = NULL;
    float threshold=0.01f;
    Ptr<CalibrateRobertson> retval;

    const char* keywords[] = { "max_iter", "threshold", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OO:createCalibrateRobertson", (char**)keywords, &pyobj_max_iter, &pyobj_threshold) &&
        jsopencv_to_safe(info, pyobj_max_iter, max_iter, ArgInfo("max_iter", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)))
    {
        ERRWRAP2(retval = cv::createCalibrateRobertson(max_iter, threshold));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_createGeneralizedHoughBallard(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Ptr<GeneralizedHoughBallard> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::createGeneralizedHoughBallard());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_createGeneralizedHoughGuil(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Ptr<GeneralizedHoughGuil> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::createGeneralizedHoughGuil());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_createHanningWindow(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_winSize = NULL;
    Size winSize;
    Napi::Value* pyobj_type = NULL;
    int type=0;

    const char* keywords[] = { "winSize", "type", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:createHanningWindow", (char**)keywords, &pyobj_winSize, &pyobj_type, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_winSize, winSize, ArgInfo("winSize", 0)) &&
        jsopencv_to_safe(info, pyobj_type, type, ArgInfo("type", 0)))
    {
        ERRWRAP2(cv::createHanningWindow(dst, winSize, type));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_winSize = NULL;
    Size winSize;
    Napi::Value* pyobj_type = NULL;
    int type=0;

    const char* keywords[] = { "winSize", "type", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:createHanningWindow", (char**)keywords, &pyobj_winSize, &pyobj_type, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_winSize, winSize, ArgInfo("winSize", 0)) &&
        jsopencv_to_safe(info, pyobj_type, type, ArgInfo("type", 0)))
    {
        ERRWRAP2(cv::createHanningWindow(dst, winSize, type));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("createHanningWindow");

    return NULL;
}

static Napi::Value pyopencv_cv_createLineSegmentDetector(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_refine = NULL;
    int refine=LSD_REFINE_STD;
    Napi::Value* pyobj_scale = NULL;
    double scale=0.8;
    Napi::Value* pyobj_sigma_scale = NULL;
    double sigma_scale=0.6;
    Napi::Value* pyobj_quant = NULL;
    double quant=2.0;
    Napi::Value* pyobj_ang_th = NULL;
    double ang_th=22.5;
    Napi::Value* pyobj_log_eps = NULL;
    double log_eps=0;
    Napi::Value* pyobj_density_th = NULL;
    double density_th=0.7;
    Napi::Value* pyobj_n_bins = NULL;
    int n_bins=1024;
    Ptr<LineSegmentDetector> retval;

    const char* keywords[] = { "refine", "scale", "sigma_scale", "quant", "ang_th", "log_eps", "density_th", "n_bins", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOOOOOO:createLineSegmentDetector", (char**)keywords, &pyobj_refine, &pyobj_scale, &pyobj_sigma_scale, &pyobj_quant, &pyobj_ang_th, &pyobj_log_eps, &pyobj_density_th, &pyobj_n_bins) &&
        jsopencv_to_safe(info, pyobj_refine, refine, ArgInfo("refine", 0)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_scale, sigma_scale, ArgInfo("sigma_scale", 0)) &&
        jsopencv_to_safe(info, pyobj_quant, quant, ArgInfo("quant", 0)) &&
        jsopencv_to_safe(info, pyobj_ang_th, ang_th, ArgInfo("ang_th", 0)) &&
        jsopencv_to_safe(info, pyobj_log_eps, log_eps, ArgInfo("log_eps", 0)) &&
        jsopencv_to_safe(info, pyobj_density_th, density_th, ArgInfo("density_th", 0)) &&
        jsopencv_to_safe(info, pyobj_n_bins, n_bins, ArgInfo("n_bins", 0)))
    {
        ERRWRAP2(retval = cv::createLineSegmentDetector(refine, scale, sigma_scale, quant, ang_th, log_eps, density_th, n_bins));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_createMergeDebevec(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Ptr<MergeDebevec> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::createMergeDebevec());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_createMergeMertens(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_contrast_weight = NULL;
    float contrast_weight=1.0f;
    Napi::Value* pyobj_saturation_weight = NULL;
    float saturation_weight=1.0f;
    Napi::Value* pyobj_exposure_weight = NULL;
    float exposure_weight=0.0f;
    Ptr<MergeMertens> retval;

    const char* keywords[] = { "contrast_weight", "saturation_weight", "exposure_weight", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOO:createMergeMertens", (char**)keywords, &pyobj_contrast_weight, &pyobj_saturation_weight, &pyobj_exposure_weight) &&
        jsopencv_to_safe(info, pyobj_contrast_weight, contrast_weight, ArgInfo("contrast_weight", 0)) &&
        jsopencv_to_safe(info, pyobj_saturation_weight, saturation_weight, ArgInfo("saturation_weight", 0)) &&
        jsopencv_to_safe(info, pyobj_exposure_weight, exposure_weight, ArgInfo("exposure_weight", 0)))
    {
        ERRWRAP2(retval = cv::createMergeMertens(contrast_weight, saturation_weight, exposure_weight));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_createMergeRobertson(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Ptr<MergeRobertson> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::createMergeRobertson());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_createTonemap(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_gamma = NULL;
    float gamma=1.0f;
    Ptr<Tonemap> retval;

    const char* keywords[] = { "gamma", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|O:createTonemap", (char**)keywords, &pyobj_gamma) &&
        jsopencv_to_safe(info, pyobj_gamma, gamma, ArgInfo("gamma", 0)))
    {
        ERRWRAP2(retval = cv::createTonemap(gamma));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_createTonemapDrago(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_gamma = NULL;
    float gamma=1.0f;
    Napi::Value* pyobj_saturation = NULL;
    float saturation=1.0f;
    Napi::Value* pyobj_bias = NULL;
    float bias=0.85f;
    Ptr<TonemapDrago> retval;

    const char* keywords[] = { "gamma", "saturation", "bias", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOO:createTonemapDrago", (char**)keywords, &pyobj_gamma, &pyobj_saturation, &pyobj_bias) &&
        jsopencv_to_safe(info, pyobj_gamma, gamma, ArgInfo("gamma", 0)) &&
        jsopencv_to_safe(info, pyobj_saturation, saturation, ArgInfo("saturation", 0)) &&
        jsopencv_to_safe(info, pyobj_bias, bias, ArgInfo("bias", 0)))
    {
        ERRWRAP2(retval = cv::createTonemapDrago(gamma, saturation, bias));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_createTonemapMantiuk(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_gamma = NULL;
    float gamma=1.0f;
    Napi::Value* pyobj_scale = NULL;
    float scale=0.7f;
    Napi::Value* pyobj_saturation = NULL;
    float saturation=1.0f;
    Ptr<TonemapMantiuk> retval;

    const char* keywords[] = { "gamma", "scale", "saturation", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOO:createTonemapMantiuk", (char**)keywords, &pyobj_gamma, &pyobj_scale, &pyobj_saturation) &&
        jsopencv_to_safe(info, pyobj_gamma, gamma, ArgInfo("gamma", 0)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)) &&
        jsopencv_to_safe(info, pyobj_saturation, saturation, ArgInfo("saturation", 0)))
    {
        ERRWRAP2(retval = cv::createTonemapMantiuk(gamma, scale, saturation));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_createTonemapReinhard(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_gamma = NULL;
    float gamma=1.0f;
    Napi::Value* pyobj_intensity = NULL;
    float intensity=0.0f;
    Napi::Value* pyobj_light_adapt = NULL;
    float light_adapt=1.0f;
    Napi::Value* pyobj_color_adapt = NULL;
    float color_adapt=0.0f;
    Ptr<TonemapReinhard> retval;

    const char* keywords[] = { "gamma", "intensity", "light_adapt", "color_adapt", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOO:createTonemapReinhard", (char**)keywords, &pyobj_gamma, &pyobj_intensity, &pyobj_light_adapt, &pyobj_color_adapt) &&
        jsopencv_to_safe(info, pyobj_gamma, gamma, ArgInfo("gamma", 0)) &&
        jsopencv_to_safe(info, pyobj_intensity, intensity, ArgInfo("intensity", 0)) &&
        jsopencv_to_safe(info, pyobj_light_adapt, light_adapt, ArgInfo("light_adapt", 0)) &&
        jsopencv_to_safe(info, pyobj_color_adapt, color_adapt, ArgInfo("color_adapt", 0)))
    {
        ERRWRAP2(retval = cv::createTonemapReinhard(gamma, intensity, light_adapt, color_adapt));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cubeRoot(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_val = NULL;
    float val=0.f;
    float retval;

    const char* keywords[] = { "val", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:cubeRoot", (char**)keywords, &pyobj_val) &&
        jsopencv_to_safe(info, pyobj_val, val, ArgInfo("val", 0)))
    {
        ERRWRAP2(retval = cv::cubeRoot(val));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cvtColor(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_code = NULL;
    int code=0;
    Napi::Value* pyobj_dstCn = NULL;
    int dstCn=0;

    const char* keywords[] = { "src", "code", "dst", "dstCn", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:cvtColor", (char**)keywords, &pyobj_src, &pyobj_code, &pyobj_dst, &pyobj_dstCn) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_code, code, ArgInfo("code", 0)) &&
        jsopencv_to_safe(info, pyobj_dstCn, dstCn, ArgInfo("dstCn", 0)))
    {
        ERRWRAP2(cv::cvtColor(src, dst, code, dstCn));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_code = NULL;
    int code=0;
    Napi::Value* pyobj_dstCn = NULL;
    int dstCn=0;

    const char* keywords[] = { "src", "code", "dst", "dstCn", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:cvtColor", (char**)keywords, &pyobj_src, &pyobj_code, &pyobj_dst, &pyobj_dstCn) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_code, code, ArgInfo("code", 0)) &&
        jsopencv_to_safe(info, pyobj_dstCn, dstCn, ArgInfo("dstCn", 0)))
    {
        ERRWRAP2(cv::cvtColor(src, dst, code, dstCn));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("cvtColor");

    return NULL;
}

static Napi::Value pyopencv_cv_cvtColorTwoPlane(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    Mat src1;
    Napi::Value* pyobj_src2 = NULL;
    Mat src2;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_code = NULL;
    int code=0;

    const char* keywords[] = { "src1", "src2", "code", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:cvtColorTwoPlane", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_code, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_code, code, ArgInfo("code", 0)))
    {
        ERRWRAP2(cv::cvtColorTwoPlane(src1, src2, dst, code));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    UMat src1;
    Napi::Value* pyobj_src2 = NULL;
    UMat src2;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_code = NULL;
    int code=0;

    const char* keywords[] = { "src1", "src2", "code", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:cvtColorTwoPlane", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_code, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_code, code, ArgInfo("code", 0)))
    {
        ERRWRAP2(cv::cvtColorTwoPlane(src1, src2, dst, code));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("cvtColorTwoPlane");

    return NULL;
}

static Napi::Value pyopencv_cv_dct(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;

    const char* keywords[] = { "src", "dst", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:dct", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::dct(src, dst, flags));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;

    const char* keywords[] = { "src", "dst", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:dct", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::dct(src, dst, flags));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("dct");

    return NULL;
}

static Napi::Value pyopencv_cv_decolor(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_grayscale = NULL;
    Mat grayscale;
    Napi::Value* pyobj_color_boost = NULL;
    Mat color_boost;

    const char* keywords[] = { "src", "grayscale", "color_boost", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:decolor", (char**)keywords, &pyobj_src, &pyobj_grayscale, &pyobj_color_boost) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_grayscale, grayscale, ArgInfo("grayscale", 1)) &&
        jsopencv_to_safe(info, pyobj_color_boost, color_boost, ArgInfo("color_boost", 1)))
    {
        ERRWRAP2(cv::decolor(src, grayscale, color_boost));
        return Py_BuildValue("(NN)", jsopencv_from(grayscale), jsopencv_from(color_boost));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_grayscale = NULL;
    UMat grayscale;
    Napi::Value* pyobj_color_boost = NULL;
    UMat color_boost;

    const char* keywords[] = { "src", "grayscale", "color_boost", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:decolor", (char**)keywords, &pyobj_src, &pyobj_grayscale, &pyobj_color_boost) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_grayscale, grayscale, ArgInfo("grayscale", 1)) &&
        jsopencv_to_safe(info, pyobj_color_boost, color_boost, ArgInfo("color_boost", 1)))
    {
        ERRWRAP2(cv::decolor(src, grayscale, color_boost));
        return Py_BuildValue("(NN)", jsopencv_from(grayscale), jsopencv_from(color_boost));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("decolor");

    return NULL;
}

static Napi::Value pyopencv_cv_decomposeEssentialMat(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_E = NULL;
    Mat E;
    Napi::Value* pyobj_R1 = NULL;
    Mat R1;
    Napi::Value* pyobj_R2 = NULL;
    Mat R2;
    Napi::Value* pyobj_t = NULL;
    Mat t;

    const char* keywords[] = { "E", "R1", "R2", "t", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:decomposeEssentialMat", (char**)keywords, &pyobj_E, &pyobj_R1, &pyobj_R2, &pyobj_t) &&
        jsopencv_to_safe(info, pyobj_E, E, ArgInfo("E", 0)) &&
        jsopencv_to_safe(info, pyobj_R1, R1, ArgInfo("R1", 1)) &&
        jsopencv_to_safe(info, pyobj_R2, R2, ArgInfo("R2", 1)) &&
        jsopencv_to_safe(info, pyobj_t, t, ArgInfo("t", 1)))
    {
        ERRWRAP2(cv::decomposeEssentialMat(E, R1, R2, t));
        return Py_BuildValue("(NNN)", jsopencv_from(R1), jsopencv_from(R2), jsopencv_from(t));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_E = NULL;
    UMat E;
    Napi::Value* pyobj_R1 = NULL;
    UMat R1;
    Napi::Value* pyobj_R2 = NULL;
    UMat R2;
    Napi::Value* pyobj_t = NULL;
    UMat t;

    const char* keywords[] = { "E", "R1", "R2", "t", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:decomposeEssentialMat", (char**)keywords, &pyobj_E, &pyobj_R1, &pyobj_R2, &pyobj_t) &&
        jsopencv_to_safe(info, pyobj_E, E, ArgInfo("E", 0)) &&
        jsopencv_to_safe(info, pyobj_R1, R1, ArgInfo("R1", 1)) &&
        jsopencv_to_safe(info, pyobj_R2, R2, ArgInfo("R2", 1)) &&
        jsopencv_to_safe(info, pyobj_t, t, ArgInfo("t", 1)))
    {
        ERRWRAP2(cv::decomposeEssentialMat(E, R1, R2, t));
        return Py_BuildValue("(NNN)", jsopencv_from(R1), jsopencv_from(R2), jsopencv_from(t));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("decomposeEssentialMat");

    return NULL;
}

static Napi::Value pyopencv_cv_decomposeHomographyMat(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_H = NULL;
    Mat H;
    Napi::Value* pyobj_K = NULL;
    Mat K;
    Napi::Value* pyobj_rotations = NULL;
    vector_Mat rotations;
    Napi::Value* pyobj_translations = NULL;
    vector_Mat translations;
    Napi::Value* pyobj_normals = NULL;
    vector_Mat normals;
    int retval;

    const char* keywords[] = { "H", "K", "rotations", "translations", "normals", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:decomposeHomographyMat", (char**)keywords, &pyobj_H, &pyobj_K, &pyobj_rotations, &pyobj_translations, &pyobj_normals) &&
        jsopencv_to_safe(info, pyobj_H, H, ArgInfo("H", 0)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_rotations, rotations, ArgInfo("rotations", 1)) &&
        jsopencv_to_safe(info, pyobj_translations, translations, ArgInfo("translations", 1)) &&
        jsopencv_to_safe(info, pyobj_normals, normals, ArgInfo("normals", 1)))
    {
        ERRWRAP2(retval = cv::decomposeHomographyMat(H, K, rotations, translations, normals));
        return Py_BuildValue("(NNNN)", jsopencv_from(retval), jsopencv_from(rotations), jsopencv_from(translations), jsopencv_from(normals));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_H = NULL;
    UMat H;
    Napi::Value* pyobj_K = NULL;
    UMat K;
    Napi::Value* pyobj_rotations = NULL;
    vector_UMat rotations;
    Napi::Value* pyobj_translations = NULL;
    vector_UMat translations;
    Napi::Value* pyobj_normals = NULL;
    vector_UMat normals;
    int retval;

    const char* keywords[] = { "H", "K", "rotations", "translations", "normals", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:decomposeHomographyMat", (char**)keywords, &pyobj_H, &pyobj_K, &pyobj_rotations, &pyobj_translations, &pyobj_normals) &&
        jsopencv_to_safe(info, pyobj_H, H, ArgInfo("H", 0)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_rotations, rotations, ArgInfo("rotations", 1)) &&
        jsopencv_to_safe(info, pyobj_translations, translations, ArgInfo("translations", 1)) &&
        jsopencv_to_safe(info, pyobj_normals, normals, ArgInfo("normals", 1)))
    {
        ERRWRAP2(retval = cv::decomposeHomographyMat(H, K, rotations, translations, normals));
        return Py_BuildValue("(NNNN)", jsopencv_from(retval), jsopencv_from(rotations), jsopencv_from(translations), jsopencv_from(normals));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("decomposeHomographyMat");

    return NULL;
}

static Napi::Value pyopencv_cv_decomposeProjectionMatrix(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_projMatrix = NULL;
    Mat projMatrix;
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_rotMatrix = NULL;
    Mat rotMatrix;
    Napi::Value* pyobj_transVect = NULL;
    Mat transVect;
    Napi::Value* pyobj_rotMatrixX = NULL;
    Mat rotMatrixX;
    Napi::Value* pyobj_rotMatrixY = NULL;
    Mat rotMatrixY;
    Napi::Value* pyobj_rotMatrixZ = NULL;
    Mat rotMatrixZ;
    Napi::Value* pyobj_eulerAngles = NULL;
    Mat eulerAngles;

    const char* keywords[] = { "projMatrix", "cameraMatrix", "rotMatrix", "transVect", "rotMatrixX", "rotMatrixY", "rotMatrixZ", "eulerAngles", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOOOO:decomposeProjectionMatrix", (char**)keywords, &pyobj_projMatrix, &pyobj_cameraMatrix, &pyobj_rotMatrix, &pyobj_transVect, &pyobj_rotMatrixX, &pyobj_rotMatrixY, &pyobj_rotMatrixZ, &pyobj_eulerAngles) &&
        jsopencv_to_safe(info, pyobj_projMatrix, projMatrix, ArgInfo("projMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 1)) &&
        jsopencv_to_safe(info, pyobj_rotMatrix, rotMatrix, ArgInfo("rotMatrix", 1)) &&
        jsopencv_to_safe(info, pyobj_transVect, transVect, ArgInfo("transVect", 1)) &&
        jsopencv_to_safe(info, pyobj_rotMatrixX, rotMatrixX, ArgInfo("rotMatrixX", 1)) &&
        jsopencv_to_safe(info, pyobj_rotMatrixY, rotMatrixY, ArgInfo("rotMatrixY", 1)) &&
        jsopencv_to_safe(info, pyobj_rotMatrixZ, rotMatrixZ, ArgInfo("rotMatrixZ", 1)) &&
        jsopencv_to_safe(info, pyobj_eulerAngles, eulerAngles, ArgInfo("eulerAngles", 1)))
    {
        ERRWRAP2(cv::decomposeProjectionMatrix(projMatrix, cameraMatrix, rotMatrix, transVect, rotMatrixX, rotMatrixY, rotMatrixZ, eulerAngles));
        return Py_BuildValue("(NNNNNNN)", jsopencv_from(cameraMatrix), jsopencv_from(rotMatrix), jsopencv_from(transVect), jsopencv_from(rotMatrixX), jsopencv_from(rotMatrixY), jsopencv_from(rotMatrixZ), jsopencv_from(eulerAngles));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_projMatrix = NULL;
    UMat projMatrix;
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_rotMatrix = NULL;
    UMat rotMatrix;
    Napi::Value* pyobj_transVect = NULL;
    UMat transVect;
    Napi::Value* pyobj_rotMatrixX = NULL;
    UMat rotMatrixX;
    Napi::Value* pyobj_rotMatrixY = NULL;
    UMat rotMatrixY;
    Napi::Value* pyobj_rotMatrixZ = NULL;
    UMat rotMatrixZ;
    Napi::Value* pyobj_eulerAngles = NULL;
    UMat eulerAngles;

    const char* keywords[] = { "projMatrix", "cameraMatrix", "rotMatrix", "transVect", "rotMatrixX", "rotMatrixY", "rotMatrixZ", "eulerAngles", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOOOO:decomposeProjectionMatrix", (char**)keywords, &pyobj_projMatrix, &pyobj_cameraMatrix, &pyobj_rotMatrix, &pyobj_transVect, &pyobj_rotMatrixX, &pyobj_rotMatrixY, &pyobj_rotMatrixZ, &pyobj_eulerAngles) &&
        jsopencv_to_safe(info, pyobj_projMatrix, projMatrix, ArgInfo("projMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 1)) &&
        jsopencv_to_safe(info, pyobj_rotMatrix, rotMatrix, ArgInfo("rotMatrix", 1)) &&
        jsopencv_to_safe(info, pyobj_transVect, transVect, ArgInfo("transVect", 1)) &&
        jsopencv_to_safe(info, pyobj_rotMatrixX, rotMatrixX, ArgInfo("rotMatrixX", 1)) &&
        jsopencv_to_safe(info, pyobj_rotMatrixY, rotMatrixY, ArgInfo("rotMatrixY", 1)) &&
        jsopencv_to_safe(info, pyobj_rotMatrixZ, rotMatrixZ, ArgInfo("rotMatrixZ", 1)) &&
        jsopencv_to_safe(info, pyobj_eulerAngles, eulerAngles, ArgInfo("eulerAngles", 1)))
    {
        ERRWRAP2(cv::decomposeProjectionMatrix(projMatrix, cameraMatrix, rotMatrix, transVect, rotMatrixX, rotMatrixY, rotMatrixZ, eulerAngles));
        return Py_BuildValue("(NNNNNNN)", jsopencv_from(cameraMatrix), jsopencv_from(rotMatrix), jsopencv_from(transVect), jsopencv_from(rotMatrixX), jsopencv_from(rotMatrixY), jsopencv_from(rotMatrixZ), jsopencv_from(eulerAngles));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("decomposeProjectionMatrix");

    return NULL;
}

static Napi::Value pyopencv_cv_demosaicing(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_code = NULL;
    int code=0;
    Napi::Value* pyobj_dstCn = NULL;
    int dstCn=0;

    const char* keywords[] = { "src", "code", "dst", "dstCn", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:demosaicing", (char**)keywords, &pyobj_src, &pyobj_code, &pyobj_dst, &pyobj_dstCn) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_code, code, ArgInfo("code", 0)) &&
        jsopencv_to_safe(info, pyobj_dstCn, dstCn, ArgInfo("dstCn", 0)))
    {
        ERRWRAP2(cv::demosaicing(src, dst, code, dstCn));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_code = NULL;
    int code=0;
    Napi::Value* pyobj_dstCn = NULL;
    int dstCn=0;

    const char* keywords[] = { "src", "code", "dst", "dstCn", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:demosaicing", (char**)keywords, &pyobj_src, &pyobj_code, &pyobj_dst, &pyobj_dstCn) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_code, code, ArgInfo("code", 0)) &&
        jsopencv_to_safe(info, pyobj_dstCn, dstCn, ArgInfo("dstCn", 0)))
    {
        ERRWRAP2(cv::demosaicing(src, dst, code, dstCn));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("demosaicing");

    return NULL;
}

static Napi::Value pyopencv_cv_denoise_TVL1(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_observations = NULL;
    vector_Mat observations;
    Napi::Value* pyobj_result = NULL;
    Mat result;
    Napi::Value* pyobj_lambda = NULL;
    double lambda=1.0;
    Napi::Value* pyobj_niters = NULL;
    int niters=30;

    const char* keywords[] = { "observations", "result", "lambda_", "niters", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:denoise_TVL1", (char**)keywords, &pyobj_observations, &pyobj_result, &pyobj_lambda, &pyobj_niters) &&
        jsopencv_to_safe(info, pyobj_observations, observations, ArgInfo("observations", 0)) &&
        jsopencv_to_safe(info, pyobj_result, result, ArgInfo("result", 0)) &&
        jsopencv_to_safe(info, pyobj_lambda, lambda, ArgInfo("lambda", 0)) &&
        jsopencv_to_safe(info, pyobj_niters, niters, ArgInfo("niters", 0)))
    {
        ERRWRAP2(cv::denoise_TVL1(observations, result, lambda, niters));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_destroyAllWindows(const Napi::CallbackInfo &info)
{
    using namespace cv;


    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(cv::destroyAllWindows());
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_destroyWindow(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_winname = NULL;
    String winname;

    const char* keywords[] = { "winname", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:destroyWindow", (char**)keywords, &pyobj_winname) &&
        jsopencv_to_safe(info, pyobj_winname, winname, ArgInfo("winname", 0)))
    {
        ERRWRAP2(cv::destroyWindow(winname));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_detailEnhance(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_sigma_s = NULL;
    float sigma_s=10;
    Napi::Value* pyobj_sigma_r = NULL;
    float sigma_r=0.15f;

    const char* keywords[] = { "src", "dst", "sigma_s", "sigma_r", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:detailEnhance", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_sigma_s, &pyobj_sigma_r) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_sigma_s, sigma_s, ArgInfo("sigma_s", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_r, sigma_r, ArgInfo("sigma_r", 0)))
    {
        ERRWRAP2(cv::detailEnhance(src, dst, sigma_s, sigma_r));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_sigma_s = NULL;
    float sigma_s=10;
    Napi::Value* pyobj_sigma_r = NULL;
    float sigma_r=0.15f;

    const char* keywords[] = { "src", "dst", "sigma_s", "sigma_r", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:detailEnhance", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_sigma_s, &pyobj_sigma_r) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_sigma_s, sigma_s, ArgInfo("sigma_s", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_r, sigma_r, ArgInfo("sigma_r", 0)))
    {
        ERRWRAP2(cv::detailEnhance(src, dst, sigma_s, sigma_r));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("detailEnhance");

    return NULL;
}

static Napi::Value pyopencv_cv_determinant(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_mtx = NULL;
    Mat mtx;
    double retval;

    const char* keywords[] = { "mtx", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:determinant", (char**)keywords, &pyobj_mtx) &&
        jsopencv_to_safe(info, pyobj_mtx, mtx, ArgInfo("mtx", 0)))
    {
        ERRWRAP2(retval = cv::determinant(mtx));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_mtx = NULL;
    UMat mtx;
    double retval;

    const char* keywords[] = { "mtx", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:determinant", (char**)keywords, &pyobj_mtx) &&
        jsopencv_to_safe(info, pyobj_mtx, mtx, ArgInfo("mtx", 0)))
    {
        ERRWRAP2(retval = cv::determinant(mtx));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("determinant");

    return NULL;
}

static Napi::Value pyopencv_cv_dft(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_nonzeroRows = NULL;
    int nonzeroRows=0;

    const char* keywords[] = { "src", "dst", "flags", "nonzeroRows", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:dft", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_flags, &pyobj_nonzeroRows) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_nonzeroRows, nonzeroRows, ArgInfo("nonzeroRows", 0)))
    {
        ERRWRAP2(cv::dft(src, dst, flags, nonzeroRows));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_nonzeroRows = NULL;
    int nonzeroRows=0;

    const char* keywords[] = { "src", "dst", "flags", "nonzeroRows", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:dft", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_flags, &pyobj_nonzeroRows) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_nonzeroRows, nonzeroRows, ArgInfo("nonzeroRows", 0)))
    {
        ERRWRAP2(cv::dft(src, dst, flags, nonzeroRows));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("dft");

    return NULL;
}

static Napi::Value pyopencv_cv_dilate(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_kernel = NULL;
    Mat kernel;
    Napi::Value* pyobj_anchor = NULL;
    Point anchor=Point(-1,-1);
    Napi::Value* pyobj_iterations = NULL;
    int iterations=1;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_CONSTANT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue=morphologyDefaultBorderValue();

    const char* keywords[] = { "src", "kernel", "dst", "anchor", "iterations", "borderType", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOOO:dilate", (char**)keywords, &pyobj_src, &pyobj_kernel, &pyobj_dst, &pyobj_anchor, &pyobj_iterations, &pyobj_borderType, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_kernel, kernel, ArgInfo("kernel", 0)) &&
        jsopencv_to_safe(info, pyobj_anchor, anchor, ArgInfo("anchor", 0)) &&
        jsopencv_to_safe(info, pyobj_iterations, iterations, ArgInfo("iterations", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(cv::dilate(src, dst, kernel, anchor, iterations, borderType, borderValue));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_kernel = NULL;
    UMat kernel;
    Napi::Value* pyobj_anchor = NULL;
    Point anchor=Point(-1,-1);
    Napi::Value* pyobj_iterations = NULL;
    int iterations=1;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_CONSTANT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue=morphologyDefaultBorderValue();

    const char* keywords[] = { "src", "kernel", "dst", "anchor", "iterations", "borderType", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOOO:dilate", (char**)keywords, &pyobj_src, &pyobj_kernel, &pyobj_dst, &pyobj_anchor, &pyobj_iterations, &pyobj_borderType, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_kernel, kernel, ArgInfo("kernel", 0)) &&
        jsopencv_to_safe(info, pyobj_anchor, anchor, ArgInfo("anchor", 0)) &&
        jsopencv_to_safe(info, pyobj_iterations, iterations, ArgInfo("iterations", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(cv::dilate(src, dst, kernel, anchor, iterations, borderType, borderValue));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("dilate");

    return NULL;
}

static Napi::Value pyopencv_cv_displayOverlay(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_winname = NULL;
    String winname;
    Napi::Value* pyobj_text = NULL;
    String text;
    Napi::Value* pyobj_delayms = NULL;
    int delayms=0;

    const char* keywords[] = { "winname", "text", "delayms", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:displayOverlay", (char**)keywords, &pyobj_winname, &pyobj_text, &pyobj_delayms) &&
        jsopencv_to_safe(info, pyobj_winname, winname, ArgInfo("winname", 0)) &&
        jsopencv_to_safe(info, pyobj_text, text, ArgInfo("text", 0)) &&
        jsopencv_to_safe(info, pyobj_delayms, delayms, ArgInfo("delayms", 0)))
    {
        ERRWRAP2(cv::displayOverlay(winname, text, delayms));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_displayStatusBar(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_winname = NULL;
    String winname;
    Napi::Value* pyobj_text = NULL;
    String text;
    Napi::Value* pyobj_delayms = NULL;
    int delayms=0;

    const char* keywords[] = { "winname", "text", "delayms", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:displayStatusBar", (char**)keywords, &pyobj_winname, &pyobj_text, &pyobj_delayms) &&
        jsopencv_to_safe(info, pyobj_winname, winname, ArgInfo("winname", 0)) &&
        jsopencv_to_safe(info, pyobj_text, text, ArgInfo("text", 0)) &&
        jsopencv_to_safe(info, pyobj_delayms, delayms, ArgInfo("delayms", 0)))
    {
        ERRWRAP2(cv::displayStatusBar(winname, text, delayms));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_distanceTransform(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_distanceType = NULL;
    int distanceType=0;
    Napi::Value* pyobj_maskSize = NULL;
    int maskSize=0;
    Napi::Value* pyobj_dstType = NULL;
    int dstType=CV_32F;

    const char* keywords[] = { "src", "distanceType", "maskSize", "dst", "dstType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:distanceTransform", (char**)keywords, &pyobj_src, &pyobj_distanceType, &pyobj_maskSize, &pyobj_dst, &pyobj_dstType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_distanceType, distanceType, ArgInfo("distanceType", 0)) &&
        jsopencv_to_safe(info, pyobj_maskSize, maskSize, ArgInfo("maskSize", 0)) &&
        jsopencv_to_safe(info, pyobj_dstType, dstType, ArgInfo("dstType", 0)))
    {
        ERRWRAP2(cv::distanceTransform(src, dst, distanceType, maskSize, dstType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_distanceType = NULL;
    int distanceType=0;
    Napi::Value* pyobj_maskSize = NULL;
    int maskSize=0;
    Napi::Value* pyobj_dstType = NULL;
    int dstType=CV_32F;

    const char* keywords[] = { "src", "distanceType", "maskSize", "dst", "dstType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:distanceTransform", (char**)keywords, &pyobj_src, &pyobj_distanceType, &pyobj_maskSize, &pyobj_dst, &pyobj_dstType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_distanceType, distanceType, ArgInfo("distanceType", 0)) &&
        jsopencv_to_safe(info, pyobj_maskSize, maskSize, ArgInfo("maskSize", 0)) &&
        jsopencv_to_safe(info, pyobj_dstType, dstType, ArgInfo("dstType", 0)))
    {
        ERRWRAP2(cv::distanceTransform(src, dst, distanceType, maskSize, dstType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("distanceTransform");

    return NULL;
}

static Napi::Value pyopencv_cv_distanceTransformWithLabels(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_labels = NULL;
    Mat labels;
    Napi::Value* pyobj_distanceType = NULL;
    int distanceType=0;
    Napi::Value* pyobj_maskSize = NULL;
    int maskSize=0;
    Napi::Value* pyobj_labelType = NULL;
    int labelType=DIST_LABEL_CCOMP;

    const char* keywords[] = { "src", "distanceType", "maskSize", "dst", "labels", "labelType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:distanceTransformWithLabels", (char**)keywords, &pyobj_src, &pyobj_distanceType, &pyobj_maskSize, &pyobj_dst, &pyobj_labels, &pyobj_labelType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_labels, labels, ArgInfo("labels", 1)) &&
        jsopencv_to_safe(info, pyobj_distanceType, distanceType, ArgInfo("distanceType", 0)) &&
        jsopencv_to_safe(info, pyobj_maskSize, maskSize, ArgInfo("maskSize", 0)) &&
        jsopencv_to_safe(info, pyobj_labelType, labelType, ArgInfo("labelType", 0)))
    {
        ERRWRAP2(cv::distanceTransform(src, dst, labels, distanceType, maskSize, labelType));
        return Py_BuildValue("(NN)", jsopencv_from(dst), jsopencv_from(labels));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_labels = NULL;
    UMat labels;
    Napi::Value* pyobj_distanceType = NULL;
    int distanceType=0;
    Napi::Value* pyobj_maskSize = NULL;
    int maskSize=0;
    Napi::Value* pyobj_labelType = NULL;
    int labelType=DIST_LABEL_CCOMP;

    const char* keywords[] = { "src", "distanceType", "maskSize", "dst", "labels", "labelType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:distanceTransformWithLabels", (char**)keywords, &pyobj_src, &pyobj_distanceType, &pyobj_maskSize, &pyobj_dst, &pyobj_labels, &pyobj_labelType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_labels, labels, ArgInfo("labels", 1)) &&
        jsopencv_to_safe(info, pyobj_distanceType, distanceType, ArgInfo("distanceType", 0)) &&
        jsopencv_to_safe(info, pyobj_maskSize, maskSize, ArgInfo("maskSize", 0)) &&
        jsopencv_to_safe(info, pyobj_labelType, labelType, ArgInfo("labelType", 0)))
    {
        ERRWRAP2(cv::distanceTransform(src, dst, labels, distanceType, maskSize, labelType));
        return Py_BuildValue("(NN)", jsopencv_from(dst), jsopencv_from(labels));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("distanceTransformWithLabels");

    return NULL;
}

static Napi::Value pyopencv_cv_divSpectrums(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_a = NULL;
    Mat a;
    Napi::Value* pyobj_b = NULL;
    Mat b;
    Napi::Value* pyobj_c = NULL;
    Mat c;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_conjB = NULL;
    bool conjB=false;

    const char* keywords[] = { "a", "b", "flags", "c", "conjB", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:divSpectrums", (char**)keywords, &pyobj_a, &pyobj_b, &pyobj_flags, &pyobj_c, &pyobj_conjB) &&
        jsopencv_to_safe(info, pyobj_a, a, ArgInfo("a", 0)) &&
        jsopencv_to_safe(info, pyobj_b, b, ArgInfo("b", 0)) &&
        jsopencv_to_safe(info, pyobj_c, c, ArgInfo("c", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_conjB, conjB, ArgInfo("conjB", 0)))
    {
        ERRWRAP2(cv::divSpectrums(a, b, c, flags, conjB));
        return jsopencv_from(c);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_a = NULL;
    UMat a;
    Napi::Value* pyobj_b = NULL;
    UMat b;
    Napi::Value* pyobj_c = NULL;
    UMat c;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_conjB = NULL;
    bool conjB=false;

    const char* keywords[] = { "a", "b", "flags", "c", "conjB", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:divSpectrums", (char**)keywords, &pyobj_a, &pyobj_b, &pyobj_flags, &pyobj_c, &pyobj_conjB) &&
        jsopencv_to_safe(info, pyobj_a, a, ArgInfo("a", 0)) &&
        jsopencv_to_safe(info, pyobj_b, b, ArgInfo("b", 0)) &&
        jsopencv_to_safe(info, pyobj_c, c, ArgInfo("c", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_conjB, conjB, ArgInfo("conjB", 0)))
    {
        ERRWRAP2(cv::divSpectrums(a, b, c, flags, conjB));
        return jsopencv_from(c);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("divSpectrums");

    return NULL;
}

static Napi::Value pyopencv_cv_divide(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_src1 = NULL;
    Mat src1;
    Napi::Value* pyobj_src2 = NULL;
    Mat src2;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_scale = NULL;
    double scale=1;
    Napi::Value* pyobj_dtype = NULL;
    int dtype=-1;

    const char* keywords[] = { "src1", "src2", "dst", "scale", "dtype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:divide", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst, &pyobj_scale, &pyobj_dtype) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)) &&
        jsopencv_to_safe(info, pyobj_dtype, dtype, ArgInfo("dtype", 0)))
    {
        ERRWRAP2(cv::divide(src1, src2, dst, scale, dtype));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    UMat src1;
    Napi::Value* pyobj_src2 = NULL;
    UMat src2;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_scale = NULL;
    double scale=1;
    Napi::Value* pyobj_dtype = NULL;
    int dtype=-1;

    const char* keywords[] = { "src1", "src2", "dst", "scale", "dtype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:divide", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst, &pyobj_scale, &pyobj_dtype) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)) &&
        jsopencv_to_safe(info, pyobj_dtype, dtype, ArgInfo("dtype", 0)))
    {
        ERRWRAP2(cv::divide(src1, src2, dst, scale, dtype));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_scale = NULL;
    double scale=0;
    Napi::Value* pyobj_src2 = NULL;
    Mat src2;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_dtype = NULL;
    int dtype=-1;

    const char* keywords[] = { "scale", "src2", "dst", "dtype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:divide", (char**)keywords, &pyobj_scale, &pyobj_src2, &pyobj_dst, &pyobj_dtype) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_dtype, dtype, ArgInfo("dtype", 0)))
    {
        ERRWRAP2(cv::divide(scale, src2, dst, dtype));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_scale = NULL;
    double scale=0;
    Napi::Value* pyobj_src2 = NULL;
    UMat src2;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_dtype = NULL;
    int dtype=-1;

    const char* keywords[] = { "scale", "src2", "dst", "dtype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:divide", (char**)keywords, &pyobj_scale, &pyobj_src2, &pyobj_dst, &pyobj_dtype) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_dtype, dtype, ArgInfo("dtype", 0)))
    {
        ERRWRAP2(cv::divide(scale, src2, dst, dtype));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("divide");

    return NULL;
}

static Napi::Value pyopencv_cv_drawChessboardCorners(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_patternSize = NULL;
    Size patternSize;
    Napi::Value* pyobj_corners = NULL;
    Mat corners;
    Napi::Value* pyobj_patternWasFound = NULL;
    bool patternWasFound=0;

    const char* keywords[] = { "image", "patternSize", "corners", "patternWasFound", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO:drawChessboardCorners", (char**)keywords, &pyobj_image, &pyobj_patternSize, &pyobj_corners, &pyobj_patternWasFound) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 1)) &&
        jsopencv_to_safe(info, pyobj_patternSize, patternSize, ArgInfo("patternSize", 0)) &&
        jsopencv_to_safe(info, pyobj_corners, corners, ArgInfo("corners", 0)) &&
        jsopencv_to_safe(info, pyobj_patternWasFound, patternWasFound, ArgInfo("patternWasFound", 0)))
    {
        ERRWRAP2(cv::drawChessboardCorners(image, patternSize, corners, patternWasFound));
        return jsopencv_from(image);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_patternSize = NULL;
    Size patternSize;
    Napi::Value* pyobj_corners = NULL;
    UMat corners;
    Napi::Value* pyobj_patternWasFound = NULL;
    bool patternWasFound=0;

    const char* keywords[] = { "image", "patternSize", "corners", "patternWasFound", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO:drawChessboardCorners", (char**)keywords, &pyobj_image, &pyobj_patternSize, &pyobj_corners, &pyobj_patternWasFound) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 1)) &&
        jsopencv_to_safe(info, pyobj_patternSize, patternSize, ArgInfo("patternSize", 0)) &&
        jsopencv_to_safe(info, pyobj_corners, corners, ArgInfo("corners", 0)) &&
        jsopencv_to_safe(info, pyobj_patternWasFound, patternWasFound, ArgInfo("patternWasFound", 0)))
    {
        ERRWRAP2(cv::drawChessboardCorners(image, patternSize, corners, patternWasFound));
        return jsopencv_from(image);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("drawChessboardCorners");

    return NULL;
}

static Napi::Value pyopencv_cv_drawContours(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_contours = NULL;
    vector_Mat contours;
    Napi::Value* pyobj_contourIdx = NULL;
    int contourIdx=0;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=1;
    Napi::Value* pyobj_lineType = NULL;
    int lineType=LINE_8;
    Napi::Value* pyobj_hierarchy = NULL;
    Mat hierarchy;
    Napi::Value* pyobj_maxLevel = NULL;
    int maxLevel=INT_MAX;
    Napi::Value* pyobj_offset = NULL;
    Point offset;

    const char* keywords[] = { "image", "contours", "contourIdx", "color", "thickness", "lineType", "hierarchy", "maxLevel", "offset", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOOO:drawContours", (char**)keywords, &pyobj_image, &pyobj_contours, &pyobj_contourIdx, &pyobj_color, &pyobj_thickness, &pyobj_lineType, &pyobj_hierarchy, &pyobj_maxLevel, &pyobj_offset) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 1)) &&
        jsopencv_to_safe(info, pyobj_contours, contours, ArgInfo("contours", 0)) &&
        jsopencv_to_safe(info, pyobj_contourIdx, contourIdx, ArgInfo("contourIdx", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)) &&
        jsopencv_to_safe(info, pyobj_lineType, lineType, ArgInfo("lineType", 0)) &&
        jsopencv_to_safe(info, pyobj_hierarchy, hierarchy, ArgInfo("hierarchy", 0)) &&
        jsopencv_to_safe(info, pyobj_maxLevel, maxLevel, ArgInfo("maxLevel", 0)) &&
        jsopencv_to_safe(info, pyobj_offset, offset, ArgInfo("offset", 0)))
    {
        ERRWRAP2(cv::drawContours(image, contours, contourIdx, color, thickness, lineType, hierarchy, maxLevel, offset));
        return jsopencv_from(image);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_contours = NULL;
    vector_UMat contours;
    Napi::Value* pyobj_contourIdx = NULL;
    int contourIdx=0;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=1;
    Napi::Value* pyobj_lineType = NULL;
    int lineType=LINE_8;
    Napi::Value* pyobj_hierarchy = NULL;
    UMat hierarchy;
    Napi::Value* pyobj_maxLevel = NULL;
    int maxLevel=INT_MAX;
    Napi::Value* pyobj_offset = NULL;
    Point offset;

    const char* keywords[] = { "image", "contours", "contourIdx", "color", "thickness", "lineType", "hierarchy", "maxLevel", "offset", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOOO:drawContours", (char**)keywords, &pyobj_image, &pyobj_contours, &pyobj_contourIdx, &pyobj_color, &pyobj_thickness, &pyobj_lineType, &pyobj_hierarchy, &pyobj_maxLevel, &pyobj_offset) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 1)) &&
        jsopencv_to_safe(info, pyobj_contours, contours, ArgInfo("contours", 0)) &&
        jsopencv_to_safe(info, pyobj_contourIdx, contourIdx, ArgInfo("contourIdx", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)) &&
        jsopencv_to_safe(info, pyobj_lineType, lineType, ArgInfo("lineType", 0)) &&
        jsopencv_to_safe(info, pyobj_hierarchy, hierarchy, ArgInfo("hierarchy", 0)) &&
        jsopencv_to_safe(info, pyobj_maxLevel, maxLevel, ArgInfo("maxLevel", 0)) &&
        jsopencv_to_safe(info, pyobj_offset, offset, ArgInfo("offset", 0)))
    {
        ERRWRAP2(cv::drawContours(image, contours, contourIdx, color, thickness, lineType, hierarchy, maxLevel, offset));
        return jsopencv_from(image);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("drawContours");

    return NULL;
}

static Napi::Value pyopencv_cv_drawFrameAxes(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    Mat distCoeffs;
    Napi::Value* pyobj_rvec = NULL;
    Mat rvec;
    Napi::Value* pyobj_tvec = NULL;
    Mat tvec;
    Napi::Value* pyobj_length = NULL;
    float length=0.f;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=3;

    const char* keywords[] = { "image", "cameraMatrix", "distCoeffs", "rvec", "tvec", "length", "thickness", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|O:drawFrameAxes", (char**)keywords, &pyobj_image, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_rvec, &pyobj_tvec, &pyobj_length, &pyobj_thickness) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 1)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_rvec, rvec, ArgInfo("rvec", 0)) &&
        jsopencv_to_safe(info, pyobj_tvec, tvec, ArgInfo("tvec", 0)) &&
        jsopencv_to_safe(info, pyobj_length, length, ArgInfo("length", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)))
    {
        ERRWRAP2(cv::drawFrameAxes(image, cameraMatrix, distCoeffs, rvec, tvec, length, thickness));
        return jsopencv_from(image);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    UMat distCoeffs;
    Napi::Value* pyobj_rvec = NULL;
    UMat rvec;
    Napi::Value* pyobj_tvec = NULL;
    UMat tvec;
    Napi::Value* pyobj_length = NULL;
    float length=0.f;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=3;

    const char* keywords[] = { "image", "cameraMatrix", "distCoeffs", "rvec", "tvec", "length", "thickness", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|O:drawFrameAxes", (char**)keywords, &pyobj_image, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_rvec, &pyobj_tvec, &pyobj_length, &pyobj_thickness) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 1)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_rvec, rvec, ArgInfo("rvec", 0)) &&
        jsopencv_to_safe(info, pyobj_tvec, tvec, ArgInfo("tvec", 0)) &&
        jsopencv_to_safe(info, pyobj_length, length, ArgInfo("length", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)))
    {
        ERRWRAP2(cv::drawFrameAxes(image, cameraMatrix, distCoeffs, rvec, tvec, length, thickness));
        return jsopencv_from(image);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("drawFrameAxes");

    return NULL;
}

static Napi::Value pyopencv_cv_drawKeypoints(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_keypoints = NULL;
    vector_KeyPoint keypoints;
    Napi::Value* pyobj_outImage = NULL;
    Mat outImage;
    Napi::Value* pyobj_color = NULL;
    Scalar color=Scalar::all(-1);
    Napi::Value* pyobj_flags = NULL;
    DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT;

    const char* keywords[] = { "image", "keypoints", "outImage", "color", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:drawKeypoints", (char**)keywords, &pyobj_image, &pyobj_keypoints, &pyobj_outImage, &pyobj_color, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_keypoints, keypoints, ArgInfo("keypoints", 0)) &&
        jsopencv_to_safe(info, pyobj_outImage, outImage, ArgInfo("outImage", 1)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::drawKeypoints(image, keypoints, outImage, color, flags));
        return jsopencv_from(outImage);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_keypoints = NULL;
    vector_KeyPoint keypoints;
    Napi::Value* pyobj_outImage = NULL;
    UMat outImage;
    Napi::Value* pyobj_color = NULL;
    Scalar color=Scalar::all(-1);
    Napi::Value* pyobj_flags = NULL;
    DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT;

    const char* keywords[] = { "image", "keypoints", "outImage", "color", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:drawKeypoints", (char**)keywords, &pyobj_image, &pyobj_keypoints, &pyobj_outImage, &pyobj_color, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_keypoints, keypoints, ArgInfo("keypoints", 0)) &&
        jsopencv_to_safe(info, pyobj_outImage, outImage, ArgInfo("outImage", 1)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::drawKeypoints(image, keypoints, outImage, color, flags));
        return jsopencv_from(outImage);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("drawKeypoints");

    return NULL;
}

static Napi::Value pyopencv_cv_drawMarker(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_position = NULL;
    Point position;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_markerType = NULL;
    int markerType=MARKER_CROSS;
    Napi::Value* pyobj_markerSize = NULL;
    int markerSize=20;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=1;
    Napi::Value* pyobj_line_type = NULL;
    int line_type=8;

    const char* keywords[] = { "img", "position", "color", "markerType", "markerSize", "thickness", "line_type", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:drawMarker", (char**)keywords, &pyobj_img, &pyobj_position, &pyobj_color, &pyobj_markerType, &pyobj_markerSize, &pyobj_thickness, &pyobj_line_type) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_position, position, ArgInfo("position", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_markerType, markerType, ArgInfo("markerType", 0)) &&
        jsopencv_to_safe(info, pyobj_markerSize, markerSize, ArgInfo("markerSize", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)) &&
        jsopencv_to_safe(info, pyobj_line_type, line_type, ArgInfo("line_type", 0)))
    {
        ERRWRAP2(cv::drawMarker(img, position, color, markerType, markerSize, thickness, line_type));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_position = NULL;
    Point position;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_markerType = NULL;
    int markerType=MARKER_CROSS;
    Napi::Value* pyobj_markerSize = NULL;
    int markerSize=20;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=1;
    Napi::Value* pyobj_line_type = NULL;
    int line_type=8;

    const char* keywords[] = { "img", "position", "color", "markerType", "markerSize", "thickness", "line_type", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:drawMarker", (char**)keywords, &pyobj_img, &pyobj_position, &pyobj_color, &pyobj_markerType, &pyobj_markerSize, &pyobj_thickness, &pyobj_line_type) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_position, position, ArgInfo("position", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_markerType, markerType, ArgInfo("markerType", 0)) &&
        jsopencv_to_safe(info, pyobj_markerSize, markerSize, ArgInfo("markerSize", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)) &&
        jsopencv_to_safe(info, pyobj_line_type, line_type, ArgInfo("line_type", 0)))
    {
        ERRWRAP2(cv::drawMarker(img, position, color, markerType, markerSize, thickness, line_type));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("drawMarker");

    return NULL;
}

static Napi::Value pyopencv_cv_drawMatches(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_img1 = NULL;
    Mat img1;
    Napi::Value* pyobj_keypoints1 = NULL;
    vector_KeyPoint keypoints1;
    Napi::Value* pyobj_img2 = NULL;
    Mat img2;
    Napi::Value* pyobj_keypoints2 = NULL;
    vector_KeyPoint keypoints2;
    Napi::Value* pyobj_matches1to2 = NULL;
    vector_DMatch matches1to2;
    Napi::Value* pyobj_outImg = NULL;
    Mat outImg;
    Napi::Value* pyobj_matchColor = NULL;
    Scalar matchColor=Scalar::all(-1);
    Napi::Value* pyobj_singlePointColor = NULL;
    Scalar singlePointColor=Scalar::all(-1);
    Napi::Value* pyobj_matchesMask = NULL;
    vector_char matchesMask=std::vector<char>();
    Napi::Value* pyobj_flags = NULL;
    DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT;

    const char* keywords[] = { "img1", "keypoints1", "img2", "keypoints2", "matches1to2", "outImg", "matchColor", "singlePointColor", "matchesMask", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OOOO:drawMatches", (char**)keywords, &pyobj_img1, &pyobj_keypoints1, &pyobj_img2, &pyobj_keypoints2, &pyobj_matches1to2, &pyobj_outImg, &pyobj_matchColor, &pyobj_singlePointColor, &pyobj_matchesMask, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_img1, img1, ArgInfo("img1", 0)) &&
        jsopencv_to_safe(info, pyobj_keypoints1, keypoints1, ArgInfo("keypoints1", 0)) &&
        jsopencv_to_safe(info, pyobj_img2, img2, ArgInfo("img2", 0)) &&
        jsopencv_to_safe(info, pyobj_keypoints2, keypoints2, ArgInfo("keypoints2", 0)) &&
        jsopencv_to_safe(info, pyobj_matches1to2, matches1to2, ArgInfo("matches1to2", 0)) &&
        jsopencv_to_safe(info, pyobj_outImg, outImg, ArgInfo("outImg", 1)) &&
        jsopencv_to_safe(info, pyobj_matchColor, matchColor, ArgInfo("matchColor", 0)) &&
        jsopencv_to_safe(info, pyobj_singlePointColor, singlePointColor, ArgInfo("singlePointColor", 0)) &&
        jsopencv_to_safe(info, pyobj_matchesMask, matchesMask, ArgInfo("matchesMask", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::drawMatches(img1, keypoints1, img2, keypoints2, matches1to2, outImg, matchColor, singlePointColor, matchesMask, flags));
        return jsopencv_from(outImg);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img1 = NULL;
    UMat img1;
    Napi::Value* pyobj_keypoints1 = NULL;
    vector_KeyPoint keypoints1;
    Napi::Value* pyobj_img2 = NULL;
    UMat img2;
    Napi::Value* pyobj_keypoints2 = NULL;
    vector_KeyPoint keypoints2;
    Napi::Value* pyobj_matches1to2 = NULL;
    vector_DMatch matches1to2;
    Napi::Value* pyobj_outImg = NULL;
    UMat outImg;
    Napi::Value* pyobj_matchColor = NULL;
    Scalar matchColor=Scalar::all(-1);
    Napi::Value* pyobj_singlePointColor = NULL;
    Scalar singlePointColor=Scalar::all(-1);
    Napi::Value* pyobj_matchesMask = NULL;
    vector_char matchesMask=std::vector<char>();
    Napi::Value* pyobj_flags = NULL;
    DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT;

    const char* keywords[] = { "img1", "keypoints1", "img2", "keypoints2", "matches1to2", "outImg", "matchColor", "singlePointColor", "matchesMask", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OOOO:drawMatches", (char**)keywords, &pyobj_img1, &pyobj_keypoints1, &pyobj_img2, &pyobj_keypoints2, &pyobj_matches1to2, &pyobj_outImg, &pyobj_matchColor, &pyobj_singlePointColor, &pyobj_matchesMask, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_img1, img1, ArgInfo("img1", 0)) &&
        jsopencv_to_safe(info, pyobj_keypoints1, keypoints1, ArgInfo("keypoints1", 0)) &&
        jsopencv_to_safe(info, pyobj_img2, img2, ArgInfo("img2", 0)) &&
        jsopencv_to_safe(info, pyobj_keypoints2, keypoints2, ArgInfo("keypoints2", 0)) &&
        jsopencv_to_safe(info, pyobj_matches1to2, matches1to2, ArgInfo("matches1to2", 0)) &&
        jsopencv_to_safe(info, pyobj_outImg, outImg, ArgInfo("outImg", 1)) &&
        jsopencv_to_safe(info, pyobj_matchColor, matchColor, ArgInfo("matchColor", 0)) &&
        jsopencv_to_safe(info, pyobj_singlePointColor, singlePointColor, ArgInfo("singlePointColor", 0)) &&
        jsopencv_to_safe(info, pyobj_matchesMask, matchesMask, ArgInfo("matchesMask", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::drawMatches(img1, keypoints1, img2, keypoints2, matches1to2, outImg, matchColor, singlePointColor, matchesMask, flags));
        return jsopencv_from(outImg);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img1 = NULL;
    Mat img1;
    Napi::Value* pyobj_keypoints1 = NULL;
    vector_KeyPoint keypoints1;
    Napi::Value* pyobj_img2 = NULL;
    Mat img2;
    Napi::Value* pyobj_keypoints2 = NULL;
    vector_KeyPoint keypoints2;
    Napi::Value* pyobj_matches1to2 = NULL;
    vector_DMatch matches1to2;
    Napi::Value* pyobj_outImg = NULL;
    Mat outImg;
    Napi::Value* pyobj_matchesThickness = NULL;
    int matchesThickness=0;
    Napi::Value* pyobj_matchColor = NULL;
    Scalar matchColor=Scalar::all(-1);
    Napi::Value* pyobj_singlePointColor = NULL;
    Scalar singlePointColor=Scalar::all(-1);
    Napi::Value* pyobj_matchesMask = NULL;
    vector_char matchesMask=std::vector<char>();
    Napi::Value* pyobj_flags = NULL;
    DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT;

    const char* keywords[] = { "img1", "keypoints1", "img2", "keypoints2", "matches1to2", "outImg", "matchesThickness", "matchColor", "singlePointColor", "matchesMask", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOO|OOOO:drawMatches", (char**)keywords, &pyobj_img1, &pyobj_keypoints1, &pyobj_img2, &pyobj_keypoints2, &pyobj_matches1to2, &pyobj_outImg, &pyobj_matchesThickness, &pyobj_matchColor, &pyobj_singlePointColor, &pyobj_matchesMask, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_img1, img1, ArgInfo("img1", 0)) &&
        jsopencv_to_safe(info, pyobj_keypoints1, keypoints1, ArgInfo("keypoints1", 0)) &&
        jsopencv_to_safe(info, pyobj_img2, img2, ArgInfo("img2", 0)) &&
        jsopencv_to_safe(info, pyobj_keypoints2, keypoints2, ArgInfo("keypoints2", 0)) &&
        jsopencv_to_safe(info, pyobj_matches1to2, matches1to2, ArgInfo("matches1to2", 0)) &&
        jsopencv_to_safe(info, pyobj_outImg, outImg, ArgInfo("outImg", 1)) &&
        jsopencv_to_safe(info, pyobj_matchesThickness, matchesThickness, ArgInfo("matchesThickness", 0)) &&
        jsopencv_to_safe(info, pyobj_matchColor, matchColor, ArgInfo("matchColor", 0)) &&
        jsopencv_to_safe(info, pyobj_singlePointColor, singlePointColor, ArgInfo("singlePointColor", 0)) &&
        jsopencv_to_safe(info, pyobj_matchesMask, matchesMask, ArgInfo("matchesMask", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::drawMatches(img1, keypoints1, img2, keypoints2, matches1to2, outImg, matchesThickness, matchColor, singlePointColor, matchesMask, flags));
        return jsopencv_from(outImg);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img1 = NULL;
    UMat img1;
    Napi::Value* pyobj_keypoints1 = NULL;
    vector_KeyPoint keypoints1;
    Napi::Value* pyobj_img2 = NULL;
    UMat img2;
    Napi::Value* pyobj_keypoints2 = NULL;
    vector_KeyPoint keypoints2;
    Napi::Value* pyobj_matches1to2 = NULL;
    vector_DMatch matches1to2;
    Napi::Value* pyobj_outImg = NULL;
    UMat outImg;
    Napi::Value* pyobj_matchesThickness = NULL;
    int matchesThickness=0;
    Napi::Value* pyobj_matchColor = NULL;
    Scalar matchColor=Scalar::all(-1);
    Napi::Value* pyobj_singlePointColor = NULL;
    Scalar singlePointColor=Scalar::all(-1);
    Napi::Value* pyobj_matchesMask = NULL;
    vector_char matchesMask=std::vector<char>();
    Napi::Value* pyobj_flags = NULL;
    DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT;

    const char* keywords[] = { "img1", "keypoints1", "img2", "keypoints2", "matches1to2", "outImg", "matchesThickness", "matchColor", "singlePointColor", "matchesMask", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOO|OOOO:drawMatches", (char**)keywords, &pyobj_img1, &pyobj_keypoints1, &pyobj_img2, &pyobj_keypoints2, &pyobj_matches1to2, &pyobj_outImg, &pyobj_matchesThickness, &pyobj_matchColor, &pyobj_singlePointColor, &pyobj_matchesMask, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_img1, img1, ArgInfo("img1", 0)) &&
        jsopencv_to_safe(info, pyobj_keypoints1, keypoints1, ArgInfo("keypoints1", 0)) &&
        jsopencv_to_safe(info, pyobj_img2, img2, ArgInfo("img2", 0)) &&
        jsopencv_to_safe(info, pyobj_keypoints2, keypoints2, ArgInfo("keypoints2", 0)) &&
        jsopencv_to_safe(info, pyobj_matches1to2, matches1to2, ArgInfo("matches1to2", 0)) &&
        jsopencv_to_safe(info, pyobj_outImg, outImg, ArgInfo("outImg", 1)) &&
        jsopencv_to_safe(info, pyobj_matchesThickness, matchesThickness, ArgInfo("matchesThickness", 0)) &&
        jsopencv_to_safe(info, pyobj_matchColor, matchColor, ArgInfo("matchColor", 0)) &&
        jsopencv_to_safe(info, pyobj_singlePointColor, singlePointColor, ArgInfo("singlePointColor", 0)) &&
        jsopencv_to_safe(info, pyobj_matchesMask, matchesMask, ArgInfo("matchesMask", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::drawMatches(img1, keypoints1, img2, keypoints2, matches1to2, outImg, matchesThickness, matchColor, singlePointColor, matchesMask, flags));
        return jsopencv_from(outImg);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("drawMatches");

    return NULL;
}

static Napi::Value pyopencv_cv_drawMatchesKnn(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_img1 = NULL;
    Mat img1;
    Napi::Value* pyobj_keypoints1 = NULL;
    vector_KeyPoint keypoints1;
    Napi::Value* pyobj_img2 = NULL;
    Mat img2;
    Napi::Value* pyobj_keypoints2 = NULL;
    vector_KeyPoint keypoints2;
    Napi::Value* pyobj_matches1to2 = NULL;
    vector_vector_DMatch matches1to2;
    Napi::Value* pyobj_outImg = NULL;
    Mat outImg;
    Napi::Value* pyobj_matchColor = NULL;
    Scalar matchColor=Scalar::all(-1);
    Napi::Value* pyobj_singlePointColor = NULL;
    Scalar singlePointColor=Scalar::all(-1);
    Napi::Value* pyobj_matchesMask = NULL;
    vector_vector_char matchesMask=std::vector<std::vector<char> >();
    Napi::Value* pyobj_flags = NULL;
    DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT;

    const char* keywords[] = { "img1", "keypoints1", "img2", "keypoints2", "matches1to2", "outImg", "matchColor", "singlePointColor", "matchesMask", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OOOO:drawMatchesKnn", (char**)keywords, &pyobj_img1, &pyobj_keypoints1, &pyobj_img2, &pyobj_keypoints2, &pyobj_matches1to2, &pyobj_outImg, &pyobj_matchColor, &pyobj_singlePointColor, &pyobj_matchesMask, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_img1, img1, ArgInfo("img1", 0)) &&
        jsopencv_to_safe(info, pyobj_keypoints1, keypoints1, ArgInfo("keypoints1", 0)) &&
        jsopencv_to_safe(info, pyobj_img2, img2, ArgInfo("img2", 0)) &&
        jsopencv_to_safe(info, pyobj_keypoints2, keypoints2, ArgInfo("keypoints2", 0)) &&
        jsopencv_to_safe(info, pyobj_matches1to2, matches1to2, ArgInfo("matches1to2", 0)) &&
        jsopencv_to_safe(info, pyobj_outImg, outImg, ArgInfo("outImg", 1)) &&
        jsopencv_to_safe(info, pyobj_matchColor, matchColor, ArgInfo("matchColor", 0)) &&
        jsopencv_to_safe(info, pyobj_singlePointColor, singlePointColor, ArgInfo("singlePointColor", 0)) &&
        jsopencv_to_safe(info, pyobj_matchesMask, matchesMask, ArgInfo("matchesMask", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::drawMatches(img1, keypoints1, img2, keypoints2, matches1to2, outImg, matchColor, singlePointColor, matchesMask, flags));
        return jsopencv_from(outImg);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img1 = NULL;
    UMat img1;
    Napi::Value* pyobj_keypoints1 = NULL;
    vector_KeyPoint keypoints1;
    Napi::Value* pyobj_img2 = NULL;
    UMat img2;
    Napi::Value* pyobj_keypoints2 = NULL;
    vector_KeyPoint keypoints2;
    Napi::Value* pyobj_matches1to2 = NULL;
    vector_vector_DMatch matches1to2;
    Napi::Value* pyobj_outImg = NULL;
    UMat outImg;
    Napi::Value* pyobj_matchColor = NULL;
    Scalar matchColor=Scalar::all(-1);
    Napi::Value* pyobj_singlePointColor = NULL;
    Scalar singlePointColor=Scalar::all(-1);
    Napi::Value* pyobj_matchesMask = NULL;
    vector_vector_char matchesMask=std::vector<std::vector<char> >();
    Napi::Value* pyobj_flags = NULL;
    DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT;

    const char* keywords[] = { "img1", "keypoints1", "img2", "keypoints2", "matches1to2", "outImg", "matchColor", "singlePointColor", "matchesMask", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OOOO:drawMatchesKnn", (char**)keywords, &pyobj_img1, &pyobj_keypoints1, &pyobj_img2, &pyobj_keypoints2, &pyobj_matches1to2, &pyobj_outImg, &pyobj_matchColor, &pyobj_singlePointColor, &pyobj_matchesMask, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_img1, img1, ArgInfo("img1", 0)) &&
        jsopencv_to_safe(info, pyobj_keypoints1, keypoints1, ArgInfo("keypoints1", 0)) &&
        jsopencv_to_safe(info, pyobj_img2, img2, ArgInfo("img2", 0)) &&
        jsopencv_to_safe(info, pyobj_keypoints2, keypoints2, ArgInfo("keypoints2", 0)) &&
        jsopencv_to_safe(info, pyobj_matches1to2, matches1to2, ArgInfo("matches1to2", 0)) &&
        jsopencv_to_safe(info, pyobj_outImg, outImg, ArgInfo("outImg", 1)) &&
        jsopencv_to_safe(info, pyobj_matchColor, matchColor, ArgInfo("matchColor", 0)) &&
        jsopencv_to_safe(info, pyobj_singlePointColor, singlePointColor, ArgInfo("singlePointColor", 0)) &&
        jsopencv_to_safe(info, pyobj_matchesMask, matchesMask, ArgInfo("matchesMask", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::drawMatches(img1, keypoints1, img2, keypoints2, matches1to2, outImg, matchColor, singlePointColor, matchesMask, flags));
        return jsopencv_from(outImg);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("drawMatchesKnn");

    return NULL;
}

static Napi::Value pyopencv_cv_edgePreservingFilter(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_flags = NULL;
    int flags=1;
    Napi::Value* pyobj_sigma_s = NULL;
    float sigma_s=60;
    Napi::Value* pyobj_sigma_r = NULL;
    float sigma_r=0.4f;

    const char* keywords[] = { "src", "dst", "flags", "sigma_s", "sigma_r", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOO:edgePreservingFilter", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_flags, &pyobj_sigma_s, &pyobj_sigma_r) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_s, sigma_s, ArgInfo("sigma_s", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_r, sigma_r, ArgInfo("sigma_r", 0)))
    {
        ERRWRAP2(cv::edgePreservingFilter(src, dst, flags, sigma_s, sigma_r));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_flags = NULL;
    int flags=1;
    Napi::Value* pyobj_sigma_s = NULL;
    float sigma_s=60;
    Napi::Value* pyobj_sigma_r = NULL;
    float sigma_r=0.4f;

    const char* keywords[] = { "src", "dst", "flags", "sigma_s", "sigma_r", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOO:edgePreservingFilter", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_flags, &pyobj_sigma_s, &pyobj_sigma_r) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_s, sigma_s, ArgInfo("sigma_s", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_r, sigma_r, ArgInfo("sigma_r", 0)))
    {
        ERRWRAP2(cv::edgePreservingFilter(src, dst, flags, sigma_s, sigma_r));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("edgePreservingFilter");

    return NULL;
}

static Napi::Value pyopencv_cv_eigen(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_eigenvalues = NULL;
    Mat eigenvalues;
    Napi::Value* pyobj_eigenvectors = NULL;
    Mat eigenvectors;
    bool retval;

    const char* keywords[] = { "src", "eigenvalues", "eigenvectors", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:eigen", (char**)keywords, &pyobj_src, &pyobj_eigenvalues, &pyobj_eigenvectors) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_eigenvalues, eigenvalues, ArgInfo("eigenvalues", 1)) &&
        jsopencv_to_safe(info, pyobj_eigenvectors, eigenvectors, ArgInfo("eigenvectors", 1)))
    {
        ERRWRAP2(retval = cv::eigen(src, eigenvalues, eigenvectors));
        return Py_BuildValue("(NNN)", jsopencv_from(retval), jsopencv_from(eigenvalues), jsopencv_from(eigenvectors));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_eigenvalues = NULL;
    UMat eigenvalues;
    Napi::Value* pyobj_eigenvectors = NULL;
    UMat eigenvectors;
    bool retval;

    const char* keywords[] = { "src", "eigenvalues", "eigenvectors", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:eigen", (char**)keywords, &pyobj_src, &pyobj_eigenvalues, &pyobj_eigenvectors) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_eigenvalues, eigenvalues, ArgInfo("eigenvalues", 1)) &&
        jsopencv_to_safe(info, pyobj_eigenvectors, eigenvectors, ArgInfo("eigenvectors", 1)))
    {
        ERRWRAP2(retval = cv::eigen(src, eigenvalues, eigenvectors));
        return Py_BuildValue("(NNN)", jsopencv_from(retval), jsopencv_from(eigenvalues), jsopencv_from(eigenvectors));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("eigen");

    return NULL;
}

static Napi::Value pyopencv_cv_eigenNonSymmetric(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_eigenvalues = NULL;
    Mat eigenvalues;
    Napi::Value* pyobj_eigenvectors = NULL;
    Mat eigenvectors;

    const char* keywords[] = { "src", "eigenvalues", "eigenvectors", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:eigenNonSymmetric", (char**)keywords, &pyobj_src, &pyobj_eigenvalues, &pyobj_eigenvectors) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_eigenvalues, eigenvalues, ArgInfo("eigenvalues", 1)) &&
        jsopencv_to_safe(info, pyobj_eigenvectors, eigenvectors, ArgInfo("eigenvectors", 1)))
    {
        ERRWRAP2(cv::eigenNonSymmetric(src, eigenvalues, eigenvectors));
        return Py_BuildValue("(NN)", jsopencv_from(eigenvalues), jsopencv_from(eigenvectors));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_eigenvalues = NULL;
    UMat eigenvalues;
    Napi::Value* pyobj_eigenvectors = NULL;
    UMat eigenvectors;

    const char* keywords[] = { "src", "eigenvalues", "eigenvectors", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:eigenNonSymmetric", (char**)keywords, &pyobj_src, &pyobj_eigenvalues, &pyobj_eigenvectors) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_eigenvalues, eigenvalues, ArgInfo("eigenvalues", 1)) &&
        jsopencv_to_safe(info, pyobj_eigenvectors, eigenvectors, ArgInfo("eigenvectors", 1)))
    {
        ERRWRAP2(cv::eigenNonSymmetric(src, eigenvalues, eigenvectors));
        return Py_BuildValue("(NN)", jsopencv_from(eigenvalues), jsopencv_from(eigenvectors));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("eigenNonSymmetric");

    return NULL;
}

static Napi::Value pyopencv_cv_ellipse(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_center = NULL;
    Point center;
    Napi::Value* pyobj_axes = NULL;
    Size axes;
    Napi::Value* pyobj_angle = NULL;
    double angle=0;
    Napi::Value* pyobj_startAngle = NULL;
    double startAngle=0;
    Napi::Value* pyobj_endAngle = NULL;
    double endAngle=0;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=1;
    Napi::Value* pyobj_lineType = NULL;
    int lineType=LINE_8;
    Napi::Value* pyobj_shift = NULL;
    int shift=0;

    const char* keywords[] = { "img", "center", "axes", "angle", "startAngle", "endAngle", "color", "thickness", "lineType", "shift", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOO|OOO:ellipse", (char**)keywords, &pyobj_img, &pyobj_center, &pyobj_axes, &pyobj_angle, &pyobj_startAngle, &pyobj_endAngle, &pyobj_color, &pyobj_thickness, &pyobj_lineType, &pyobj_shift) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_center, center, ArgInfo("center", 0)) &&
        jsopencv_to_safe(info, pyobj_axes, axes, ArgInfo("axes", 0)) &&
        jsopencv_to_safe(info, pyobj_angle, angle, ArgInfo("angle", 0)) &&
        jsopencv_to_safe(info, pyobj_startAngle, startAngle, ArgInfo("startAngle", 0)) &&
        jsopencv_to_safe(info, pyobj_endAngle, endAngle, ArgInfo("endAngle", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)) &&
        jsopencv_to_safe(info, pyobj_lineType, lineType, ArgInfo("lineType", 0)) &&
        jsopencv_to_safe(info, pyobj_shift, shift, ArgInfo("shift", 0)))
    {
        ERRWRAP2(cv::ellipse(img, center, axes, angle, startAngle, endAngle, color, thickness, lineType, shift));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_center = NULL;
    Point center;
    Napi::Value* pyobj_axes = NULL;
    Size axes;
    Napi::Value* pyobj_angle = NULL;
    double angle=0;
    Napi::Value* pyobj_startAngle = NULL;
    double startAngle=0;
    Napi::Value* pyobj_endAngle = NULL;
    double endAngle=0;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=1;
    Napi::Value* pyobj_lineType = NULL;
    int lineType=LINE_8;
    Napi::Value* pyobj_shift = NULL;
    int shift=0;

    const char* keywords[] = { "img", "center", "axes", "angle", "startAngle", "endAngle", "color", "thickness", "lineType", "shift", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOO|OOO:ellipse", (char**)keywords, &pyobj_img, &pyobj_center, &pyobj_axes, &pyobj_angle, &pyobj_startAngle, &pyobj_endAngle, &pyobj_color, &pyobj_thickness, &pyobj_lineType, &pyobj_shift) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_center, center, ArgInfo("center", 0)) &&
        jsopencv_to_safe(info, pyobj_axes, axes, ArgInfo("axes", 0)) &&
        jsopencv_to_safe(info, pyobj_angle, angle, ArgInfo("angle", 0)) &&
        jsopencv_to_safe(info, pyobj_startAngle, startAngle, ArgInfo("startAngle", 0)) &&
        jsopencv_to_safe(info, pyobj_endAngle, endAngle, ArgInfo("endAngle", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)) &&
        jsopencv_to_safe(info, pyobj_lineType, lineType, ArgInfo("lineType", 0)) &&
        jsopencv_to_safe(info, pyobj_shift, shift, ArgInfo("shift", 0)))
    {
        ERRWRAP2(cv::ellipse(img, center, axes, angle, startAngle, endAngle, color, thickness, lineType, shift));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_box = NULL;
    RotatedRect box;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=1;
    Napi::Value* pyobj_lineType = NULL;
    int lineType=LINE_8;

    const char* keywords[] = { "img", "box", "color", "thickness", "lineType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:ellipse", (char**)keywords, &pyobj_img, &pyobj_box, &pyobj_color, &pyobj_thickness, &pyobj_lineType) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_box, box, ArgInfo("box", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)) &&
        jsopencv_to_safe(info, pyobj_lineType, lineType, ArgInfo("lineType", 0)))
    {
        ERRWRAP2(cv::ellipse(img, box, color, thickness, lineType));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_box = NULL;
    RotatedRect box;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=1;
    Napi::Value* pyobj_lineType = NULL;
    int lineType=LINE_8;

    const char* keywords[] = { "img", "box", "color", "thickness", "lineType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:ellipse", (char**)keywords, &pyobj_img, &pyobj_box, &pyobj_color, &pyobj_thickness, &pyobj_lineType) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_box, box, ArgInfo("box", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)) &&
        jsopencv_to_safe(info, pyobj_lineType, lineType, ArgInfo("lineType", 0)))
    {
        ERRWRAP2(cv::ellipse(img, box, color, thickness, lineType));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("ellipse");

    return NULL;
}

static Napi::Value pyopencv_cv_ellipse2Poly(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_center = NULL;
    Point center;
    Napi::Value* pyobj_axes = NULL;
    Size axes;
    Napi::Value* pyobj_angle = NULL;
    int angle=0;
    Napi::Value* pyobj_arcStart = NULL;
    int arcStart=0;
    Napi::Value* pyobj_arcEnd = NULL;
    int arcEnd=0;
    Napi::Value* pyobj_delta = NULL;
    int delta=0;
    vector_Point pts;

    const char* keywords[] = { "center", "axes", "angle", "arcStart", "arcEnd", "delta", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO:ellipse2Poly", (char**)keywords, &pyobj_center, &pyobj_axes, &pyobj_angle, &pyobj_arcStart, &pyobj_arcEnd, &pyobj_delta) &&
        jsopencv_to_safe(info, pyobj_center, center, ArgInfo("center", 0)) &&
        jsopencv_to_safe(info, pyobj_axes, axes, ArgInfo("axes", 0)) &&
        jsopencv_to_safe(info, pyobj_angle, angle, ArgInfo("angle", 0)) &&
        jsopencv_to_safe(info, pyobj_arcStart, arcStart, ArgInfo("arcStart", 0)) &&
        jsopencv_to_safe(info, pyobj_arcEnd, arcEnd, ArgInfo("arcEnd", 0)) &&
        jsopencv_to_safe(info, pyobj_delta, delta, ArgInfo("delta", 0)))
    {
        ERRWRAP2(cv::ellipse2Poly(center, axes, angle, arcStart, arcEnd, delta, pts));
        return jsopencv_from(pts);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_empty_array_desc(const Napi::CallbackInfo &info)
{
    using namespace cv;

    GArrayDesc retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::empty_array_desc());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_empty_gopaque_desc(const Napi::CallbackInfo &info)
{
    using namespace cv;

    GOpaqueDesc retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::empty_gopaque_desc());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_empty_scalar_desc(const Napi::CallbackInfo &info)
{
    using namespace cv;

    GScalarDesc retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::empty_scalar_desc());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_equalizeHist(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;

    const char* keywords[] = { "src", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:equalizeHist", (char**)keywords, &pyobj_src, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::equalizeHist(src, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;

    const char* keywords[] = { "src", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:equalizeHist", (char**)keywords, &pyobj_src, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::equalizeHist(src, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("equalizeHist");

    return NULL;
}

static Napi::Value pyopencv_cv_erode(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_kernel = NULL;
    Mat kernel;
    Napi::Value* pyobj_anchor = NULL;
    Point anchor=Point(-1,-1);
    Napi::Value* pyobj_iterations = NULL;
    int iterations=1;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_CONSTANT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue=morphologyDefaultBorderValue();

    const char* keywords[] = { "src", "kernel", "dst", "anchor", "iterations", "borderType", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOOO:erode", (char**)keywords, &pyobj_src, &pyobj_kernel, &pyobj_dst, &pyobj_anchor, &pyobj_iterations, &pyobj_borderType, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_kernel, kernel, ArgInfo("kernel", 0)) &&
        jsopencv_to_safe(info, pyobj_anchor, anchor, ArgInfo("anchor", 0)) &&
        jsopencv_to_safe(info, pyobj_iterations, iterations, ArgInfo("iterations", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(cv::erode(src, dst, kernel, anchor, iterations, borderType, borderValue));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_kernel = NULL;
    UMat kernel;
    Napi::Value* pyobj_anchor = NULL;
    Point anchor=Point(-1,-1);
    Napi::Value* pyobj_iterations = NULL;
    int iterations=1;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_CONSTANT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue=morphologyDefaultBorderValue();

    const char* keywords[] = { "src", "kernel", "dst", "anchor", "iterations", "borderType", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOOO:erode", (char**)keywords, &pyobj_src, &pyobj_kernel, &pyobj_dst, &pyobj_anchor, &pyobj_iterations, &pyobj_borderType, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_kernel, kernel, ArgInfo("kernel", 0)) &&
        jsopencv_to_safe(info, pyobj_anchor, anchor, ArgInfo("anchor", 0)) &&
        jsopencv_to_safe(info, pyobj_iterations, iterations, ArgInfo("iterations", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(cv::erode(src, dst, kernel, anchor, iterations, borderType, borderValue));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("erode");

    return NULL;
}

static Napi::Value pyopencv_cv_estimateAffine2D(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_from = NULL;
    Mat from;
    Napi::Value* pyobj_to = NULL;
    Mat to;
    Napi::Value* pyobj_inliers = NULL;
    Mat inliers;
    Napi::Value* pyobj_method = NULL;
    int method=RANSAC;
    Napi::Value* pyobj_ransacReprojThreshold = NULL;
    double ransacReprojThreshold=3;
    Napi::Value* pyobj_maxIters = NULL;
    size_t maxIters=2000;
    Napi::Value* pyobj_confidence = NULL;
    double confidence=0.99;
    Napi::Value* pyobj_refineIters = NULL;
    size_t refineIters=10;
    cv::Mat retval;

    const char* keywords[] = { "from_", "to", "inliers", "method", "ransacReprojThreshold", "maxIters", "confidence", "refineIters", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOOOO:estimateAffine2D", (char**)keywords, &pyobj_from, &pyobj_to, &pyobj_inliers, &pyobj_method, &pyobj_ransacReprojThreshold, &pyobj_maxIters, &pyobj_confidence, &pyobj_refineIters) &&
        jsopencv_to_safe(info, pyobj_from, from, ArgInfo("from", 0)) &&
        jsopencv_to_safe(info, pyobj_to, to, ArgInfo("to", 0)) &&
        jsopencv_to_safe(info, pyobj_inliers, inliers, ArgInfo("inliers", 1)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_ransacReprojThreshold, ransacReprojThreshold, ArgInfo("ransacReprojThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_maxIters, maxIters, ArgInfo("maxIters", 0)) &&
        jsopencv_to_safe(info, pyobj_confidence, confidence, ArgInfo("confidence", 0)) &&
        jsopencv_to_safe(info, pyobj_refineIters, refineIters, ArgInfo("refineIters", 0)))
    {
        ERRWRAP2(retval = cv::estimateAffine2D(from, to, inliers, method, ransacReprojThreshold, maxIters, confidence, refineIters));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(inliers));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_from = NULL;
    UMat from;
    Napi::Value* pyobj_to = NULL;
    UMat to;
    Napi::Value* pyobj_inliers = NULL;
    UMat inliers;
    Napi::Value* pyobj_method = NULL;
    int method=RANSAC;
    Napi::Value* pyobj_ransacReprojThreshold = NULL;
    double ransacReprojThreshold=3;
    Napi::Value* pyobj_maxIters = NULL;
    size_t maxIters=2000;
    Napi::Value* pyobj_confidence = NULL;
    double confidence=0.99;
    Napi::Value* pyobj_refineIters = NULL;
    size_t refineIters=10;
    cv::Mat retval;

    const char* keywords[] = { "from_", "to", "inliers", "method", "ransacReprojThreshold", "maxIters", "confidence", "refineIters", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOOOO:estimateAffine2D", (char**)keywords, &pyobj_from, &pyobj_to, &pyobj_inliers, &pyobj_method, &pyobj_ransacReprojThreshold, &pyobj_maxIters, &pyobj_confidence, &pyobj_refineIters) &&
        jsopencv_to_safe(info, pyobj_from, from, ArgInfo("from", 0)) &&
        jsopencv_to_safe(info, pyobj_to, to, ArgInfo("to", 0)) &&
        jsopencv_to_safe(info, pyobj_inliers, inliers, ArgInfo("inliers", 1)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_ransacReprojThreshold, ransacReprojThreshold, ArgInfo("ransacReprojThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_maxIters, maxIters, ArgInfo("maxIters", 0)) &&
        jsopencv_to_safe(info, pyobj_confidence, confidence, ArgInfo("confidence", 0)) &&
        jsopencv_to_safe(info, pyobj_refineIters, refineIters, ArgInfo("refineIters", 0)))
    {
        ERRWRAP2(retval = cv::estimateAffine2D(from, to, inliers, method, ransacReprojThreshold, maxIters, confidence, refineIters));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(inliers));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_pts1 = NULL;
    Mat pts1;
    Napi::Value* pyobj_pts2 = NULL;
    Mat pts2;
    Napi::Value* pyobj_inliers = NULL;
    Mat inliers;
    Napi::Value* pyobj_params = NULL;
    cv::UsacParams params;
    cv::Mat retval;

    const char* keywords[] = { "pts1", "pts2", "params", "inliers", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:estimateAffine2D", (char**)keywords, &pyobj_pts1, &pyobj_pts2, &pyobj_params, &pyobj_inliers) &&
        jsopencv_to_safe(info, pyobj_pts1, pts1, ArgInfo("pts1", 0)) &&
        jsopencv_to_safe(info, pyobj_pts2, pts2, ArgInfo("pts2", 0)) &&
        jsopencv_to_safe(info, pyobj_inliers, inliers, ArgInfo("inliers", 1)) &&
        jsopencv_to_safe(info, pyobj_params, params, ArgInfo("params", 0)))
    {
        ERRWRAP2(retval = cv::estimateAffine2D(pts1, pts2, inliers, params));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(inliers));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_pts1 = NULL;
    UMat pts1;
    Napi::Value* pyobj_pts2 = NULL;
    UMat pts2;
    Napi::Value* pyobj_inliers = NULL;
    UMat inliers;
    Napi::Value* pyobj_params = NULL;
    cv::UsacParams params;
    cv::Mat retval;

    const char* keywords[] = { "pts1", "pts2", "params", "inliers", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:estimateAffine2D", (char**)keywords, &pyobj_pts1, &pyobj_pts2, &pyobj_params, &pyobj_inliers) &&
        jsopencv_to_safe(info, pyobj_pts1, pts1, ArgInfo("pts1", 0)) &&
        jsopencv_to_safe(info, pyobj_pts2, pts2, ArgInfo("pts2", 0)) &&
        jsopencv_to_safe(info, pyobj_inliers, inliers, ArgInfo("inliers", 1)) &&
        jsopencv_to_safe(info, pyobj_params, params, ArgInfo("params", 0)))
    {
        ERRWRAP2(retval = cv::estimateAffine2D(pts1, pts2, inliers, params));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(inliers));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("estimateAffine2D");

    return NULL;
}

static Napi::Value pyopencv_cv_estimateAffine3D(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_out = NULL;
    Mat out;
    Napi::Value* pyobj_inliers = NULL;
    Mat inliers;
    Napi::Value* pyobj_ransacThreshold = NULL;
    double ransacThreshold=3;
    Napi::Value* pyobj_confidence = NULL;
    double confidence=0.99;
    int retval;

    const char* keywords[] = { "src", "dst", "out", "inliers", "ransacThreshold", "confidence", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOO:estimateAffine3D", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_out, &pyobj_inliers, &pyobj_ransacThreshold, &pyobj_confidence) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 0)) &&
        jsopencv_to_safe(info, pyobj_out, out, ArgInfo("out", 1)) &&
        jsopencv_to_safe(info, pyobj_inliers, inliers, ArgInfo("inliers", 1)) &&
        jsopencv_to_safe(info, pyobj_ransacThreshold, ransacThreshold, ArgInfo("ransacThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_confidence, confidence, ArgInfo("confidence", 0)))
    {
        ERRWRAP2(retval = cv::estimateAffine3D(src, dst, out, inliers, ransacThreshold, confidence));
        return Py_BuildValue("(NNN)", jsopencv_from(retval), jsopencv_from(out), jsopencv_from(inliers));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_out = NULL;
    UMat out;
    Napi::Value* pyobj_inliers = NULL;
    UMat inliers;
    Napi::Value* pyobj_ransacThreshold = NULL;
    double ransacThreshold=3;
    Napi::Value* pyobj_confidence = NULL;
    double confidence=0.99;
    int retval;

    const char* keywords[] = { "src", "dst", "out", "inliers", "ransacThreshold", "confidence", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOO:estimateAffine3D", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_out, &pyobj_inliers, &pyobj_ransacThreshold, &pyobj_confidence) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 0)) &&
        jsopencv_to_safe(info, pyobj_out, out, ArgInfo("out", 1)) &&
        jsopencv_to_safe(info, pyobj_inliers, inliers, ArgInfo("inliers", 1)) &&
        jsopencv_to_safe(info, pyobj_ransacThreshold, ransacThreshold, ArgInfo("ransacThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_confidence, confidence, ArgInfo("confidence", 0)))
    {
        ERRWRAP2(retval = cv::estimateAffine3D(src, dst, out, inliers, ransacThreshold, confidence));
        return Py_BuildValue("(NNN)", jsopencv_from(retval), jsopencv_from(out), jsopencv_from(inliers));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    double scale;
    Napi::Value* pyobj_force_rotation = NULL;
    bool force_rotation=true;
    cv::Mat retval;

    const char* keywords[] = { "src", "dst", "force_rotation", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:estimateAffine3D", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_force_rotation) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 0)) &&
        jsopencv_to_safe(info, pyobj_force_rotation, force_rotation, ArgInfo("force_rotation", 0)))
    {
        ERRWRAP2(retval = cv::estimateAffine3D(src, dst, &scale, force_rotation));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(scale));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    double scale;
    Napi::Value* pyobj_force_rotation = NULL;
    bool force_rotation=true;
    cv::Mat retval;

    const char* keywords[] = { "src", "dst", "force_rotation", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:estimateAffine3D", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_force_rotation) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 0)) &&
        jsopencv_to_safe(info, pyobj_force_rotation, force_rotation, ArgInfo("force_rotation", 0)))
    {
        ERRWRAP2(retval = cv::estimateAffine3D(src, dst, &scale, force_rotation));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(scale));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("estimateAffine3D");

    return NULL;
}

static Napi::Value pyopencv_cv_estimateAffinePartial2D(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_from = NULL;
    Mat from;
    Napi::Value* pyobj_to = NULL;
    Mat to;
    Napi::Value* pyobj_inliers = NULL;
    Mat inliers;
    Napi::Value* pyobj_method = NULL;
    int method=RANSAC;
    Napi::Value* pyobj_ransacReprojThreshold = NULL;
    double ransacReprojThreshold=3;
    Napi::Value* pyobj_maxIters = NULL;
    size_t maxIters=2000;
    Napi::Value* pyobj_confidence = NULL;
    double confidence=0.99;
    Napi::Value* pyobj_refineIters = NULL;
    size_t refineIters=10;
    cv::Mat retval;

    const char* keywords[] = { "from_", "to", "inliers", "method", "ransacReprojThreshold", "maxIters", "confidence", "refineIters", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOOOO:estimateAffinePartial2D", (char**)keywords, &pyobj_from, &pyobj_to, &pyobj_inliers, &pyobj_method, &pyobj_ransacReprojThreshold, &pyobj_maxIters, &pyobj_confidence, &pyobj_refineIters) &&
        jsopencv_to_safe(info, pyobj_from, from, ArgInfo("from", 0)) &&
        jsopencv_to_safe(info, pyobj_to, to, ArgInfo("to", 0)) &&
        jsopencv_to_safe(info, pyobj_inliers, inliers, ArgInfo("inliers", 1)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_ransacReprojThreshold, ransacReprojThreshold, ArgInfo("ransacReprojThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_maxIters, maxIters, ArgInfo("maxIters", 0)) &&
        jsopencv_to_safe(info, pyobj_confidence, confidence, ArgInfo("confidence", 0)) &&
        jsopencv_to_safe(info, pyobj_refineIters, refineIters, ArgInfo("refineIters", 0)))
    {
        ERRWRAP2(retval = cv::estimateAffinePartial2D(from, to, inliers, method, ransacReprojThreshold, maxIters, confidence, refineIters));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(inliers));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_from = NULL;
    UMat from;
    Napi::Value* pyobj_to = NULL;
    UMat to;
    Napi::Value* pyobj_inliers = NULL;
    UMat inliers;
    Napi::Value* pyobj_method = NULL;
    int method=RANSAC;
    Napi::Value* pyobj_ransacReprojThreshold = NULL;
    double ransacReprojThreshold=3;
    Napi::Value* pyobj_maxIters = NULL;
    size_t maxIters=2000;
    Napi::Value* pyobj_confidence = NULL;
    double confidence=0.99;
    Napi::Value* pyobj_refineIters = NULL;
    size_t refineIters=10;
    cv::Mat retval;

    const char* keywords[] = { "from_", "to", "inliers", "method", "ransacReprojThreshold", "maxIters", "confidence", "refineIters", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOOOO:estimateAffinePartial2D", (char**)keywords, &pyobj_from, &pyobj_to, &pyobj_inliers, &pyobj_method, &pyobj_ransacReprojThreshold, &pyobj_maxIters, &pyobj_confidence, &pyobj_refineIters) &&
        jsopencv_to_safe(info, pyobj_from, from, ArgInfo("from", 0)) &&
        jsopencv_to_safe(info, pyobj_to, to, ArgInfo("to", 0)) &&
        jsopencv_to_safe(info, pyobj_inliers, inliers, ArgInfo("inliers", 1)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_ransacReprojThreshold, ransacReprojThreshold, ArgInfo("ransacReprojThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_maxIters, maxIters, ArgInfo("maxIters", 0)) &&
        jsopencv_to_safe(info, pyobj_confidence, confidence, ArgInfo("confidence", 0)) &&
        jsopencv_to_safe(info, pyobj_refineIters, refineIters, ArgInfo("refineIters", 0)))
    {
        ERRWRAP2(retval = cv::estimateAffinePartial2D(from, to, inliers, method, ransacReprojThreshold, maxIters, confidence, refineIters));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(inliers));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("estimateAffinePartial2D");

    return NULL;
}

static Napi::Value pyopencv_cv_estimateChessboardSharpness(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_patternSize = NULL;
    Size patternSize;
    Napi::Value* pyobj_corners = NULL;
    Mat corners;
    Napi::Value* pyobj_rise_distance = NULL;
    float rise_distance=0.8F;
    Napi::Value* pyobj_vertical = NULL;
    bool vertical=false;
    Napi::Value* pyobj_sharpness = NULL;
    Mat sharpness;
    Scalar retval;

    const char* keywords[] = { "image", "patternSize", "corners", "rise_distance", "vertical", "sharpness", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:estimateChessboardSharpness", (char**)keywords, &pyobj_image, &pyobj_patternSize, &pyobj_corners, &pyobj_rise_distance, &pyobj_vertical, &pyobj_sharpness) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_patternSize, patternSize, ArgInfo("patternSize", 0)) &&
        jsopencv_to_safe(info, pyobj_corners, corners, ArgInfo("corners", 0)) &&
        jsopencv_to_safe(info, pyobj_rise_distance, rise_distance, ArgInfo("rise_distance", 0)) &&
        jsopencv_to_safe(info, pyobj_vertical, vertical, ArgInfo("vertical", 0)) &&
        jsopencv_to_safe(info, pyobj_sharpness, sharpness, ArgInfo("sharpness", 1)))
    {
        ERRWRAP2(retval = cv::estimateChessboardSharpness(image, patternSize, corners, rise_distance, vertical, sharpness));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(sharpness));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_patternSize = NULL;
    Size patternSize;
    Napi::Value* pyobj_corners = NULL;
    UMat corners;
    Napi::Value* pyobj_rise_distance = NULL;
    float rise_distance=0.8F;
    Napi::Value* pyobj_vertical = NULL;
    bool vertical=false;
    Napi::Value* pyobj_sharpness = NULL;
    UMat sharpness;
    Scalar retval;

    const char* keywords[] = { "image", "patternSize", "corners", "rise_distance", "vertical", "sharpness", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:estimateChessboardSharpness", (char**)keywords, &pyobj_image, &pyobj_patternSize, &pyobj_corners, &pyobj_rise_distance, &pyobj_vertical, &pyobj_sharpness) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_patternSize, patternSize, ArgInfo("patternSize", 0)) &&
        jsopencv_to_safe(info, pyobj_corners, corners, ArgInfo("corners", 0)) &&
        jsopencv_to_safe(info, pyobj_rise_distance, rise_distance, ArgInfo("rise_distance", 0)) &&
        jsopencv_to_safe(info, pyobj_vertical, vertical, ArgInfo("vertical", 0)) &&
        jsopencv_to_safe(info, pyobj_sharpness, sharpness, ArgInfo("sharpness", 1)))
    {
        ERRWRAP2(retval = cv::estimateChessboardSharpness(image, patternSize, corners, rise_distance, vertical, sharpness));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(sharpness));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("estimateChessboardSharpness");

    return NULL;
}

static Napi::Value pyopencv_cv_estimateTranslation3D(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_out = NULL;
    Mat out;
    Napi::Value* pyobj_inliers = NULL;
    Mat inliers;
    Napi::Value* pyobj_ransacThreshold = NULL;
    double ransacThreshold=3;
    Napi::Value* pyobj_confidence = NULL;
    double confidence=0.99;
    int retval;

    const char* keywords[] = { "src", "dst", "out", "inliers", "ransacThreshold", "confidence", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOO:estimateTranslation3D", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_out, &pyobj_inliers, &pyobj_ransacThreshold, &pyobj_confidence) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 0)) &&
        jsopencv_to_safe(info, pyobj_out, out, ArgInfo("out", 1)) &&
        jsopencv_to_safe(info, pyobj_inliers, inliers, ArgInfo("inliers", 1)) &&
        jsopencv_to_safe(info, pyobj_ransacThreshold, ransacThreshold, ArgInfo("ransacThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_confidence, confidence, ArgInfo("confidence", 0)))
    {
        ERRWRAP2(retval = cv::estimateTranslation3D(src, dst, out, inliers, ransacThreshold, confidence));
        return Py_BuildValue("(NNN)", jsopencv_from(retval), jsopencv_from(out), jsopencv_from(inliers));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_out = NULL;
    UMat out;
    Napi::Value* pyobj_inliers = NULL;
    UMat inliers;
    Napi::Value* pyobj_ransacThreshold = NULL;
    double ransacThreshold=3;
    Napi::Value* pyobj_confidence = NULL;
    double confidence=0.99;
    int retval;

    const char* keywords[] = { "src", "dst", "out", "inliers", "ransacThreshold", "confidence", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOO:estimateTranslation3D", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_out, &pyobj_inliers, &pyobj_ransacThreshold, &pyobj_confidence) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 0)) &&
        jsopencv_to_safe(info, pyobj_out, out, ArgInfo("out", 1)) &&
        jsopencv_to_safe(info, pyobj_inliers, inliers, ArgInfo("inliers", 1)) &&
        jsopencv_to_safe(info, pyobj_ransacThreshold, ransacThreshold, ArgInfo("ransacThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_confidence, confidence, ArgInfo("confidence", 0)))
    {
        ERRWRAP2(retval = cv::estimateTranslation3D(src, dst, out, inliers, ransacThreshold, confidence));
        return Py_BuildValue("(NNN)", jsopencv_from(retval), jsopencv_from(out), jsopencv_from(inliers));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("estimateTranslation3D");

    return NULL;
}

static Napi::Value pyopencv_cv_exp(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;

    const char* keywords[] = { "src", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:exp", (char**)keywords, &pyobj_src, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::exp(src, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;

    const char* keywords[] = { "src", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:exp", (char**)keywords, &pyobj_src, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::exp(src, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("exp");

    return NULL;
}

static Napi::Value pyopencv_cv_extractChannel(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_coi = NULL;
    int coi=0;

    const char* keywords[] = { "src", "coi", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:extractChannel", (char**)keywords, &pyobj_src, &pyobj_coi, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_coi, coi, ArgInfo("coi", 0)))
    {
        ERRWRAP2(cv::extractChannel(src, dst, coi));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_coi = NULL;
    int coi=0;

    const char* keywords[] = { "src", "coi", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:extractChannel", (char**)keywords, &pyobj_src, &pyobj_coi, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_coi, coi, ArgInfo("coi", 0)))
    {
        ERRWRAP2(cv::extractChannel(src, dst, coi));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("extractChannel");

    return NULL;
}

static Napi::Value pyopencv_cv_fastAtan2(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_y = NULL;
    float y=0.f;
    Napi::Value* pyobj_x = NULL;
    float x=0.f;
    float retval;

    const char* keywords[] = { "y", "x", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:fastAtan2", (char**)keywords, &pyobj_y, &pyobj_x) &&
        jsopencv_to_safe(info, pyobj_y, y, ArgInfo("y", 0)) &&
        jsopencv_to_safe(info, pyobj_x, x, ArgInfo("x", 0)))
    {
        ERRWRAP2(retval = cv::fastAtan2(y, x));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_fastNlMeansDenoising(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_h = NULL;
    float h=3;
    Napi::Value* pyobj_templateWindowSize = NULL;
    int templateWindowSize=7;
    Napi::Value* pyobj_searchWindowSize = NULL;
    int searchWindowSize=21;

    const char* keywords[] = { "src", "dst", "h", "templateWindowSize", "searchWindowSize", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOO:fastNlMeansDenoising", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_h, &pyobj_templateWindowSize, &pyobj_searchWindowSize) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_h, h, ArgInfo("h", 0)) &&
        jsopencv_to_safe(info, pyobj_templateWindowSize, templateWindowSize, ArgInfo("templateWindowSize", 0)) &&
        jsopencv_to_safe(info, pyobj_searchWindowSize, searchWindowSize, ArgInfo("searchWindowSize", 0)))
    {
        ERRWRAP2(cv::fastNlMeansDenoising(src, dst, h, templateWindowSize, searchWindowSize));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_h = NULL;
    float h=3;
    Napi::Value* pyobj_templateWindowSize = NULL;
    int templateWindowSize=7;
    Napi::Value* pyobj_searchWindowSize = NULL;
    int searchWindowSize=21;

    const char* keywords[] = { "src", "dst", "h", "templateWindowSize", "searchWindowSize", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOO:fastNlMeansDenoising", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_h, &pyobj_templateWindowSize, &pyobj_searchWindowSize) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_h, h, ArgInfo("h", 0)) &&
        jsopencv_to_safe(info, pyobj_templateWindowSize, templateWindowSize, ArgInfo("templateWindowSize", 0)) &&
        jsopencv_to_safe(info, pyobj_searchWindowSize, searchWindowSize, ArgInfo("searchWindowSize", 0)))
    {
        ERRWRAP2(cv::fastNlMeansDenoising(src, dst, h, templateWindowSize, searchWindowSize));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_h = NULL;
    vector_float h;
    Napi::Value* pyobj_templateWindowSize = NULL;
    int templateWindowSize=7;
    Napi::Value* pyobj_searchWindowSize = NULL;
    int searchWindowSize=21;
    Napi::Value* pyobj_normType = NULL;
    int normType=NORM_L2;

    const char* keywords[] = { "src", "h", "dst", "templateWindowSize", "searchWindowSize", "normType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOO:fastNlMeansDenoising", (char**)keywords, &pyobj_src, &pyobj_h, &pyobj_dst, &pyobj_templateWindowSize, &pyobj_searchWindowSize, &pyobj_normType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_h, h, ArgInfo("h", 0)) &&
        jsopencv_to_safe(info, pyobj_templateWindowSize, templateWindowSize, ArgInfo("templateWindowSize", 0)) &&
        jsopencv_to_safe(info, pyobj_searchWindowSize, searchWindowSize, ArgInfo("searchWindowSize", 0)) &&
        jsopencv_to_safe(info, pyobj_normType, normType, ArgInfo("normType", 0)))
    {
        ERRWRAP2(cv::fastNlMeansDenoising(src, dst, h, templateWindowSize, searchWindowSize, normType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_h = NULL;
    vector_float h;
    Napi::Value* pyobj_templateWindowSize = NULL;
    int templateWindowSize=7;
    Napi::Value* pyobj_searchWindowSize = NULL;
    int searchWindowSize=21;
    Napi::Value* pyobj_normType = NULL;
    int normType=NORM_L2;

    const char* keywords[] = { "src", "h", "dst", "templateWindowSize", "searchWindowSize", "normType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOO:fastNlMeansDenoising", (char**)keywords, &pyobj_src, &pyobj_h, &pyobj_dst, &pyobj_templateWindowSize, &pyobj_searchWindowSize, &pyobj_normType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_h, h, ArgInfo("h", 0)) &&
        jsopencv_to_safe(info, pyobj_templateWindowSize, templateWindowSize, ArgInfo("templateWindowSize", 0)) &&
        jsopencv_to_safe(info, pyobj_searchWindowSize, searchWindowSize, ArgInfo("searchWindowSize", 0)) &&
        jsopencv_to_safe(info, pyobj_normType, normType, ArgInfo("normType", 0)))
    {
        ERRWRAP2(cv::fastNlMeansDenoising(src, dst, h, templateWindowSize, searchWindowSize, normType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("fastNlMeansDenoising");

    return NULL;
}

static Napi::Value pyopencv_cv_fastNlMeansDenoisingColored(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_h = NULL;
    float h=3;
    Napi::Value* pyobj_hColor = NULL;
    float hColor=3;
    Napi::Value* pyobj_templateWindowSize = NULL;
    int templateWindowSize=7;
    Napi::Value* pyobj_searchWindowSize = NULL;
    int searchWindowSize=21;

    const char* keywords[] = { "src", "dst", "h", "hColor", "templateWindowSize", "searchWindowSize", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOO:fastNlMeansDenoisingColored", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_h, &pyobj_hColor, &pyobj_templateWindowSize, &pyobj_searchWindowSize) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_h, h, ArgInfo("h", 0)) &&
        jsopencv_to_safe(info, pyobj_hColor, hColor, ArgInfo("hColor", 0)) &&
        jsopencv_to_safe(info, pyobj_templateWindowSize, templateWindowSize, ArgInfo("templateWindowSize", 0)) &&
        jsopencv_to_safe(info, pyobj_searchWindowSize, searchWindowSize, ArgInfo("searchWindowSize", 0)))
    {
        ERRWRAP2(cv::fastNlMeansDenoisingColored(src, dst, h, hColor, templateWindowSize, searchWindowSize));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_h = NULL;
    float h=3;
    Napi::Value* pyobj_hColor = NULL;
    float hColor=3;
    Napi::Value* pyobj_templateWindowSize = NULL;
    int templateWindowSize=7;
    Napi::Value* pyobj_searchWindowSize = NULL;
    int searchWindowSize=21;

    const char* keywords[] = { "src", "dst", "h", "hColor", "templateWindowSize", "searchWindowSize", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOO:fastNlMeansDenoisingColored", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_h, &pyobj_hColor, &pyobj_templateWindowSize, &pyobj_searchWindowSize) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_h, h, ArgInfo("h", 0)) &&
        jsopencv_to_safe(info, pyobj_hColor, hColor, ArgInfo("hColor", 0)) &&
        jsopencv_to_safe(info, pyobj_templateWindowSize, templateWindowSize, ArgInfo("templateWindowSize", 0)) &&
        jsopencv_to_safe(info, pyobj_searchWindowSize, searchWindowSize, ArgInfo("searchWindowSize", 0)))
    {
        ERRWRAP2(cv::fastNlMeansDenoisingColored(src, dst, h, hColor, templateWindowSize, searchWindowSize));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("fastNlMeansDenoisingColored");

    return NULL;
}

static Napi::Value pyopencv_cv_fastNlMeansDenoisingColoredMulti(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_srcImgs = NULL;
    vector_Mat srcImgs;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_imgToDenoiseIndex = NULL;
    int imgToDenoiseIndex=0;
    Napi::Value* pyobj_temporalWindowSize = NULL;
    int temporalWindowSize=0;
    Napi::Value* pyobj_h = NULL;
    float h=3;
    Napi::Value* pyobj_hColor = NULL;
    float hColor=3;
    Napi::Value* pyobj_templateWindowSize = NULL;
    int templateWindowSize=7;
    Napi::Value* pyobj_searchWindowSize = NULL;
    int searchWindowSize=21;

    const char* keywords[] = { "srcImgs", "imgToDenoiseIndex", "temporalWindowSize", "dst", "h", "hColor", "templateWindowSize", "searchWindowSize", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOOO:fastNlMeansDenoisingColoredMulti", (char**)keywords, &pyobj_srcImgs, &pyobj_imgToDenoiseIndex, &pyobj_temporalWindowSize, &pyobj_dst, &pyobj_h, &pyobj_hColor, &pyobj_templateWindowSize, &pyobj_searchWindowSize) &&
        jsopencv_to_safe(info, pyobj_srcImgs, srcImgs, ArgInfo("srcImgs", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_imgToDenoiseIndex, imgToDenoiseIndex, ArgInfo("imgToDenoiseIndex", 0)) &&
        jsopencv_to_safe(info, pyobj_temporalWindowSize, temporalWindowSize, ArgInfo("temporalWindowSize", 0)) &&
        jsopencv_to_safe(info, pyobj_h, h, ArgInfo("h", 0)) &&
        jsopencv_to_safe(info, pyobj_hColor, hColor, ArgInfo("hColor", 0)) &&
        jsopencv_to_safe(info, pyobj_templateWindowSize, templateWindowSize, ArgInfo("templateWindowSize", 0)) &&
        jsopencv_to_safe(info, pyobj_searchWindowSize, searchWindowSize, ArgInfo("searchWindowSize", 0)))
    {
        ERRWRAP2(cv::fastNlMeansDenoisingColoredMulti(srcImgs, dst, imgToDenoiseIndex, temporalWindowSize, h, hColor, templateWindowSize, searchWindowSize));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_srcImgs = NULL;
    vector_UMat srcImgs;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_imgToDenoiseIndex = NULL;
    int imgToDenoiseIndex=0;
    Napi::Value* pyobj_temporalWindowSize = NULL;
    int temporalWindowSize=0;
    Napi::Value* pyobj_h = NULL;
    float h=3;
    Napi::Value* pyobj_hColor = NULL;
    float hColor=3;
    Napi::Value* pyobj_templateWindowSize = NULL;
    int templateWindowSize=7;
    Napi::Value* pyobj_searchWindowSize = NULL;
    int searchWindowSize=21;

    const char* keywords[] = { "srcImgs", "imgToDenoiseIndex", "temporalWindowSize", "dst", "h", "hColor", "templateWindowSize", "searchWindowSize", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOOO:fastNlMeansDenoisingColoredMulti", (char**)keywords, &pyobj_srcImgs, &pyobj_imgToDenoiseIndex, &pyobj_temporalWindowSize, &pyobj_dst, &pyobj_h, &pyobj_hColor, &pyobj_templateWindowSize, &pyobj_searchWindowSize) &&
        jsopencv_to_safe(info, pyobj_srcImgs, srcImgs, ArgInfo("srcImgs", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_imgToDenoiseIndex, imgToDenoiseIndex, ArgInfo("imgToDenoiseIndex", 0)) &&
        jsopencv_to_safe(info, pyobj_temporalWindowSize, temporalWindowSize, ArgInfo("temporalWindowSize", 0)) &&
        jsopencv_to_safe(info, pyobj_h, h, ArgInfo("h", 0)) &&
        jsopencv_to_safe(info, pyobj_hColor, hColor, ArgInfo("hColor", 0)) &&
        jsopencv_to_safe(info, pyobj_templateWindowSize, templateWindowSize, ArgInfo("templateWindowSize", 0)) &&
        jsopencv_to_safe(info, pyobj_searchWindowSize, searchWindowSize, ArgInfo("searchWindowSize", 0)))
    {
        ERRWRAP2(cv::fastNlMeansDenoisingColoredMulti(srcImgs, dst, imgToDenoiseIndex, temporalWindowSize, h, hColor, templateWindowSize, searchWindowSize));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("fastNlMeansDenoisingColoredMulti");

    return NULL;
}

static Napi::Value pyopencv_cv_fastNlMeansDenoisingMulti(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_srcImgs = NULL;
    vector_Mat srcImgs;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_imgToDenoiseIndex = NULL;
    int imgToDenoiseIndex=0;
    Napi::Value* pyobj_temporalWindowSize = NULL;
    int temporalWindowSize=0;
    Napi::Value* pyobj_h = NULL;
    float h=3;
    Napi::Value* pyobj_templateWindowSize = NULL;
    int templateWindowSize=7;
    Napi::Value* pyobj_searchWindowSize = NULL;
    int searchWindowSize=21;

    const char* keywords[] = { "srcImgs", "imgToDenoiseIndex", "temporalWindowSize", "dst", "h", "templateWindowSize", "searchWindowSize", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:fastNlMeansDenoisingMulti", (char**)keywords, &pyobj_srcImgs, &pyobj_imgToDenoiseIndex, &pyobj_temporalWindowSize, &pyobj_dst, &pyobj_h, &pyobj_templateWindowSize, &pyobj_searchWindowSize) &&
        jsopencv_to_safe(info, pyobj_srcImgs, srcImgs, ArgInfo("srcImgs", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_imgToDenoiseIndex, imgToDenoiseIndex, ArgInfo("imgToDenoiseIndex", 0)) &&
        jsopencv_to_safe(info, pyobj_temporalWindowSize, temporalWindowSize, ArgInfo("temporalWindowSize", 0)) &&
        jsopencv_to_safe(info, pyobj_h, h, ArgInfo("h", 0)) &&
        jsopencv_to_safe(info, pyobj_templateWindowSize, templateWindowSize, ArgInfo("templateWindowSize", 0)) &&
        jsopencv_to_safe(info, pyobj_searchWindowSize, searchWindowSize, ArgInfo("searchWindowSize", 0)))
    {
        ERRWRAP2(cv::fastNlMeansDenoisingMulti(srcImgs, dst, imgToDenoiseIndex, temporalWindowSize, h, templateWindowSize, searchWindowSize));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_srcImgs = NULL;
    vector_UMat srcImgs;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_imgToDenoiseIndex = NULL;
    int imgToDenoiseIndex=0;
    Napi::Value* pyobj_temporalWindowSize = NULL;
    int temporalWindowSize=0;
    Napi::Value* pyobj_h = NULL;
    float h=3;
    Napi::Value* pyobj_templateWindowSize = NULL;
    int templateWindowSize=7;
    Napi::Value* pyobj_searchWindowSize = NULL;
    int searchWindowSize=21;

    const char* keywords[] = { "srcImgs", "imgToDenoiseIndex", "temporalWindowSize", "dst", "h", "templateWindowSize", "searchWindowSize", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:fastNlMeansDenoisingMulti", (char**)keywords, &pyobj_srcImgs, &pyobj_imgToDenoiseIndex, &pyobj_temporalWindowSize, &pyobj_dst, &pyobj_h, &pyobj_templateWindowSize, &pyobj_searchWindowSize) &&
        jsopencv_to_safe(info, pyobj_srcImgs, srcImgs, ArgInfo("srcImgs", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_imgToDenoiseIndex, imgToDenoiseIndex, ArgInfo("imgToDenoiseIndex", 0)) &&
        jsopencv_to_safe(info, pyobj_temporalWindowSize, temporalWindowSize, ArgInfo("temporalWindowSize", 0)) &&
        jsopencv_to_safe(info, pyobj_h, h, ArgInfo("h", 0)) &&
        jsopencv_to_safe(info, pyobj_templateWindowSize, templateWindowSize, ArgInfo("templateWindowSize", 0)) &&
        jsopencv_to_safe(info, pyobj_searchWindowSize, searchWindowSize, ArgInfo("searchWindowSize", 0)))
    {
        ERRWRAP2(cv::fastNlMeansDenoisingMulti(srcImgs, dst, imgToDenoiseIndex, temporalWindowSize, h, templateWindowSize, searchWindowSize));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_srcImgs = NULL;
    vector_Mat srcImgs;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_imgToDenoiseIndex = NULL;
    int imgToDenoiseIndex=0;
    Napi::Value* pyobj_temporalWindowSize = NULL;
    int temporalWindowSize=0;
    Napi::Value* pyobj_h = NULL;
    vector_float h;
    Napi::Value* pyobj_templateWindowSize = NULL;
    int templateWindowSize=7;
    Napi::Value* pyobj_searchWindowSize = NULL;
    int searchWindowSize=21;
    Napi::Value* pyobj_normType = NULL;
    int normType=NORM_L2;

    const char* keywords[] = { "srcImgs", "imgToDenoiseIndex", "temporalWindowSize", "h", "dst", "templateWindowSize", "searchWindowSize", "normType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOO:fastNlMeansDenoisingMulti", (char**)keywords, &pyobj_srcImgs, &pyobj_imgToDenoiseIndex, &pyobj_temporalWindowSize, &pyobj_h, &pyobj_dst, &pyobj_templateWindowSize, &pyobj_searchWindowSize, &pyobj_normType) &&
        jsopencv_to_safe(info, pyobj_srcImgs, srcImgs, ArgInfo("srcImgs", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_imgToDenoiseIndex, imgToDenoiseIndex, ArgInfo("imgToDenoiseIndex", 0)) &&
        jsopencv_to_safe(info, pyobj_temporalWindowSize, temporalWindowSize, ArgInfo("temporalWindowSize", 0)) &&
        jsopencv_to_safe(info, pyobj_h, h, ArgInfo("h", 0)) &&
        jsopencv_to_safe(info, pyobj_templateWindowSize, templateWindowSize, ArgInfo("templateWindowSize", 0)) &&
        jsopencv_to_safe(info, pyobj_searchWindowSize, searchWindowSize, ArgInfo("searchWindowSize", 0)) &&
        jsopencv_to_safe(info, pyobj_normType, normType, ArgInfo("normType", 0)))
    {
        ERRWRAP2(cv::fastNlMeansDenoisingMulti(srcImgs, dst, imgToDenoiseIndex, temporalWindowSize, h, templateWindowSize, searchWindowSize, normType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_srcImgs = NULL;
    vector_UMat srcImgs;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_imgToDenoiseIndex = NULL;
    int imgToDenoiseIndex=0;
    Napi::Value* pyobj_temporalWindowSize = NULL;
    int temporalWindowSize=0;
    Napi::Value* pyobj_h = NULL;
    vector_float h;
    Napi::Value* pyobj_templateWindowSize = NULL;
    int templateWindowSize=7;
    Napi::Value* pyobj_searchWindowSize = NULL;
    int searchWindowSize=21;
    Napi::Value* pyobj_normType = NULL;
    int normType=NORM_L2;

    const char* keywords[] = { "srcImgs", "imgToDenoiseIndex", "temporalWindowSize", "h", "dst", "templateWindowSize", "searchWindowSize", "normType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOO:fastNlMeansDenoisingMulti", (char**)keywords, &pyobj_srcImgs, &pyobj_imgToDenoiseIndex, &pyobj_temporalWindowSize, &pyobj_h, &pyobj_dst, &pyobj_templateWindowSize, &pyobj_searchWindowSize, &pyobj_normType) &&
        jsopencv_to_safe(info, pyobj_srcImgs, srcImgs, ArgInfo("srcImgs", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_imgToDenoiseIndex, imgToDenoiseIndex, ArgInfo("imgToDenoiseIndex", 0)) &&
        jsopencv_to_safe(info, pyobj_temporalWindowSize, temporalWindowSize, ArgInfo("temporalWindowSize", 0)) &&
        jsopencv_to_safe(info, pyobj_h, h, ArgInfo("h", 0)) &&
        jsopencv_to_safe(info, pyobj_templateWindowSize, templateWindowSize, ArgInfo("templateWindowSize", 0)) &&
        jsopencv_to_safe(info, pyobj_searchWindowSize, searchWindowSize, ArgInfo("searchWindowSize", 0)) &&
        jsopencv_to_safe(info, pyobj_normType, normType, ArgInfo("normType", 0)))
    {
        ERRWRAP2(cv::fastNlMeansDenoisingMulti(srcImgs, dst, imgToDenoiseIndex, temporalWindowSize, h, templateWindowSize, searchWindowSize, normType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("fastNlMeansDenoisingMulti");

    return NULL;
}

static Napi::Value pyopencv_cv_fillConvexPoly(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_points = NULL;
    Mat points;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_lineType = NULL;
    int lineType=LINE_8;
    Napi::Value* pyobj_shift = NULL;
    int shift=0;

    const char* keywords[] = { "img", "points", "color", "lineType", "shift", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:fillConvexPoly", (char**)keywords, &pyobj_img, &pyobj_points, &pyobj_color, &pyobj_lineType, &pyobj_shift) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_lineType, lineType, ArgInfo("lineType", 0)) &&
        jsopencv_to_safe(info, pyobj_shift, shift, ArgInfo("shift", 0)))
    {
        ERRWRAP2(cv::fillConvexPoly(img, points, color, lineType, shift));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_points = NULL;
    UMat points;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_lineType = NULL;
    int lineType=LINE_8;
    Napi::Value* pyobj_shift = NULL;
    int shift=0;

    const char* keywords[] = { "img", "points", "color", "lineType", "shift", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:fillConvexPoly", (char**)keywords, &pyobj_img, &pyobj_points, &pyobj_color, &pyobj_lineType, &pyobj_shift) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_lineType, lineType, ArgInfo("lineType", 0)) &&
        jsopencv_to_safe(info, pyobj_shift, shift, ArgInfo("shift", 0)))
    {
        ERRWRAP2(cv::fillConvexPoly(img, points, color, lineType, shift));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("fillConvexPoly");

    return NULL;
}

static Napi::Value pyopencv_cv_fillPoly(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_pts = NULL;
    vector_Mat pts;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_lineType = NULL;
    int lineType=LINE_8;
    Napi::Value* pyobj_shift = NULL;
    int shift=0;
    Napi::Value* pyobj_offset = NULL;
    Point offset;

    const char* keywords[] = { "img", "pts", "color", "lineType", "shift", "offset", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:fillPoly", (char**)keywords, &pyobj_img, &pyobj_pts, &pyobj_color, &pyobj_lineType, &pyobj_shift, &pyobj_offset) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_pts, pts, ArgInfo("pts", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_lineType, lineType, ArgInfo("lineType", 0)) &&
        jsopencv_to_safe(info, pyobj_shift, shift, ArgInfo("shift", 0)) &&
        jsopencv_to_safe(info, pyobj_offset, offset, ArgInfo("offset", 0)))
    {
        ERRWRAP2(cv::fillPoly(img, pts, color, lineType, shift, offset));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_pts = NULL;
    vector_UMat pts;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_lineType = NULL;
    int lineType=LINE_8;
    Napi::Value* pyobj_shift = NULL;
    int shift=0;
    Napi::Value* pyobj_offset = NULL;
    Point offset;

    const char* keywords[] = { "img", "pts", "color", "lineType", "shift", "offset", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:fillPoly", (char**)keywords, &pyobj_img, &pyobj_pts, &pyobj_color, &pyobj_lineType, &pyobj_shift, &pyobj_offset) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_pts, pts, ArgInfo("pts", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_lineType, lineType, ArgInfo("lineType", 0)) &&
        jsopencv_to_safe(info, pyobj_shift, shift, ArgInfo("shift", 0)) &&
        jsopencv_to_safe(info, pyobj_offset, offset, ArgInfo("offset", 0)))
    {
        ERRWRAP2(cv::fillPoly(img, pts, color, lineType, shift, offset));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("fillPoly");

    return NULL;
}

static Napi::Value pyopencv_cv_filter2D(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=0;
    Napi::Value* pyobj_kernel = NULL;
    Mat kernel;
    Napi::Value* pyobj_anchor = NULL;
    Point anchor=Point(-1,-1);
    Napi::Value* pyobj_delta = NULL;
    double delta=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "ddepth", "kernel", "dst", "anchor", "delta", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:filter2D", (char**)keywords, &pyobj_src, &pyobj_ddepth, &pyobj_kernel, &pyobj_dst, &pyobj_anchor, &pyobj_delta, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)) &&
        jsopencv_to_safe(info, pyobj_kernel, kernel, ArgInfo("kernel", 0)) &&
        jsopencv_to_safe(info, pyobj_anchor, anchor, ArgInfo("anchor", 0)) &&
        jsopencv_to_safe(info, pyobj_delta, delta, ArgInfo("delta", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::filter2D(src, dst, ddepth, kernel, anchor, delta, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=0;
    Napi::Value* pyobj_kernel = NULL;
    UMat kernel;
    Napi::Value* pyobj_anchor = NULL;
    Point anchor=Point(-1,-1);
    Napi::Value* pyobj_delta = NULL;
    double delta=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "ddepth", "kernel", "dst", "anchor", "delta", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:filter2D", (char**)keywords, &pyobj_src, &pyobj_ddepth, &pyobj_kernel, &pyobj_dst, &pyobj_anchor, &pyobj_delta, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)) &&
        jsopencv_to_safe(info, pyobj_kernel, kernel, ArgInfo("kernel", 0)) &&
        jsopencv_to_safe(info, pyobj_anchor, anchor, ArgInfo("anchor", 0)) &&
        jsopencv_to_safe(info, pyobj_delta, delta, ArgInfo("delta", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::filter2D(src, dst, ddepth, kernel, anchor, delta, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("filter2D");

    return NULL;
}

static Napi::Value pyopencv_cv_filterHomographyDecompByVisibleRefpoints(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_rotations = NULL;
    vector_Mat rotations;
    Napi::Value* pyobj_normals = NULL;
    vector_Mat normals;
    Napi::Value* pyobj_beforePoints = NULL;
    Mat beforePoints;
    Napi::Value* pyobj_afterPoints = NULL;
    Mat afterPoints;
    Napi::Value* pyobj_possibleSolutions = NULL;
    Mat possibleSolutions;
    Napi::Value* pyobj_pointsMask = NULL;
    Mat pointsMask;

    const char* keywords[] = { "rotations", "normals", "beforePoints", "afterPoints", "possibleSolutions", "pointsMask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OO:filterHomographyDecompByVisibleRefpoints", (char**)keywords, &pyobj_rotations, &pyobj_normals, &pyobj_beforePoints, &pyobj_afterPoints, &pyobj_possibleSolutions, &pyobj_pointsMask) &&
        jsopencv_to_safe(info, pyobj_rotations, rotations, ArgInfo("rotations", 0)) &&
        jsopencv_to_safe(info, pyobj_normals, normals, ArgInfo("normals", 0)) &&
        jsopencv_to_safe(info, pyobj_beforePoints, beforePoints, ArgInfo("beforePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_afterPoints, afterPoints, ArgInfo("afterPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_possibleSolutions, possibleSolutions, ArgInfo("possibleSolutions", 1)) &&
        jsopencv_to_safe(info, pyobj_pointsMask, pointsMask, ArgInfo("pointsMask", 0)))
    {
        ERRWRAP2(cv::filterHomographyDecompByVisibleRefpoints(rotations, normals, beforePoints, afterPoints, possibleSolutions, pointsMask));
        return jsopencv_from(possibleSolutions);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_rotations = NULL;
    vector_UMat rotations;
    Napi::Value* pyobj_normals = NULL;
    vector_UMat normals;
    Napi::Value* pyobj_beforePoints = NULL;
    UMat beforePoints;
    Napi::Value* pyobj_afterPoints = NULL;
    UMat afterPoints;
    Napi::Value* pyobj_possibleSolutions = NULL;
    UMat possibleSolutions;
    Napi::Value* pyobj_pointsMask = NULL;
    UMat pointsMask;

    const char* keywords[] = { "rotations", "normals", "beforePoints", "afterPoints", "possibleSolutions", "pointsMask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OO:filterHomographyDecompByVisibleRefpoints", (char**)keywords, &pyobj_rotations, &pyobj_normals, &pyobj_beforePoints, &pyobj_afterPoints, &pyobj_possibleSolutions, &pyobj_pointsMask) &&
        jsopencv_to_safe(info, pyobj_rotations, rotations, ArgInfo("rotations", 0)) &&
        jsopencv_to_safe(info, pyobj_normals, normals, ArgInfo("normals", 0)) &&
        jsopencv_to_safe(info, pyobj_beforePoints, beforePoints, ArgInfo("beforePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_afterPoints, afterPoints, ArgInfo("afterPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_possibleSolutions, possibleSolutions, ArgInfo("possibleSolutions", 1)) &&
        jsopencv_to_safe(info, pyobj_pointsMask, pointsMask, ArgInfo("pointsMask", 0)))
    {
        ERRWRAP2(cv::filterHomographyDecompByVisibleRefpoints(rotations, normals, beforePoints, afterPoints, possibleSolutions, pointsMask));
        return jsopencv_from(possibleSolutions);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("filterHomographyDecompByVisibleRefpoints");

    return NULL;
}

static Napi::Value pyopencv_cv_filterSpeckles(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_newVal = NULL;
    double newVal=0;
    Napi::Value* pyobj_maxSpeckleSize = NULL;
    int maxSpeckleSize=0;
    Napi::Value* pyobj_maxDiff = NULL;
    double maxDiff=0;
    Napi::Value* pyobj_buf = NULL;
    Mat buf;

    const char* keywords[] = { "img", "newVal", "maxSpeckleSize", "maxDiff", "buf", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:filterSpeckles", (char**)keywords, &pyobj_img, &pyobj_newVal, &pyobj_maxSpeckleSize, &pyobj_maxDiff, &pyobj_buf) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_newVal, newVal, ArgInfo("newVal", 0)) &&
        jsopencv_to_safe(info, pyobj_maxSpeckleSize, maxSpeckleSize, ArgInfo("maxSpeckleSize", 0)) &&
        jsopencv_to_safe(info, pyobj_maxDiff, maxDiff, ArgInfo("maxDiff", 0)) &&
        jsopencv_to_safe(info, pyobj_buf, buf, ArgInfo("buf", 1)))
    {
        ERRWRAP2(cv::filterSpeckles(img, newVal, maxSpeckleSize, maxDiff, buf));
        return Py_BuildValue("(NN)", jsopencv_from(img), jsopencv_from(buf));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_newVal = NULL;
    double newVal=0;
    Napi::Value* pyobj_maxSpeckleSize = NULL;
    int maxSpeckleSize=0;
    Napi::Value* pyobj_maxDiff = NULL;
    double maxDiff=0;
    Napi::Value* pyobj_buf = NULL;
    UMat buf;

    const char* keywords[] = { "img", "newVal", "maxSpeckleSize", "maxDiff", "buf", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:filterSpeckles", (char**)keywords, &pyobj_img, &pyobj_newVal, &pyobj_maxSpeckleSize, &pyobj_maxDiff, &pyobj_buf) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_newVal, newVal, ArgInfo("newVal", 0)) &&
        jsopencv_to_safe(info, pyobj_maxSpeckleSize, maxSpeckleSize, ArgInfo("maxSpeckleSize", 0)) &&
        jsopencv_to_safe(info, pyobj_maxDiff, maxDiff, ArgInfo("maxDiff", 0)) &&
        jsopencv_to_safe(info, pyobj_buf, buf, ArgInfo("buf", 1)))
    {
        ERRWRAP2(cv::filterSpeckles(img, newVal, maxSpeckleSize, maxDiff, buf));
        return Py_BuildValue("(NN)", jsopencv_from(img), jsopencv_from(buf));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("filterSpeckles");

    return NULL;
}

static Napi::Value pyopencv_cv_find4QuadCornerSubpix(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_corners = NULL;
    Mat corners;
    Napi::Value* pyobj_region_size = NULL;
    Size region_size;
    bool retval;

    const char* keywords[] = { "img", "corners", "region_size", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:find4QuadCornerSubpix", (char**)keywords, &pyobj_img, &pyobj_corners, &pyobj_region_size) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_corners, corners, ArgInfo("corners", 1)) &&
        jsopencv_to_safe(info, pyobj_region_size, region_size, ArgInfo("region_size", 0)))
    {
        ERRWRAP2(retval = cv::find4QuadCornerSubpix(img, corners, region_size));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(corners));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_corners = NULL;
    UMat corners;
    Napi::Value* pyobj_region_size = NULL;
    Size region_size;
    bool retval;

    const char* keywords[] = { "img", "corners", "region_size", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:find4QuadCornerSubpix", (char**)keywords, &pyobj_img, &pyobj_corners, &pyobj_region_size) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_corners, corners, ArgInfo("corners", 1)) &&
        jsopencv_to_safe(info, pyobj_region_size, region_size, ArgInfo("region_size", 0)))
    {
        ERRWRAP2(retval = cv::find4QuadCornerSubpix(img, corners, region_size));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(corners));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("find4QuadCornerSubpix");

    return NULL;
}

static Napi::Value pyopencv_cv_findChessboardCorners(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_patternSize = NULL;
    Size patternSize;
    Napi::Value* pyobj_corners = NULL;
    Mat corners;
    Napi::Value* pyobj_flags = NULL;
    int flags=CALIB_CB_ADAPTIVE_THRESH + CALIB_CB_NORMALIZE_IMAGE;
    bool retval;

    const char* keywords[] = { "image", "patternSize", "corners", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:findChessboardCorners", (char**)keywords, &pyobj_image, &pyobj_patternSize, &pyobj_corners, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_patternSize, patternSize, ArgInfo("patternSize", 0)) &&
        jsopencv_to_safe(info, pyobj_corners, corners, ArgInfo("corners", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::findChessboardCorners(image, patternSize, corners, flags));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(corners));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_patternSize = NULL;
    Size patternSize;
    Napi::Value* pyobj_corners = NULL;
    UMat corners;
    Napi::Value* pyobj_flags = NULL;
    int flags=CALIB_CB_ADAPTIVE_THRESH + CALIB_CB_NORMALIZE_IMAGE;
    bool retval;

    const char* keywords[] = { "image", "patternSize", "corners", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:findChessboardCorners", (char**)keywords, &pyobj_image, &pyobj_patternSize, &pyobj_corners, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_patternSize, patternSize, ArgInfo("patternSize", 0)) &&
        jsopencv_to_safe(info, pyobj_corners, corners, ArgInfo("corners", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::findChessboardCorners(image, patternSize, corners, flags));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(corners));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("findChessboardCorners");

    return NULL;
}

static Napi::Value pyopencv_cv_findChessboardCornersSB(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_patternSize = NULL;
    Size patternSize;
    Napi::Value* pyobj_corners = NULL;
    Mat corners;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    bool retval;

    const char* keywords[] = { "image", "patternSize", "corners", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:findChessboardCornersSB", (char**)keywords, &pyobj_image, &pyobj_patternSize, &pyobj_corners, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_patternSize, patternSize, ArgInfo("patternSize", 0)) &&
        jsopencv_to_safe(info, pyobj_corners, corners, ArgInfo("corners", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::findChessboardCornersSB(image, patternSize, corners, flags));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(corners));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_patternSize = NULL;
    Size patternSize;
    Napi::Value* pyobj_corners = NULL;
    UMat corners;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    bool retval;

    const char* keywords[] = { "image", "patternSize", "corners", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:findChessboardCornersSB", (char**)keywords, &pyobj_image, &pyobj_patternSize, &pyobj_corners, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_patternSize, patternSize, ArgInfo("patternSize", 0)) &&
        jsopencv_to_safe(info, pyobj_corners, corners, ArgInfo("corners", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::findChessboardCornersSB(image, patternSize, corners, flags));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(corners));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("findChessboardCornersSB");

    return NULL;
}

static Napi::Value pyopencv_cv_findChessboardCornersSBWithMeta(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_patternSize = NULL;
    Size patternSize;
    Napi::Value* pyobj_corners = NULL;
    Mat corners;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_meta = NULL;
    Mat meta;
    bool retval;

    const char* keywords[] = { "image", "patternSize", "flags", "corners", "meta", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:findChessboardCornersSBWithMeta", (char**)keywords, &pyobj_image, &pyobj_patternSize, &pyobj_flags, &pyobj_corners, &pyobj_meta) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_patternSize, patternSize, ArgInfo("patternSize", 0)) &&
        jsopencv_to_safe(info, pyobj_corners, corners, ArgInfo("corners", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_meta, meta, ArgInfo("meta", 1)))
    {
        ERRWRAP2(retval = cv::findChessboardCornersSB(image, patternSize, corners, flags, meta));
        return Py_BuildValue("(NNN)", jsopencv_from(retval), jsopencv_from(corners), jsopencv_from(meta));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_patternSize = NULL;
    Size patternSize;
    Napi::Value* pyobj_corners = NULL;
    UMat corners;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_meta = NULL;
    UMat meta;
    bool retval;

    const char* keywords[] = { "image", "patternSize", "flags", "corners", "meta", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:findChessboardCornersSBWithMeta", (char**)keywords, &pyobj_image, &pyobj_patternSize, &pyobj_flags, &pyobj_corners, &pyobj_meta) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_patternSize, patternSize, ArgInfo("patternSize", 0)) &&
        jsopencv_to_safe(info, pyobj_corners, corners, ArgInfo("corners", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_meta, meta, ArgInfo("meta", 1)))
    {
        ERRWRAP2(retval = cv::findChessboardCornersSB(image, patternSize, corners, flags, meta));
        return Py_BuildValue("(NNN)", jsopencv_from(retval), jsopencv_from(corners), jsopencv_from(meta));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("findChessboardCornersSBWithMeta");

    return NULL;
}

static Napi::Value pyopencv_cv_findCirclesGrid(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_patternSize = NULL;
    Size patternSize;
    Napi::Value* pyobj_centers = NULL;
    Mat centers;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_blobDetector = NULL;
    Ptr<FeatureDetector> blobDetector;
    Napi::Value* pyobj_parameters = NULL;
    cv::CirclesGridFinderParameters parameters;
    bool retval;

    const char* keywords[] = { "image", "patternSize", "flags", "blobDetector", "parameters", "centers", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|O:findCirclesGrid", (char**)keywords, &pyobj_image, &pyobj_patternSize, &pyobj_flags, &pyobj_blobDetector, &pyobj_parameters, &pyobj_centers) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_patternSize, patternSize, ArgInfo("patternSize", 0)) &&
        jsopencv_to_safe(info, pyobj_centers, centers, ArgInfo("centers", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_blobDetector, blobDetector, ArgInfo("blobDetector", 0)) &&
        jsopencv_to_safe(info, pyobj_parameters, parameters, ArgInfo("parameters", 0)))
    {
        ERRWRAP2(retval = cv::findCirclesGrid(image, patternSize, centers, flags, blobDetector, parameters));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(centers));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_patternSize = NULL;
    Size patternSize;
    Napi::Value* pyobj_centers = NULL;
    UMat centers;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_blobDetector = NULL;
    Ptr<FeatureDetector> blobDetector;
    Napi::Value* pyobj_parameters = NULL;
    cv::CirclesGridFinderParameters parameters;
    bool retval;

    const char* keywords[] = { "image", "patternSize", "flags", "blobDetector", "parameters", "centers", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|O:findCirclesGrid", (char**)keywords, &pyobj_image, &pyobj_patternSize, &pyobj_flags, &pyobj_blobDetector, &pyobj_parameters, &pyobj_centers) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_patternSize, patternSize, ArgInfo("patternSize", 0)) &&
        jsopencv_to_safe(info, pyobj_centers, centers, ArgInfo("centers", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_blobDetector, blobDetector, ArgInfo("blobDetector", 0)) &&
        jsopencv_to_safe(info, pyobj_parameters, parameters, ArgInfo("parameters", 0)))
    {
        ERRWRAP2(retval = cv::findCirclesGrid(image, patternSize, centers, flags, blobDetector, parameters));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(centers));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_patternSize = NULL;
    Size patternSize;
    Napi::Value* pyobj_centers = NULL;
    Mat centers;
    Napi::Value* pyobj_flags = NULL;
    int flags=CALIB_CB_SYMMETRIC_GRID;
    Napi::Value* pyobj_blobDetector = NULL;
    Ptr<FeatureDetector> blobDetector=SimpleBlobDetector::create();
    bool retval;

    const char* keywords[] = { "image", "patternSize", "centers", "flags", "blobDetector", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:findCirclesGrid", (char**)keywords, &pyobj_image, &pyobj_patternSize, &pyobj_centers, &pyobj_flags, &pyobj_blobDetector) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_patternSize, patternSize, ArgInfo("patternSize", 0)) &&
        jsopencv_to_safe(info, pyobj_centers, centers, ArgInfo("centers", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_blobDetector, blobDetector, ArgInfo("blobDetector", 0)))
    {
        ERRWRAP2(retval = cv::findCirclesGrid(image, patternSize, centers, flags, blobDetector));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(centers));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_patternSize = NULL;
    Size patternSize;
    Napi::Value* pyobj_centers = NULL;
    UMat centers;
    Napi::Value* pyobj_flags = NULL;
    int flags=CALIB_CB_SYMMETRIC_GRID;
    Napi::Value* pyobj_blobDetector = NULL;
    Ptr<FeatureDetector> blobDetector=SimpleBlobDetector::create();
    bool retval;

    const char* keywords[] = { "image", "patternSize", "centers", "flags", "blobDetector", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:findCirclesGrid", (char**)keywords, &pyobj_image, &pyobj_patternSize, &pyobj_centers, &pyobj_flags, &pyobj_blobDetector) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_patternSize, patternSize, ArgInfo("patternSize", 0)) &&
        jsopencv_to_safe(info, pyobj_centers, centers, ArgInfo("centers", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_blobDetector, blobDetector, ArgInfo("blobDetector", 0)))
    {
        ERRWRAP2(retval = cv::findCirclesGrid(image, patternSize, centers, flags, blobDetector));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(centers));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("findCirclesGrid");

    return NULL;
}

static Napi::Value pyopencv_cv_findContours(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_contours = NULL;
    vector_Mat contours;
    Napi::Value* pyobj_hierarchy = NULL;
    Mat hierarchy;
    Napi::Value* pyobj_mode = NULL;
    int mode=0;
    Napi::Value* pyobj_method = NULL;
    int method=0;
    Napi::Value* pyobj_offset = NULL;
    Point offset;

    const char* keywords[] = { "image", "mode", "method", "contours", "hierarchy", "offset", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:findContours", (char**)keywords, &pyobj_image, &pyobj_mode, &pyobj_method, &pyobj_contours, &pyobj_hierarchy, &pyobj_offset) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_contours, contours, ArgInfo("contours", 1)) &&
        jsopencv_to_safe(info, pyobj_hierarchy, hierarchy, ArgInfo("hierarchy", 1)) &&
        jsopencv_to_safe(info, pyobj_mode, mode, ArgInfo("mode", 0)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_offset, offset, ArgInfo("offset", 0)))
    {
        ERRWRAP2(cv::findContours(image, contours, hierarchy, mode, method, offset));
        return Py_BuildValue("(NN)", jsopencv_from(contours), jsopencv_from(hierarchy));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_contours = NULL;
    vector_UMat contours;
    Napi::Value* pyobj_hierarchy = NULL;
    UMat hierarchy;
    Napi::Value* pyobj_mode = NULL;
    int mode=0;
    Napi::Value* pyobj_method = NULL;
    int method=0;
    Napi::Value* pyobj_offset = NULL;
    Point offset;

    const char* keywords[] = { "image", "mode", "method", "contours", "hierarchy", "offset", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:findContours", (char**)keywords, &pyobj_image, &pyobj_mode, &pyobj_method, &pyobj_contours, &pyobj_hierarchy, &pyobj_offset) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_contours, contours, ArgInfo("contours", 1)) &&
        jsopencv_to_safe(info, pyobj_hierarchy, hierarchy, ArgInfo("hierarchy", 1)) &&
        jsopencv_to_safe(info, pyobj_mode, mode, ArgInfo("mode", 0)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_offset, offset, ArgInfo("offset", 0)))
    {
        ERRWRAP2(cv::findContours(image, contours, hierarchy, mode, method, offset));
        return Py_BuildValue("(NN)", jsopencv_from(contours), jsopencv_from(hierarchy));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("findContours");

    return NULL;
}

static Napi::Value pyopencv_cv_findEssentialMat(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(8);

    {
    Napi::Value* pyobj_points1 = NULL;
    Mat points1;
    Napi::Value* pyobj_points2 = NULL;
    Mat points2;
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_method = NULL;
    int method=RANSAC;
    Napi::Value* pyobj_prob = NULL;
    double prob=0.999;
    Napi::Value* pyobj_threshold = NULL;
    double threshold=1.0;
    Napi::Value* pyobj_maxIters = NULL;
    int maxIters=1000;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Mat retval;

    const char* keywords[] = { "points1", "points2", "cameraMatrix", "method", "prob", "threshold", "maxIters", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOOO:findEssentialMat", (char**)keywords, &pyobj_points1, &pyobj_points2, &pyobj_cameraMatrix, &pyobj_method, &pyobj_prob, &pyobj_threshold, &pyobj_maxIters, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_prob, prob, ArgInfo("prob", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_maxIters, maxIters, ArgInfo("maxIters", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)))
    {
        ERRWRAP2(retval = cv::findEssentialMat(points1, points2, cameraMatrix, method, prob, threshold, maxIters, mask));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(mask));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_points1 = NULL;
    UMat points1;
    Napi::Value* pyobj_points2 = NULL;
    UMat points2;
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_method = NULL;
    int method=RANSAC;
    Napi::Value* pyobj_prob = NULL;
    double prob=0.999;
    Napi::Value* pyobj_threshold = NULL;
    double threshold=1.0;
    Napi::Value* pyobj_maxIters = NULL;
    int maxIters=1000;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    Mat retval;

    const char* keywords[] = { "points1", "points2", "cameraMatrix", "method", "prob", "threshold", "maxIters", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOOO:findEssentialMat", (char**)keywords, &pyobj_points1, &pyobj_points2, &pyobj_cameraMatrix, &pyobj_method, &pyobj_prob, &pyobj_threshold, &pyobj_maxIters, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_prob, prob, ArgInfo("prob", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_maxIters, maxIters, ArgInfo("maxIters", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)))
    {
        ERRWRAP2(retval = cv::findEssentialMat(points1, points2, cameraMatrix, method, prob, threshold, maxIters, mask));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(mask));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_points1 = NULL;
    Mat points1;
    Napi::Value* pyobj_points2 = NULL;
    Mat points2;
    Napi::Value* pyobj_focal = NULL;
    double focal=1.0;
    Napi::Value* pyobj_pp = NULL;
    Point2d pp=Point2d(0, 0);
    Napi::Value* pyobj_method = NULL;
    int method=RANSAC;
    Napi::Value* pyobj_prob = NULL;
    double prob=0.999;
    Napi::Value* pyobj_threshold = NULL;
    double threshold=1.0;
    Napi::Value* pyobj_maxIters = NULL;
    int maxIters=1000;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Mat retval;

    const char* keywords[] = { "points1", "points2", "focal", "pp", "method", "prob", "threshold", "maxIters", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOOOOO:findEssentialMat", (char**)keywords, &pyobj_points1, &pyobj_points2, &pyobj_focal, &pyobj_pp, &pyobj_method, &pyobj_prob, &pyobj_threshold, &pyobj_maxIters, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_focal, focal, ArgInfo("focal", 0)) &&
        jsopencv_to_safe(info, pyobj_pp, pp, ArgInfo("pp", 0)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_prob, prob, ArgInfo("prob", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_maxIters, maxIters, ArgInfo("maxIters", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)))
    {
        ERRWRAP2(retval = cv::findEssentialMat(points1, points2, focal, pp, method, prob, threshold, maxIters, mask));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(mask));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_points1 = NULL;
    UMat points1;
    Napi::Value* pyobj_points2 = NULL;
    UMat points2;
    Napi::Value* pyobj_focal = NULL;
    double focal=1.0;
    Napi::Value* pyobj_pp = NULL;
    Point2d pp=Point2d(0, 0);
    Napi::Value* pyobj_method = NULL;
    int method=RANSAC;
    Napi::Value* pyobj_prob = NULL;
    double prob=0.999;
    Napi::Value* pyobj_threshold = NULL;
    double threshold=1.0;
    Napi::Value* pyobj_maxIters = NULL;
    int maxIters=1000;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    Mat retval;

    const char* keywords[] = { "points1", "points2", "focal", "pp", "method", "prob", "threshold", "maxIters", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOOOOO:findEssentialMat", (char**)keywords, &pyobj_points1, &pyobj_points2, &pyobj_focal, &pyobj_pp, &pyobj_method, &pyobj_prob, &pyobj_threshold, &pyobj_maxIters, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_focal, focal, ArgInfo("focal", 0)) &&
        jsopencv_to_safe(info, pyobj_pp, pp, ArgInfo("pp", 0)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_prob, prob, ArgInfo("prob", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_maxIters, maxIters, ArgInfo("maxIters", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)))
    {
        ERRWRAP2(retval = cv::findEssentialMat(points1, points2, focal, pp, method, prob, threshold, maxIters, mask));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(mask));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_points1 = NULL;
    Mat points1;
    Napi::Value* pyobj_points2 = NULL;
    Mat points2;
    Napi::Value* pyobj_cameraMatrix1 = NULL;
    Mat cameraMatrix1;
    Napi::Value* pyobj_distCoeffs1 = NULL;
    Mat distCoeffs1;
    Napi::Value* pyobj_cameraMatrix2 = NULL;
    Mat cameraMatrix2;
    Napi::Value* pyobj_distCoeffs2 = NULL;
    Mat distCoeffs2;
    Napi::Value* pyobj_method = NULL;
    int method=RANSAC;
    Napi::Value* pyobj_prob = NULL;
    double prob=0.999;
    Napi::Value* pyobj_threshold = NULL;
    double threshold=1.0;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Mat retval;

    const char* keywords[] = { "points1", "points2", "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "method", "prob", "threshold", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OOOO:findEssentialMat", (char**)keywords, &pyobj_points1, &pyobj_points2, &pyobj_cameraMatrix1, &pyobj_distCoeffs1, &pyobj_cameraMatrix2, &pyobj_distCoeffs2, &pyobj_method, &pyobj_prob, &pyobj_threshold, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix1, cameraMatrix1, ArgInfo("cameraMatrix1", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs1, distCoeffs1, ArgInfo("distCoeffs1", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix2, cameraMatrix2, ArgInfo("cameraMatrix2", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs2, distCoeffs2, ArgInfo("distCoeffs2", 0)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_prob, prob, ArgInfo("prob", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)))
    {
        ERRWRAP2(retval = cv::findEssentialMat(points1, points2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, method, prob, threshold, mask));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(mask));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_points1 = NULL;
    UMat points1;
    Napi::Value* pyobj_points2 = NULL;
    UMat points2;
    Napi::Value* pyobj_cameraMatrix1 = NULL;
    UMat cameraMatrix1;
    Napi::Value* pyobj_distCoeffs1 = NULL;
    UMat distCoeffs1;
    Napi::Value* pyobj_cameraMatrix2 = NULL;
    UMat cameraMatrix2;
    Napi::Value* pyobj_distCoeffs2 = NULL;
    UMat distCoeffs2;
    Napi::Value* pyobj_method = NULL;
    int method=RANSAC;
    Napi::Value* pyobj_prob = NULL;
    double prob=0.999;
    Napi::Value* pyobj_threshold = NULL;
    double threshold=1.0;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    Mat retval;

    const char* keywords[] = { "points1", "points2", "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "method", "prob", "threshold", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OOOO:findEssentialMat", (char**)keywords, &pyobj_points1, &pyobj_points2, &pyobj_cameraMatrix1, &pyobj_distCoeffs1, &pyobj_cameraMatrix2, &pyobj_distCoeffs2, &pyobj_method, &pyobj_prob, &pyobj_threshold, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix1, cameraMatrix1, ArgInfo("cameraMatrix1", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs1, distCoeffs1, ArgInfo("distCoeffs1", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix2, cameraMatrix2, ArgInfo("cameraMatrix2", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs2, distCoeffs2, ArgInfo("distCoeffs2", 0)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_prob, prob, ArgInfo("prob", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)))
    {
        ERRWRAP2(retval = cv::findEssentialMat(points1, points2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, method, prob, threshold, mask));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(mask));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_points1 = NULL;
    Mat points1;
    Napi::Value* pyobj_points2 = NULL;
    Mat points2;
    Napi::Value* pyobj_cameraMatrix1 = NULL;
    Mat cameraMatrix1;
    Napi::Value* pyobj_cameraMatrix2 = NULL;
    Mat cameraMatrix2;
    Napi::Value* pyobj_dist_coeff1 = NULL;
    Mat dist_coeff1;
    Napi::Value* pyobj_dist_coeff2 = NULL;
    Mat dist_coeff2;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Napi::Value* pyobj_params = NULL;
    cv::UsacParams params;
    Mat retval;

    const char* keywords[] = { "points1", "points2", "cameraMatrix1", "cameraMatrix2", "dist_coeff1", "dist_coeff2", "params", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOO|O:findEssentialMat", (char**)keywords, &pyobj_points1, &pyobj_points2, &pyobj_cameraMatrix1, &pyobj_cameraMatrix2, &pyobj_dist_coeff1, &pyobj_dist_coeff2, &pyobj_params, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix1, cameraMatrix1, ArgInfo("cameraMatrix1", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix2, cameraMatrix2, ArgInfo("cameraMatrix2", 0)) &&
        jsopencv_to_safe(info, pyobj_dist_coeff1, dist_coeff1, ArgInfo("dist_coeff1", 0)) &&
        jsopencv_to_safe(info, pyobj_dist_coeff2, dist_coeff2, ArgInfo("dist_coeff2", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)) &&
        jsopencv_to_safe(info, pyobj_params, params, ArgInfo("params", 0)))
    {
        ERRWRAP2(retval = cv::findEssentialMat(points1, points2, cameraMatrix1, cameraMatrix2, dist_coeff1, dist_coeff2, mask, params));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(mask));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_points1 = NULL;
    UMat points1;
    Napi::Value* pyobj_points2 = NULL;
    UMat points2;
    Napi::Value* pyobj_cameraMatrix1 = NULL;
    UMat cameraMatrix1;
    Napi::Value* pyobj_cameraMatrix2 = NULL;
    UMat cameraMatrix2;
    Napi::Value* pyobj_dist_coeff1 = NULL;
    UMat dist_coeff1;
    Napi::Value* pyobj_dist_coeff2 = NULL;
    UMat dist_coeff2;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    Napi::Value* pyobj_params = NULL;
    cv::UsacParams params;
    Mat retval;

    const char* keywords[] = { "points1", "points2", "cameraMatrix1", "cameraMatrix2", "dist_coeff1", "dist_coeff2", "params", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOO|O:findEssentialMat", (char**)keywords, &pyobj_points1, &pyobj_points2, &pyobj_cameraMatrix1, &pyobj_cameraMatrix2, &pyobj_dist_coeff1, &pyobj_dist_coeff2, &pyobj_params, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix1, cameraMatrix1, ArgInfo("cameraMatrix1", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix2, cameraMatrix2, ArgInfo("cameraMatrix2", 0)) &&
        jsopencv_to_safe(info, pyobj_dist_coeff1, dist_coeff1, ArgInfo("dist_coeff1", 0)) &&
        jsopencv_to_safe(info, pyobj_dist_coeff2, dist_coeff2, ArgInfo("dist_coeff2", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)) &&
        jsopencv_to_safe(info, pyobj_params, params, ArgInfo("params", 0)))
    {
        ERRWRAP2(retval = cv::findEssentialMat(points1, points2, cameraMatrix1, cameraMatrix2, dist_coeff1, dist_coeff2, mask, params));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(mask));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("findEssentialMat");

    return NULL;
}

static Napi::Value pyopencv_cv_findFundamentalMat(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(6);

    {
    Napi::Value* pyobj_points1 = NULL;
    Mat points1;
    Napi::Value* pyobj_points2 = NULL;
    Mat points2;
    Napi::Value* pyobj_method = NULL;
    int method=0;
    Napi::Value* pyobj_ransacReprojThreshold = NULL;
    double ransacReprojThreshold=0;
    Napi::Value* pyobj_confidence = NULL;
    double confidence=0;
    Napi::Value* pyobj_maxIters = NULL;
    int maxIters=0;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Mat retval;

    const char* keywords[] = { "points1", "points2", "method", "ransacReprojThreshold", "confidence", "maxIters", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|O:findFundamentalMat", (char**)keywords, &pyobj_points1, &pyobj_points2, &pyobj_method, &pyobj_ransacReprojThreshold, &pyobj_confidence, &pyobj_maxIters, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_ransacReprojThreshold, ransacReprojThreshold, ArgInfo("ransacReprojThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_confidence, confidence, ArgInfo("confidence", 0)) &&
        jsopencv_to_safe(info, pyobj_maxIters, maxIters, ArgInfo("maxIters", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)))
    {
        ERRWRAP2(retval = cv::findFundamentalMat(points1, points2, method, ransacReprojThreshold, confidence, maxIters, mask));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(mask));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_points1 = NULL;
    UMat points1;
    Napi::Value* pyobj_points2 = NULL;
    UMat points2;
    Napi::Value* pyobj_method = NULL;
    int method=0;
    Napi::Value* pyobj_ransacReprojThreshold = NULL;
    double ransacReprojThreshold=0;
    Napi::Value* pyobj_confidence = NULL;
    double confidence=0;
    Napi::Value* pyobj_maxIters = NULL;
    int maxIters=0;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    Mat retval;

    const char* keywords[] = { "points1", "points2", "method", "ransacReprojThreshold", "confidence", "maxIters", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|O:findFundamentalMat", (char**)keywords, &pyobj_points1, &pyobj_points2, &pyobj_method, &pyobj_ransacReprojThreshold, &pyobj_confidence, &pyobj_maxIters, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_ransacReprojThreshold, ransacReprojThreshold, ArgInfo("ransacReprojThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_confidence, confidence, ArgInfo("confidence", 0)) &&
        jsopencv_to_safe(info, pyobj_maxIters, maxIters, ArgInfo("maxIters", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)))
    {
        ERRWRAP2(retval = cv::findFundamentalMat(points1, points2, method, ransacReprojThreshold, confidence, maxIters, mask));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(mask));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_points1 = NULL;
    Mat points1;
    Napi::Value* pyobj_points2 = NULL;
    Mat points2;
    Napi::Value* pyobj_method = NULL;
    int method=FM_RANSAC;
    Napi::Value* pyobj_ransacReprojThreshold = NULL;
    double ransacReprojThreshold=3.;
    Napi::Value* pyobj_confidence = NULL;
    double confidence=0.99;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Mat retval;

    const char* keywords[] = { "points1", "points2", "method", "ransacReprojThreshold", "confidence", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOO:findFundamentalMat", (char**)keywords, &pyobj_points1, &pyobj_points2, &pyobj_method, &pyobj_ransacReprojThreshold, &pyobj_confidence, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_ransacReprojThreshold, ransacReprojThreshold, ArgInfo("ransacReprojThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_confidence, confidence, ArgInfo("confidence", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)))
    {
        ERRWRAP2(retval = cv::findFundamentalMat(points1, points2, method, ransacReprojThreshold, confidence, mask));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(mask));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_points1 = NULL;
    UMat points1;
    Napi::Value* pyobj_points2 = NULL;
    UMat points2;
    Napi::Value* pyobj_method = NULL;
    int method=FM_RANSAC;
    Napi::Value* pyobj_ransacReprojThreshold = NULL;
    double ransacReprojThreshold=3.;
    Napi::Value* pyobj_confidence = NULL;
    double confidence=0.99;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    Mat retval;

    const char* keywords[] = { "points1", "points2", "method", "ransacReprojThreshold", "confidence", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOO:findFundamentalMat", (char**)keywords, &pyobj_points1, &pyobj_points2, &pyobj_method, &pyobj_ransacReprojThreshold, &pyobj_confidence, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_ransacReprojThreshold, ransacReprojThreshold, ArgInfo("ransacReprojThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_confidence, confidence, ArgInfo("confidence", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)))
    {
        ERRWRAP2(retval = cv::findFundamentalMat(points1, points2, method, ransacReprojThreshold, confidence, mask));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(mask));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_points1 = NULL;
    Mat points1;
    Napi::Value* pyobj_points2 = NULL;
    Mat points2;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Napi::Value* pyobj_params = NULL;
    cv::UsacParams params;
    Mat retval;

    const char* keywords[] = { "points1", "points2", "params", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:findFundamentalMat", (char**)keywords, &pyobj_points1, &pyobj_points2, &pyobj_params, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)) &&
        jsopencv_to_safe(info, pyobj_params, params, ArgInfo("params", 0)))
    {
        ERRWRAP2(retval = cv::findFundamentalMat(points1, points2, mask, params));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(mask));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_points1 = NULL;
    UMat points1;
    Napi::Value* pyobj_points2 = NULL;
    UMat points2;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    Napi::Value* pyobj_params = NULL;
    cv::UsacParams params;
    Mat retval;

    const char* keywords[] = { "points1", "points2", "params", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:findFundamentalMat", (char**)keywords, &pyobj_points1, &pyobj_points2, &pyobj_params, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)) &&
        jsopencv_to_safe(info, pyobj_params, params, ArgInfo("params", 0)))
    {
        ERRWRAP2(retval = cv::findFundamentalMat(points1, points2, mask, params));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(mask));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("findFundamentalMat");

    return NULL;
}

static Napi::Value pyopencv_cv_findHomography(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_srcPoints = NULL;
    Mat srcPoints;
    Napi::Value* pyobj_dstPoints = NULL;
    Mat dstPoints;
    Napi::Value* pyobj_method = NULL;
    int method=0;
    Napi::Value* pyobj_ransacReprojThreshold = NULL;
    double ransacReprojThreshold=3;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Napi::Value* pyobj_maxIters = NULL;
    int maxIters=2000;
    Napi::Value* pyobj_confidence = NULL;
    double confidence=0.995;
    Mat retval;

    const char* keywords[] = { "srcPoints", "dstPoints", "method", "ransacReprojThreshold", "mask", "maxIters", "confidence", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOOO:findHomography", (char**)keywords, &pyobj_srcPoints, &pyobj_dstPoints, &pyobj_method, &pyobj_ransacReprojThreshold, &pyobj_mask, &pyobj_maxIters, &pyobj_confidence) &&
        jsopencv_to_safe(info, pyobj_srcPoints, srcPoints, ArgInfo("srcPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_dstPoints, dstPoints, ArgInfo("dstPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_ransacReprojThreshold, ransacReprojThreshold, ArgInfo("ransacReprojThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)) &&
        jsopencv_to_safe(info, pyobj_maxIters, maxIters, ArgInfo("maxIters", 0)) &&
        jsopencv_to_safe(info, pyobj_confidence, confidence, ArgInfo("confidence", 0)))
    {
        ERRWRAP2(retval = cv::findHomography(srcPoints, dstPoints, method, ransacReprojThreshold, mask, maxIters, confidence));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(mask));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_srcPoints = NULL;
    UMat srcPoints;
    Napi::Value* pyobj_dstPoints = NULL;
    UMat dstPoints;
    Napi::Value* pyobj_method = NULL;
    int method=0;
    Napi::Value* pyobj_ransacReprojThreshold = NULL;
    double ransacReprojThreshold=3;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    Napi::Value* pyobj_maxIters = NULL;
    int maxIters=2000;
    Napi::Value* pyobj_confidence = NULL;
    double confidence=0.995;
    Mat retval;

    const char* keywords[] = { "srcPoints", "dstPoints", "method", "ransacReprojThreshold", "mask", "maxIters", "confidence", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOOO:findHomography", (char**)keywords, &pyobj_srcPoints, &pyobj_dstPoints, &pyobj_method, &pyobj_ransacReprojThreshold, &pyobj_mask, &pyobj_maxIters, &pyobj_confidence) &&
        jsopencv_to_safe(info, pyobj_srcPoints, srcPoints, ArgInfo("srcPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_dstPoints, dstPoints, ArgInfo("dstPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_ransacReprojThreshold, ransacReprojThreshold, ArgInfo("ransacReprojThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)) &&
        jsopencv_to_safe(info, pyobj_maxIters, maxIters, ArgInfo("maxIters", 0)) &&
        jsopencv_to_safe(info, pyobj_confidence, confidence, ArgInfo("confidence", 0)))
    {
        ERRWRAP2(retval = cv::findHomography(srcPoints, dstPoints, method, ransacReprojThreshold, mask, maxIters, confidence));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(mask));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_srcPoints = NULL;
    Mat srcPoints;
    Napi::Value* pyobj_dstPoints = NULL;
    Mat dstPoints;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Napi::Value* pyobj_params = NULL;
    cv::UsacParams params;
    Mat retval;

    const char* keywords[] = { "srcPoints", "dstPoints", "params", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:findHomography", (char**)keywords, &pyobj_srcPoints, &pyobj_dstPoints, &pyobj_params, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_srcPoints, srcPoints, ArgInfo("srcPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_dstPoints, dstPoints, ArgInfo("dstPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)) &&
        jsopencv_to_safe(info, pyobj_params, params, ArgInfo("params", 0)))
    {
        ERRWRAP2(retval = cv::findHomography(srcPoints, dstPoints, mask, params));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(mask));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_srcPoints = NULL;
    UMat srcPoints;
    Napi::Value* pyobj_dstPoints = NULL;
    UMat dstPoints;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    Napi::Value* pyobj_params = NULL;
    cv::UsacParams params;
    Mat retval;

    const char* keywords[] = { "srcPoints", "dstPoints", "params", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:findHomography", (char**)keywords, &pyobj_srcPoints, &pyobj_dstPoints, &pyobj_params, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_srcPoints, srcPoints, ArgInfo("srcPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_dstPoints, dstPoints, ArgInfo("dstPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)) &&
        jsopencv_to_safe(info, pyobj_params, params, ArgInfo("params", 0)))
    {
        ERRWRAP2(retval = cv::findHomography(srcPoints, dstPoints, mask, params));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(mask));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("findHomography");

    return NULL;
}

static Napi::Value pyopencv_cv_findNonZero(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_idx = NULL;
    Mat idx;

    const char* keywords[] = { "src", "idx", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:findNonZero", (char**)keywords, &pyobj_src, &pyobj_idx) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_idx, idx, ArgInfo("idx", 1)))
    {
        ERRWRAP2(cv::findNonZero(src, idx));
        return jsopencv_from(idx);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_idx = NULL;
    UMat idx;

    const char* keywords[] = { "src", "idx", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:findNonZero", (char**)keywords, &pyobj_src, &pyobj_idx) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_idx, idx, ArgInfo("idx", 1)))
    {
        ERRWRAP2(cv::findNonZero(src, idx));
        return jsopencv_from(idx);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("findNonZero");

    return NULL;
}

static Napi::Value pyopencv_cv_findTransformECC(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_templateImage = NULL;
    Mat templateImage;
    Napi::Value* pyobj_inputImage = NULL;
    Mat inputImage;
    Napi::Value* pyobj_warpMatrix = NULL;
    Mat warpMatrix;
    Napi::Value* pyobj_motionType = NULL;
    int motionType=0;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria;
    Napi::Value* pyobj_inputMask = NULL;
    Mat inputMask;
    Napi::Value* pyobj_gaussFiltSize = NULL;
    int gaussFiltSize=0;
    double retval;

    const char* keywords[] = { "templateImage", "inputImage", "warpMatrix", "motionType", "criteria", "inputMask", "gaussFiltSize", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOO:findTransformECC", (char**)keywords, &pyobj_templateImage, &pyobj_inputImage, &pyobj_warpMatrix, &pyobj_motionType, &pyobj_criteria, &pyobj_inputMask, &pyobj_gaussFiltSize) &&
        jsopencv_to_safe(info, pyobj_templateImage, templateImage, ArgInfo("templateImage", 0)) &&
        jsopencv_to_safe(info, pyobj_inputImage, inputImage, ArgInfo("inputImage", 0)) &&
        jsopencv_to_safe(info, pyobj_warpMatrix, warpMatrix, ArgInfo("warpMatrix", 1)) &&
        jsopencv_to_safe(info, pyobj_motionType, motionType, ArgInfo("motionType", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)) &&
        jsopencv_to_safe(info, pyobj_inputMask, inputMask, ArgInfo("inputMask", 0)) &&
        jsopencv_to_safe(info, pyobj_gaussFiltSize, gaussFiltSize, ArgInfo("gaussFiltSize", 0)))
    {
        ERRWRAP2(retval = cv::findTransformECC(templateImage, inputImage, warpMatrix, motionType, criteria, inputMask, gaussFiltSize));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(warpMatrix));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_templateImage = NULL;
    UMat templateImage;
    Napi::Value* pyobj_inputImage = NULL;
    UMat inputImage;
    Napi::Value* pyobj_warpMatrix = NULL;
    UMat warpMatrix;
    Napi::Value* pyobj_motionType = NULL;
    int motionType=0;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria;
    Napi::Value* pyobj_inputMask = NULL;
    UMat inputMask;
    Napi::Value* pyobj_gaussFiltSize = NULL;
    int gaussFiltSize=0;
    double retval;

    const char* keywords[] = { "templateImage", "inputImage", "warpMatrix", "motionType", "criteria", "inputMask", "gaussFiltSize", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOO:findTransformECC", (char**)keywords, &pyobj_templateImage, &pyobj_inputImage, &pyobj_warpMatrix, &pyobj_motionType, &pyobj_criteria, &pyobj_inputMask, &pyobj_gaussFiltSize) &&
        jsopencv_to_safe(info, pyobj_templateImage, templateImage, ArgInfo("templateImage", 0)) &&
        jsopencv_to_safe(info, pyobj_inputImage, inputImage, ArgInfo("inputImage", 0)) &&
        jsopencv_to_safe(info, pyobj_warpMatrix, warpMatrix, ArgInfo("warpMatrix", 1)) &&
        jsopencv_to_safe(info, pyobj_motionType, motionType, ArgInfo("motionType", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)) &&
        jsopencv_to_safe(info, pyobj_inputMask, inputMask, ArgInfo("inputMask", 0)) &&
        jsopencv_to_safe(info, pyobj_gaussFiltSize, gaussFiltSize, ArgInfo("gaussFiltSize", 0)))
    {
        ERRWRAP2(retval = cv::findTransformECC(templateImage, inputImage, warpMatrix, motionType, criteria, inputMask, gaussFiltSize));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(warpMatrix));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_templateImage = NULL;
    Mat templateImage;
    Napi::Value* pyobj_inputImage = NULL;
    Mat inputImage;
    Napi::Value* pyobj_warpMatrix = NULL;
    Mat warpMatrix;
    Napi::Value* pyobj_motionType = NULL;
    int motionType=MOTION_AFFINE;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 50, 0.001);
    Napi::Value* pyobj_inputMask = NULL;
    Mat inputMask;
    double retval;

    const char* keywords[] = { "templateImage", "inputImage", "warpMatrix", "motionType", "criteria", "inputMask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:findTransformECC", (char**)keywords, &pyobj_templateImage, &pyobj_inputImage, &pyobj_warpMatrix, &pyobj_motionType, &pyobj_criteria, &pyobj_inputMask) &&
        jsopencv_to_safe(info, pyobj_templateImage, templateImage, ArgInfo("templateImage", 0)) &&
        jsopencv_to_safe(info, pyobj_inputImage, inputImage, ArgInfo("inputImage", 0)) &&
        jsopencv_to_safe(info, pyobj_warpMatrix, warpMatrix, ArgInfo("warpMatrix", 1)) &&
        jsopencv_to_safe(info, pyobj_motionType, motionType, ArgInfo("motionType", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)) &&
        jsopencv_to_safe(info, pyobj_inputMask, inputMask, ArgInfo("inputMask", 0)))
    {
        ERRWRAP2(retval = cv::findTransformECC(templateImage, inputImage, warpMatrix, motionType, criteria, inputMask));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(warpMatrix));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_templateImage = NULL;
    UMat templateImage;
    Napi::Value* pyobj_inputImage = NULL;
    UMat inputImage;
    Napi::Value* pyobj_warpMatrix = NULL;
    UMat warpMatrix;
    Napi::Value* pyobj_motionType = NULL;
    int motionType=MOTION_AFFINE;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 50, 0.001);
    Napi::Value* pyobj_inputMask = NULL;
    UMat inputMask;
    double retval;

    const char* keywords[] = { "templateImage", "inputImage", "warpMatrix", "motionType", "criteria", "inputMask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:findTransformECC", (char**)keywords, &pyobj_templateImage, &pyobj_inputImage, &pyobj_warpMatrix, &pyobj_motionType, &pyobj_criteria, &pyobj_inputMask) &&
        jsopencv_to_safe(info, pyobj_templateImage, templateImage, ArgInfo("templateImage", 0)) &&
        jsopencv_to_safe(info, pyobj_inputImage, inputImage, ArgInfo("inputImage", 0)) &&
        jsopencv_to_safe(info, pyobj_warpMatrix, warpMatrix, ArgInfo("warpMatrix", 1)) &&
        jsopencv_to_safe(info, pyobj_motionType, motionType, ArgInfo("motionType", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)) &&
        jsopencv_to_safe(info, pyobj_inputMask, inputMask, ArgInfo("inputMask", 0)))
    {
        ERRWRAP2(retval = cv::findTransformECC(templateImage, inputImage, warpMatrix, motionType, criteria, inputMask));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(warpMatrix));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("findTransformECC");

    return NULL;
}

static Napi::Value pyopencv_cv_fitEllipse(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_points = NULL;
    Mat points;
    RotatedRect retval;

    const char* keywords[] = { "points", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:fitEllipse", (char**)keywords, &pyobj_points) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 0)))
    {
        ERRWRAP2(retval = cv::fitEllipse(points));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_points = NULL;
    UMat points;
    RotatedRect retval;

    const char* keywords[] = { "points", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:fitEllipse", (char**)keywords, &pyobj_points) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 0)))
    {
        ERRWRAP2(retval = cv::fitEllipse(points));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("fitEllipse");

    return NULL;
}

static Napi::Value pyopencv_cv_fitEllipseAMS(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_points = NULL;
    Mat points;
    RotatedRect retval;

    const char* keywords[] = { "points", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:fitEllipseAMS", (char**)keywords, &pyobj_points) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 0)))
    {
        ERRWRAP2(retval = cv::fitEllipseAMS(points));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_points = NULL;
    UMat points;
    RotatedRect retval;

    const char* keywords[] = { "points", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:fitEllipseAMS", (char**)keywords, &pyobj_points) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 0)))
    {
        ERRWRAP2(retval = cv::fitEllipseAMS(points));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("fitEllipseAMS");

    return NULL;
}

static Napi::Value pyopencv_cv_fitEllipseDirect(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_points = NULL;
    Mat points;
    RotatedRect retval;

    const char* keywords[] = { "points", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:fitEllipseDirect", (char**)keywords, &pyobj_points) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 0)))
    {
        ERRWRAP2(retval = cv::fitEllipseDirect(points));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_points = NULL;
    UMat points;
    RotatedRect retval;

    const char* keywords[] = { "points", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:fitEllipseDirect", (char**)keywords, &pyobj_points) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 0)))
    {
        ERRWRAP2(retval = cv::fitEllipseDirect(points));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("fitEllipseDirect");

    return NULL;
}

static Napi::Value pyopencv_cv_fitLine(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_points = NULL;
    Mat points;
    Napi::Value* pyobj_line = NULL;
    Mat line;
    Napi::Value* pyobj_distType = NULL;
    int distType=0;
    Napi::Value* pyobj_param = NULL;
    double param=0;
    Napi::Value* pyobj_reps = NULL;
    double reps=0;
    Napi::Value* pyobj_aeps = NULL;
    double aeps=0;

    const char* keywords[] = { "points", "distType", "param", "reps", "aeps", "line", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|O:fitLine", (char**)keywords, &pyobj_points, &pyobj_distType, &pyobj_param, &pyobj_reps, &pyobj_aeps, &pyobj_line) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 0)) &&
        jsopencv_to_safe(info, pyobj_line, line, ArgInfo("line", 1)) &&
        jsopencv_to_safe(info, pyobj_distType, distType, ArgInfo("distType", 0)) &&
        jsopencv_to_safe(info, pyobj_param, param, ArgInfo("param", 0)) &&
        jsopencv_to_safe(info, pyobj_reps, reps, ArgInfo("reps", 0)) &&
        jsopencv_to_safe(info, pyobj_aeps, aeps, ArgInfo("aeps", 0)))
    {
        ERRWRAP2(cv::fitLine(points, line, distType, param, reps, aeps));
        return jsopencv_from(line);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_points = NULL;
    UMat points;
    Napi::Value* pyobj_line = NULL;
    UMat line;
    Napi::Value* pyobj_distType = NULL;
    int distType=0;
    Napi::Value* pyobj_param = NULL;
    double param=0;
    Napi::Value* pyobj_reps = NULL;
    double reps=0;
    Napi::Value* pyobj_aeps = NULL;
    double aeps=0;

    const char* keywords[] = { "points", "distType", "param", "reps", "aeps", "line", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|O:fitLine", (char**)keywords, &pyobj_points, &pyobj_distType, &pyobj_param, &pyobj_reps, &pyobj_aeps, &pyobj_line) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 0)) &&
        jsopencv_to_safe(info, pyobj_line, line, ArgInfo("line", 1)) &&
        jsopencv_to_safe(info, pyobj_distType, distType, ArgInfo("distType", 0)) &&
        jsopencv_to_safe(info, pyobj_param, param, ArgInfo("param", 0)) &&
        jsopencv_to_safe(info, pyobj_reps, reps, ArgInfo("reps", 0)) &&
        jsopencv_to_safe(info, pyobj_aeps, aeps, ArgInfo("aeps", 0)))
    {
        ERRWRAP2(cv::fitLine(points, line, distType, param, reps, aeps));
        return jsopencv_from(line);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("fitLine");

    return NULL;
}

static Napi::Value pyopencv_cv_flip(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_flipCode = NULL;
    int flipCode=0;

    const char* keywords[] = { "src", "flipCode", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:flip", (char**)keywords, &pyobj_src, &pyobj_flipCode, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_flipCode, flipCode, ArgInfo("flipCode", 0)))
    {
        ERRWRAP2(cv::flip(src, dst, flipCode));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_flipCode = NULL;
    int flipCode=0;

    const char* keywords[] = { "src", "flipCode", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:flip", (char**)keywords, &pyobj_src, &pyobj_flipCode, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_flipCode, flipCode, ArgInfo("flipCode", 0)))
    {
        ERRWRAP2(cv::flip(src, dst, flipCode));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("flip");

    return NULL;
}

static Napi::Value pyopencv_cv_flipND(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_axis = NULL;
    int axis=0;

    const char* keywords[] = { "src", "axis", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:flipND", (char**)keywords, &pyobj_src, &pyobj_axis, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_axis, axis, ArgInfo("axis", 0)))
    {
        ERRWRAP2(cv::flipND(src, dst, axis));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_axis = NULL;
    int axis=0;

    const char* keywords[] = { "src", "axis", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:flipND", (char**)keywords, &pyobj_src, &pyobj_axis, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_axis, axis, ArgInfo("axis", 0)))
    {
        ERRWRAP2(cv::flipND(src, dst, axis));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("flipND");

    return NULL;
}

static Napi::Value pyopencv_cv_floodFill(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Napi::Value* pyobj_seedPoint = NULL;
    Point seedPoint;
    Napi::Value* pyobj_newVal = NULL;
    Scalar newVal;
    Rect rect;
    Napi::Value* pyobj_loDiff = NULL;
    Scalar loDiff;
    Napi::Value* pyobj_upDiff = NULL;
    Scalar upDiff;
    Napi::Value* pyobj_flags = NULL;
    int flags=4;
    int retval;

    const char* keywords[] = { "image", "mask", "seedPoint", "newVal", "loDiff", "upDiff", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:floodFill", (char**)keywords, &pyobj_image, &pyobj_mask, &pyobj_seedPoint, &pyobj_newVal, &pyobj_loDiff, &pyobj_upDiff, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)) &&
        jsopencv_to_safe(info, pyobj_seedPoint, seedPoint, ArgInfo("seedPoint", 0)) &&
        jsopencv_to_safe(info, pyobj_newVal, newVal, ArgInfo("newVal", 0)) &&
        jsopencv_to_safe(info, pyobj_loDiff, loDiff, ArgInfo("loDiff", 0)) &&
        jsopencv_to_safe(info, pyobj_upDiff, upDiff, ArgInfo("upDiff", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::floodFill(image, mask, seedPoint, newVal, &rect, loDiff, upDiff, flags));
        return Py_BuildValue("(NNNN)", jsopencv_from(retval), jsopencv_from(image), jsopencv_from(mask), jsopencv_from(rect));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    Napi::Value* pyobj_seedPoint = NULL;
    Point seedPoint;
    Napi::Value* pyobj_newVal = NULL;
    Scalar newVal;
    Rect rect;
    Napi::Value* pyobj_loDiff = NULL;
    Scalar loDiff;
    Napi::Value* pyobj_upDiff = NULL;
    Scalar upDiff;
    Napi::Value* pyobj_flags = NULL;
    int flags=4;
    int retval;

    const char* keywords[] = { "image", "mask", "seedPoint", "newVal", "loDiff", "upDiff", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:floodFill", (char**)keywords, &pyobj_image, &pyobj_mask, &pyobj_seedPoint, &pyobj_newVal, &pyobj_loDiff, &pyobj_upDiff, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)) &&
        jsopencv_to_safe(info, pyobj_seedPoint, seedPoint, ArgInfo("seedPoint", 0)) &&
        jsopencv_to_safe(info, pyobj_newVal, newVal, ArgInfo("newVal", 0)) &&
        jsopencv_to_safe(info, pyobj_loDiff, loDiff, ArgInfo("loDiff", 0)) &&
        jsopencv_to_safe(info, pyobj_upDiff, upDiff, ArgInfo("upDiff", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::floodFill(image, mask, seedPoint, newVal, &rect, loDiff, upDiff, flags));
        return Py_BuildValue("(NNNN)", jsopencv_from(retval), jsopencv_from(image), jsopencv_from(mask), jsopencv_from(rect));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("floodFill");

    return NULL;
}

static Napi::Value pyopencv_cv_gemm(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    Mat src1;
    Napi::Value* pyobj_src2 = NULL;
    Mat src2;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=0;
    Napi::Value* pyobj_src3 = NULL;
    Mat src3;
    Napi::Value* pyobj_beta = NULL;
    double beta=0;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;

    const char* keywords[] = { "src1", "src2", "alpha", "src3", "beta", "dst", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OO:gemm", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_alpha, &pyobj_src3, &pyobj_beta, &pyobj_dst, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_src3, src3, ArgInfo("src3", 0)) &&
        jsopencv_to_safe(info, pyobj_beta, beta, ArgInfo("beta", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::gemm(src1, src2, alpha, src3, beta, dst, flags));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    UMat src1;
    Napi::Value* pyobj_src2 = NULL;
    UMat src2;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=0;
    Napi::Value* pyobj_src3 = NULL;
    UMat src3;
    Napi::Value* pyobj_beta = NULL;
    double beta=0;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;

    const char* keywords[] = { "src1", "src2", "alpha", "src3", "beta", "dst", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OO:gemm", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_alpha, &pyobj_src3, &pyobj_beta, &pyobj_dst, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_src3, src3, ArgInfo("src3", 0)) &&
        jsopencv_to_safe(info, pyobj_beta, beta, ArgInfo("beta", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::gemm(src1, src2, alpha, src3, beta, dst, flags));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("gemm");

    return NULL;
}

static Napi::Value pyopencv_cv_getAffineTransform(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Mat retval;

    const char* keywords[] = { "src", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:getAffineTransform", (char**)keywords, &pyobj_src, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 0)))
    {
        ERRWRAP2(retval = cv::getAffineTransform(src, dst));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Mat retval;

    const char* keywords[] = { "src", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:getAffineTransform", (char**)keywords, &pyobj_src, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 0)))
    {
        ERRWRAP2(retval = cv::getAffineTransform(src, dst));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("getAffineTransform");

    return NULL;
}

static Napi::Value pyopencv_cv_getBuildInformation(const Napi::CallbackInfo &info)
{
    using namespace cv;

    String retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::getBuildInformation());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_getCPUFeaturesLine(const Napi::CallbackInfo &info)
{
    using namespace cv;

    std::string retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::getCPUFeaturesLine());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_getCPUTickCount(const Napi::CallbackInfo &info)
{
    using namespace cv;

    int64 retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::getCPUTickCount());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_getDefaultNewCameraMatrix(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_imgsize = NULL;
    Size imgsize;
    Napi::Value* pyobj_centerPrincipalPoint = NULL;
    bool centerPrincipalPoint=false;
    Mat retval;

    const char* keywords[] = { "cameraMatrix", "imgsize", "centerPrincipalPoint", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:getDefaultNewCameraMatrix", (char**)keywords, &pyobj_cameraMatrix, &pyobj_imgsize, &pyobj_centerPrincipalPoint) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_imgsize, imgsize, ArgInfo("imgsize", 0)) &&
        jsopencv_to_safe(info, pyobj_centerPrincipalPoint, centerPrincipalPoint, ArgInfo("centerPrincipalPoint", 0)))
    {
        ERRWRAP2(retval = cv::getDefaultNewCameraMatrix(cameraMatrix, imgsize, centerPrincipalPoint));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_imgsize = NULL;
    Size imgsize;
    Napi::Value* pyobj_centerPrincipalPoint = NULL;
    bool centerPrincipalPoint=false;
    Mat retval;

    const char* keywords[] = { "cameraMatrix", "imgsize", "centerPrincipalPoint", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:getDefaultNewCameraMatrix", (char**)keywords, &pyobj_cameraMatrix, &pyobj_imgsize, &pyobj_centerPrincipalPoint) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_imgsize, imgsize, ArgInfo("imgsize", 0)) &&
        jsopencv_to_safe(info, pyobj_centerPrincipalPoint, centerPrincipalPoint, ArgInfo("centerPrincipalPoint", 0)))
    {
        ERRWRAP2(retval = cv::getDefaultNewCameraMatrix(cameraMatrix, imgsize, centerPrincipalPoint));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("getDefaultNewCameraMatrix");

    return NULL;
}

static Napi::Value pyopencv_cv_getDerivKernels(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_kx = NULL;
    Mat kx;
    Napi::Value* pyobj_ky = NULL;
    Mat ky;
    Napi::Value* pyobj_dx = NULL;
    int dx=0;
    Napi::Value* pyobj_dy = NULL;
    int dy=0;
    Napi::Value* pyobj_ksize = NULL;
    int ksize=0;
    Napi::Value* pyobj_normalize = NULL;
    bool normalize=false;
    Napi::Value* pyobj_ktype = NULL;
    int ktype=CV_32F;

    const char* keywords[] = { "dx", "dy", "ksize", "kx", "ky", "normalize", "ktype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:getDerivKernels", (char**)keywords, &pyobj_dx, &pyobj_dy, &pyobj_ksize, &pyobj_kx, &pyobj_ky, &pyobj_normalize, &pyobj_ktype) &&
        jsopencv_to_safe(info, pyobj_kx, kx, ArgInfo("kx", 1)) &&
        jsopencv_to_safe(info, pyobj_ky, ky, ArgInfo("ky", 1)) &&
        jsopencv_to_safe(info, pyobj_dx, dx, ArgInfo("dx", 0)) &&
        jsopencv_to_safe(info, pyobj_dy, dy, ArgInfo("dy", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_normalize, normalize, ArgInfo("normalize", 0)) &&
        jsopencv_to_safe(info, pyobj_ktype, ktype, ArgInfo("ktype", 0)))
    {
        ERRWRAP2(cv::getDerivKernels(kx, ky, dx, dy, ksize, normalize, ktype));
        return Py_BuildValue("(NN)", jsopencv_from(kx), jsopencv_from(ky));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_kx = NULL;
    UMat kx;
    Napi::Value* pyobj_ky = NULL;
    UMat ky;
    Napi::Value* pyobj_dx = NULL;
    int dx=0;
    Napi::Value* pyobj_dy = NULL;
    int dy=0;
    Napi::Value* pyobj_ksize = NULL;
    int ksize=0;
    Napi::Value* pyobj_normalize = NULL;
    bool normalize=false;
    Napi::Value* pyobj_ktype = NULL;
    int ktype=CV_32F;

    const char* keywords[] = { "dx", "dy", "ksize", "kx", "ky", "normalize", "ktype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:getDerivKernels", (char**)keywords, &pyobj_dx, &pyobj_dy, &pyobj_ksize, &pyobj_kx, &pyobj_ky, &pyobj_normalize, &pyobj_ktype) &&
        jsopencv_to_safe(info, pyobj_kx, kx, ArgInfo("kx", 1)) &&
        jsopencv_to_safe(info, pyobj_ky, ky, ArgInfo("ky", 1)) &&
        jsopencv_to_safe(info, pyobj_dx, dx, ArgInfo("dx", 0)) &&
        jsopencv_to_safe(info, pyobj_dy, dy, ArgInfo("dy", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_normalize, normalize, ArgInfo("normalize", 0)) &&
        jsopencv_to_safe(info, pyobj_ktype, ktype, ArgInfo("ktype", 0)))
    {
        ERRWRAP2(cv::getDerivKernels(kx, ky, dx, dy, ksize, normalize, ktype));
        return Py_BuildValue("(NN)", jsopencv_from(kx), jsopencv_from(ky));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("getDerivKernels");

    return NULL;
}

static Napi::Value pyopencv_cv_getFontScaleFromHeight(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_fontFace = NULL;
    int fontFace=0;
    Napi::Value* pyobj_pixelHeight = NULL;
    int pixelHeight=0;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=1;
    double retval;

    const char* keywords[] = { "fontFace", "pixelHeight", "thickness", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:getFontScaleFromHeight", (char**)keywords, &pyobj_fontFace, &pyobj_pixelHeight, &pyobj_thickness) &&
        jsopencv_to_safe(info, pyobj_fontFace, fontFace, ArgInfo("fontFace", 0)) &&
        jsopencv_to_safe(info, pyobj_pixelHeight, pixelHeight, ArgInfo("pixelHeight", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)))
    {
        ERRWRAP2(retval = cv::getFontScaleFromHeight(fontFace, pixelHeight, thickness));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_getGaborKernel(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_ksize = NULL;
    Size ksize;
    Napi::Value* pyobj_sigma = NULL;
    double sigma=0;
    Napi::Value* pyobj_theta = NULL;
    double theta=0;
    Napi::Value* pyobj_lambd = NULL;
    double lambd=0;
    Napi::Value* pyobj_gamma = NULL;
    double gamma=0;
    Napi::Value* pyobj_psi = NULL;
    double psi=CV_PI*0.5;
    Napi::Value* pyobj_ktype = NULL;
    int ktype=CV_64F;
    Mat retval;

    const char* keywords[] = { "ksize", "sigma", "theta", "lambd", "gamma", "psi", "ktype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OO:getGaborKernel", (char**)keywords, &pyobj_ksize, &pyobj_sigma, &pyobj_theta, &pyobj_lambd, &pyobj_gamma, &pyobj_psi, &pyobj_ktype) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma, sigma, ArgInfo("sigma", 0)) &&
        jsopencv_to_safe(info, pyobj_theta, theta, ArgInfo("theta", 0)) &&
        jsopencv_to_safe(info, pyobj_lambd, lambd, ArgInfo("lambd", 0)) &&
        jsopencv_to_safe(info, pyobj_gamma, gamma, ArgInfo("gamma", 0)) &&
        jsopencv_to_safe(info, pyobj_psi, psi, ArgInfo("psi", 0)) &&
        jsopencv_to_safe(info, pyobj_ktype, ktype, ArgInfo("ktype", 0)))
    {
        ERRWRAP2(retval = cv::getGaborKernel(ksize, sigma, theta, lambd, gamma, psi, ktype));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_getGaussianKernel(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_ksize = NULL;
    int ksize=0;
    Napi::Value* pyobj_sigma = NULL;
    double sigma=0;
    Napi::Value* pyobj_ktype = NULL;
    int ktype=CV_64F;
    Mat retval;

    const char* keywords[] = { "ksize", "sigma", "ktype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:getGaussianKernel", (char**)keywords, &pyobj_ksize, &pyobj_sigma, &pyobj_ktype) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma, sigma, ArgInfo("sigma", 0)) &&
        jsopencv_to_safe(info, pyobj_ktype, ktype, ArgInfo("ktype", 0)))
    {
        ERRWRAP2(retval = cv::getGaussianKernel(ksize, sigma, ktype));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_getHardwareFeatureName(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_feature = NULL;
    int feature=0;
    String retval;

    const char* keywords[] = { "feature", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:getHardwareFeatureName", (char**)keywords, &pyobj_feature) &&
        jsopencv_to_safe(info, pyobj_feature, feature, ArgInfo("feature", 0)))
    {
        ERRWRAP2(retval = cv::getHardwareFeatureName(feature));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_getLogLevel(const Napi::CallbackInfo &info)
{
    using namespace cv;

    int retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::getLogLevel());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_getNumThreads(const Napi::CallbackInfo &info)
{
    using namespace cv;

    int retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::getNumThreads());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_getNumberOfCPUs(const Napi::CallbackInfo &info)
{
    using namespace cv;

    int retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::getNumberOfCPUs());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_getOptimalDFTSize(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_vecsize = NULL;
    int vecsize=0;
    int retval;

    const char* keywords[] = { "vecsize", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:getOptimalDFTSize", (char**)keywords, &pyobj_vecsize) &&
        jsopencv_to_safe(info, pyobj_vecsize, vecsize, ArgInfo("vecsize", 0)))
    {
        ERRWRAP2(retval = cv::getOptimalDFTSize(vecsize));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_getOptimalNewCameraMatrix(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    Mat distCoeffs;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=0;
    Napi::Value* pyobj_newImgSize = NULL;
    Size newImgSize;
    Rect validPixROI;
    Napi::Value* pyobj_centerPrincipalPoint = NULL;
    bool centerPrincipalPoint=false;
    Mat retval;

    const char* keywords[] = { "cameraMatrix", "distCoeffs", "imageSize", "alpha", "newImgSize", "centerPrincipalPoint", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OO:getOptimalNewCameraMatrix", (char**)keywords, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_imageSize, &pyobj_alpha, &pyobj_newImgSize, &pyobj_centerPrincipalPoint) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_newImgSize, newImgSize, ArgInfo("newImgSize", 0)) &&
        jsopencv_to_safe(info, pyobj_centerPrincipalPoint, centerPrincipalPoint, ArgInfo("centerPrincipalPoint", 0)))
    {
        ERRWRAP2(retval = cv::getOptimalNewCameraMatrix(cameraMatrix, distCoeffs, imageSize, alpha, newImgSize, &validPixROI, centerPrincipalPoint));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(validPixROI));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    UMat distCoeffs;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=0;
    Napi::Value* pyobj_newImgSize = NULL;
    Size newImgSize;
    Rect validPixROI;
    Napi::Value* pyobj_centerPrincipalPoint = NULL;
    bool centerPrincipalPoint=false;
    Mat retval;

    const char* keywords[] = { "cameraMatrix", "distCoeffs", "imageSize", "alpha", "newImgSize", "centerPrincipalPoint", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OO:getOptimalNewCameraMatrix", (char**)keywords, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_imageSize, &pyobj_alpha, &pyobj_newImgSize, &pyobj_centerPrincipalPoint) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_newImgSize, newImgSize, ArgInfo("newImgSize", 0)) &&
        jsopencv_to_safe(info, pyobj_centerPrincipalPoint, centerPrincipalPoint, ArgInfo("centerPrincipalPoint", 0)))
    {
        ERRWRAP2(retval = cv::getOptimalNewCameraMatrix(cameraMatrix, distCoeffs, imageSize, alpha, newImgSize, &validPixROI, centerPrincipalPoint));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(validPixROI));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("getOptimalNewCameraMatrix");

    return NULL;
}

static Napi::Value pyopencv_cv_getPerspectiveTransform(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_solveMethod = NULL;
    int solveMethod=DECOMP_LU;
    Mat retval;

    const char* keywords[] = { "src", "dst", "solveMethod", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:getPerspectiveTransform", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_solveMethod) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 0)) &&
        jsopencv_to_safe(info, pyobj_solveMethod, solveMethod, ArgInfo("solveMethod", 0)))
    {
        ERRWRAP2(retval = cv::getPerspectiveTransform(src, dst, solveMethod));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_solveMethod = NULL;
    int solveMethod=DECOMP_LU;
    Mat retval;

    const char* keywords[] = { "src", "dst", "solveMethod", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:getPerspectiveTransform", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_solveMethod) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 0)) &&
        jsopencv_to_safe(info, pyobj_solveMethod, solveMethod, ArgInfo("solveMethod", 0)))
    {
        ERRWRAP2(retval = cv::getPerspectiveTransform(src, dst, solveMethod));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("getPerspectiveTransform");

    return NULL;
}

static Napi::Value pyopencv_cv_getRectSubPix(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_patchSize = NULL;
    Size patchSize;
    Napi::Value* pyobj_center = NULL;
    Point2f center;
    Napi::Value* pyobj_patch = NULL;
    Mat patch;
    Napi::Value* pyobj_patchType = NULL;
    int patchType=-1;

    const char* keywords[] = { "image", "patchSize", "center", "patch", "patchType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:getRectSubPix", (char**)keywords, &pyobj_image, &pyobj_patchSize, &pyobj_center, &pyobj_patch, &pyobj_patchType) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_patchSize, patchSize, ArgInfo("patchSize", 0)) &&
        jsopencv_to_safe(info, pyobj_center, center, ArgInfo("center", 0)) &&
        jsopencv_to_safe(info, pyobj_patch, patch, ArgInfo("patch", 1)) &&
        jsopencv_to_safe(info, pyobj_patchType, patchType, ArgInfo("patchType", 0)))
    {
        ERRWRAP2(cv::getRectSubPix(image, patchSize, center, patch, patchType));
        return jsopencv_from(patch);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_patchSize = NULL;
    Size patchSize;
    Napi::Value* pyobj_center = NULL;
    Point2f center;
    Napi::Value* pyobj_patch = NULL;
    UMat patch;
    Napi::Value* pyobj_patchType = NULL;
    int patchType=-1;

    const char* keywords[] = { "image", "patchSize", "center", "patch", "patchType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:getRectSubPix", (char**)keywords, &pyobj_image, &pyobj_patchSize, &pyobj_center, &pyobj_patch, &pyobj_patchType) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_patchSize, patchSize, ArgInfo("patchSize", 0)) &&
        jsopencv_to_safe(info, pyobj_center, center, ArgInfo("center", 0)) &&
        jsopencv_to_safe(info, pyobj_patch, patch, ArgInfo("patch", 1)) &&
        jsopencv_to_safe(info, pyobj_patchType, patchType, ArgInfo("patchType", 0)))
    {
        ERRWRAP2(cv::getRectSubPix(image, patchSize, center, patch, patchType));
        return jsopencv_from(patch);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("getRectSubPix");

    return NULL;
}

static Napi::Value pyopencv_cv_getRotationMatrix2D(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_center = NULL;
    Point2f center;
    Napi::Value* pyobj_angle = NULL;
    double angle=0;
    Napi::Value* pyobj_scale = NULL;
    double scale=0;
    Mat retval;

    const char* keywords[] = { "center", "angle", "scale", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:getRotationMatrix2D", (char**)keywords, &pyobj_center, &pyobj_angle, &pyobj_scale) &&
        jsopencv_to_safe(info, pyobj_center, center, ArgInfo("center", 0)) &&
        jsopencv_to_safe(info, pyobj_angle, angle, ArgInfo("angle", 0)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)))
    {
        ERRWRAP2(retval = cv::getRotationMatrix2D(center, angle, scale));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_getStructuringElement(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_shape = NULL;
    int shape=0;
    Napi::Value* pyobj_ksize = NULL;
    Size ksize;
    Napi::Value* pyobj_anchor = NULL;
    Point anchor=Point(-1,-1);
    Mat retval;

    const char* keywords[] = { "shape", "ksize", "anchor", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:getStructuringElement", (char**)keywords, &pyobj_shape, &pyobj_ksize, &pyobj_anchor) &&
        jsopencv_to_safe(info, pyobj_shape, shape, ArgInfo("shape", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_anchor, anchor, ArgInfo("anchor", 0)))
    {
        ERRWRAP2(retval = cv::getStructuringElement(shape, ksize, anchor));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_getTextSize(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_text = NULL;
    String text;
    Napi::Value* pyobj_fontFace = NULL;
    int fontFace=0;
    Napi::Value* pyobj_fontScale = NULL;
    double fontScale=0;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=0;
    int baseLine;
    Size retval;

    const char* keywords[] = { "text", "fontFace", "fontScale", "thickness", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO:getTextSize", (char**)keywords, &pyobj_text, &pyobj_fontFace, &pyobj_fontScale, &pyobj_thickness) &&
        jsopencv_to_safe(info, pyobj_text, text, ArgInfo("text", 0)) &&
        jsopencv_to_safe(info, pyobj_fontFace, fontFace, ArgInfo("fontFace", 0)) &&
        jsopencv_to_safe(info, pyobj_fontScale, fontScale, ArgInfo("fontScale", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)))
    {
        ERRWRAP2(retval = cv::getTextSize(text, fontFace, fontScale, thickness, &baseLine));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(baseLine));
    }

    return NULL;
}

static Napi::Value pyopencv_cv_getThreadNum(const Napi::CallbackInfo &info)
{
    using namespace cv;

    int retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::getThreadNum());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_getTickCount(const Napi::CallbackInfo &info)
{
    using namespace cv;

    int64 retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::getTickCount());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_getTickFrequency(const Napi::CallbackInfo &info)
{
    using namespace cv;

    double retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::getTickFrequency());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_getTrackbarPos(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_trackbarname = NULL;
    String trackbarname;
    Napi::Value* pyobj_winname = NULL;
    String winname;
    int retval;

    const char* keywords[] = { "trackbarname", "winname", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:getTrackbarPos", (char**)keywords, &pyobj_trackbarname, &pyobj_winname) &&
        jsopencv_to_safe(info, pyobj_trackbarname, trackbarname, ArgInfo("trackbarname", 0)) &&
        jsopencv_to_safe(info, pyobj_winname, winname, ArgInfo("winname", 0)))
    {
        ERRWRAP2(retval = cv::getTrackbarPos(trackbarname, winname));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_getValidDisparityROI(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_roi1 = NULL;
    Rect roi1;
    Napi::Value* pyobj_roi2 = NULL;
    Rect roi2;
    Napi::Value* pyobj_minDisparity = NULL;
    int minDisparity=0;
    Napi::Value* pyobj_numberOfDisparities = NULL;
    int numberOfDisparities=0;
    Napi::Value* pyobj_blockSize = NULL;
    int blockSize=0;
    Rect retval;

    const char* keywords[] = { "roi1", "roi2", "minDisparity", "numberOfDisparities", "blockSize", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO:getValidDisparityROI", (char**)keywords, &pyobj_roi1, &pyobj_roi2, &pyobj_minDisparity, &pyobj_numberOfDisparities, &pyobj_blockSize) &&
        jsopencv_to_safe(info, pyobj_roi1, roi1, ArgInfo("roi1", 0)) &&
        jsopencv_to_safe(info, pyobj_roi2, roi2, ArgInfo("roi2", 0)) &&
        jsopencv_to_safe(info, pyobj_minDisparity, minDisparity, ArgInfo("minDisparity", 0)) &&
        jsopencv_to_safe(info, pyobj_numberOfDisparities, numberOfDisparities, ArgInfo("numberOfDisparities", 0)) &&
        jsopencv_to_safe(info, pyobj_blockSize, blockSize, ArgInfo("blockSize", 0)))
    {
        ERRWRAP2(retval = cv::getValidDisparityROI(roi1, roi2, minDisparity, numberOfDisparities, blockSize));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_getVersionMajor(const Napi::CallbackInfo &info)
{
    using namespace cv;

    int retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::getVersionMajor());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_getVersionMinor(const Napi::CallbackInfo &info)
{
    using namespace cv;

    int retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::getVersionMinor());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_getVersionRevision(const Napi::CallbackInfo &info)
{
    using namespace cv;

    int retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::getVersionRevision());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_getVersionString(const Napi::CallbackInfo &info)
{
    using namespace cv;

    String retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::getVersionString());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_getWindowImageRect(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_winname = NULL;
    String winname;
    Rect retval;

    const char* keywords[] = { "winname", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:getWindowImageRect", (char**)keywords, &pyobj_winname) &&
        jsopencv_to_safe(info, pyobj_winname, winname, ArgInfo("winname", 0)))
    {
        ERRWRAP2(retval = cv::getWindowImageRect(winname));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_getWindowProperty(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_winname = NULL;
    String winname;
    Napi::Value* pyobj_prop_id = NULL;
    int prop_id=0;
    double retval;

    const char* keywords[] = { "winname", "prop_id", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:getWindowProperty", (char**)keywords, &pyobj_winname, &pyobj_prop_id) &&
        jsopencv_to_safe(info, pyobj_winname, winname, ArgInfo("winname", 0)) &&
        jsopencv_to_safe(info, pyobj_prop_id, prop_id, ArgInfo("prop_id", 0)))
    {
        ERRWRAP2(retval = cv::getWindowProperty(winname, prop_id));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_goodFeaturesToTrack(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_corners = NULL;
    Mat corners;
    Napi::Value* pyobj_maxCorners = NULL;
    int maxCorners=0;
    Napi::Value* pyobj_qualityLevel = NULL;
    double qualityLevel=0;
    Napi::Value* pyobj_minDistance = NULL;
    double minDistance=0;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Napi::Value* pyobj_blockSize = NULL;
    int blockSize=3;
    Napi::Value* pyobj_useHarrisDetector = NULL;
    bool useHarrisDetector=false;
    Napi::Value* pyobj_k = NULL;
    double k=0.04;

    const char* keywords[] = { "image", "maxCorners", "qualityLevel", "minDistance", "corners", "mask", "blockSize", "useHarrisDetector", "k", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOOO:goodFeaturesToTrack", (char**)keywords, &pyobj_image, &pyobj_maxCorners, &pyobj_qualityLevel, &pyobj_minDistance, &pyobj_corners, &pyobj_mask, &pyobj_blockSize, &pyobj_useHarrisDetector, &pyobj_k) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_corners, corners, ArgInfo("corners", 1)) &&
        jsopencv_to_safe(info, pyobj_maxCorners, maxCorners, ArgInfo("maxCorners", 0)) &&
        jsopencv_to_safe(info, pyobj_qualityLevel, qualityLevel, ArgInfo("qualityLevel", 0)) &&
        jsopencv_to_safe(info, pyobj_minDistance, minDistance, ArgInfo("minDistance", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)) &&
        jsopencv_to_safe(info, pyobj_blockSize, blockSize, ArgInfo("blockSize", 0)) &&
        jsopencv_to_safe(info, pyobj_useHarrisDetector, useHarrisDetector, ArgInfo("useHarrisDetector", 0)) &&
        jsopencv_to_safe(info, pyobj_k, k, ArgInfo("k", 0)))
    {
        ERRWRAP2(cv::goodFeaturesToTrack(image, corners, maxCorners, qualityLevel, minDistance, mask, blockSize, useHarrisDetector, k));
        return jsopencv_from(corners);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_corners = NULL;
    UMat corners;
    Napi::Value* pyobj_maxCorners = NULL;
    int maxCorners=0;
    Napi::Value* pyobj_qualityLevel = NULL;
    double qualityLevel=0;
    Napi::Value* pyobj_minDistance = NULL;
    double minDistance=0;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    Napi::Value* pyobj_blockSize = NULL;
    int blockSize=3;
    Napi::Value* pyobj_useHarrisDetector = NULL;
    bool useHarrisDetector=false;
    Napi::Value* pyobj_k = NULL;
    double k=0.04;

    const char* keywords[] = { "image", "maxCorners", "qualityLevel", "minDistance", "corners", "mask", "blockSize", "useHarrisDetector", "k", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOOO:goodFeaturesToTrack", (char**)keywords, &pyobj_image, &pyobj_maxCorners, &pyobj_qualityLevel, &pyobj_minDistance, &pyobj_corners, &pyobj_mask, &pyobj_blockSize, &pyobj_useHarrisDetector, &pyobj_k) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_corners, corners, ArgInfo("corners", 1)) &&
        jsopencv_to_safe(info, pyobj_maxCorners, maxCorners, ArgInfo("maxCorners", 0)) &&
        jsopencv_to_safe(info, pyobj_qualityLevel, qualityLevel, ArgInfo("qualityLevel", 0)) &&
        jsopencv_to_safe(info, pyobj_minDistance, minDistance, ArgInfo("minDistance", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)) &&
        jsopencv_to_safe(info, pyobj_blockSize, blockSize, ArgInfo("blockSize", 0)) &&
        jsopencv_to_safe(info, pyobj_useHarrisDetector, useHarrisDetector, ArgInfo("useHarrisDetector", 0)) &&
        jsopencv_to_safe(info, pyobj_k, k, ArgInfo("k", 0)))
    {
        ERRWRAP2(cv::goodFeaturesToTrack(image, corners, maxCorners, qualityLevel, minDistance, mask, blockSize, useHarrisDetector, k));
        return jsopencv_from(corners);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_corners = NULL;
    Mat corners;
    Napi::Value* pyobj_maxCorners = NULL;
    int maxCorners=0;
    Napi::Value* pyobj_qualityLevel = NULL;
    double qualityLevel=0;
    Napi::Value* pyobj_minDistance = NULL;
    double minDistance=0;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Napi::Value* pyobj_blockSize = NULL;
    int blockSize=0;
    Napi::Value* pyobj_gradientSize = NULL;
    int gradientSize=0;
    Napi::Value* pyobj_useHarrisDetector = NULL;
    bool useHarrisDetector=false;
    Napi::Value* pyobj_k = NULL;
    double k=0.04;

    const char* keywords[] = { "image", "maxCorners", "qualityLevel", "minDistance", "mask", "blockSize", "gradientSize", "corners", "useHarrisDetector", "k", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOO|OOO:goodFeaturesToTrack", (char**)keywords, &pyobj_image, &pyobj_maxCorners, &pyobj_qualityLevel, &pyobj_minDistance, &pyobj_mask, &pyobj_blockSize, &pyobj_gradientSize, &pyobj_corners, &pyobj_useHarrisDetector, &pyobj_k) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_corners, corners, ArgInfo("corners", 1)) &&
        jsopencv_to_safe(info, pyobj_maxCorners, maxCorners, ArgInfo("maxCorners", 0)) &&
        jsopencv_to_safe(info, pyobj_qualityLevel, qualityLevel, ArgInfo("qualityLevel", 0)) &&
        jsopencv_to_safe(info, pyobj_minDistance, minDistance, ArgInfo("minDistance", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)) &&
        jsopencv_to_safe(info, pyobj_blockSize, blockSize, ArgInfo("blockSize", 0)) &&
        jsopencv_to_safe(info, pyobj_gradientSize, gradientSize, ArgInfo("gradientSize", 0)) &&
        jsopencv_to_safe(info, pyobj_useHarrisDetector, useHarrisDetector, ArgInfo("useHarrisDetector", 0)) &&
        jsopencv_to_safe(info, pyobj_k, k, ArgInfo("k", 0)))
    {
        ERRWRAP2(cv::goodFeaturesToTrack(image, corners, maxCorners, qualityLevel, minDistance, mask, blockSize, gradientSize, useHarrisDetector, k));
        return jsopencv_from(corners);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_corners = NULL;
    UMat corners;
    Napi::Value* pyobj_maxCorners = NULL;
    int maxCorners=0;
    Napi::Value* pyobj_qualityLevel = NULL;
    double qualityLevel=0;
    Napi::Value* pyobj_minDistance = NULL;
    double minDistance=0;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    Napi::Value* pyobj_blockSize = NULL;
    int blockSize=0;
    Napi::Value* pyobj_gradientSize = NULL;
    int gradientSize=0;
    Napi::Value* pyobj_useHarrisDetector = NULL;
    bool useHarrisDetector=false;
    Napi::Value* pyobj_k = NULL;
    double k=0.04;

    const char* keywords[] = { "image", "maxCorners", "qualityLevel", "minDistance", "mask", "blockSize", "gradientSize", "corners", "useHarrisDetector", "k", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOO|OOO:goodFeaturesToTrack", (char**)keywords, &pyobj_image, &pyobj_maxCorners, &pyobj_qualityLevel, &pyobj_minDistance, &pyobj_mask, &pyobj_blockSize, &pyobj_gradientSize, &pyobj_corners, &pyobj_useHarrisDetector, &pyobj_k) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_corners, corners, ArgInfo("corners", 1)) &&
        jsopencv_to_safe(info, pyobj_maxCorners, maxCorners, ArgInfo("maxCorners", 0)) &&
        jsopencv_to_safe(info, pyobj_qualityLevel, qualityLevel, ArgInfo("qualityLevel", 0)) &&
        jsopencv_to_safe(info, pyobj_minDistance, minDistance, ArgInfo("minDistance", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)) &&
        jsopencv_to_safe(info, pyobj_blockSize, blockSize, ArgInfo("blockSize", 0)) &&
        jsopencv_to_safe(info, pyobj_gradientSize, gradientSize, ArgInfo("gradientSize", 0)) &&
        jsopencv_to_safe(info, pyobj_useHarrisDetector, useHarrisDetector, ArgInfo("useHarrisDetector", 0)) &&
        jsopencv_to_safe(info, pyobj_k, k, ArgInfo("k", 0)))
    {
        ERRWRAP2(cv::goodFeaturesToTrack(image, corners, maxCorners, qualityLevel, minDistance, mask, blockSize, gradientSize, useHarrisDetector, k));
        return jsopencv_from(corners);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("goodFeaturesToTrack");

    return NULL;
}

static Napi::Value pyopencv_cv_goodFeaturesToTrackWithQuality(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_corners = NULL;
    Mat corners;
    Napi::Value* pyobj_maxCorners = NULL;
    int maxCorners=0;
    Napi::Value* pyobj_qualityLevel = NULL;
    double qualityLevel=0;
    Napi::Value* pyobj_minDistance = NULL;
    double minDistance=0;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Napi::Value* pyobj_cornersQuality = NULL;
    Mat cornersQuality;
    Napi::Value* pyobj_blockSize = NULL;
    int blockSize=3;
    Napi::Value* pyobj_gradientSize = NULL;
    int gradientSize=3;
    Napi::Value* pyobj_useHarrisDetector = NULL;
    bool useHarrisDetector=false;
    Napi::Value* pyobj_k = NULL;
    double k=0.04;

    const char* keywords[] = { "image", "maxCorners", "qualityLevel", "minDistance", "mask", "corners", "cornersQuality", "blockSize", "gradientSize", "useHarrisDetector", "k", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OOOOOO:goodFeaturesToTrackWithQuality", (char**)keywords, &pyobj_image, &pyobj_maxCorners, &pyobj_qualityLevel, &pyobj_minDistance, &pyobj_mask, &pyobj_corners, &pyobj_cornersQuality, &pyobj_blockSize, &pyobj_gradientSize, &pyobj_useHarrisDetector, &pyobj_k) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_corners, corners, ArgInfo("corners", 1)) &&
        jsopencv_to_safe(info, pyobj_maxCorners, maxCorners, ArgInfo("maxCorners", 0)) &&
        jsopencv_to_safe(info, pyobj_qualityLevel, qualityLevel, ArgInfo("qualityLevel", 0)) &&
        jsopencv_to_safe(info, pyobj_minDistance, minDistance, ArgInfo("minDistance", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)) &&
        jsopencv_to_safe(info, pyobj_cornersQuality, cornersQuality, ArgInfo("cornersQuality", 1)) &&
        jsopencv_to_safe(info, pyobj_blockSize, blockSize, ArgInfo("blockSize", 0)) &&
        jsopencv_to_safe(info, pyobj_gradientSize, gradientSize, ArgInfo("gradientSize", 0)) &&
        jsopencv_to_safe(info, pyobj_useHarrisDetector, useHarrisDetector, ArgInfo("useHarrisDetector", 0)) &&
        jsopencv_to_safe(info, pyobj_k, k, ArgInfo("k", 0)))
    {
        ERRWRAP2(cv::goodFeaturesToTrack(image, corners, maxCorners, qualityLevel, minDistance, mask, cornersQuality, blockSize, gradientSize, useHarrisDetector, k));
        return Py_BuildValue("(NN)", jsopencv_from(corners), jsopencv_from(cornersQuality));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_corners = NULL;
    UMat corners;
    Napi::Value* pyobj_maxCorners = NULL;
    int maxCorners=0;
    Napi::Value* pyobj_qualityLevel = NULL;
    double qualityLevel=0;
    Napi::Value* pyobj_minDistance = NULL;
    double minDistance=0;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    Napi::Value* pyobj_cornersQuality = NULL;
    UMat cornersQuality;
    Napi::Value* pyobj_blockSize = NULL;
    int blockSize=3;
    Napi::Value* pyobj_gradientSize = NULL;
    int gradientSize=3;
    Napi::Value* pyobj_useHarrisDetector = NULL;
    bool useHarrisDetector=false;
    Napi::Value* pyobj_k = NULL;
    double k=0.04;

    const char* keywords[] = { "image", "maxCorners", "qualityLevel", "minDistance", "mask", "corners", "cornersQuality", "blockSize", "gradientSize", "useHarrisDetector", "k", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OOOOOO:goodFeaturesToTrackWithQuality", (char**)keywords, &pyobj_image, &pyobj_maxCorners, &pyobj_qualityLevel, &pyobj_minDistance, &pyobj_mask, &pyobj_corners, &pyobj_cornersQuality, &pyobj_blockSize, &pyobj_gradientSize, &pyobj_useHarrisDetector, &pyobj_k) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_corners, corners, ArgInfo("corners", 1)) &&
        jsopencv_to_safe(info, pyobj_maxCorners, maxCorners, ArgInfo("maxCorners", 0)) &&
        jsopencv_to_safe(info, pyobj_qualityLevel, qualityLevel, ArgInfo("qualityLevel", 0)) &&
        jsopencv_to_safe(info, pyobj_minDistance, minDistance, ArgInfo("minDistance", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)) &&
        jsopencv_to_safe(info, pyobj_cornersQuality, cornersQuality, ArgInfo("cornersQuality", 1)) &&
        jsopencv_to_safe(info, pyobj_blockSize, blockSize, ArgInfo("blockSize", 0)) &&
        jsopencv_to_safe(info, pyobj_gradientSize, gradientSize, ArgInfo("gradientSize", 0)) &&
        jsopencv_to_safe(info, pyobj_useHarrisDetector, useHarrisDetector, ArgInfo("useHarrisDetector", 0)) &&
        jsopencv_to_safe(info, pyobj_k, k, ArgInfo("k", 0)))
    {
        ERRWRAP2(cv::goodFeaturesToTrack(image, corners, maxCorners, qualityLevel, minDistance, mask, cornersQuality, blockSize, gradientSize, useHarrisDetector, k));
        return Py_BuildValue("(NN)", jsopencv_from(corners), jsopencv_from(cornersQuality));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("goodFeaturesToTrackWithQuality");

    return NULL;
}

static Napi::Value pyopencv_cv_grabCut(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Napi::Value* pyobj_rect = NULL;
    Rect rect;
    Napi::Value* pyobj_bgdModel = NULL;
    Mat bgdModel;
    Napi::Value* pyobj_fgdModel = NULL;
    Mat fgdModel;
    Napi::Value* pyobj_iterCount = NULL;
    int iterCount=0;
    Napi::Value* pyobj_mode = NULL;
    int mode=GC_EVAL;

    const char* keywords[] = { "img", "mask", "rect", "bgdModel", "fgdModel", "iterCount", "mode", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|O:grabCut", (char**)keywords, &pyobj_img, &pyobj_mask, &pyobj_rect, &pyobj_bgdModel, &pyobj_fgdModel, &pyobj_iterCount, &pyobj_mode) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)) &&
        jsopencv_to_safe(info, pyobj_rect, rect, ArgInfo("rect", 0)) &&
        jsopencv_to_safe(info, pyobj_bgdModel, bgdModel, ArgInfo("bgdModel", 1)) &&
        jsopencv_to_safe(info, pyobj_fgdModel, fgdModel, ArgInfo("fgdModel", 1)) &&
        jsopencv_to_safe(info, pyobj_iterCount, iterCount, ArgInfo("iterCount", 0)) &&
        jsopencv_to_safe(info, pyobj_mode, mode, ArgInfo("mode", 0)))
    {
        ERRWRAP2(cv::grabCut(img, mask, rect, bgdModel, fgdModel, iterCount, mode));
        return Py_BuildValue("(NNN)", jsopencv_from(mask), jsopencv_from(bgdModel), jsopencv_from(fgdModel));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    Napi::Value* pyobj_rect = NULL;
    Rect rect;
    Napi::Value* pyobj_bgdModel = NULL;
    UMat bgdModel;
    Napi::Value* pyobj_fgdModel = NULL;
    UMat fgdModel;
    Napi::Value* pyobj_iterCount = NULL;
    int iterCount=0;
    Napi::Value* pyobj_mode = NULL;
    int mode=GC_EVAL;

    const char* keywords[] = { "img", "mask", "rect", "bgdModel", "fgdModel", "iterCount", "mode", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|O:grabCut", (char**)keywords, &pyobj_img, &pyobj_mask, &pyobj_rect, &pyobj_bgdModel, &pyobj_fgdModel, &pyobj_iterCount, &pyobj_mode) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)) &&
        jsopencv_to_safe(info, pyobj_rect, rect, ArgInfo("rect", 0)) &&
        jsopencv_to_safe(info, pyobj_bgdModel, bgdModel, ArgInfo("bgdModel", 1)) &&
        jsopencv_to_safe(info, pyobj_fgdModel, fgdModel, ArgInfo("fgdModel", 1)) &&
        jsopencv_to_safe(info, pyobj_iterCount, iterCount, ArgInfo("iterCount", 0)) &&
        jsopencv_to_safe(info, pyobj_mode, mode, ArgInfo("mode", 0)))
    {
        ERRWRAP2(cv::grabCut(img, mask, rect, bgdModel, fgdModel, iterCount, mode));
        return Py_BuildValue("(NNN)", jsopencv_from(mask), jsopencv_from(bgdModel), jsopencv_from(fgdModel));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("grabCut");

    return NULL;
}

static Napi::Value pyopencv_cv_groupRectangles(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_rectList = NULL;
    vector_Rect rectList;
    vector_int weights;
    Napi::Value* pyobj_groupThreshold = NULL;
    int groupThreshold=0;
    Napi::Value* pyobj_eps = NULL;
    double eps=0.2;

    const char* keywords[] = { "rectList", "groupThreshold", "eps", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:groupRectangles", (char**)keywords, &pyobj_rectList, &pyobj_groupThreshold, &pyobj_eps) &&
        jsopencv_to_safe(info, pyobj_rectList, rectList, ArgInfo("rectList", 1)) &&
        jsopencv_to_safe(info, pyobj_groupThreshold, groupThreshold, ArgInfo("groupThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_eps, eps, ArgInfo("eps", 0)))
    {
        ERRWRAP2(cv::groupRectangles(rectList, weights, groupThreshold, eps));
        return Py_BuildValue("(NN)", jsopencv_from(rectList), jsopencv_from(weights));
    }

    return NULL;
}

static Napi::Value pyopencv_cv_haveImageReader(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_filename = NULL;
    String filename;
    bool retval;

    const char* keywords[] = { "filename", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:haveImageReader", (char**)keywords, &pyobj_filename) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)))
    {
        ERRWRAP2(retval = cv::haveImageReader(filename));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_haveImageWriter(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_filename = NULL;
    String filename;
    bool retval;

    const char* keywords[] = { "filename", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:haveImageWriter", (char**)keywords, &pyobj_filename) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)))
    {
        ERRWRAP2(retval = cv::haveImageWriter(filename));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_haveOpenVX(const Napi::CallbackInfo &info)
{
    using namespace cv;

    bool retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::haveOpenVX());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_hconcat(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    vector_Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;

    const char* keywords[] = { "src", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:hconcat", (char**)keywords, &pyobj_src, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::hconcat(src, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    vector_UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;

    const char* keywords[] = { "src", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:hconcat", (char**)keywords, &pyobj_src, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::hconcat(src, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("hconcat");

    return NULL;
}

static Napi::Value pyopencv_cv_idct(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;

    const char* keywords[] = { "src", "dst", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:idct", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::idct(src, dst, flags));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;

    const char* keywords[] = { "src", "dst", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:idct", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::idct(src, dst, flags));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("idct");

    return NULL;
}

static Napi::Value pyopencv_cv_idft(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_nonzeroRows = NULL;
    int nonzeroRows=0;

    const char* keywords[] = { "src", "dst", "flags", "nonzeroRows", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:idft", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_flags, &pyobj_nonzeroRows) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_nonzeroRows, nonzeroRows, ArgInfo("nonzeroRows", 0)))
    {
        ERRWRAP2(cv::idft(src, dst, flags, nonzeroRows));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_nonzeroRows = NULL;
    int nonzeroRows=0;

    const char* keywords[] = { "src", "dst", "flags", "nonzeroRows", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:idft", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_flags, &pyobj_nonzeroRows) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_nonzeroRows, nonzeroRows, ArgInfo("nonzeroRows", 0)))
    {
        ERRWRAP2(cv::idft(src, dst, flags, nonzeroRows));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("idft");

    return NULL;
}

static Napi::Value pyopencv_cv_illuminationChange(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_alpha = NULL;
    float alpha=0.2f;
    Napi::Value* pyobj_beta = NULL;
    float beta=0.4f;

    const char* keywords[] = { "src", "mask", "dst", "alpha", "beta", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:illuminationChange", (char**)keywords, &pyobj_src, &pyobj_mask, &pyobj_dst, &pyobj_alpha, &pyobj_beta) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_beta, beta, ArgInfo("beta", 0)))
    {
        ERRWRAP2(cv::illuminationChange(src, mask, dst, alpha, beta));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_alpha = NULL;
    float alpha=0.2f;
    Napi::Value* pyobj_beta = NULL;
    float beta=0.4f;

    const char* keywords[] = { "src", "mask", "dst", "alpha", "beta", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:illuminationChange", (char**)keywords, &pyobj_src, &pyobj_mask, &pyobj_dst, &pyobj_alpha, &pyobj_beta) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_beta, beta, ArgInfo("beta", 0)))
    {
        ERRWRAP2(cv::illuminationChange(src, mask, dst, alpha, beta));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("illuminationChange");

    return NULL;
}

static Napi::Value pyopencv_cv_imcount(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_filename = NULL;
    String filename;
    Napi::Value* pyobj_flags = NULL;
    int flags=IMREAD_ANYCOLOR;
    size_t retval;

    const char* keywords[] = { "filename", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:imcount", (char**)keywords, &pyobj_filename, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::imcount(filename, flags));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_imdecode(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_buf = NULL;
    Mat buf;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Mat retval;

    const char* keywords[] = { "buf", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:imdecode", (char**)keywords, &pyobj_buf, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_buf, buf, ArgInfo("buf", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::imdecode(buf, flags));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_buf = NULL;
    UMat buf;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Mat retval;

    const char* keywords[] = { "buf", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:imdecode", (char**)keywords, &pyobj_buf, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_buf, buf, ArgInfo("buf", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::imdecode(buf, flags));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("imdecode");

    return NULL;
}

static Napi::Value pyopencv_cv_imdecodemulti(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_buf = NULL;
    Mat buf;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_mats = NULL;
    vector_Mat mats;
    bool retval;

    const char* keywords[] = { "buf", "flags", "mats", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:imdecodemulti", (char**)keywords, &pyobj_buf, &pyobj_flags, &pyobj_mats) &&
        jsopencv_to_safe(info, pyobj_buf, buf, ArgInfo("buf", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_mats, mats, ArgInfo("mats", 1)))
    {
        ERRWRAP2(retval = cv::imdecodemulti(buf, flags, mats));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(mats));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_buf = NULL;
    UMat buf;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_mats = NULL;
    vector_Mat mats;
    bool retval;

    const char* keywords[] = { "buf", "flags", "mats", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:imdecodemulti", (char**)keywords, &pyobj_buf, &pyobj_flags, &pyobj_mats) &&
        jsopencv_to_safe(info, pyobj_buf, buf, ArgInfo("buf", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_mats, mats, ArgInfo("mats", 1)))
    {
        ERRWRAP2(retval = cv::imdecodemulti(buf, flags, mats));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(mats));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("imdecodemulti");

    return NULL;
}

static Napi::Value pyopencv_cv_imencode(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_ext = NULL;
    String ext;
    Napi::Value* pyobj_img = NULL;
    Mat img;
    vector_uchar buf;
    Napi::Value* pyobj_params = NULL;
    vector_int params=std::vector<int>();
    bool retval;

    const char* keywords[] = { "ext", "img", "params", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:imencode", (char**)keywords, &pyobj_ext, &pyobj_img, &pyobj_params) &&
        jsopencv_to_safe(info, pyobj_ext, ext, ArgInfo("ext", 0)) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_params, params, ArgInfo("params", 0)))
    {
        ERRWRAP2(retval = cv::imencode(ext, img, buf, params));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(buf));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_ext = NULL;
    String ext;
    Napi::Value* pyobj_img = NULL;
    UMat img;
    vector_uchar buf;
    Napi::Value* pyobj_params = NULL;
    vector_int params=std::vector<int>();
    bool retval;

    const char* keywords[] = { "ext", "img", "params", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:imencode", (char**)keywords, &pyobj_ext, &pyobj_img, &pyobj_params) &&
        jsopencv_to_safe(info, pyobj_ext, ext, ArgInfo("ext", 0)) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_params, params, ArgInfo("params", 0)))
    {
        ERRWRAP2(retval = cv::imencode(ext, img, buf, params));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(buf));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("imencode");

    return NULL;
}

static Napi::Value pyopencv_cv_imread(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_filename = NULL;
    String filename;
    Napi::Value* pyobj_flags = NULL;
    int flags=IMREAD_COLOR;
    Mat retval;

    const char* keywords[] = { "filename", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:imread", (char**)keywords, &pyobj_filename, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::imread(filename, flags));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_imreadmulti(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_filename = NULL;
    String filename;
    Napi::Value* pyobj_mats = NULL;
    vector_Mat mats;
    Napi::Value* pyobj_flags = NULL;
    int flags=IMREAD_ANYCOLOR;
    bool retval;

    const char* keywords[] = { "filename", "mats", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:imreadmulti", (char**)keywords, &pyobj_filename, &pyobj_mats, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)) &&
        jsopencv_to_safe(info, pyobj_mats, mats, ArgInfo("mats", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::imreadmulti(filename, mats, flags));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(mats));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_filename = NULL;
    String filename;
    Napi::Value* pyobj_mats = NULL;
    vector_Mat mats;
    Napi::Value* pyobj_start = NULL;
    int start=0;
    Napi::Value* pyobj_count = NULL;
    int count=0;
    Napi::Value* pyobj_flags = NULL;
    int flags=IMREAD_ANYCOLOR;
    bool retval;

    const char* keywords[] = { "filename", "start", "count", "mats", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:imreadmulti", (char**)keywords, &pyobj_filename, &pyobj_start, &pyobj_count, &pyobj_mats, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)) &&
        jsopencv_to_safe(info, pyobj_mats, mats, ArgInfo("mats", 1)) &&
        jsopencv_to_safe(info, pyobj_start, start, ArgInfo("start", 0)) &&
        jsopencv_to_safe(info, pyobj_count, count, ArgInfo("count", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::imreadmulti(filename, mats, start, count, flags));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(mats));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("imreadmulti");

    return NULL;
}

static Napi::Value pyopencv_cv_imshow(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(3);

    {
    Napi::Value* pyobj_winname = NULL;
    String winname;
    Napi::Value* pyobj_mat = NULL;
    Mat mat;

    const char* keywords[] = { "winname", "mat", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:imshow", (char**)keywords, &pyobj_winname, &pyobj_mat) &&
        jsopencv_to_safe(info, pyobj_winname, winname, ArgInfo("winname", 0)) &&
        jsopencv_to_safe(info, pyobj_mat, mat, ArgInfo("mat", 0)))
    {
        ERRWRAP2(cv::imshow(winname, mat));
        Py_RETURN_NONE;
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_winname = NULL;
    String winname;
    Napi::Value* pyobj_mat = NULL;
    cuda::GpuMat mat;

    const char* keywords[] = { "winname", "mat", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:imshow", (char**)keywords, &pyobj_winname, &pyobj_mat) &&
        jsopencv_to_safe(info, pyobj_winname, winname, ArgInfo("winname", 0)) &&
        jsopencv_to_safe(info, pyobj_mat, mat, ArgInfo("mat", 0)))
    {
        ERRWRAP2(cv::imshow(winname, mat));
        Py_RETURN_NONE;
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_winname = NULL;
    String winname;
    Napi::Value* pyobj_mat = NULL;
    UMat mat;

    const char* keywords[] = { "winname", "mat", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:imshow", (char**)keywords, &pyobj_winname, &pyobj_mat) &&
        jsopencv_to_safe(info, pyobj_winname, winname, ArgInfo("winname", 0)) &&
        jsopencv_to_safe(info, pyobj_mat, mat, ArgInfo("mat", 0)))
    {
        ERRWRAP2(cv::imshow(winname, mat));
        Py_RETURN_NONE;
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("imshow");

    return NULL;
}

static Napi::Value pyopencv_cv_imwrite(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_filename = NULL;
    String filename;
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_params = NULL;
    vector_int params=std::vector<int>();
    bool retval;

    const char* keywords[] = { "filename", "img", "params", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:imwrite", (char**)keywords, &pyobj_filename, &pyobj_img, &pyobj_params) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_params, params, ArgInfo("params", 0)))
    {
        ERRWRAP2(retval = cv::imwrite(filename, img, params));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_filename = NULL;
    String filename;
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_params = NULL;
    vector_int params=std::vector<int>();
    bool retval;

    const char* keywords[] = { "filename", "img", "params", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:imwrite", (char**)keywords, &pyobj_filename, &pyobj_img, &pyobj_params) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_params, params, ArgInfo("params", 0)))
    {
        ERRWRAP2(retval = cv::imwrite(filename, img, params));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("imwrite");

    return NULL;
}

static Napi::Value pyopencv_cv_imwritemulti(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_filename = NULL;
    String filename;
    Napi::Value* pyobj_img = NULL;
    vector_Mat img;
    Napi::Value* pyobj_params = NULL;
    vector_int params=std::vector<int>();
    bool retval;

    const char* keywords[] = { "filename", "img", "params", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:imwritemulti", (char**)keywords, &pyobj_filename, &pyobj_img, &pyobj_params) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_params, params, ArgInfo("params", 0)))
    {
        ERRWRAP2(retval = cv::imwritemulti(filename, img, params));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_filename = NULL;
    String filename;
    Napi::Value* pyobj_img = NULL;
    vector_UMat img;
    Napi::Value* pyobj_params = NULL;
    vector_int params=std::vector<int>();
    bool retval;

    const char* keywords[] = { "filename", "img", "params", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:imwritemulti", (char**)keywords, &pyobj_filename, &pyobj_img, &pyobj_params) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_params, params, ArgInfo("params", 0)))
    {
        ERRWRAP2(retval = cv::imwritemulti(filename, img, params));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("imwritemulti");

    return NULL;
}

static Napi::Value pyopencv_cv_inRange(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_lowerb = NULL;
    Mat lowerb;
    Napi::Value* pyobj_upperb = NULL;
    Mat upperb;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;

    const char* keywords[] = { "src", "lowerb", "upperb", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:inRange", (char**)keywords, &pyobj_src, &pyobj_lowerb, &pyobj_upperb, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_lowerb, lowerb, ArgInfo("lowerb", 0)) &&
        jsopencv_to_safe(info, pyobj_upperb, upperb, ArgInfo("upperb", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::inRange(src, lowerb, upperb, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_lowerb = NULL;
    UMat lowerb;
    Napi::Value* pyobj_upperb = NULL;
    UMat upperb;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;

    const char* keywords[] = { "src", "lowerb", "upperb", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:inRange", (char**)keywords, &pyobj_src, &pyobj_lowerb, &pyobj_upperb, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_lowerb, lowerb, ArgInfo("lowerb", 0)) &&
        jsopencv_to_safe(info, pyobj_upperb, upperb, ArgInfo("upperb", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::inRange(src, lowerb, upperb, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("inRange");

    return NULL;
}

static Napi::Value pyopencv_cv_initCameraMatrix2D(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_objectPoints = NULL;
    vector_Mat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    vector_Mat imagePoints;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_aspectRatio = NULL;
    double aspectRatio=1.0;
    Mat retval;

    const char* keywords[] = { "objectPoints", "imagePoints", "imageSize", "aspectRatio", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:initCameraMatrix2D", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_imageSize, &pyobj_aspectRatio) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_aspectRatio, aspectRatio, ArgInfo("aspectRatio", 0)))
    {
        ERRWRAP2(retval = cv::initCameraMatrix2D(objectPoints, imagePoints, imageSize, aspectRatio));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_objectPoints = NULL;
    vector_UMat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    vector_UMat imagePoints;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_aspectRatio = NULL;
    double aspectRatio=1.0;
    Mat retval;

    const char* keywords[] = { "objectPoints", "imagePoints", "imageSize", "aspectRatio", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:initCameraMatrix2D", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_imageSize, &pyobj_aspectRatio) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_aspectRatio, aspectRatio, ArgInfo("aspectRatio", 0)))
    {
        ERRWRAP2(retval = cv::initCameraMatrix2D(objectPoints, imagePoints, imageSize, aspectRatio));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("initCameraMatrix2D");

    return NULL;
}

static Napi::Value pyopencv_cv_initInverseRectificationMap(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    Mat distCoeffs;
    Napi::Value* pyobj_R = NULL;
    Mat R;
    Napi::Value* pyobj_newCameraMatrix = NULL;
    Mat newCameraMatrix;
    Napi::Value* pyobj_size = NULL;
    Size size;
    Napi::Value* pyobj_m1type = NULL;
    int m1type=0;
    Napi::Value* pyobj_map1 = NULL;
    Mat map1;
    Napi::Value* pyobj_map2 = NULL;
    Mat map2;

    const char* keywords[] = { "cameraMatrix", "distCoeffs", "R", "newCameraMatrix", "size", "m1type", "map1", "map2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OO:initInverseRectificationMap", (char**)keywords, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_R, &pyobj_newCameraMatrix, &pyobj_size, &pyobj_m1type, &pyobj_map1, &pyobj_map2) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 0)) &&
        jsopencv_to_safe(info, pyobj_newCameraMatrix, newCameraMatrix, ArgInfo("newCameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_size, size, ArgInfo("size", 0)) &&
        jsopencv_to_safe(info, pyobj_m1type, m1type, ArgInfo("m1type", 0)) &&
        jsopencv_to_safe(info, pyobj_map1, map1, ArgInfo("map1", 1)) &&
        jsopencv_to_safe(info, pyobj_map2, map2, ArgInfo("map2", 1)))
    {
        ERRWRAP2(cv::initInverseRectificationMap(cameraMatrix, distCoeffs, R, newCameraMatrix, size, m1type, map1, map2));
        return Py_BuildValue("(NN)", jsopencv_from(map1), jsopencv_from(map2));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    UMat distCoeffs;
    Napi::Value* pyobj_R = NULL;
    UMat R;
    Napi::Value* pyobj_newCameraMatrix = NULL;
    UMat newCameraMatrix;
    Napi::Value* pyobj_size = NULL;
    Size size;
    Napi::Value* pyobj_m1type = NULL;
    int m1type=0;
    Napi::Value* pyobj_map1 = NULL;
    UMat map1;
    Napi::Value* pyobj_map2 = NULL;
    UMat map2;

    const char* keywords[] = { "cameraMatrix", "distCoeffs", "R", "newCameraMatrix", "size", "m1type", "map1", "map2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OO:initInverseRectificationMap", (char**)keywords, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_R, &pyobj_newCameraMatrix, &pyobj_size, &pyobj_m1type, &pyobj_map1, &pyobj_map2) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 0)) &&
        jsopencv_to_safe(info, pyobj_newCameraMatrix, newCameraMatrix, ArgInfo("newCameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_size, size, ArgInfo("size", 0)) &&
        jsopencv_to_safe(info, pyobj_m1type, m1type, ArgInfo("m1type", 0)) &&
        jsopencv_to_safe(info, pyobj_map1, map1, ArgInfo("map1", 1)) &&
        jsopencv_to_safe(info, pyobj_map2, map2, ArgInfo("map2", 1)))
    {
        ERRWRAP2(cv::initInverseRectificationMap(cameraMatrix, distCoeffs, R, newCameraMatrix, size, m1type, map1, map2));
        return Py_BuildValue("(NN)", jsopencv_from(map1), jsopencv_from(map2));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("initInverseRectificationMap");

    return NULL;
}

static Napi::Value pyopencv_cv_initUndistortRectifyMap(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    Mat distCoeffs;
    Napi::Value* pyobj_R = NULL;
    Mat R;
    Napi::Value* pyobj_newCameraMatrix = NULL;
    Mat newCameraMatrix;
    Napi::Value* pyobj_size = NULL;
    Size size;
    Napi::Value* pyobj_m1type = NULL;
    int m1type=0;
    Napi::Value* pyobj_map1 = NULL;
    Mat map1;
    Napi::Value* pyobj_map2 = NULL;
    Mat map2;

    const char* keywords[] = { "cameraMatrix", "distCoeffs", "R", "newCameraMatrix", "size", "m1type", "map1", "map2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OO:initUndistortRectifyMap", (char**)keywords, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_R, &pyobj_newCameraMatrix, &pyobj_size, &pyobj_m1type, &pyobj_map1, &pyobj_map2) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 0)) &&
        jsopencv_to_safe(info, pyobj_newCameraMatrix, newCameraMatrix, ArgInfo("newCameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_size, size, ArgInfo("size", 0)) &&
        jsopencv_to_safe(info, pyobj_m1type, m1type, ArgInfo("m1type", 0)) &&
        jsopencv_to_safe(info, pyobj_map1, map1, ArgInfo("map1", 1)) &&
        jsopencv_to_safe(info, pyobj_map2, map2, ArgInfo("map2", 1)))
    {
        ERRWRAP2(cv::initUndistortRectifyMap(cameraMatrix, distCoeffs, R, newCameraMatrix, size, m1type, map1, map2));
        return Py_BuildValue("(NN)", jsopencv_from(map1), jsopencv_from(map2));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    UMat distCoeffs;
    Napi::Value* pyobj_R = NULL;
    UMat R;
    Napi::Value* pyobj_newCameraMatrix = NULL;
    UMat newCameraMatrix;
    Napi::Value* pyobj_size = NULL;
    Size size;
    Napi::Value* pyobj_m1type = NULL;
    int m1type=0;
    Napi::Value* pyobj_map1 = NULL;
    UMat map1;
    Napi::Value* pyobj_map2 = NULL;
    UMat map2;

    const char* keywords[] = { "cameraMatrix", "distCoeffs", "R", "newCameraMatrix", "size", "m1type", "map1", "map2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OO:initUndistortRectifyMap", (char**)keywords, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_R, &pyobj_newCameraMatrix, &pyobj_size, &pyobj_m1type, &pyobj_map1, &pyobj_map2) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 0)) &&
        jsopencv_to_safe(info, pyobj_newCameraMatrix, newCameraMatrix, ArgInfo("newCameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_size, size, ArgInfo("size", 0)) &&
        jsopencv_to_safe(info, pyobj_m1type, m1type, ArgInfo("m1type", 0)) &&
        jsopencv_to_safe(info, pyobj_map1, map1, ArgInfo("map1", 1)) &&
        jsopencv_to_safe(info, pyobj_map2, map2, ArgInfo("map2", 1)))
    {
        ERRWRAP2(cv::initUndistortRectifyMap(cameraMatrix, distCoeffs, R, newCameraMatrix, size, m1type, map1, map2));
        return Py_BuildValue("(NN)", jsopencv_from(map1), jsopencv_from(map2));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("initUndistortRectifyMap");

    return NULL;
}

static Napi::Value pyopencv_cv_inpaint(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_inpaintMask = NULL;
    Mat inpaintMask;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_inpaintRadius = NULL;
    double inpaintRadius=0;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;

    const char* keywords[] = { "src", "inpaintMask", "inpaintRadius", "flags", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:inpaint", (char**)keywords, &pyobj_src, &pyobj_inpaintMask, &pyobj_inpaintRadius, &pyobj_flags, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_inpaintMask, inpaintMask, ArgInfo("inpaintMask", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_inpaintRadius, inpaintRadius, ArgInfo("inpaintRadius", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::inpaint(src, inpaintMask, dst, inpaintRadius, flags));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_inpaintMask = NULL;
    UMat inpaintMask;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_inpaintRadius = NULL;
    double inpaintRadius=0;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;

    const char* keywords[] = { "src", "inpaintMask", "inpaintRadius", "flags", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:inpaint", (char**)keywords, &pyobj_src, &pyobj_inpaintMask, &pyobj_inpaintRadius, &pyobj_flags, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_inpaintMask, inpaintMask, ArgInfo("inpaintMask", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_inpaintRadius, inpaintRadius, ArgInfo("inpaintRadius", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::inpaint(src, inpaintMask, dst, inpaintRadius, flags));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("inpaint");

    return NULL;
}

static Napi::Value pyopencv_cv_insertChannel(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_coi = NULL;
    int coi=0;

    const char* keywords[] = { "src", "dst", "coi", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:insertChannel", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_coi) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_coi, coi, ArgInfo("coi", 0)))
    {
        ERRWRAP2(cv::insertChannel(src, dst, coi));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_coi = NULL;
    int coi=0;

    const char* keywords[] = { "src", "dst", "coi", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:insertChannel", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_coi) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_coi, coi, ArgInfo("coi", 0)))
    {
        ERRWRAP2(cv::insertChannel(src, dst, coi));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("insertChannel");

    return NULL;
}

static Napi::Value pyopencv_cv_integral(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_sum = NULL;
    Mat sum;
    Napi::Value* pyobj_sdepth = NULL;
    int sdepth=-1;

    const char* keywords[] = { "src", "sum", "sdepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:integral", (char**)keywords, &pyobj_src, &pyobj_sum, &pyobj_sdepth) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_sum, sum, ArgInfo("sum", 1)) &&
        jsopencv_to_safe(info, pyobj_sdepth, sdepth, ArgInfo("sdepth", 0)))
    {
        ERRWRAP2(cv::integral(src, sum, sdepth));
        return jsopencv_from(sum);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_sum = NULL;
    UMat sum;
    Napi::Value* pyobj_sdepth = NULL;
    int sdepth=-1;

    const char* keywords[] = { "src", "sum", "sdepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:integral", (char**)keywords, &pyobj_src, &pyobj_sum, &pyobj_sdepth) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_sum, sum, ArgInfo("sum", 1)) &&
        jsopencv_to_safe(info, pyobj_sdepth, sdepth, ArgInfo("sdepth", 0)))
    {
        ERRWRAP2(cv::integral(src, sum, sdepth));
        return jsopencv_from(sum);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("integral");

    return NULL;
}

static Napi::Value pyopencv_cv_integral2(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_sum = NULL;
    Mat sum;
    Napi::Value* pyobj_sqsum = NULL;
    Mat sqsum;
    Napi::Value* pyobj_sdepth = NULL;
    int sdepth=-1;
    Napi::Value* pyobj_sqdepth = NULL;
    int sqdepth=-1;

    const char* keywords[] = { "src", "sum", "sqsum", "sdepth", "sqdepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOO:integral2", (char**)keywords, &pyobj_src, &pyobj_sum, &pyobj_sqsum, &pyobj_sdepth, &pyobj_sqdepth) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_sum, sum, ArgInfo("sum", 1)) &&
        jsopencv_to_safe(info, pyobj_sqsum, sqsum, ArgInfo("sqsum", 1)) &&
        jsopencv_to_safe(info, pyobj_sdepth, sdepth, ArgInfo("sdepth", 0)) &&
        jsopencv_to_safe(info, pyobj_sqdepth, sqdepth, ArgInfo("sqdepth", 0)))
    {
        ERRWRAP2(cv::integral(src, sum, sqsum, sdepth, sqdepth));
        return Py_BuildValue("(NN)", jsopencv_from(sum), jsopencv_from(sqsum));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_sum = NULL;
    UMat sum;
    Napi::Value* pyobj_sqsum = NULL;
    UMat sqsum;
    Napi::Value* pyobj_sdepth = NULL;
    int sdepth=-1;
    Napi::Value* pyobj_sqdepth = NULL;
    int sqdepth=-1;

    const char* keywords[] = { "src", "sum", "sqsum", "sdepth", "sqdepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOO:integral2", (char**)keywords, &pyobj_src, &pyobj_sum, &pyobj_sqsum, &pyobj_sdepth, &pyobj_sqdepth) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_sum, sum, ArgInfo("sum", 1)) &&
        jsopencv_to_safe(info, pyobj_sqsum, sqsum, ArgInfo("sqsum", 1)) &&
        jsopencv_to_safe(info, pyobj_sdepth, sdepth, ArgInfo("sdepth", 0)) &&
        jsopencv_to_safe(info, pyobj_sqdepth, sqdepth, ArgInfo("sqdepth", 0)))
    {
        ERRWRAP2(cv::integral(src, sum, sqsum, sdepth, sqdepth));
        return Py_BuildValue("(NN)", jsopencv_from(sum), jsopencv_from(sqsum));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("integral2");

    return NULL;
}

static Napi::Value pyopencv_cv_integral3(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_sum = NULL;
    Mat sum;
    Napi::Value* pyobj_sqsum = NULL;
    Mat sqsum;
    Napi::Value* pyobj_tilted = NULL;
    Mat tilted;
    Napi::Value* pyobj_sdepth = NULL;
    int sdepth=-1;
    Napi::Value* pyobj_sqdepth = NULL;
    int sqdepth=-1;

    const char* keywords[] = { "src", "sum", "sqsum", "tilted", "sdepth", "sqdepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOO:integral3", (char**)keywords, &pyobj_src, &pyobj_sum, &pyobj_sqsum, &pyobj_tilted, &pyobj_sdepth, &pyobj_sqdepth) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_sum, sum, ArgInfo("sum", 1)) &&
        jsopencv_to_safe(info, pyobj_sqsum, sqsum, ArgInfo("sqsum", 1)) &&
        jsopencv_to_safe(info, pyobj_tilted, tilted, ArgInfo("tilted", 1)) &&
        jsopencv_to_safe(info, pyobj_sdepth, sdepth, ArgInfo("sdepth", 0)) &&
        jsopencv_to_safe(info, pyobj_sqdepth, sqdepth, ArgInfo("sqdepth", 0)))
    {
        ERRWRAP2(cv::integral(src, sum, sqsum, tilted, sdepth, sqdepth));
        return Py_BuildValue("(NNN)", jsopencv_from(sum), jsopencv_from(sqsum), jsopencv_from(tilted));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_sum = NULL;
    UMat sum;
    Napi::Value* pyobj_sqsum = NULL;
    UMat sqsum;
    Napi::Value* pyobj_tilted = NULL;
    UMat tilted;
    Napi::Value* pyobj_sdepth = NULL;
    int sdepth=-1;
    Napi::Value* pyobj_sqdepth = NULL;
    int sqdepth=-1;

    const char* keywords[] = { "src", "sum", "sqsum", "tilted", "sdepth", "sqdepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOO:integral3", (char**)keywords, &pyobj_src, &pyobj_sum, &pyobj_sqsum, &pyobj_tilted, &pyobj_sdepth, &pyobj_sqdepth) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_sum, sum, ArgInfo("sum", 1)) &&
        jsopencv_to_safe(info, pyobj_sqsum, sqsum, ArgInfo("sqsum", 1)) &&
        jsopencv_to_safe(info, pyobj_tilted, tilted, ArgInfo("tilted", 1)) &&
        jsopencv_to_safe(info, pyobj_sdepth, sdepth, ArgInfo("sdepth", 0)) &&
        jsopencv_to_safe(info, pyobj_sqdepth, sqdepth, ArgInfo("sqdepth", 0)))
    {
        ERRWRAP2(cv::integral(src, sum, sqsum, tilted, sdepth, sqdepth));
        return Py_BuildValue("(NNN)", jsopencv_from(sum), jsopencv_from(sqsum), jsopencv_from(tilted));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("integral3");

    return NULL;
}

static Napi::Value pyopencv_cv_intersectConvexConvex(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_p1 = NULL;
    Mat p1;
    Napi::Value* pyobj_p2 = NULL;
    Mat p2;
    Napi::Value* pyobj_p12 = NULL;
    Mat p12;
    Napi::Value* pyobj_handleNested = NULL;
    bool handleNested=true;
    float retval;

    const char* keywords[] = { "p1", "p2", "p12", "handleNested", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:intersectConvexConvex", (char**)keywords, &pyobj_p1, &pyobj_p2, &pyobj_p12, &pyobj_handleNested) &&
        jsopencv_to_safe(info, pyobj_p1, p1, ArgInfo("p1", 0)) &&
        jsopencv_to_safe(info, pyobj_p2, p2, ArgInfo("p2", 0)) &&
        jsopencv_to_safe(info, pyobj_p12, p12, ArgInfo("p12", 1)) &&
        jsopencv_to_safe(info, pyobj_handleNested, handleNested, ArgInfo("handleNested", 0)))
    {
        ERRWRAP2(retval = cv::intersectConvexConvex(p1, p2, p12, handleNested));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(p12));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_p1 = NULL;
    UMat p1;
    Napi::Value* pyobj_p2 = NULL;
    UMat p2;
    Napi::Value* pyobj_p12 = NULL;
    UMat p12;
    Napi::Value* pyobj_handleNested = NULL;
    bool handleNested=true;
    float retval;

    const char* keywords[] = { "p1", "p2", "p12", "handleNested", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:intersectConvexConvex", (char**)keywords, &pyobj_p1, &pyobj_p2, &pyobj_p12, &pyobj_handleNested) &&
        jsopencv_to_safe(info, pyobj_p1, p1, ArgInfo("p1", 0)) &&
        jsopencv_to_safe(info, pyobj_p2, p2, ArgInfo("p2", 0)) &&
        jsopencv_to_safe(info, pyobj_p12, p12, ArgInfo("p12", 1)) &&
        jsopencv_to_safe(info, pyobj_handleNested, handleNested, ArgInfo("handleNested", 0)))
    {
        ERRWRAP2(retval = cv::intersectConvexConvex(p1, p2, p12, handleNested));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(p12));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("intersectConvexConvex");

    return NULL;
}

static Napi::Value pyopencv_cv_invert(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_flags = NULL;
    int flags=DECOMP_LU;
    double retval;

    const char* keywords[] = { "src", "dst", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:invert", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::invert(src, dst, flags));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(dst));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_flags = NULL;
    int flags=DECOMP_LU;
    double retval;

    const char* keywords[] = { "src", "dst", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:invert", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::invert(src, dst, flags));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(dst));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("invert");

    return NULL;
}

static Napi::Value pyopencv_cv_invertAffineTransform(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_M = NULL;
    Mat M;
    Napi::Value* pyobj_iM = NULL;
    Mat iM;

    const char* keywords[] = { "M", "iM", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:invertAffineTransform", (char**)keywords, &pyobj_M, &pyobj_iM) &&
        jsopencv_to_safe(info, pyobj_M, M, ArgInfo("M", 0)) &&
        jsopencv_to_safe(info, pyobj_iM, iM, ArgInfo("iM", 1)))
    {
        ERRWRAP2(cv::invertAffineTransform(M, iM));
        return jsopencv_from(iM);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_M = NULL;
    UMat M;
    Napi::Value* pyobj_iM = NULL;
    UMat iM;

    const char* keywords[] = { "M", "iM", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:invertAffineTransform", (char**)keywords, &pyobj_M, &pyobj_iM) &&
        jsopencv_to_safe(info, pyobj_M, M, ArgInfo("M", 0)) &&
        jsopencv_to_safe(info, pyobj_iM, iM, ArgInfo("iM", 1)))
    {
        ERRWRAP2(cv::invertAffineTransform(M, iM));
        return jsopencv_from(iM);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("invertAffineTransform");

    return NULL;
}

static Napi::Value pyopencv_cv_isContourConvex(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_contour = NULL;
    Mat contour;
    bool retval;

    const char* keywords[] = { "contour", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:isContourConvex", (char**)keywords, &pyobj_contour) &&
        jsopencv_to_safe(info, pyobj_contour, contour, ArgInfo("contour", 0)))
    {
        ERRWRAP2(retval = cv::isContourConvex(contour));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_contour = NULL;
    UMat contour;
    bool retval;

    const char* keywords[] = { "contour", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:isContourConvex", (char**)keywords, &pyobj_contour) &&
        jsopencv_to_safe(info, pyobj_contour, contour, ArgInfo("contour", 0)))
    {
        ERRWRAP2(retval = cv::isContourConvex(contour));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("isContourConvex");

    return NULL;
}

static Napi::Value pyopencv_cv_kmeans(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_data = NULL;
    Mat data;
    Napi::Value* pyobj_K = NULL;
    int K=0;
    Napi::Value* pyobj_bestLabels = NULL;
    Mat bestLabels;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria;
    Napi::Value* pyobj_attempts = NULL;
    int attempts=0;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_centers = NULL;
    Mat centers;
    double retval;

    const char* keywords[] = { "data", "K", "bestLabels", "criteria", "attempts", "flags", "centers", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|O:kmeans", (char**)keywords, &pyobj_data, &pyobj_K, &pyobj_bestLabels, &pyobj_criteria, &pyobj_attempts, &pyobj_flags, &pyobj_centers) &&
        jsopencv_to_safe(info, pyobj_data, data, ArgInfo("data", 0)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_bestLabels, bestLabels, ArgInfo("bestLabels", 1)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)) &&
        jsopencv_to_safe(info, pyobj_attempts, attempts, ArgInfo("attempts", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_centers, centers, ArgInfo("centers", 1)))
    {
        ERRWRAP2(retval = cv::kmeans(data, K, bestLabels, criteria, attempts, flags, centers));
        return Py_BuildValue("(NNN)", jsopencv_from(retval), jsopencv_from(bestLabels), jsopencv_from(centers));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_data = NULL;
    UMat data;
    Napi::Value* pyobj_K = NULL;
    int K=0;
    Napi::Value* pyobj_bestLabels = NULL;
    UMat bestLabels;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria;
    Napi::Value* pyobj_attempts = NULL;
    int attempts=0;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_centers = NULL;
    UMat centers;
    double retval;

    const char* keywords[] = { "data", "K", "bestLabels", "criteria", "attempts", "flags", "centers", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|O:kmeans", (char**)keywords, &pyobj_data, &pyobj_K, &pyobj_bestLabels, &pyobj_criteria, &pyobj_attempts, &pyobj_flags, &pyobj_centers) &&
        jsopencv_to_safe(info, pyobj_data, data, ArgInfo("data", 0)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_bestLabels, bestLabels, ArgInfo("bestLabels", 1)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)) &&
        jsopencv_to_safe(info, pyobj_attempts, attempts, ArgInfo("attempts", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_centers, centers, ArgInfo("centers", 1)))
    {
        ERRWRAP2(retval = cv::kmeans(data, K, bestLabels, criteria, attempts, flags, centers));
        return Py_BuildValue("(NNN)", jsopencv_from(retval), jsopencv_from(bestLabels), jsopencv_from(centers));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("kmeans");

    return NULL;
}

static Napi::Value pyopencv_cv_line(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_pt1 = NULL;
    Point pt1;
    Napi::Value* pyobj_pt2 = NULL;
    Point pt2;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=1;
    Napi::Value* pyobj_lineType = NULL;
    int lineType=LINE_8;
    Napi::Value* pyobj_shift = NULL;
    int shift=0;

    const char* keywords[] = { "img", "pt1", "pt2", "color", "thickness", "lineType", "shift", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:line", (char**)keywords, &pyobj_img, &pyobj_pt1, &pyobj_pt2, &pyobj_color, &pyobj_thickness, &pyobj_lineType, &pyobj_shift) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_pt1, pt1, ArgInfo("pt1", 0)) &&
        jsopencv_to_safe(info, pyobj_pt2, pt2, ArgInfo("pt2", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)) &&
        jsopencv_to_safe(info, pyobj_lineType, lineType, ArgInfo("lineType", 0)) &&
        jsopencv_to_safe(info, pyobj_shift, shift, ArgInfo("shift", 0)))
    {
        ERRWRAP2(cv::line(img, pt1, pt2, color, thickness, lineType, shift));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_pt1 = NULL;
    Point pt1;
    Napi::Value* pyobj_pt2 = NULL;
    Point pt2;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=1;
    Napi::Value* pyobj_lineType = NULL;
    int lineType=LINE_8;
    Napi::Value* pyobj_shift = NULL;
    int shift=0;

    const char* keywords[] = { "img", "pt1", "pt2", "color", "thickness", "lineType", "shift", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:line", (char**)keywords, &pyobj_img, &pyobj_pt1, &pyobj_pt2, &pyobj_color, &pyobj_thickness, &pyobj_lineType, &pyobj_shift) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_pt1, pt1, ArgInfo("pt1", 0)) &&
        jsopencv_to_safe(info, pyobj_pt2, pt2, ArgInfo("pt2", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)) &&
        jsopencv_to_safe(info, pyobj_lineType, lineType, ArgInfo("lineType", 0)) &&
        jsopencv_to_safe(info, pyobj_shift, shift, ArgInfo("shift", 0)))
    {
        ERRWRAP2(cv::line(img, pt1, pt2, color, thickness, lineType, shift));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("line");

    return NULL;
}

static Napi::Value pyopencv_cv_linearPolar(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_center = NULL;
    Point2f center;
    Napi::Value* pyobj_maxRadius = NULL;
    double maxRadius=0;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;

    const char* keywords[] = { "src", "center", "maxRadius", "flags", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:linearPolar", (char**)keywords, &pyobj_src, &pyobj_center, &pyobj_maxRadius, &pyobj_flags, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_center, center, ArgInfo("center", 0)) &&
        jsopencv_to_safe(info, pyobj_maxRadius, maxRadius, ArgInfo("maxRadius", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::linearPolar(src, dst, center, maxRadius, flags));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_center = NULL;
    Point2f center;
    Napi::Value* pyobj_maxRadius = NULL;
    double maxRadius=0;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;

    const char* keywords[] = { "src", "center", "maxRadius", "flags", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:linearPolar", (char**)keywords, &pyobj_src, &pyobj_center, &pyobj_maxRadius, &pyobj_flags, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_center, center, ArgInfo("center", 0)) &&
        jsopencv_to_safe(info, pyobj_maxRadius, maxRadius, ArgInfo("maxRadius", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::linearPolar(src, dst, center, maxRadius, flags));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("linearPolar");

    return NULL;
}

static Napi::Value pyopencv_cv_log(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;

    const char* keywords[] = { "src", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:log", (char**)keywords, &pyobj_src, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::log(src, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;

    const char* keywords[] = { "src", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:log", (char**)keywords, &pyobj_src, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::log(src, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("log");

    return NULL;
}

static Napi::Value pyopencv_cv_logPolar(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_center = NULL;
    Point2f center;
    Napi::Value* pyobj_M = NULL;
    double M=0;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;

    const char* keywords[] = { "src", "center", "M", "flags", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:logPolar", (char**)keywords, &pyobj_src, &pyobj_center, &pyobj_M, &pyobj_flags, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_center, center, ArgInfo("center", 0)) &&
        jsopencv_to_safe(info, pyobj_M, M, ArgInfo("M", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::logPolar(src, dst, center, M, flags));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_center = NULL;
    Point2f center;
    Napi::Value* pyobj_M = NULL;
    double M=0;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;

    const char* keywords[] = { "src", "center", "M", "flags", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:logPolar", (char**)keywords, &pyobj_src, &pyobj_center, &pyobj_M, &pyobj_flags, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_center, center, ArgInfo("center", 0)) &&
        jsopencv_to_safe(info, pyobj_M, M, ArgInfo("M", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::logPolar(src, dst, center, M, flags));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("logPolar");

    return NULL;
}

static Napi::Value pyopencv_cv_magnitude(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_x = NULL;
    Mat x;
    Napi::Value* pyobj_y = NULL;
    Mat y;
    Napi::Value* pyobj_magnitude = NULL;
    Mat magnitude;

    const char* keywords[] = { "x", "y", "magnitude", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:magnitude", (char**)keywords, &pyobj_x, &pyobj_y, &pyobj_magnitude) &&
        jsopencv_to_safe(info, pyobj_x, x, ArgInfo("x", 0)) &&
        jsopencv_to_safe(info, pyobj_y, y, ArgInfo("y", 0)) &&
        jsopencv_to_safe(info, pyobj_magnitude, magnitude, ArgInfo("magnitude", 1)))
    {
        ERRWRAP2(cv::magnitude(x, y, magnitude));
        return jsopencv_from(magnitude);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_x = NULL;
    UMat x;
    Napi::Value* pyobj_y = NULL;
    UMat y;
    Napi::Value* pyobj_magnitude = NULL;
    UMat magnitude;

    const char* keywords[] = { "x", "y", "magnitude", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:magnitude", (char**)keywords, &pyobj_x, &pyobj_y, &pyobj_magnitude) &&
        jsopencv_to_safe(info, pyobj_x, x, ArgInfo("x", 0)) &&
        jsopencv_to_safe(info, pyobj_y, y, ArgInfo("y", 0)) &&
        jsopencv_to_safe(info, pyobj_magnitude, magnitude, ArgInfo("magnitude", 1)))
    {
        ERRWRAP2(cv::magnitude(x, y, magnitude));
        return jsopencv_from(magnitude);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("magnitude");

    return NULL;
}

static Napi::Value pyopencv_cv_matMulDeriv(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_A = NULL;
    Mat A;
    Napi::Value* pyobj_B = NULL;
    Mat B;
    Napi::Value* pyobj_dABdA = NULL;
    Mat dABdA;
    Napi::Value* pyobj_dABdB = NULL;
    Mat dABdB;

    const char* keywords[] = { "A", "B", "dABdA", "dABdB", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:matMulDeriv", (char**)keywords, &pyobj_A, &pyobj_B, &pyobj_dABdA, &pyobj_dABdB) &&
        jsopencv_to_safe(info, pyobj_A, A, ArgInfo("A", 0)) &&
        jsopencv_to_safe(info, pyobj_B, B, ArgInfo("B", 0)) &&
        jsopencv_to_safe(info, pyobj_dABdA, dABdA, ArgInfo("dABdA", 1)) &&
        jsopencv_to_safe(info, pyobj_dABdB, dABdB, ArgInfo("dABdB", 1)))
    {
        ERRWRAP2(cv::matMulDeriv(A, B, dABdA, dABdB));
        return Py_BuildValue("(NN)", jsopencv_from(dABdA), jsopencv_from(dABdB));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_A = NULL;
    UMat A;
    Napi::Value* pyobj_B = NULL;
    UMat B;
    Napi::Value* pyobj_dABdA = NULL;
    UMat dABdA;
    Napi::Value* pyobj_dABdB = NULL;
    UMat dABdB;

    const char* keywords[] = { "A", "B", "dABdA", "dABdB", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:matMulDeriv", (char**)keywords, &pyobj_A, &pyobj_B, &pyobj_dABdA, &pyobj_dABdB) &&
        jsopencv_to_safe(info, pyobj_A, A, ArgInfo("A", 0)) &&
        jsopencv_to_safe(info, pyobj_B, B, ArgInfo("B", 0)) &&
        jsopencv_to_safe(info, pyobj_dABdA, dABdA, ArgInfo("dABdA", 1)) &&
        jsopencv_to_safe(info, pyobj_dABdB, dABdB, ArgInfo("dABdB", 1)))
    {
        ERRWRAP2(cv::matMulDeriv(A, B, dABdA, dABdB));
        return Py_BuildValue("(NN)", jsopencv_from(dABdA), jsopencv_from(dABdB));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("matMulDeriv");

    return NULL;
}

static Napi::Value pyopencv_cv_matchShapes(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_contour1 = NULL;
    Mat contour1;
    Napi::Value* pyobj_contour2 = NULL;
    Mat contour2;
    Napi::Value* pyobj_method = NULL;
    int method=0;
    Napi::Value* pyobj_parameter = NULL;
    double parameter=0;
    double retval;

    const char* keywords[] = { "contour1", "contour2", "method", "parameter", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO:matchShapes", (char**)keywords, &pyobj_contour1, &pyobj_contour2, &pyobj_method, &pyobj_parameter) &&
        jsopencv_to_safe(info, pyobj_contour1, contour1, ArgInfo("contour1", 0)) &&
        jsopencv_to_safe(info, pyobj_contour2, contour2, ArgInfo("contour2", 0)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_parameter, parameter, ArgInfo("parameter", 0)))
    {
        ERRWRAP2(retval = cv::matchShapes(contour1, contour2, method, parameter));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_contour1 = NULL;
    UMat contour1;
    Napi::Value* pyobj_contour2 = NULL;
    UMat contour2;
    Napi::Value* pyobj_method = NULL;
    int method=0;
    Napi::Value* pyobj_parameter = NULL;
    double parameter=0;
    double retval;

    const char* keywords[] = { "contour1", "contour2", "method", "parameter", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO:matchShapes", (char**)keywords, &pyobj_contour1, &pyobj_contour2, &pyobj_method, &pyobj_parameter) &&
        jsopencv_to_safe(info, pyobj_contour1, contour1, ArgInfo("contour1", 0)) &&
        jsopencv_to_safe(info, pyobj_contour2, contour2, ArgInfo("contour2", 0)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_parameter, parameter, ArgInfo("parameter", 0)))
    {
        ERRWRAP2(retval = cv::matchShapes(contour1, contour2, method, parameter));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("matchShapes");

    return NULL;
}

static Napi::Value pyopencv_cv_matchTemplate(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_templ = NULL;
    Mat templ;
    Napi::Value* pyobj_result = NULL;
    Mat result;
    Napi::Value* pyobj_method = NULL;
    int method=0;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;

    const char* keywords[] = { "image", "templ", "method", "result", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:matchTemplate", (char**)keywords, &pyobj_image, &pyobj_templ, &pyobj_method, &pyobj_result, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_templ, templ, ArgInfo("templ", 0)) &&
        jsopencv_to_safe(info, pyobj_result, result, ArgInfo("result", 1)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::matchTemplate(image, templ, result, method, mask));
        return jsopencv_from(result);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_templ = NULL;
    UMat templ;
    Napi::Value* pyobj_result = NULL;
    UMat result;
    Napi::Value* pyobj_method = NULL;
    int method=0;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;

    const char* keywords[] = { "image", "templ", "method", "result", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:matchTemplate", (char**)keywords, &pyobj_image, &pyobj_templ, &pyobj_method, &pyobj_result, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_templ, templ, ArgInfo("templ", 0)) &&
        jsopencv_to_safe(info, pyobj_result, result, ArgInfo("result", 1)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::matchTemplate(image, templ, result, method, mask));
        return jsopencv_from(result);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("matchTemplate");

    return NULL;
}

static Napi::Value pyopencv_cv_max(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    Mat src1;
    Napi::Value* pyobj_src2 = NULL;
    Mat src2;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;

    const char* keywords[] = { "src1", "src2", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:max", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::max(src1, src2, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    UMat src1;
    Napi::Value* pyobj_src2 = NULL;
    UMat src2;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;

    const char* keywords[] = { "src1", "src2", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:max", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::max(src1, src2, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("max");

    return NULL;
}

static Napi::Value pyopencv_cv_mean(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Scalar retval;

    const char* keywords[] = { "src", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:mean", (char**)keywords, &pyobj_src, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(retval = cv::mean(src, mask));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    Scalar retval;

    const char* keywords[] = { "src", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:mean", (char**)keywords, &pyobj_src, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(retval = cv::mean(src, mask));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("mean");

    return NULL;
}

static Napi::Value pyopencv_cv_meanShift(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_probImage = NULL;
    Mat probImage;
    Napi::Value* pyobj_window = NULL;
    Rect window;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria;
    int retval;

    const char* keywords[] = { "probImage", "window", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:meanShift", (char**)keywords, &pyobj_probImage, &pyobj_window, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_probImage, probImage, ArgInfo("probImage", 0)) &&
        jsopencv_to_safe(info, pyobj_window, window, ArgInfo("window", 1)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(retval = cv::meanShift(probImage, window, criteria));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(window));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_probImage = NULL;
    UMat probImage;
    Napi::Value* pyobj_window = NULL;
    Rect window;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria;
    int retval;

    const char* keywords[] = { "probImage", "window", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:meanShift", (char**)keywords, &pyobj_probImage, &pyobj_window, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_probImage, probImage, ArgInfo("probImage", 0)) &&
        jsopencv_to_safe(info, pyobj_window, window, ArgInfo("window", 1)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(retval = cv::meanShift(probImage, window, criteria));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(window));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("meanShift");

    return NULL;
}

static Napi::Value pyopencv_cv_meanStdDev(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_mean = NULL;
    Mat mean;
    Napi::Value* pyobj_stddev = NULL;
    Mat stddev;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;

    const char* keywords[] = { "src", "mean", "stddev", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:meanStdDev", (char**)keywords, &pyobj_src, &pyobj_mean, &pyobj_stddev, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_mean, mean, ArgInfo("mean", 1)) &&
        jsopencv_to_safe(info, pyobj_stddev, stddev, ArgInfo("stddev", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::meanStdDev(src, mean, stddev, mask));
        return Py_BuildValue("(NN)", jsopencv_from(mean), jsopencv_from(stddev));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_mean = NULL;
    UMat mean;
    Napi::Value* pyobj_stddev = NULL;
    UMat stddev;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;

    const char* keywords[] = { "src", "mean", "stddev", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:meanStdDev", (char**)keywords, &pyobj_src, &pyobj_mean, &pyobj_stddev, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_mean, mean, ArgInfo("mean", 1)) &&
        jsopencv_to_safe(info, pyobj_stddev, stddev, ArgInfo("stddev", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::meanStdDev(src, mean, stddev, mask));
        return Py_BuildValue("(NN)", jsopencv_from(mean), jsopencv_from(stddev));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("meanStdDev");

    return NULL;
}

static Napi::Value pyopencv_cv_medianBlur(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_ksize = NULL;
    int ksize=0;

    const char* keywords[] = { "src", "ksize", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:medianBlur", (char**)keywords, &pyobj_src, &pyobj_ksize, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)))
    {
        ERRWRAP2(cv::medianBlur(src, dst, ksize));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_ksize = NULL;
    int ksize=0;

    const char* keywords[] = { "src", "ksize", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:medianBlur", (char**)keywords, &pyobj_src, &pyobj_ksize, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)))
    {
        ERRWRAP2(cv::medianBlur(src, dst, ksize));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("medianBlur");

    return NULL;
}

static Napi::Value pyopencv_cv_merge(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_mv = NULL;
    vector_Mat mv;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;

    const char* keywords[] = { "mv", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:merge", (char**)keywords, &pyobj_mv, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_mv, mv, ArgInfo("mv", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::merge(mv, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_mv = NULL;
    vector_UMat mv;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;

    const char* keywords[] = { "mv", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:merge", (char**)keywords, &pyobj_mv, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_mv, mv, ArgInfo("mv", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::merge(mv, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("merge");

    return NULL;
}

static Napi::Value pyopencv_cv_min(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    Mat src1;
    Napi::Value* pyobj_src2 = NULL;
    Mat src2;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;

    const char* keywords[] = { "src1", "src2", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:min", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::min(src1, src2, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    UMat src1;
    Napi::Value* pyobj_src2 = NULL;
    UMat src2;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;

    const char* keywords[] = { "src1", "src2", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:min", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::min(src1, src2, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("min");

    return NULL;
}

static Napi::Value pyopencv_cv_minAreaRect(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_points = NULL;
    Mat points;
    RotatedRect retval;

    const char* keywords[] = { "points", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:minAreaRect", (char**)keywords, &pyobj_points) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 0)))
    {
        ERRWRAP2(retval = cv::minAreaRect(points));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_points = NULL;
    UMat points;
    RotatedRect retval;

    const char* keywords[] = { "points", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:minAreaRect", (char**)keywords, &pyobj_points) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 0)))
    {
        ERRWRAP2(retval = cv::minAreaRect(points));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("minAreaRect");

    return NULL;
}

static Napi::Value pyopencv_cv_minEnclosingCircle(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_points = NULL;
    Mat points;
    Point2f center;
    float radius;

    const char* keywords[] = { "points", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:minEnclosingCircle", (char**)keywords, &pyobj_points) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 0)))
    {
        ERRWRAP2(cv::minEnclosingCircle(points, center, radius));
        return Py_BuildValue("(NN)", jsopencv_from(center), jsopencv_from(radius));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_points = NULL;
    UMat points;
    Point2f center;
    float radius;

    const char* keywords[] = { "points", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:minEnclosingCircle", (char**)keywords, &pyobj_points) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 0)))
    {
        ERRWRAP2(cv::minEnclosingCircle(points, center, radius));
        return Py_BuildValue("(NN)", jsopencv_from(center), jsopencv_from(radius));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("minEnclosingCircle");

    return NULL;
}

static Napi::Value pyopencv_cv_minEnclosingTriangle(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_points = NULL;
    Mat points;
    Napi::Value* pyobj_triangle = NULL;
    Mat triangle;
    double retval;

    const char* keywords[] = { "points", "triangle", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:minEnclosingTriangle", (char**)keywords, &pyobj_points, &pyobj_triangle) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 0)) &&
        jsopencv_to_safe(info, pyobj_triangle, triangle, ArgInfo("triangle", 1)))
    {
        ERRWRAP2(retval = cv::minEnclosingTriangle(points, triangle));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(triangle));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_points = NULL;
    UMat points;
    Napi::Value* pyobj_triangle = NULL;
    UMat triangle;
    double retval;

    const char* keywords[] = { "points", "triangle", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:minEnclosingTriangle", (char**)keywords, &pyobj_points, &pyobj_triangle) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 0)) &&
        jsopencv_to_safe(info, pyobj_triangle, triangle, ArgInfo("triangle", 1)))
    {
        ERRWRAP2(retval = cv::minEnclosingTriangle(points, triangle));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(triangle));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("minEnclosingTriangle");

    return NULL;
}

static Napi::Value pyopencv_cv_minMaxLoc(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    double minVal;
    double maxVal;
    Point minLoc;
    Point maxLoc;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;

    const char* keywords[] = { "src", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:minMaxLoc", (char**)keywords, &pyobj_src, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::minMaxLoc(src, &minVal, &maxVal, &minLoc, &maxLoc, mask));
        return Py_BuildValue("(NNNN)", jsopencv_from(minVal), jsopencv_from(maxVal), jsopencv_from(minLoc), jsopencv_from(maxLoc));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    double minVal;
    double maxVal;
    Point minLoc;
    Point maxLoc;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;

    const char* keywords[] = { "src", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:minMaxLoc", (char**)keywords, &pyobj_src, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::minMaxLoc(src, &minVal, &maxVal, &minLoc, &maxLoc, mask));
        return Py_BuildValue("(NNNN)", jsopencv_from(minVal), jsopencv_from(maxVal), jsopencv_from(minLoc), jsopencv_from(maxLoc));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("minMaxLoc");

    return NULL;
}

static Napi::Value pyopencv_cv_mixChannels(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    vector_Mat src;
    Napi::Value* pyobj_dst = NULL;
    vector_Mat dst;
    Napi::Value* pyobj_fromTo = NULL;
    vector_int fromTo;

    const char* keywords[] = { "src", "dst", "fromTo", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:mixChannels", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_fromTo) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_fromTo, fromTo, ArgInfo("fromTo", 0)))
    {
        ERRWRAP2(cv::mixChannels(src, dst, fromTo));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    vector_UMat src;
    Napi::Value* pyobj_dst = NULL;
    vector_UMat dst;
    Napi::Value* pyobj_fromTo = NULL;
    vector_int fromTo;

    const char* keywords[] = { "src", "dst", "fromTo", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:mixChannels", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_fromTo) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_fromTo, fromTo, ArgInfo("fromTo", 0)))
    {
        ERRWRAP2(cv::mixChannels(src, dst, fromTo));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("mixChannels");

    return NULL;
}

static Napi::Value pyopencv_cv_moments(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_array = NULL;
    Mat array;
    Napi::Value* pyobj_binaryImage = NULL;
    bool binaryImage=false;
    Moments retval;

    const char* keywords[] = { "array", "binaryImage", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:moments", (char**)keywords, &pyobj_array, &pyobj_binaryImage) &&
        jsopencv_to_safe(info, pyobj_array, array, ArgInfo("array", 0)) &&
        jsopencv_to_safe(info, pyobj_binaryImage, binaryImage, ArgInfo("binaryImage", 0)))
    {
        ERRWRAP2(retval = cv::moments(array, binaryImage));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_array = NULL;
    UMat array;
    Napi::Value* pyobj_binaryImage = NULL;
    bool binaryImage=false;
    Moments retval;

    const char* keywords[] = { "array", "binaryImage", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:moments", (char**)keywords, &pyobj_array, &pyobj_binaryImage) &&
        jsopencv_to_safe(info, pyobj_array, array, ArgInfo("array", 0)) &&
        jsopencv_to_safe(info, pyobj_binaryImage, binaryImage, ArgInfo("binaryImage", 0)))
    {
        ERRWRAP2(retval = cv::moments(array, binaryImage));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("moments");

    return NULL;
}

static Napi::Value pyopencv_cv_morphologyEx(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_op = NULL;
    int op=0;
    Napi::Value* pyobj_kernel = NULL;
    Mat kernel;
    Napi::Value* pyobj_anchor = NULL;
    Point anchor=Point(-1,-1);
    Napi::Value* pyobj_iterations = NULL;
    int iterations=1;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_CONSTANT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue=morphologyDefaultBorderValue();

    const char* keywords[] = { "src", "op", "kernel", "dst", "anchor", "iterations", "borderType", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOOO:morphologyEx", (char**)keywords, &pyobj_src, &pyobj_op, &pyobj_kernel, &pyobj_dst, &pyobj_anchor, &pyobj_iterations, &pyobj_borderType, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_op, op, ArgInfo("op", 0)) &&
        jsopencv_to_safe(info, pyobj_kernel, kernel, ArgInfo("kernel", 0)) &&
        jsopencv_to_safe(info, pyobj_anchor, anchor, ArgInfo("anchor", 0)) &&
        jsopencv_to_safe(info, pyobj_iterations, iterations, ArgInfo("iterations", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(cv::morphologyEx(src, dst, op, kernel, anchor, iterations, borderType, borderValue));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_op = NULL;
    int op=0;
    Napi::Value* pyobj_kernel = NULL;
    UMat kernel;
    Napi::Value* pyobj_anchor = NULL;
    Point anchor=Point(-1,-1);
    Napi::Value* pyobj_iterations = NULL;
    int iterations=1;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_CONSTANT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue=morphologyDefaultBorderValue();

    const char* keywords[] = { "src", "op", "kernel", "dst", "anchor", "iterations", "borderType", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOOO:morphologyEx", (char**)keywords, &pyobj_src, &pyobj_op, &pyobj_kernel, &pyobj_dst, &pyobj_anchor, &pyobj_iterations, &pyobj_borderType, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_op, op, ArgInfo("op", 0)) &&
        jsopencv_to_safe(info, pyobj_kernel, kernel, ArgInfo("kernel", 0)) &&
        jsopencv_to_safe(info, pyobj_anchor, anchor, ArgInfo("anchor", 0)) &&
        jsopencv_to_safe(info, pyobj_iterations, iterations, ArgInfo("iterations", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(cv::morphologyEx(src, dst, op, kernel, anchor, iterations, borderType, borderValue));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("morphologyEx");

    return NULL;
}

static Napi::Value pyopencv_cv_moveWindow(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_winname = NULL;
    String winname;
    Napi::Value* pyobj_x = NULL;
    int x=0;
    Napi::Value* pyobj_y = NULL;
    int y=0;

    const char* keywords[] = { "winname", "x", "y", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:moveWindow", (char**)keywords, &pyobj_winname, &pyobj_x, &pyobj_y) &&
        jsopencv_to_safe(info, pyobj_winname, winname, ArgInfo("winname", 0)) &&
        jsopencv_to_safe(info, pyobj_x, x, ArgInfo("x", 0)) &&
        jsopencv_to_safe(info, pyobj_y, y, ArgInfo("y", 0)))
    {
        ERRWRAP2(cv::moveWindow(winname, x, y));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_mulSpectrums(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_a = NULL;
    Mat a;
    Napi::Value* pyobj_b = NULL;
    Mat b;
    Napi::Value* pyobj_c = NULL;
    Mat c;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_conjB = NULL;
    bool conjB=false;

    const char* keywords[] = { "a", "b", "flags", "c", "conjB", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:mulSpectrums", (char**)keywords, &pyobj_a, &pyobj_b, &pyobj_flags, &pyobj_c, &pyobj_conjB) &&
        jsopencv_to_safe(info, pyobj_a, a, ArgInfo("a", 0)) &&
        jsopencv_to_safe(info, pyobj_b, b, ArgInfo("b", 0)) &&
        jsopencv_to_safe(info, pyobj_c, c, ArgInfo("c", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_conjB, conjB, ArgInfo("conjB", 0)))
    {
        ERRWRAP2(cv::mulSpectrums(a, b, c, flags, conjB));
        return jsopencv_from(c);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_a = NULL;
    UMat a;
    Napi::Value* pyobj_b = NULL;
    UMat b;
    Napi::Value* pyobj_c = NULL;
    UMat c;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_conjB = NULL;
    bool conjB=false;

    const char* keywords[] = { "a", "b", "flags", "c", "conjB", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:mulSpectrums", (char**)keywords, &pyobj_a, &pyobj_b, &pyobj_flags, &pyobj_c, &pyobj_conjB) &&
        jsopencv_to_safe(info, pyobj_a, a, ArgInfo("a", 0)) &&
        jsopencv_to_safe(info, pyobj_b, b, ArgInfo("b", 0)) &&
        jsopencv_to_safe(info, pyobj_c, c, ArgInfo("c", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_conjB, conjB, ArgInfo("conjB", 0)))
    {
        ERRWRAP2(cv::mulSpectrums(a, b, c, flags, conjB));
        return jsopencv_from(c);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("mulSpectrums");

    return NULL;
}

static Napi::Value pyopencv_cv_mulTransposed(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_aTa = NULL;
    bool aTa=0;
    Napi::Value* pyobj_delta = NULL;
    Mat delta;
    Napi::Value* pyobj_scale = NULL;
    double scale=1;
    Napi::Value* pyobj_dtype = NULL;
    int dtype=-1;

    const char* keywords[] = { "src", "aTa", "dst", "delta", "scale", "dtype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOO:mulTransposed", (char**)keywords, &pyobj_src, &pyobj_aTa, &pyobj_dst, &pyobj_delta, &pyobj_scale, &pyobj_dtype) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_aTa, aTa, ArgInfo("aTa", 0)) &&
        jsopencv_to_safe(info, pyobj_delta, delta, ArgInfo("delta", 0)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)) &&
        jsopencv_to_safe(info, pyobj_dtype, dtype, ArgInfo("dtype", 0)))
    {
        ERRWRAP2(cv::mulTransposed(src, dst, aTa, delta, scale, dtype));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_aTa = NULL;
    bool aTa=0;
    Napi::Value* pyobj_delta = NULL;
    UMat delta;
    Napi::Value* pyobj_scale = NULL;
    double scale=1;
    Napi::Value* pyobj_dtype = NULL;
    int dtype=-1;

    const char* keywords[] = { "src", "aTa", "dst", "delta", "scale", "dtype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOO:mulTransposed", (char**)keywords, &pyobj_src, &pyobj_aTa, &pyobj_dst, &pyobj_delta, &pyobj_scale, &pyobj_dtype) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_aTa, aTa, ArgInfo("aTa", 0)) &&
        jsopencv_to_safe(info, pyobj_delta, delta, ArgInfo("delta", 0)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)) &&
        jsopencv_to_safe(info, pyobj_dtype, dtype, ArgInfo("dtype", 0)))
    {
        ERRWRAP2(cv::mulTransposed(src, dst, aTa, delta, scale, dtype));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("mulTransposed");

    return NULL;
}

static Napi::Value pyopencv_cv_multiply(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    Mat src1;
    Napi::Value* pyobj_src2 = NULL;
    Mat src2;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_scale = NULL;
    double scale=1;
    Napi::Value* pyobj_dtype = NULL;
    int dtype=-1;

    const char* keywords[] = { "src1", "src2", "dst", "scale", "dtype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:multiply", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst, &pyobj_scale, &pyobj_dtype) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)) &&
        jsopencv_to_safe(info, pyobj_dtype, dtype, ArgInfo("dtype", 0)))
    {
        ERRWRAP2(cv::multiply(src1, src2, dst, scale, dtype));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    UMat src1;
    Napi::Value* pyobj_src2 = NULL;
    UMat src2;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_scale = NULL;
    double scale=1;
    Napi::Value* pyobj_dtype = NULL;
    int dtype=-1;

    const char* keywords[] = { "src1", "src2", "dst", "scale", "dtype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:multiply", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst, &pyobj_scale, &pyobj_dtype) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)) &&
        jsopencv_to_safe(info, pyobj_dtype, dtype, ArgInfo("dtype", 0)))
    {
        ERRWRAP2(cv::multiply(src1, src2, dst, scale, dtype));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("multiply");

    return NULL;
}

static Napi::Value pyopencv_cv_namedWindow(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_winname = NULL;
    String winname;
    Napi::Value* pyobj_flags = NULL;
    int flags=WINDOW_AUTOSIZE;

    const char* keywords[] = { "winname", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:namedWindow", (char**)keywords, &pyobj_winname, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_winname, winname, ArgInfo("winname", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::namedWindow(winname, flags));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_norm(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_src1 = NULL;
    Mat src1;
    Napi::Value* pyobj_normType = NULL;
    int normType=NORM_L2;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    double retval;

    const char* keywords[] = { "src1", "normType", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:norm", (char**)keywords, &pyobj_src1, &pyobj_normType, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_normType, normType, ArgInfo("normType", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(retval = cv::norm(src1, normType, mask));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    UMat src1;
    Napi::Value* pyobj_normType = NULL;
    int normType=NORM_L2;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    double retval;

    const char* keywords[] = { "src1", "normType", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:norm", (char**)keywords, &pyobj_src1, &pyobj_normType, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_normType, normType, ArgInfo("normType", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(retval = cv::norm(src1, normType, mask));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    Mat src1;
    Napi::Value* pyobj_src2 = NULL;
    Mat src2;
    Napi::Value* pyobj_normType = NULL;
    int normType=NORM_L2;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    double retval;

    const char* keywords[] = { "src1", "src2", "normType", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:norm", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_normType, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_normType, normType, ArgInfo("normType", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(retval = cv::norm(src1, src2, normType, mask));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    UMat src1;
    Napi::Value* pyobj_src2 = NULL;
    UMat src2;
    Napi::Value* pyobj_normType = NULL;
    int normType=NORM_L2;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    double retval;

    const char* keywords[] = { "src1", "src2", "normType", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:norm", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_normType, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_normType, normType, ArgInfo("normType", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(retval = cv::norm(src1, src2, normType, mask));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("norm");

    return NULL;
}

static Napi::Value pyopencv_cv_normalize(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=1;
    Napi::Value* pyobj_beta = NULL;
    double beta=0;
    Napi::Value* pyobj_norm_type = NULL;
    int norm_type=NORM_L2;
    Napi::Value* pyobj_dtype = NULL;
    int dtype=-1;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;

    const char* keywords[] = { "src", "dst", "alpha", "beta", "norm_type", "dtype", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOOO:normalize", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_alpha, &pyobj_beta, &pyobj_norm_type, &pyobj_dtype, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_beta, beta, ArgInfo("beta", 0)) &&
        jsopencv_to_safe(info, pyobj_norm_type, norm_type, ArgInfo("norm_type", 0)) &&
        jsopencv_to_safe(info, pyobj_dtype, dtype, ArgInfo("dtype", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::normalize(src, dst, alpha, beta, norm_type, dtype, mask));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=1;
    Napi::Value* pyobj_beta = NULL;
    double beta=0;
    Napi::Value* pyobj_norm_type = NULL;
    int norm_type=NORM_L2;
    Napi::Value* pyobj_dtype = NULL;
    int dtype=-1;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;

    const char* keywords[] = { "src", "dst", "alpha", "beta", "norm_type", "dtype", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOOO:normalize", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_alpha, &pyobj_beta, &pyobj_norm_type, &pyobj_dtype, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_beta, beta, ArgInfo("beta", 0)) &&
        jsopencv_to_safe(info, pyobj_norm_type, norm_type, ArgInfo("norm_type", 0)) &&
        jsopencv_to_safe(info, pyobj_dtype, dtype, ArgInfo("dtype", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::normalize(src, dst, alpha, beta, norm_type, dtype, mask));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("normalize");

    return NULL;
}

static Napi::Value pyopencv_cv_patchNaNs(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_a = NULL;
    Mat a;
    Napi::Value* pyobj_val = NULL;
    double val=0;

    const char* keywords[] = { "a", "val", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:patchNaNs", (char**)keywords, &pyobj_a, &pyobj_val) &&
        jsopencv_to_safe(info, pyobj_a, a, ArgInfo("a", 1)) &&
        jsopencv_to_safe(info, pyobj_val, val, ArgInfo("val", 0)))
    {
        ERRWRAP2(cv::patchNaNs(a, val));
        return jsopencv_from(a);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_a = NULL;
    UMat a;
    Napi::Value* pyobj_val = NULL;
    double val=0;

    const char* keywords[] = { "a", "val", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:patchNaNs", (char**)keywords, &pyobj_a, &pyobj_val) &&
        jsopencv_to_safe(info, pyobj_a, a, ArgInfo("a", 1)) &&
        jsopencv_to_safe(info, pyobj_val, val, ArgInfo("val", 0)))
    {
        ERRWRAP2(cv::patchNaNs(a, val));
        return jsopencv_from(a);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("patchNaNs");

    return NULL;
}

static Napi::Value pyopencv_cv_pencilSketch(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst1 = NULL;
    Mat dst1;
    Napi::Value* pyobj_dst2 = NULL;
    Mat dst2;
    Napi::Value* pyobj_sigma_s = NULL;
    float sigma_s=60;
    Napi::Value* pyobj_sigma_r = NULL;
    float sigma_r=0.07f;
    Napi::Value* pyobj_shade_factor = NULL;
    float shade_factor=0.02f;

    const char* keywords[] = { "src", "dst1", "dst2", "sigma_s", "sigma_r", "shade_factor", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOO:pencilSketch", (char**)keywords, &pyobj_src, &pyobj_dst1, &pyobj_dst2, &pyobj_sigma_s, &pyobj_sigma_r, &pyobj_shade_factor) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst1, dst1, ArgInfo("dst1", 1)) &&
        jsopencv_to_safe(info, pyobj_dst2, dst2, ArgInfo("dst2", 1)) &&
        jsopencv_to_safe(info, pyobj_sigma_s, sigma_s, ArgInfo("sigma_s", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_r, sigma_r, ArgInfo("sigma_r", 0)) &&
        jsopencv_to_safe(info, pyobj_shade_factor, shade_factor, ArgInfo("shade_factor", 0)))
    {
        ERRWRAP2(cv::pencilSketch(src, dst1, dst2, sigma_s, sigma_r, shade_factor));
        return Py_BuildValue("(NN)", jsopencv_from(dst1), jsopencv_from(dst2));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst1 = NULL;
    UMat dst1;
    Napi::Value* pyobj_dst2 = NULL;
    UMat dst2;
    Napi::Value* pyobj_sigma_s = NULL;
    float sigma_s=60;
    Napi::Value* pyobj_sigma_r = NULL;
    float sigma_r=0.07f;
    Napi::Value* pyobj_shade_factor = NULL;
    float shade_factor=0.02f;

    const char* keywords[] = { "src", "dst1", "dst2", "sigma_s", "sigma_r", "shade_factor", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOO:pencilSketch", (char**)keywords, &pyobj_src, &pyobj_dst1, &pyobj_dst2, &pyobj_sigma_s, &pyobj_sigma_r, &pyobj_shade_factor) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst1, dst1, ArgInfo("dst1", 1)) &&
        jsopencv_to_safe(info, pyobj_dst2, dst2, ArgInfo("dst2", 1)) &&
        jsopencv_to_safe(info, pyobj_sigma_s, sigma_s, ArgInfo("sigma_s", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_r, sigma_r, ArgInfo("sigma_r", 0)) &&
        jsopencv_to_safe(info, pyobj_shade_factor, shade_factor, ArgInfo("shade_factor", 0)))
    {
        ERRWRAP2(cv::pencilSketch(src, dst1, dst2, sigma_s, sigma_r, shade_factor));
        return Py_BuildValue("(NN)", jsopencv_from(dst1), jsopencv_from(dst2));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("pencilSketch");

    return NULL;
}

static Napi::Value pyopencv_cv_perspectiveTransform(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_m = NULL;
    Mat m;

    const char* keywords[] = { "src", "m", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:perspectiveTransform", (char**)keywords, &pyobj_src, &pyobj_m, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_m, m, ArgInfo("m", 0)))
    {
        ERRWRAP2(cv::perspectiveTransform(src, dst, m));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_m = NULL;
    UMat m;

    const char* keywords[] = { "src", "m", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:perspectiveTransform", (char**)keywords, &pyobj_src, &pyobj_m, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_m, m, ArgInfo("m", 0)))
    {
        ERRWRAP2(cv::perspectiveTransform(src, dst, m));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("perspectiveTransform");

    return NULL;
}

static Napi::Value pyopencv_cv_phase(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_x = NULL;
    Mat x;
    Napi::Value* pyobj_y = NULL;
    Mat y;
    Napi::Value* pyobj_angle = NULL;
    Mat angle;
    Napi::Value* pyobj_angleInDegrees = NULL;
    bool angleInDegrees=false;

    const char* keywords[] = { "x", "y", "angle", "angleInDegrees", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:phase", (char**)keywords, &pyobj_x, &pyobj_y, &pyobj_angle, &pyobj_angleInDegrees) &&
        jsopencv_to_safe(info, pyobj_x, x, ArgInfo("x", 0)) &&
        jsopencv_to_safe(info, pyobj_y, y, ArgInfo("y", 0)) &&
        jsopencv_to_safe(info, pyobj_angle, angle, ArgInfo("angle", 1)) &&
        jsopencv_to_safe(info, pyobj_angleInDegrees, angleInDegrees, ArgInfo("angleInDegrees", 0)))
    {
        ERRWRAP2(cv::phase(x, y, angle, angleInDegrees));
        return jsopencv_from(angle);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_x = NULL;
    UMat x;
    Napi::Value* pyobj_y = NULL;
    UMat y;
    Napi::Value* pyobj_angle = NULL;
    UMat angle;
    Napi::Value* pyobj_angleInDegrees = NULL;
    bool angleInDegrees=false;

    const char* keywords[] = { "x", "y", "angle", "angleInDegrees", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:phase", (char**)keywords, &pyobj_x, &pyobj_y, &pyobj_angle, &pyobj_angleInDegrees) &&
        jsopencv_to_safe(info, pyobj_x, x, ArgInfo("x", 0)) &&
        jsopencv_to_safe(info, pyobj_y, y, ArgInfo("y", 0)) &&
        jsopencv_to_safe(info, pyobj_angle, angle, ArgInfo("angle", 1)) &&
        jsopencv_to_safe(info, pyobj_angleInDegrees, angleInDegrees, ArgInfo("angleInDegrees", 0)))
    {
        ERRWRAP2(cv::phase(x, y, angle, angleInDegrees));
        return jsopencv_from(angle);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("phase");

    return NULL;
}

static Napi::Value pyopencv_cv_phaseCorrelate(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    Mat src1;
    Napi::Value* pyobj_src2 = NULL;
    Mat src2;
    Napi::Value* pyobj_window = NULL;
    Mat window;
    double response;
    Point2d retval;

    const char* keywords[] = { "src1", "src2", "window", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:phaseCorrelate", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_window) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_window, window, ArgInfo("window", 0)))
    {
        ERRWRAP2(retval = cv::phaseCorrelate(src1, src2, window, &response));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(response));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    UMat src1;
    Napi::Value* pyobj_src2 = NULL;
    UMat src2;
    Napi::Value* pyobj_window = NULL;
    UMat window;
    double response;
    Point2d retval;

    const char* keywords[] = { "src1", "src2", "window", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:phaseCorrelate", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_window) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_window, window, ArgInfo("window", 0)))
    {
        ERRWRAP2(retval = cv::phaseCorrelate(src1, src2, window, &response));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(response));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("phaseCorrelate");

    return NULL;
}

static Napi::Value pyopencv_cv_pointPolygonTest(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_contour = NULL;
    Mat contour;
    Napi::Value* pyobj_pt = NULL;
    Point2f pt;
    Napi::Value* pyobj_measureDist = NULL;
    bool measureDist=0;
    double retval;

    const char* keywords[] = { "contour", "pt", "measureDist", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:pointPolygonTest", (char**)keywords, &pyobj_contour, &pyobj_pt, &pyobj_measureDist) &&
        jsopencv_to_safe(info, pyobj_contour, contour, ArgInfo("contour", 0)) &&
        jsopencv_to_safe(info, pyobj_pt, pt, ArgInfo("pt", 0)) &&
        jsopencv_to_safe(info, pyobj_measureDist, measureDist, ArgInfo("measureDist", 0)))
    {
        ERRWRAP2(retval = cv::pointPolygonTest(contour, pt, measureDist));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_contour = NULL;
    UMat contour;
    Napi::Value* pyobj_pt = NULL;
    Point2f pt;
    Napi::Value* pyobj_measureDist = NULL;
    bool measureDist=0;
    double retval;

    const char* keywords[] = { "contour", "pt", "measureDist", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:pointPolygonTest", (char**)keywords, &pyobj_contour, &pyobj_pt, &pyobj_measureDist) &&
        jsopencv_to_safe(info, pyobj_contour, contour, ArgInfo("contour", 0)) &&
        jsopencv_to_safe(info, pyobj_pt, pt, ArgInfo("pt", 0)) &&
        jsopencv_to_safe(info, pyobj_measureDist, measureDist, ArgInfo("measureDist", 0)))
    {
        ERRWRAP2(retval = cv::pointPolygonTest(contour, pt, measureDist));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("pointPolygonTest");

    return NULL;
}

static Napi::Value pyopencv_cv_polarToCart(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_magnitude = NULL;
    Mat magnitude;
    Napi::Value* pyobj_angle = NULL;
    Mat angle;
    Napi::Value* pyobj_x = NULL;
    Mat x;
    Napi::Value* pyobj_y = NULL;
    Mat y;
    Napi::Value* pyobj_angleInDegrees = NULL;
    bool angleInDegrees=false;

    const char* keywords[] = { "magnitude", "angle", "x", "y", "angleInDegrees", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:polarToCart", (char**)keywords, &pyobj_magnitude, &pyobj_angle, &pyobj_x, &pyobj_y, &pyobj_angleInDegrees) &&
        jsopencv_to_safe(info, pyobj_magnitude, magnitude, ArgInfo("magnitude", 0)) &&
        jsopencv_to_safe(info, pyobj_angle, angle, ArgInfo("angle", 0)) &&
        jsopencv_to_safe(info, pyobj_x, x, ArgInfo("x", 1)) &&
        jsopencv_to_safe(info, pyobj_y, y, ArgInfo("y", 1)) &&
        jsopencv_to_safe(info, pyobj_angleInDegrees, angleInDegrees, ArgInfo("angleInDegrees", 0)))
    {
        ERRWRAP2(cv::polarToCart(magnitude, angle, x, y, angleInDegrees));
        return Py_BuildValue("(NN)", jsopencv_from(x), jsopencv_from(y));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_magnitude = NULL;
    UMat magnitude;
    Napi::Value* pyobj_angle = NULL;
    UMat angle;
    Napi::Value* pyobj_x = NULL;
    UMat x;
    Napi::Value* pyobj_y = NULL;
    UMat y;
    Napi::Value* pyobj_angleInDegrees = NULL;
    bool angleInDegrees=false;

    const char* keywords[] = { "magnitude", "angle", "x", "y", "angleInDegrees", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:polarToCart", (char**)keywords, &pyobj_magnitude, &pyobj_angle, &pyobj_x, &pyobj_y, &pyobj_angleInDegrees) &&
        jsopencv_to_safe(info, pyobj_magnitude, magnitude, ArgInfo("magnitude", 0)) &&
        jsopencv_to_safe(info, pyobj_angle, angle, ArgInfo("angle", 0)) &&
        jsopencv_to_safe(info, pyobj_x, x, ArgInfo("x", 1)) &&
        jsopencv_to_safe(info, pyobj_y, y, ArgInfo("y", 1)) &&
        jsopencv_to_safe(info, pyobj_angleInDegrees, angleInDegrees, ArgInfo("angleInDegrees", 0)))
    {
        ERRWRAP2(cv::polarToCart(magnitude, angle, x, y, angleInDegrees));
        return Py_BuildValue("(NN)", jsopencv_from(x), jsopencv_from(y));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("polarToCart");

    return NULL;
}

static Napi::Value pyopencv_cv_pollKey(const Napi::CallbackInfo &info)
{
    using namespace cv;

    int retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::pollKey());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_polylines(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_pts = NULL;
    vector_Mat pts;
    Napi::Value* pyobj_isClosed = NULL;
    bool isClosed=0;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=1;
    Napi::Value* pyobj_lineType = NULL;
    int lineType=LINE_8;
    Napi::Value* pyobj_shift = NULL;
    int shift=0;

    const char* keywords[] = { "img", "pts", "isClosed", "color", "thickness", "lineType", "shift", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:polylines", (char**)keywords, &pyobj_img, &pyobj_pts, &pyobj_isClosed, &pyobj_color, &pyobj_thickness, &pyobj_lineType, &pyobj_shift) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_pts, pts, ArgInfo("pts", 0)) &&
        jsopencv_to_safe(info, pyobj_isClosed, isClosed, ArgInfo("isClosed", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)) &&
        jsopencv_to_safe(info, pyobj_lineType, lineType, ArgInfo("lineType", 0)) &&
        jsopencv_to_safe(info, pyobj_shift, shift, ArgInfo("shift", 0)))
    {
        ERRWRAP2(cv::polylines(img, pts, isClosed, color, thickness, lineType, shift));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_pts = NULL;
    vector_UMat pts;
    Napi::Value* pyobj_isClosed = NULL;
    bool isClosed=0;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=1;
    Napi::Value* pyobj_lineType = NULL;
    int lineType=LINE_8;
    Napi::Value* pyobj_shift = NULL;
    int shift=0;

    const char* keywords[] = { "img", "pts", "isClosed", "color", "thickness", "lineType", "shift", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:polylines", (char**)keywords, &pyobj_img, &pyobj_pts, &pyobj_isClosed, &pyobj_color, &pyobj_thickness, &pyobj_lineType, &pyobj_shift) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_pts, pts, ArgInfo("pts", 0)) &&
        jsopencv_to_safe(info, pyobj_isClosed, isClosed, ArgInfo("isClosed", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)) &&
        jsopencv_to_safe(info, pyobj_lineType, lineType, ArgInfo("lineType", 0)) &&
        jsopencv_to_safe(info, pyobj_shift, shift, ArgInfo("shift", 0)))
    {
        ERRWRAP2(cv::polylines(img, pts, isClosed, color, thickness, lineType, shift));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("polylines");

    return NULL;
}

static Napi::Value pyopencv_cv_pow(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_power = NULL;
    double power=0;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;

    const char* keywords[] = { "src", "power", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:pow", (char**)keywords, &pyobj_src, &pyobj_power, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_power, power, ArgInfo("power", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::pow(src, power, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_power = NULL;
    double power=0;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;

    const char* keywords[] = { "src", "power", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:pow", (char**)keywords, &pyobj_src, &pyobj_power, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_power, power, ArgInfo("power", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::pow(src, power, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("pow");

    return NULL;
}

static Napi::Value pyopencv_cv_preCornerDetect(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_ksize = NULL;
    int ksize=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "ksize", "dst", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:preCornerDetect", (char**)keywords, &pyobj_src, &pyobj_ksize, &pyobj_dst, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::preCornerDetect(src, dst, ksize, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_ksize = NULL;
    int ksize=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "ksize", "dst", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:preCornerDetect", (char**)keywords, &pyobj_src, &pyobj_ksize, &pyobj_dst, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::preCornerDetect(src, dst, ksize, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("preCornerDetect");

    return NULL;
}

static Napi::Value pyopencv_cv_projectPoints(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_objectPoints = NULL;
    Mat objectPoints;
    Napi::Value* pyobj_rvec = NULL;
    Mat rvec;
    Napi::Value* pyobj_tvec = NULL;
    Mat tvec;
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    Mat distCoeffs;
    Napi::Value* pyobj_imagePoints = NULL;
    Mat imagePoints;
    Napi::Value* pyobj_jacobian = NULL;
    Mat jacobian;
    Napi::Value* pyobj_aspectRatio = NULL;
    double aspectRatio=0;

    const char* keywords[] = { "objectPoints", "rvec", "tvec", "cameraMatrix", "distCoeffs", "imagePoints", "jacobian", "aspectRatio", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OOO:projectPoints", (char**)keywords, &pyobj_objectPoints, &pyobj_rvec, &pyobj_tvec, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_imagePoints, &pyobj_jacobian, &pyobj_aspectRatio) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_rvec, rvec, ArgInfo("rvec", 0)) &&
        jsopencv_to_safe(info, pyobj_tvec, tvec, ArgInfo("tvec", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 1)) &&
        jsopencv_to_safe(info, pyobj_jacobian, jacobian, ArgInfo("jacobian", 1)) &&
        jsopencv_to_safe(info, pyobj_aspectRatio, aspectRatio, ArgInfo("aspectRatio", 0)))
    {
        ERRWRAP2(cv::projectPoints(objectPoints, rvec, tvec, cameraMatrix, distCoeffs, imagePoints, jacobian, aspectRatio));
        return Py_BuildValue("(NN)", jsopencv_from(imagePoints), jsopencv_from(jacobian));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_objectPoints = NULL;
    UMat objectPoints;
    Napi::Value* pyobj_rvec = NULL;
    UMat rvec;
    Napi::Value* pyobj_tvec = NULL;
    UMat tvec;
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    UMat distCoeffs;
    Napi::Value* pyobj_imagePoints = NULL;
    UMat imagePoints;
    Napi::Value* pyobj_jacobian = NULL;
    UMat jacobian;
    Napi::Value* pyobj_aspectRatio = NULL;
    double aspectRatio=0;

    const char* keywords[] = { "objectPoints", "rvec", "tvec", "cameraMatrix", "distCoeffs", "imagePoints", "jacobian", "aspectRatio", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OOO:projectPoints", (char**)keywords, &pyobj_objectPoints, &pyobj_rvec, &pyobj_tvec, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_imagePoints, &pyobj_jacobian, &pyobj_aspectRatio) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_rvec, rvec, ArgInfo("rvec", 0)) &&
        jsopencv_to_safe(info, pyobj_tvec, tvec, ArgInfo("tvec", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 1)) &&
        jsopencv_to_safe(info, pyobj_jacobian, jacobian, ArgInfo("jacobian", 1)) &&
        jsopencv_to_safe(info, pyobj_aspectRatio, aspectRatio, ArgInfo("aspectRatio", 0)))
    {
        ERRWRAP2(cv::projectPoints(objectPoints, rvec, tvec, cameraMatrix, distCoeffs, imagePoints, jacobian, aspectRatio));
        return Py_BuildValue("(NN)", jsopencv_from(imagePoints), jsopencv_from(jacobian));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("projectPoints");

    return NULL;
}

static Napi::Value pyopencv_cv_putText(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_text = NULL;
    String text;
    Napi::Value* pyobj_org = NULL;
    Point org;
    Napi::Value* pyobj_fontFace = NULL;
    int fontFace=0;
    Napi::Value* pyobj_fontScale = NULL;
    double fontScale=0;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=1;
    Napi::Value* pyobj_lineType = NULL;
    int lineType=LINE_8;
    Napi::Value* pyobj_bottomLeftOrigin = NULL;
    bool bottomLeftOrigin=false;

    const char* keywords[] = { "img", "text", "org", "fontFace", "fontScale", "color", "thickness", "lineType", "bottomLeftOrigin", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OOO:putText", (char**)keywords, &pyobj_img, &pyobj_text, &pyobj_org, &pyobj_fontFace, &pyobj_fontScale, &pyobj_color, &pyobj_thickness, &pyobj_lineType, &pyobj_bottomLeftOrigin) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_text, text, ArgInfo("text", 0)) &&
        jsopencv_to_safe(info, pyobj_org, org, ArgInfo("org", 0)) &&
        jsopencv_to_safe(info, pyobj_fontFace, fontFace, ArgInfo("fontFace", 0)) &&
        jsopencv_to_safe(info, pyobj_fontScale, fontScale, ArgInfo("fontScale", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)) &&
        jsopencv_to_safe(info, pyobj_lineType, lineType, ArgInfo("lineType", 0)) &&
        jsopencv_to_safe(info, pyobj_bottomLeftOrigin, bottomLeftOrigin, ArgInfo("bottomLeftOrigin", 0)))
    {
        ERRWRAP2(cv::putText(img, text, org, fontFace, fontScale, color, thickness, lineType, bottomLeftOrigin));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_text = NULL;
    String text;
    Napi::Value* pyobj_org = NULL;
    Point org;
    Napi::Value* pyobj_fontFace = NULL;
    int fontFace=0;
    Napi::Value* pyobj_fontScale = NULL;
    double fontScale=0;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=1;
    Napi::Value* pyobj_lineType = NULL;
    int lineType=LINE_8;
    Napi::Value* pyobj_bottomLeftOrigin = NULL;
    bool bottomLeftOrigin=false;

    const char* keywords[] = { "img", "text", "org", "fontFace", "fontScale", "color", "thickness", "lineType", "bottomLeftOrigin", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OOO:putText", (char**)keywords, &pyobj_img, &pyobj_text, &pyobj_org, &pyobj_fontFace, &pyobj_fontScale, &pyobj_color, &pyobj_thickness, &pyobj_lineType, &pyobj_bottomLeftOrigin) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_text, text, ArgInfo("text", 0)) &&
        jsopencv_to_safe(info, pyobj_org, org, ArgInfo("org", 0)) &&
        jsopencv_to_safe(info, pyobj_fontFace, fontFace, ArgInfo("fontFace", 0)) &&
        jsopencv_to_safe(info, pyobj_fontScale, fontScale, ArgInfo("fontScale", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)) &&
        jsopencv_to_safe(info, pyobj_lineType, lineType, ArgInfo("lineType", 0)) &&
        jsopencv_to_safe(info, pyobj_bottomLeftOrigin, bottomLeftOrigin, ArgInfo("bottomLeftOrigin", 0)))
    {
        ERRWRAP2(cv::putText(img, text, org, fontFace, fontScale, color, thickness, lineType, bottomLeftOrigin));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("putText");

    return NULL;
}

static Napi::Value pyopencv_cv_pyrDown(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_dstsize = NULL;
    Size dstsize;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "dst", "dstsize", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:pyrDown", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_dstsize, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_dstsize, dstsize, ArgInfo("dstsize", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::pyrDown(src, dst, dstsize, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_dstsize = NULL;
    Size dstsize;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "dst", "dstsize", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:pyrDown", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_dstsize, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_dstsize, dstsize, ArgInfo("dstsize", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::pyrDown(src, dst, dstsize, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("pyrDown");

    return NULL;
}

static Napi::Value pyopencv_cv_pyrMeanShiftFiltering(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_sp = NULL;
    double sp=0;
    Napi::Value* pyobj_sr = NULL;
    double sr=0;
    Napi::Value* pyobj_maxLevel = NULL;
    int maxLevel=1;
    Napi::Value* pyobj_termcrit = NULL;
    TermCriteria termcrit=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS,5,1);

    const char* keywords[] = { "src", "sp", "sr", "dst", "maxLevel", "termcrit", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:pyrMeanShiftFiltering", (char**)keywords, &pyobj_src, &pyobj_sp, &pyobj_sr, &pyobj_dst, &pyobj_maxLevel, &pyobj_termcrit) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_sp, sp, ArgInfo("sp", 0)) &&
        jsopencv_to_safe(info, pyobj_sr, sr, ArgInfo("sr", 0)) &&
        jsopencv_to_safe(info, pyobj_maxLevel, maxLevel, ArgInfo("maxLevel", 0)) &&
        jsopencv_to_safe(info, pyobj_termcrit, termcrit, ArgInfo("termcrit", 0)))
    {
        ERRWRAP2(cv::pyrMeanShiftFiltering(src, dst, sp, sr, maxLevel, termcrit));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_sp = NULL;
    double sp=0;
    Napi::Value* pyobj_sr = NULL;
    double sr=0;
    Napi::Value* pyobj_maxLevel = NULL;
    int maxLevel=1;
    Napi::Value* pyobj_termcrit = NULL;
    TermCriteria termcrit=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS,5,1);

    const char* keywords[] = { "src", "sp", "sr", "dst", "maxLevel", "termcrit", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:pyrMeanShiftFiltering", (char**)keywords, &pyobj_src, &pyobj_sp, &pyobj_sr, &pyobj_dst, &pyobj_maxLevel, &pyobj_termcrit) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_sp, sp, ArgInfo("sp", 0)) &&
        jsopencv_to_safe(info, pyobj_sr, sr, ArgInfo("sr", 0)) &&
        jsopencv_to_safe(info, pyobj_maxLevel, maxLevel, ArgInfo("maxLevel", 0)) &&
        jsopencv_to_safe(info, pyobj_termcrit, termcrit, ArgInfo("termcrit", 0)))
    {
        ERRWRAP2(cv::pyrMeanShiftFiltering(src, dst, sp, sr, maxLevel, termcrit));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("pyrMeanShiftFiltering");

    return NULL;
}

static Napi::Value pyopencv_cv_pyrUp(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_dstsize = NULL;
    Size dstsize;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "dst", "dstsize", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:pyrUp", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_dstsize, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_dstsize, dstsize, ArgInfo("dstsize", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::pyrUp(src, dst, dstsize, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_dstsize = NULL;
    Size dstsize;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "dst", "dstsize", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:pyrUp", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_dstsize, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_dstsize, dstsize, ArgInfo("dstsize", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::pyrUp(src, dst, dstsize, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("pyrUp");

    return NULL;
}

static Napi::Value pyopencv_cv_randShuffle(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_iterFactor = NULL;
    double iterFactor=1.;

    const char* keywords[] = { "dst", "iterFactor", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:randShuffle", (char**)keywords, &pyobj_dst, &pyobj_iterFactor) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_iterFactor, iterFactor, ArgInfo("iterFactor", 0)))
    {
        ERRWRAP2(cv::randShuffle(dst, iterFactor, 0));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_iterFactor = NULL;
    double iterFactor=1.;

    const char* keywords[] = { "dst", "iterFactor", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:randShuffle", (char**)keywords, &pyobj_dst, &pyobj_iterFactor) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_iterFactor, iterFactor, ArgInfo("iterFactor", 0)))
    {
        ERRWRAP2(cv::randShuffle(dst, iterFactor, 0));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("randShuffle");

    return NULL;
}

static Napi::Value pyopencv_cv_randn(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_mean = NULL;
    Mat mean;
    Napi::Value* pyobj_stddev = NULL;
    Mat stddev;

    const char* keywords[] = { "dst", "mean", "stddev", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:randn", (char**)keywords, &pyobj_dst, &pyobj_mean, &pyobj_stddev) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_mean, mean, ArgInfo("mean", 0)) &&
        jsopencv_to_safe(info, pyobj_stddev, stddev, ArgInfo("stddev", 0)))
    {
        ERRWRAP2(cv::randn(dst, mean, stddev));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_mean = NULL;
    UMat mean;
    Napi::Value* pyobj_stddev = NULL;
    UMat stddev;

    const char* keywords[] = { "dst", "mean", "stddev", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:randn", (char**)keywords, &pyobj_dst, &pyobj_mean, &pyobj_stddev) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_mean, mean, ArgInfo("mean", 0)) &&
        jsopencv_to_safe(info, pyobj_stddev, stddev, ArgInfo("stddev", 0)))
    {
        ERRWRAP2(cv::randn(dst, mean, stddev));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("randn");

    return NULL;
}

static Napi::Value pyopencv_cv_randu(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_low = NULL;
    Mat low;
    Napi::Value* pyobj_high = NULL;
    Mat high;

    const char* keywords[] = { "dst", "low", "high", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:randu", (char**)keywords, &pyobj_dst, &pyobj_low, &pyobj_high) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_low, low, ArgInfo("low", 0)) &&
        jsopencv_to_safe(info, pyobj_high, high, ArgInfo("high", 0)))
    {
        ERRWRAP2(cv::randu(dst, low, high));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_low = NULL;
    UMat low;
    Napi::Value* pyobj_high = NULL;
    UMat high;

    const char* keywords[] = { "dst", "low", "high", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:randu", (char**)keywords, &pyobj_dst, &pyobj_low, &pyobj_high) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_low, low, ArgInfo("low", 0)) &&
        jsopencv_to_safe(info, pyobj_high, high, ArgInfo("high", 0)))
    {
        ERRWRAP2(cv::randu(dst, low, high));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("randu");

    return NULL;
}

static Napi::Value pyopencv_cv_readOpticalFlow(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_path = NULL;
    String path;
    Mat retval;

    const char* keywords[] = { "path", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:readOpticalFlow", (char**)keywords, &pyobj_path) &&
        jsopencv_to_safe(info, pyobj_path, path, ArgInfo("path", 0)))
    {
        ERRWRAP2(retval = cv::readOpticalFlow(path));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_recoverPose(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(8);

    {
    Napi::Value* pyobj_points1 = NULL;
    Mat points1;
    Napi::Value* pyobj_points2 = NULL;
    Mat points2;
    Napi::Value* pyobj_cameraMatrix1 = NULL;
    Mat cameraMatrix1;
    Napi::Value* pyobj_distCoeffs1 = NULL;
    Mat distCoeffs1;
    Napi::Value* pyobj_cameraMatrix2 = NULL;
    Mat cameraMatrix2;
    Napi::Value* pyobj_distCoeffs2 = NULL;
    Mat distCoeffs2;
    Napi::Value* pyobj_E = NULL;
    Mat E;
    Napi::Value* pyobj_R = NULL;
    Mat R;
    Napi::Value* pyobj_t = NULL;
    Mat t;
    Napi::Value* pyobj_method = NULL;
    int method=cv::RANSAC;
    Napi::Value* pyobj_prob = NULL;
    double prob=0.999;
    Napi::Value* pyobj_threshold = NULL;
    double threshold=1.0;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    int retval;

    const char* keywords[] = { "points1", "points2", "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "E", "R", "t", "method", "prob", "threshold", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OOOOOOO:recoverPose", (char**)keywords, &pyobj_points1, &pyobj_points2, &pyobj_cameraMatrix1, &pyobj_distCoeffs1, &pyobj_cameraMatrix2, &pyobj_distCoeffs2, &pyobj_E, &pyobj_R, &pyobj_t, &pyobj_method, &pyobj_prob, &pyobj_threshold, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix1, cameraMatrix1, ArgInfo("cameraMatrix1", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs1, distCoeffs1, ArgInfo("distCoeffs1", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix2, cameraMatrix2, ArgInfo("cameraMatrix2", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs2, distCoeffs2, ArgInfo("distCoeffs2", 0)) &&
        jsopencv_to_safe(info, pyobj_E, E, ArgInfo("E", 1)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 1)) &&
        jsopencv_to_safe(info, pyobj_t, t, ArgInfo("t", 1)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_prob, prob, ArgInfo("prob", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)))
    {
        ERRWRAP2(retval = cv::recoverPose(points1, points2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, E, R, t, method, prob, threshold, mask));
        return Py_BuildValue("(NNNNN)", jsopencv_from(retval), jsopencv_from(E), jsopencv_from(R), jsopencv_from(t), jsopencv_from(mask));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_points1 = NULL;
    UMat points1;
    Napi::Value* pyobj_points2 = NULL;
    UMat points2;
    Napi::Value* pyobj_cameraMatrix1 = NULL;
    UMat cameraMatrix1;
    Napi::Value* pyobj_distCoeffs1 = NULL;
    UMat distCoeffs1;
    Napi::Value* pyobj_cameraMatrix2 = NULL;
    UMat cameraMatrix2;
    Napi::Value* pyobj_distCoeffs2 = NULL;
    UMat distCoeffs2;
    Napi::Value* pyobj_E = NULL;
    UMat E;
    Napi::Value* pyobj_R = NULL;
    UMat R;
    Napi::Value* pyobj_t = NULL;
    UMat t;
    Napi::Value* pyobj_method = NULL;
    int method=cv::RANSAC;
    Napi::Value* pyobj_prob = NULL;
    double prob=0.999;
    Napi::Value* pyobj_threshold = NULL;
    double threshold=1.0;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    int retval;

    const char* keywords[] = { "points1", "points2", "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "E", "R", "t", "method", "prob", "threshold", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OOOOOOO:recoverPose", (char**)keywords, &pyobj_points1, &pyobj_points2, &pyobj_cameraMatrix1, &pyobj_distCoeffs1, &pyobj_cameraMatrix2, &pyobj_distCoeffs2, &pyobj_E, &pyobj_R, &pyobj_t, &pyobj_method, &pyobj_prob, &pyobj_threshold, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix1, cameraMatrix1, ArgInfo("cameraMatrix1", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs1, distCoeffs1, ArgInfo("distCoeffs1", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix2, cameraMatrix2, ArgInfo("cameraMatrix2", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs2, distCoeffs2, ArgInfo("distCoeffs2", 0)) &&
        jsopencv_to_safe(info, pyobj_E, E, ArgInfo("E", 1)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 1)) &&
        jsopencv_to_safe(info, pyobj_t, t, ArgInfo("t", 1)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_prob, prob, ArgInfo("prob", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)))
    {
        ERRWRAP2(retval = cv::recoverPose(points1, points2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, E, R, t, method, prob, threshold, mask));
        return Py_BuildValue("(NNNNN)", jsopencv_from(retval), jsopencv_from(E), jsopencv_from(R), jsopencv_from(t), jsopencv_from(mask));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_E = NULL;
    Mat E;
    Napi::Value* pyobj_points1 = NULL;
    Mat points1;
    Napi::Value* pyobj_points2 = NULL;
    Mat points2;
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_R = NULL;
    Mat R;
    Napi::Value* pyobj_t = NULL;
    Mat t;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    int retval;

    const char* keywords[] = { "E", "points1", "points2", "cameraMatrix", "R", "t", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:recoverPose", (char**)keywords, &pyobj_E, &pyobj_points1, &pyobj_points2, &pyobj_cameraMatrix, &pyobj_R, &pyobj_t, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_E, E, ArgInfo("E", 0)) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 1)) &&
        jsopencv_to_safe(info, pyobj_t, t, ArgInfo("t", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)))
    {
        ERRWRAP2(retval = cv::recoverPose(E, points1, points2, cameraMatrix, R, t, mask));
        return Py_BuildValue("(NNNN)", jsopencv_from(retval), jsopencv_from(R), jsopencv_from(t), jsopencv_from(mask));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_E = NULL;
    UMat E;
    Napi::Value* pyobj_points1 = NULL;
    UMat points1;
    Napi::Value* pyobj_points2 = NULL;
    UMat points2;
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_R = NULL;
    UMat R;
    Napi::Value* pyobj_t = NULL;
    UMat t;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    int retval;

    const char* keywords[] = { "E", "points1", "points2", "cameraMatrix", "R", "t", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:recoverPose", (char**)keywords, &pyobj_E, &pyobj_points1, &pyobj_points2, &pyobj_cameraMatrix, &pyobj_R, &pyobj_t, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_E, E, ArgInfo("E", 0)) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 1)) &&
        jsopencv_to_safe(info, pyobj_t, t, ArgInfo("t", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)))
    {
        ERRWRAP2(retval = cv::recoverPose(E, points1, points2, cameraMatrix, R, t, mask));
        return Py_BuildValue("(NNNN)", jsopencv_from(retval), jsopencv_from(R), jsopencv_from(t), jsopencv_from(mask));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_E = NULL;
    Mat E;
    Napi::Value* pyobj_points1 = NULL;
    Mat points1;
    Napi::Value* pyobj_points2 = NULL;
    Mat points2;
    Napi::Value* pyobj_R = NULL;
    Mat R;
    Napi::Value* pyobj_t = NULL;
    Mat t;
    Napi::Value* pyobj_focal = NULL;
    double focal=1.0;
    Napi::Value* pyobj_pp = NULL;
    Point2d pp=Point2d(0, 0);
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    int retval;

    const char* keywords[] = { "E", "points1", "points2", "R", "t", "focal", "pp", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOOO:recoverPose", (char**)keywords, &pyobj_E, &pyobj_points1, &pyobj_points2, &pyobj_R, &pyobj_t, &pyobj_focal, &pyobj_pp, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_E, E, ArgInfo("E", 0)) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 1)) &&
        jsopencv_to_safe(info, pyobj_t, t, ArgInfo("t", 1)) &&
        jsopencv_to_safe(info, pyobj_focal, focal, ArgInfo("focal", 0)) &&
        jsopencv_to_safe(info, pyobj_pp, pp, ArgInfo("pp", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)))
    {
        ERRWRAP2(retval = cv::recoverPose(E, points1, points2, R, t, focal, pp, mask));
        return Py_BuildValue("(NNNN)", jsopencv_from(retval), jsopencv_from(R), jsopencv_from(t), jsopencv_from(mask));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_E = NULL;
    UMat E;
    Napi::Value* pyobj_points1 = NULL;
    UMat points1;
    Napi::Value* pyobj_points2 = NULL;
    UMat points2;
    Napi::Value* pyobj_R = NULL;
    UMat R;
    Napi::Value* pyobj_t = NULL;
    UMat t;
    Napi::Value* pyobj_focal = NULL;
    double focal=1.0;
    Napi::Value* pyobj_pp = NULL;
    Point2d pp=Point2d(0, 0);
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    int retval;

    const char* keywords[] = { "E", "points1", "points2", "R", "t", "focal", "pp", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOOO:recoverPose", (char**)keywords, &pyobj_E, &pyobj_points1, &pyobj_points2, &pyobj_R, &pyobj_t, &pyobj_focal, &pyobj_pp, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_E, E, ArgInfo("E", 0)) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 1)) &&
        jsopencv_to_safe(info, pyobj_t, t, ArgInfo("t", 1)) &&
        jsopencv_to_safe(info, pyobj_focal, focal, ArgInfo("focal", 0)) &&
        jsopencv_to_safe(info, pyobj_pp, pp, ArgInfo("pp", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)))
    {
        ERRWRAP2(retval = cv::recoverPose(E, points1, points2, R, t, focal, pp, mask));
        return Py_BuildValue("(NNNN)", jsopencv_from(retval), jsopencv_from(R), jsopencv_from(t), jsopencv_from(mask));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_E = NULL;
    Mat E;
    Napi::Value* pyobj_points1 = NULL;
    Mat points1;
    Napi::Value* pyobj_points2 = NULL;
    Mat points2;
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_R = NULL;
    Mat R;
    Napi::Value* pyobj_t = NULL;
    Mat t;
    Napi::Value* pyobj_distanceThresh = NULL;
    double distanceThresh=0;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Napi::Value* pyobj_triangulatedPoints = NULL;
    Mat triangulatedPoints;
    int retval;

    const char* keywords[] = { "E", "points1", "points2", "cameraMatrix", "distanceThresh", "R", "t", "mask", "triangulatedPoints", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OOOO:recoverPose", (char**)keywords, &pyobj_E, &pyobj_points1, &pyobj_points2, &pyobj_cameraMatrix, &pyobj_distanceThresh, &pyobj_R, &pyobj_t, &pyobj_mask, &pyobj_triangulatedPoints) &&
        jsopencv_to_safe(info, pyobj_E, E, ArgInfo("E", 0)) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 1)) &&
        jsopencv_to_safe(info, pyobj_t, t, ArgInfo("t", 1)) &&
        jsopencv_to_safe(info, pyobj_distanceThresh, distanceThresh, ArgInfo("distanceThresh", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)) &&
        jsopencv_to_safe(info, pyobj_triangulatedPoints, triangulatedPoints, ArgInfo("triangulatedPoints", 1)))
    {
        ERRWRAP2(retval = cv::recoverPose(E, points1, points2, cameraMatrix, R, t, distanceThresh, mask, triangulatedPoints));
        return Py_BuildValue("(NNNNN)", jsopencv_from(retval), jsopencv_from(R), jsopencv_from(t), jsopencv_from(mask), jsopencv_from(triangulatedPoints));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_E = NULL;
    UMat E;
    Napi::Value* pyobj_points1 = NULL;
    UMat points1;
    Napi::Value* pyobj_points2 = NULL;
    UMat points2;
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_R = NULL;
    UMat R;
    Napi::Value* pyobj_t = NULL;
    UMat t;
    Napi::Value* pyobj_distanceThresh = NULL;
    double distanceThresh=0;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    Napi::Value* pyobj_triangulatedPoints = NULL;
    UMat triangulatedPoints;
    int retval;

    const char* keywords[] = { "E", "points1", "points2", "cameraMatrix", "distanceThresh", "R", "t", "mask", "triangulatedPoints", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OOOO:recoverPose", (char**)keywords, &pyobj_E, &pyobj_points1, &pyobj_points2, &pyobj_cameraMatrix, &pyobj_distanceThresh, &pyobj_R, &pyobj_t, &pyobj_mask, &pyobj_triangulatedPoints) &&
        jsopencv_to_safe(info, pyobj_E, E, ArgInfo("E", 0)) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 1)) &&
        jsopencv_to_safe(info, pyobj_t, t, ArgInfo("t", 1)) &&
        jsopencv_to_safe(info, pyobj_distanceThresh, distanceThresh, ArgInfo("distanceThresh", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 1)) &&
        jsopencv_to_safe(info, pyobj_triangulatedPoints, triangulatedPoints, ArgInfo("triangulatedPoints", 1)))
    {
        ERRWRAP2(retval = cv::recoverPose(E, points1, points2, cameraMatrix, R, t, distanceThresh, mask, triangulatedPoints));
        return Py_BuildValue("(NNNNN)", jsopencv_from(retval), jsopencv_from(R), jsopencv_from(t), jsopencv_from(mask), jsopencv_from(triangulatedPoints));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("recoverPose");

    return NULL;
}

static Napi::Value pyopencv_cv_rectangle(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_pt1 = NULL;
    Point pt1;
    Napi::Value* pyobj_pt2 = NULL;
    Point pt2;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=1;
    Napi::Value* pyobj_lineType = NULL;
    int lineType=LINE_8;
    Napi::Value* pyobj_shift = NULL;
    int shift=0;

    const char* keywords[] = { "img", "pt1", "pt2", "color", "thickness", "lineType", "shift", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:rectangle", (char**)keywords, &pyobj_img, &pyobj_pt1, &pyobj_pt2, &pyobj_color, &pyobj_thickness, &pyobj_lineType, &pyobj_shift) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_pt1, pt1, ArgInfo("pt1", 0)) &&
        jsopencv_to_safe(info, pyobj_pt2, pt2, ArgInfo("pt2", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)) &&
        jsopencv_to_safe(info, pyobj_lineType, lineType, ArgInfo("lineType", 0)) &&
        jsopencv_to_safe(info, pyobj_shift, shift, ArgInfo("shift", 0)))
    {
        ERRWRAP2(cv::rectangle(img, pt1, pt2, color, thickness, lineType, shift));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_pt1 = NULL;
    Point pt1;
    Napi::Value* pyobj_pt2 = NULL;
    Point pt2;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=1;
    Napi::Value* pyobj_lineType = NULL;
    int lineType=LINE_8;
    Napi::Value* pyobj_shift = NULL;
    int shift=0;

    const char* keywords[] = { "img", "pt1", "pt2", "color", "thickness", "lineType", "shift", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:rectangle", (char**)keywords, &pyobj_img, &pyobj_pt1, &pyobj_pt2, &pyobj_color, &pyobj_thickness, &pyobj_lineType, &pyobj_shift) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_pt1, pt1, ArgInfo("pt1", 0)) &&
        jsopencv_to_safe(info, pyobj_pt2, pt2, ArgInfo("pt2", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)) &&
        jsopencv_to_safe(info, pyobj_lineType, lineType, ArgInfo("lineType", 0)) &&
        jsopencv_to_safe(info, pyobj_shift, shift, ArgInfo("shift", 0)))
    {
        ERRWRAP2(cv::rectangle(img, pt1, pt2, color, thickness, lineType, shift));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_rec = NULL;
    Rect rec;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=1;
    Napi::Value* pyobj_lineType = NULL;
    int lineType=LINE_8;
    Napi::Value* pyobj_shift = NULL;
    int shift=0;

    const char* keywords[] = { "img", "rec", "color", "thickness", "lineType", "shift", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:rectangle", (char**)keywords, &pyobj_img, &pyobj_rec, &pyobj_color, &pyobj_thickness, &pyobj_lineType, &pyobj_shift) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_rec, rec, ArgInfo("rec", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)) &&
        jsopencv_to_safe(info, pyobj_lineType, lineType, ArgInfo("lineType", 0)) &&
        jsopencv_to_safe(info, pyobj_shift, shift, ArgInfo("shift", 0)))
    {
        ERRWRAP2(cv::rectangle(img, rec, color, thickness, lineType, shift));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_rec = NULL;
    Rect rec;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_thickness = NULL;
    int thickness=1;
    Napi::Value* pyobj_lineType = NULL;
    int lineType=LINE_8;
    Napi::Value* pyobj_shift = NULL;
    int shift=0;

    const char* keywords[] = { "img", "rec", "color", "thickness", "lineType", "shift", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:rectangle", (char**)keywords, &pyobj_img, &pyobj_rec, &pyobj_color, &pyobj_thickness, &pyobj_lineType, &pyobj_shift) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_rec, rec, ArgInfo("rec", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)) &&
        jsopencv_to_safe(info, pyobj_lineType, lineType, ArgInfo("lineType", 0)) &&
        jsopencv_to_safe(info, pyobj_shift, shift, ArgInfo("shift", 0)))
    {
        ERRWRAP2(cv::rectangle(img, rec, color, thickness, lineType, shift));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("rectangle");

    return NULL;
}

static Napi::Value pyopencv_cv_rectangleIntersectionArea(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_a = NULL;
    Rect2d a;
    Napi::Value* pyobj_b = NULL;
    Rect2d b;
    double retval;

    const char* keywords[] = { "a", "b", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:rectangleIntersectionArea", (char**)keywords, &pyobj_a, &pyobj_b) &&
        jsopencv_to_safe(info, pyobj_a, a, ArgInfo("a", 0)) &&
        jsopencv_to_safe(info, pyobj_b, b, ArgInfo("b", 0)))
    {
        ERRWRAP2(retval = cv::rectangleIntersectionArea(a, b));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_rectify3Collinear(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_cameraMatrix1 = NULL;
    Mat cameraMatrix1;
    Napi::Value* pyobj_distCoeffs1 = NULL;
    Mat distCoeffs1;
    Napi::Value* pyobj_cameraMatrix2 = NULL;
    Mat cameraMatrix2;
    Napi::Value* pyobj_distCoeffs2 = NULL;
    Mat distCoeffs2;
    Napi::Value* pyobj_cameraMatrix3 = NULL;
    Mat cameraMatrix3;
    Napi::Value* pyobj_distCoeffs3 = NULL;
    Mat distCoeffs3;
    Napi::Value* pyobj_imgpt1 = NULL;
    vector_Mat imgpt1;
    Napi::Value* pyobj_imgpt3 = NULL;
    vector_Mat imgpt3;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_R12 = NULL;
    Mat R12;
    Napi::Value* pyobj_T12 = NULL;
    Mat T12;
    Napi::Value* pyobj_R13 = NULL;
    Mat R13;
    Napi::Value* pyobj_T13 = NULL;
    Mat T13;
    Napi::Value* pyobj_R1 = NULL;
    Mat R1;
    Napi::Value* pyobj_R2 = NULL;
    Mat R2;
    Napi::Value* pyobj_R3 = NULL;
    Mat R3;
    Napi::Value* pyobj_P1 = NULL;
    Mat P1;
    Napi::Value* pyobj_P2 = NULL;
    Mat P2;
    Napi::Value* pyobj_P3 = NULL;
    Mat P3;
    Napi::Value* pyobj_Q = NULL;
    Mat Q;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=0;
    Napi::Value* pyobj_newImgSize = NULL;
    Size newImgSize;
    Rect roi1;
    Rect roi2;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    float retval;

    const char* keywords[] = { "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "cameraMatrix3", "distCoeffs3", "imgpt1", "imgpt3", "imageSize", "R12", "T12", "R13", "T13", "alpha", "newImgSize", "flags", "R1", "R2", "R3", "P1", "P2", "P3", "Q", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOOOOOOOOOOO|OOOOOOO:rectify3Collinear", (char**)keywords, &pyobj_cameraMatrix1, &pyobj_distCoeffs1, &pyobj_cameraMatrix2, &pyobj_distCoeffs2, &pyobj_cameraMatrix3, &pyobj_distCoeffs3, &pyobj_imgpt1, &pyobj_imgpt3, &pyobj_imageSize, &pyobj_R12, &pyobj_T12, &pyobj_R13, &pyobj_T13, &pyobj_alpha, &pyobj_newImgSize, &pyobj_flags, &pyobj_R1, &pyobj_R2, &pyobj_R3, &pyobj_P1, &pyobj_P2, &pyobj_P3, &pyobj_Q) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix1, cameraMatrix1, ArgInfo("cameraMatrix1", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs1, distCoeffs1, ArgInfo("distCoeffs1", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix2, cameraMatrix2, ArgInfo("cameraMatrix2", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs2, distCoeffs2, ArgInfo("distCoeffs2", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix3, cameraMatrix3, ArgInfo("cameraMatrix3", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs3, distCoeffs3, ArgInfo("distCoeffs3", 0)) &&
        jsopencv_to_safe(info, pyobj_imgpt1, imgpt1, ArgInfo("imgpt1", 0)) &&
        jsopencv_to_safe(info, pyobj_imgpt3, imgpt3, ArgInfo("imgpt3", 0)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_R12, R12, ArgInfo("R12", 0)) &&
        jsopencv_to_safe(info, pyobj_T12, T12, ArgInfo("T12", 0)) &&
        jsopencv_to_safe(info, pyobj_R13, R13, ArgInfo("R13", 0)) &&
        jsopencv_to_safe(info, pyobj_T13, T13, ArgInfo("T13", 0)) &&
        jsopencv_to_safe(info, pyobj_R1, R1, ArgInfo("R1", 1)) &&
        jsopencv_to_safe(info, pyobj_R2, R2, ArgInfo("R2", 1)) &&
        jsopencv_to_safe(info, pyobj_R3, R3, ArgInfo("R3", 1)) &&
        jsopencv_to_safe(info, pyobj_P1, P1, ArgInfo("P1", 1)) &&
        jsopencv_to_safe(info, pyobj_P2, P2, ArgInfo("P2", 1)) &&
        jsopencv_to_safe(info, pyobj_P3, P3, ArgInfo("P3", 1)) &&
        jsopencv_to_safe(info, pyobj_Q, Q, ArgInfo("Q", 1)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_newImgSize, newImgSize, ArgInfo("newImgSize", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::rectify3Collinear(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, cameraMatrix3, distCoeffs3, imgpt1, imgpt3, imageSize, R12, T12, R13, T13, R1, R2, R3, P1, P2, P3, Q, alpha, newImgSize, &roi1, &roi2, flags));
        return Py_BuildValue("(NNNNNNNNNN)", jsopencv_from(retval), jsopencv_from(R1), jsopencv_from(R2), jsopencv_from(R3), jsopencv_from(P1), jsopencv_from(P2), jsopencv_from(P3), jsopencv_from(Q), jsopencv_from(roi1), jsopencv_from(roi2));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_cameraMatrix1 = NULL;
    UMat cameraMatrix1;
    Napi::Value* pyobj_distCoeffs1 = NULL;
    UMat distCoeffs1;
    Napi::Value* pyobj_cameraMatrix2 = NULL;
    UMat cameraMatrix2;
    Napi::Value* pyobj_distCoeffs2 = NULL;
    UMat distCoeffs2;
    Napi::Value* pyobj_cameraMatrix3 = NULL;
    UMat cameraMatrix3;
    Napi::Value* pyobj_distCoeffs3 = NULL;
    UMat distCoeffs3;
    Napi::Value* pyobj_imgpt1 = NULL;
    vector_UMat imgpt1;
    Napi::Value* pyobj_imgpt3 = NULL;
    vector_UMat imgpt3;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_R12 = NULL;
    UMat R12;
    Napi::Value* pyobj_T12 = NULL;
    UMat T12;
    Napi::Value* pyobj_R13 = NULL;
    UMat R13;
    Napi::Value* pyobj_T13 = NULL;
    UMat T13;
    Napi::Value* pyobj_R1 = NULL;
    UMat R1;
    Napi::Value* pyobj_R2 = NULL;
    UMat R2;
    Napi::Value* pyobj_R3 = NULL;
    UMat R3;
    Napi::Value* pyobj_P1 = NULL;
    UMat P1;
    Napi::Value* pyobj_P2 = NULL;
    UMat P2;
    Napi::Value* pyobj_P3 = NULL;
    UMat P3;
    Napi::Value* pyobj_Q = NULL;
    UMat Q;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=0;
    Napi::Value* pyobj_newImgSize = NULL;
    Size newImgSize;
    Rect roi1;
    Rect roi2;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    float retval;

    const char* keywords[] = { "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "cameraMatrix3", "distCoeffs3", "imgpt1", "imgpt3", "imageSize", "R12", "T12", "R13", "T13", "alpha", "newImgSize", "flags", "R1", "R2", "R3", "P1", "P2", "P3", "Q", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOOOOOOOOOOO|OOOOOOO:rectify3Collinear", (char**)keywords, &pyobj_cameraMatrix1, &pyobj_distCoeffs1, &pyobj_cameraMatrix2, &pyobj_distCoeffs2, &pyobj_cameraMatrix3, &pyobj_distCoeffs3, &pyobj_imgpt1, &pyobj_imgpt3, &pyobj_imageSize, &pyobj_R12, &pyobj_T12, &pyobj_R13, &pyobj_T13, &pyobj_alpha, &pyobj_newImgSize, &pyobj_flags, &pyobj_R1, &pyobj_R2, &pyobj_R3, &pyobj_P1, &pyobj_P2, &pyobj_P3, &pyobj_Q) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix1, cameraMatrix1, ArgInfo("cameraMatrix1", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs1, distCoeffs1, ArgInfo("distCoeffs1", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix2, cameraMatrix2, ArgInfo("cameraMatrix2", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs2, distCoeffs2, ArgInfo("distCoeffs2", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix3, cameraMatrix3, ArgInfo("cameraMatrix3", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs3, distCoeffs3, ArgInfo("distCoeffs3", 0)) &&
        jsopencv_to_safe(info, pyobj_imgpt1, imgpt1, ArgInfo("imgpt1", 0)) &&
        jsopencv_to_safe(info, pyobj_imgpt3, imgpt3, ArgInfo("imgpt3", 0)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_R12, R12, ArgInfo("R12", 0)) &&
        jsopencv_to_safe(info, pyobj_T12, T12, ArgInfo("T12", 0)) &&
        jsopencv_to_safe(info, pyobj_R13, R13, ArgInfo("R13", 0)) &&
        jsopencv_to_safe(info, pyobj_T13, T13, ArgInfo("T13", 0)) &&
        jsopencv_to_safe(info, pyobj_R1, R1, ArgInfo("R1", 1)) &&
        jsopencv_to_safe(info, pyobj_R2, R2, ArgInfo("R2", 1)) &&
        jsopencv_to_safe(info, pyobj_R3, R3, ArgInfo("R3", 1)) &&
        jsopencv_to_safe(info, pyobj_P1, P1, ArgInfo("P1", 1)) &&
        jsopencv_to_safe(info, pyobj_P2, P2, ArgInfo("P2", 1)) &&
        jsopencv_to_safe(info, pyobj_P3, P3, ArgInfo("P3", 1)) &&
        jsopencv_to_safe(info, pyobj_Q, Q, ArgInfo("Q", 1)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_newImgSize, newImgSize, ArgInfo("newImgSize", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::rectify3Collinear(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, cameraMatrix3, distCoeffs3, imgpt1, imgpt3, imageSize, R12, T12, R13, T13, R1, R2, R3, P1, P2, P3, Q, alpha, newImgSize, &roi1, &roi2, flags));
        return Py_BuildValue("(NNNNNNNNNN)", jsopencv_from(retval), jsopencv_from(R1), jsopencv_from(R2), jsopencv_from(R3), jsopencv_from(P1), jsopencv_from(P2), jsopencv_from(P3), jsopencv_from(Q), jsopencv_from(roi1), jsopencv_from(roi2));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("rectify3Collinear");

    return NULL;
}

static Napi::Value pyopencv_cv_reduce(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_dim = NULL;
    int dim=0;
    Napi::Value* pyobj_rtype = NULL;
    int rtype=0;
    Napi::Value* pyobj_dtype = NULL;
    int dtype=-1;

    const char* keywords[] = { "src", "dim", "rtype", "dst", "dtype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:reduce", (char**)keywords, &pyobj_src, &pyobj_dim, &pyobj_rtype, &pyobj_dst, &pyobj_dtype) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_dim, dim, ArgInfo("dim", 0)) &&
        jsopencv_to_safe(info, pyobj_rtype, rtype, ArgInfo("rtype", 0)) &&
        jsopencv_to_safe(info, pyobj_dtype, dtype, ArgInfo("dtype", 0)))
    {
        ERRWRAP2(cv::reduce(src, dst, dim, rtype, dtype));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_dim = NULL;
    int dim=0;
    Napi::Value* pyobj_rtype = NULL;
    int rtype=0;
    Napi::Value* pyobj_dtype = NULL;
    int dtype=-1;

    const char* keywords[] = { "src", "dim", "rtype", "dst", "dtype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:reduce", (char**)keywords, &pyobj_src, &pyobj_dim, &pyobj_rtype, &pyobj_dst, &pyobj_dtype) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_dim, dim, ArgInfo("dim", 0)) &&
        jsopencv_to_safe(info, pyobj_rtype, rtype, ArgInfo("rtype", 0)) &&
        jsopencv_to_safe(info, pyobj_dtype, dtype, ArgInfo("dtype", 0)))
    {
        ERRWRAP2(cv::reduce(src, dst, dim, rtype, dtype));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("reduce");

    return NULL;
}

static Napi::Value pyopencv_cv_reduceArgMax(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_axis = NULL;
    int axis=0;
    Napi::Value* pyobj_lastIndex = NULL;
    bool lastIndex=false;

    const char* keywords[] = { "src", "axis", "dst", "lastIndex", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:reduceArgMax", (char**)keywords, &pyobj_src, &pyobj_axis, &pyobj_dst, &pyobj_lastIndex) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_axis, axis, ArgInfo("axis", 0)) &&
        jsopencv_to_safe(info, pyobj_lastIndex, lastIndex, ArgInfo("lastIndex", 0)))
    {
        ERRWRAP2(cv::reduceArgMax(src, dst, axis, lastIndex));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_axis = NULL;
    int axis=0;
    Napi::Value* pyobj_lastIndex = NULL;
    bool lastIndex=false;

    const char* keywords[] = { "src", "axis", "dst", "lastIndex", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:reduceArgMax", (char**)keywords, &pyobj_src, &pyobj_axis, &pyobj_dst, &pyobj_lastIndex) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_axis, axis, ArgInfo("axis", 0)) &&
        jsopencv_to_safe(info, pyobj_lastIndex, lastIndex, ArgInfo("lastIndex", 0)))
    {
        ERRWRAP2(cv::reduceArgMax(src, dst, axis, lastIndex));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("reduceArgMax");

    return NULL;
}

static Napi::Value pyopencv_cv_reduceArgMin(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_axis = NULL;
    int axis=0;
    Napi::Value* pyobj_lastIndex = NULL;
    bool lastIndex=false;

    const char* keywords[] = { "src", "axis", "dst", "lastIndex", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:reduceArgMin", (char**)keywords, &pyobj_src, &pyobj_axis, &pyobj_dst, &pyobj_lastIndex) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_axis, axis, ArgInfo("axis", 0)) &&
        jsopencv_to_safe(info, pyobj_lastIndex, lastIndex, ArgInfo("lastIndex", 0)))
    {
        ERRWRAP2(cv::reduceArgMin(src, dst, axis, lastIndex));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_axis = NULL;
    int axis=0;
    Napi::Value* pyobj_lastIndex = NULL;
    bool lastIndex=false;

    const char* keywords[] = { "src", "axis", "dst", "lastIndex", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:reduceArgMin", (char**)keywords, &pyobj_src, &pyobj_axis, &pyobj_dst, &pyobj_lastIndex) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_axis, axis, ArgInfo("axis", 0)) &&
        jsopencv_to_safe(info, pyobj_lastIndex, lastIndex, ArgInfo("lastIndex", 0)))
    {
        ERRWRAP2(cv::reduceArgMin(src, dst, axis, lastIndex));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("reduceArgMin");

    return NULL;
}

static Napi::Value pyopencv_cv_remap(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_map1 = NULL;
    Mat map1;
    Napi::Value* pyobj_map2 = NULL;
    Mat map2;
    Napi::Value* pyobj_interpolation = NULL;
    int interpolation=0;
    Napi::Value* pyobj_borderMode = NULL;
    int borderMode=BORDER_CONSTANT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue;

    const char* keywords[] = { "src", "map1", "map2", "interpolation", "dst", "borderMode", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:remap", (char**)keywords, &pyobj_src, &pyobj_map1, &pyobj_map2, &pyobj_interpolation, &pyobj_dst, &pyobj_borderMode, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_map1, map1, ArgInfo("map1", 0)) &&
        jsopencv_to_safe(info, pyobj_map2, map2, ArgInfo("map2", 0)) &&
        jsopencv_to_safe(info, pyobj_interpolation, interpolation, ArgInfo("interpolation", 0)) &&
        jsopencv_to_safe(info, pyobj_borderMode, borderMode, ArgInfo("borderMode", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(cv::remap(src, dst, map1, map2, interpolation, borderMode, borderValue));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_map1 = NULL;
    UMat map1;
    Napi::Value* pyobj_map2 = NULL;
    UMat map2;
    Napi::Value* pyobj_interpolation = NULL;
    int interpolation=0;
    Napi::Value* pyobj_borderMode = NULL;
    int borderMode=BORDER_CONSTANT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue;

    const char* keywords[] = { "src", "map1", "map2", "interpolation", "dst", "borderMode", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:remap", (char**)keywords, &pyobj_src, &pyobj_map1, &pyobj_map2, &pyobj_interpolation, &pyobj_dst, &pyobj_borderMode, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_map1, map1, ArgInfo("map1", 0)) &&
        jsopencv_to_safe(info, pyobj_map2, map2, ArgInfo("map2", 0)) &&
        jsopencv_to_safe(info, pyobj_interpolation, interpolation, ArgInfo("interpolation", 0)) &&
        jsopencv_to_safe(info, pyobj_borderMode, borderMode, ArgInfo("borderMode", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(cv::remap(src, dst, map1, map2, interpolation, borderMode, borderValue));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("remap");

    return NULL;
}

static Napi::Value pyopencv_cv_repeat(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_ny = NULL;
    int ny=0;
    Napi::Value* pyobj_nx = NULL;
    int nx=0;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;

    const char* keywords[] = { "src", "ny", "nx", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:repeat", (char**)keywords, &pyobj_src, &pyobj_ny, &pyobj_nx, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_ny, ny, ArgInfo("ny", 0)) &&
        jsopencv_to_safe(info, pyobj_nx, nx, ArgInfo("nx", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::repeat(src, ny, nx, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_ny = NULL;
    int ny=0;
    Napi::Value* pyobj_nx = NULL;
    int nx=0;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;

    const char* keywords[] = { "src", "ny", "nx", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:repeat", (char**)keywords, &pyobj_src, &pyobj_ny, &pyobj_nx, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_ny, ny, ArgInfo("ny", 0)) &&
        jsopencv_to_safe(info, pyobj_nx, nx, ArgInfo("nx", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::repeat(src, ny, nx, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("repeat");

    return NULL;
}

static Napi::Value pyopencv_cv_reprojectImageTo3D(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_disparity = NULL;
    Mat disparity;
    Napi::Value* pyobj__3dImage = NULL;
    Mat _3dImage;
    Napi::Value* pyobj_Q = NULL;
    Mat Q;
    Napi::Value* pyobj_handleMissingValues = NULL;
    bool handleMissingValues=false;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=-1;

    const char* keywords[] = { "disparity", "Q", "_3dImage", "handleMissingValues", "ddepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:reprojectImageTo3D", (char**)keywords, &pyobj_disparity, &pyobj_Q, &pyobj__3dImage, &pyobj_handleMissingValues, &pyobj_ddepth) &&
        jsopencv_to_safe(info, pyobj_disparity, disparity, ArgInfo("disparity", 0)) &&
        jsopencv_to_safe(info, pyobj__3dImage, _3dImage, ArgInfo("_3dImage", 1)) &&
        jsopencv_to_safe(info, pyobj_Q, Q, ArgInfo("Q", 0)) &&
        jsopencv_to_safe(info, pyobj_handleMissingValues, handleMissingValues, ArgInfo("handleMissingValues", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)))
    {
        ERRWRAP2(cv::reprojectImageTo3D(disparity, _3dImage, Q, handleMissingValues, ddepth));
        return jsopencv_from(_3dImage);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_disparity = NULL;
    UMat disparity;
    Napi::Value* pyobj__3dImage = NULL;
    UMat _3dImage;
    Napi::Value* pyobj_Q = NULL;
    UMat Q;
    Napi::Value* pyobj_handleMissingValues = NULL;
    bool handleMissingValues=false;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=-1;

    const char* keywords[] = { "disparity", "Q", "_3dImage", "handleMissingValues", "ddepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:reprojectImageTo3D", (char**)keywords, &pyobj_disparity, &pyobj_Q, &pyobj__3dImage, &pyobj_handleMissingValues, &pyobj_ddepth) &&
        jsopencv_to_safe(info, pyobj_disparity, disparity, ArgInfo("disparity", 0)) &&
        jsopencv_to_safe(info, pyobj__3dImage, _3dImage, ArgInfo("_3dImage", 1)) &&
        jsopencv_to_safe(info, pyobj_Q, Q, ArgInfo("Q", 0)) &&
        jsopencv_to_safe(info, pyobj_handleMissingValues, handleMissingValues, ArgInfo("handleMissingValues", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)))
    {
        ERRWRAP2(cv::reprojectImageTo3D(disparity, _3dImage, Q, handleMissingValues, ddepth));
        return jsopencv_from(_3dImage);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("reprojectImageTo3D");

    return NULL;
}

static Napi::Value pyopencv_cv_resize(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_dsize = NULL;
    Size dsize;
    Napi::Value* pyobj_fx = NULL;
    double fx=0;
    Napi::Value* pyobj_fy = NULL;
    double fy=0;
    Napi::Value* pyobj_interpolation = NULL;
    int interpolation=INTER_LINEAR;

    const char* keywords[] = { "src", "dsize", "dst", "fx", "fy", "interpolation", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOO:resize", (char**)keywords, &pyobj_src, &pyobj_dsize, &pyobj_dst, &pyobj_fx, &pyobj_fy, &pyobj_interpolation) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_dsize, dsize, ArgInfo("dsize", 0)) &&
        jsopencv_to_safe(info, pyobj_fx, fx, ArgInfo("fx", 0)) &&
        jsopencv_to_safe(info, pyobj_fy, fy, ArgInfo("fy", 0)) &&
        jsopencv_to_safe(info, pyobj_interpolation, interpolation, ArgInfo("interpolation", 0)))
    {
        ERRWRAP2(cv::resize(src, dst, dsize, fx, fy, interpolation));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_dsize = NULL;
    Size dsize;
    Napi::Value* pyobj_fx = NULL;
    double fx=0;
    Napi::Value* pyobj_fy = NULL;
    double fy=0;
    Napi::Value* pyobj_interpolation = NULL;
    int interpolation=INTER_LINEAR;

    const char* keywords[] = { "src", "dsize", "dst", "fx", "fy", "interpolation", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOO:resize", (char**)keywords, &pyobj_src, &pyobj_dsize, &pyobj_dst, &pyobj_fx, &pyobj_fy, &pyobj_interpolation) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_dsize, dsize, ArgInfo("dsize", 0)) &&
        jsopencv_to_safe(info, pyobj_fx, fx, ArgInfo("fx", 0)) &&
        jsopencv_to_safe(info, pyobj_fy, fy, ArgInfo("fy", 0)) &&
        jsopencv_to_safe(info, pyobj_interpolation, interpolation, ArgInfo("interpolation", 0)))
    {
        ERRWRAP2(cv::resize(src, dst, dsize, fx, fy, interpolation));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("resize");

    return NULL;
}

static Napi::Value pyopencv_cv_resizeWindow(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_winname = NULL;
    String winname;
    Napi::Value* pyobj_width = NULL;
    int width=0;
    Napi::Value* pyobj_height = NULL;
    int height=0;

    const char* keywords[] = { "winname", "width", "height", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:resizeWindow", (char**)keywords, &pyobj_winname, &pyobj_width, &pyobj_height) &&
        jsopencv_to_safe(info, pyobj_winname, winname, ArgInfo("winname", 0)) &&
        jsopencv_to_safe(info, pyobj_width, width, ArgInfo("width", 0)) &&
        jsopencv_to_safe(info, pyobj_height, height, ArgInfo("height", 0)))
    {
        ERRWRAP2(cv::resizeWindow(winname, width, height));
        Py_RETURN_NONE;
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_winname = NULL;
    String winname;
    Napi::Value* pyobj_size = NULL;
    Size size;

    const char* keywords[] = { "winname", "size", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:resizeWindow", (char**)keywords, &pyobj_winname, &pyobj_size) &&
        jsopencv_to_safe(info, pyobj_winname, winname, ArgInfo("winname", 0)) &&
        jsopencv_to_safe(info, pyobj_size, size, ArgInfo("size", 0)))
    {
        ERRWRAP2(cv::resizeWindow(winname, size));
        Py_RETURN_NONE;
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("resizeWindow");

    return NULL;
}

static Napi::Value pyopencv_cv_rotate(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_rotateCode = NULL;
    int rotateCode=0;

    const char* keywords[] = { "src", "rotateCode", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:rotate", (char**)keywords, &pyobj_src, &pyobj_rotateCode, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_rotateCode, rotateCode, ArgInfo("rotateCode", 0)))
    {
        ERRWRAP2(cv::rotate(src, dst, rotateCode));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_rotateCode = NULL;
    int rotateCode=0;

    const char* keywords[] = { "src", "rotateCode", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:rotate", (char**)keywords, &pyobj_src, &pyobj_rotateCode, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_rotateCode, rotateCode, ArgInfo("rotateCode", 0)))
    {
        ERRWRAP2(cv::rotate(src, dst, rotateCode));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("rotate");

    return NULL;
}

static Napi::Value pyopencv_cv_rotatedRectangleIntersection(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_rect1 = NULL;
    RotatedRect rect1;
    Napi::Value* pyobj_rect2 = NULL;
    RotatedRect rect2;
    Napi::Value* pyobj_intersectingRegion = NULL;
    Mat intersectingRegion;
    int retval;

    const char* keywords[] = { "rect1", "rect2", "intersectingRegion", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:rotatedRectangleIntersection", (char**)keywords, &pyobj_rect1, &pyobj_rect2, &pyobj_intersectingRegion) &&
        jsopencv_to_safe(info, pyobj_rect1, rect1, ArgInfo("rect1", 0)) &&
        jsopencv_to_safe(info, pyobj_rect2, rect2, ArgInfo("rect2", 0)) &&
        jsopencv_to_safe(info, pyobj_intersectingRegion, intersectingRegion, ArgInfo("intersectingRegion", 1)))
    {
        ERRWRAP2(retval = cv::rotatedRectangleIntersection(rect1, rect2, intersectingRegion));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(intersectingRegion));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_rect1 = NULL;
    RotatedRect rect1;
    Napi::Value* pyobj_rect2 = NULL;
    RotatedRect rect2;
    Napi::Value* pyobj_intersectingRegion = NULL;
    UMat intersectingRegion;
    int retval;

    const char* keywords[] = { "rect1", "rect2", "intersectingRegion", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:rotatedRectangleIntersection", (char**)keywords, &pyobj_rect1, &pyobj_rect2, &pyobj_intersectingRegion) &&
        jsopencv_to_safe(info, pyobj_rect1, rect1, ArgInfo("rect1", 0)) &&
        jsopencv_to_safe(info, pyobj_rect2, rect2, ArgInfo("rect2", 0)) &&
        jsopencv_to_safe(info, pyobj_intersectingRegion, intersectingRegion, ArgInfo("intersectingRegion", 1)))
    {
        ERRWRAP2(retval = cv::rotatedRectangleIntersection(rect1, rect2, intersectingRegion));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(intersectingRegion));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("rotatedRectangleIntersection");

    return NULL;
}

static Napi::Value pyopencv_cv_sampsonDistance(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_pt1 = NULL;
    Mat pt1;
    Napi::Value* pyobj_pt2 = NULL;
    Mat pt2;
    Napi::Value* pyobj_F = NULL;
    Mat F;
    double retval;

    const char* keywords[] = { "pt1", "pt2", "F", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:sampsonDistance", (char**)keywords, &pyobj_pt1, &pyobj_pt2, &pyobj_F) &&
        jsopencv_to_safe(info, pyobj_pt1, pt1, ArgInfo("pt1", 0)) &&
        jsopencv_to_safe(info, pyobj_pt2, pt2, ArgInfo("pt2", 0)) &&
        jsopencv_to_safe(info, pyobj_F, F, ArgInfo("F", 0)))
    {
        ERRWRAP2(retval = cv::sampsonDistance(pt1, pt2, F));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_pt1 = NULL;
    UMat pt1;
    Napi::Value* pyobj_pt2 = NULL;
    UMat pt2;
    Napi::Value* pyobj_F = NULL;
    UMat F;
    double retval;

    const char* keywords[] = { "pt1", "pt2", "F", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:sampsonDistance", (char**)keywords, &pyobj_pt1, &pyobj_pt2, &pyobj_F) &&
        jsopencv_to_safe(info, pyobj_pt1, pt1, ArgInfo("pt1", 0)) &&
        jsopencv_to_safe(info, pyobj_pt2, pt2, ArgInfo("pt2", 0)) &&
        jsopencv_to_safe(info, pyobj_F, F, ArgInfo("F", 0)))
    {
        ERRWRAP2(retval = cv::sampsonDistance(pt1, pt2, F));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("sampsonDistance");

    return NULL;
}

static Napi::Value pyopencv_cv_scaleAdd(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    Mat src1;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=0;
    Napi::Value* pyobj_src2 = NULL;
    Mat src2;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;

    const char* keywords[] = { "src1", "alpha", "src2", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:scaleAdd", (char**)keywords, &pyobj_src1, &pyobj_alpha, &pyobj_src2, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::scaleAdd(src1, alpha, src2, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    UMat src1;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=0;
    Napi::Value* pyobj_src2 = NULL;
    UMat src2;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;

    const char* keywords[] = { "src1", "alpha", "src2", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:scaleAdd", (char**)keywords, &pyobj_src1, &pyobj_alpha, &pyobj_src2, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::scaleAdd(src1, alpha, src2, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("scaleAdd");

    return NULL;
}

static Napi::Value pyopencv_cv_seamlessClone(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Napi::Value* pyobj_p = NULL;
    Point p;
    Napi::Value* pyobj_blend = NULL;
    Mat blend;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;

    const char* keywords[] = { "src", "dst", "mask", "p", "flags", "blend", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|O:seamlessClone", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_mask, &pyobj_p, &pyobj_flags, &pyobj_blend) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)) &&
        jsopencv_to_safe(info, pyobj_p, p, ArgInfo("p", 0)) &&
        jsopencv_to_safe(info, pyobj_blend, blend, ArgInfo("blend", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::seamlessClone(src, dst, mask, p, blend, flags));
        return jsopencv_from(blend);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    Napi::Value* pyobj_p = NULL;
    Point p;
    Napi::Value* pyobj_blend = NULL;
    UMat blend;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;

    const char* keywords[] = { "src", "dst", "mask", "p", "flags", "blend", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|O:seamlessClone", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_mask, &pyobj_p, &pyobj_flags, &pyobj_blend) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)) &&
        jsopencv_to_safe(info, pyobj_p, p, ArgInfo("p", 0)) &&
        jsopencv_to_safe(info, pyobj_blend, blend, ArgInfo("blend", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::seamlessClone(src, dst, mask, p, blend, flags));
        return jsopencv_from(blend);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("seamlessClone");

    return NULL;
}

static Napi::Value pyopencv_cv_selectROI(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_windowName = NULL;
    String windowName;
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_showCrosshair = NULL;
    bool showCrosshair=true;
    Napi::Value* pyobj_fromCenter = NULL;
    bool fromCenter=false;
    Rect retval;

    const char* keywords[] = { "windowName", "img", "showCrosshair", "fromCenter", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:selectROI", (char**)keywords, &pyobj_windowName, &pyobj_img, &pyobj_showCrosshair, &pyobj_fromCenter) &&
        jsopencv_to_safe(info, pyobj_windowName, windowName, ArgInfo("windowName", 0)) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_showCrosshair, showCrosshair, ArgInfo("showCrosshair", 0)) &&
        jsopencv_to_safe(info, pyobj_fromCenter, fromCenter, ArgInfo("fromCenter", 0)))
    {
        ERRWRAP2(retval = cv::selectROI(windowName, img, showCrosshair, fromCenter));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_windowName = NULL;
    String windowName;
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_showCrosshair = NULL;
    bool showCrosshair=true;
    Napi::Value* pyobj_fromCenter = NULL;
    bool fromCenter=false;
    Rect retval;

    const char* keywords[] = { "windowName", "img", "showCrosshair", "fromCenter", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:selectROI", (char**)keywords, &pyobj_windowName, &pyobj_img, &pyobj_showCrosshair, &pyobj_fromCenter) &&
        jsopencv_to_safe(info, pyobj_windowName, windowName, ArgInfo("windowName", 0)) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_showCrosshair, showCrosshair, ArgInfo("showCrosshair", 0)) &&
        jsopencv_to_safe(info, pyobj_fromCenter, fromCenter, ArgInfo("fromCenter", 0)))
    {
        ERRWRAP2(retval = cv::selectROI(windowName, img, showCrosshair, fromCenter));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_showCrosshair = NULL;
    bool showCrosshair=true;
    Napi::Value* pyobj_fromCenter = NULL;
    bool fromCenter=false;
    Rect retval;

    const char* keywords[] = { "img", "showCrosshair", "fromCenter", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:selectROI", (char**)keywords, &pyobj_img, &pyobj_showCrosshair, &pyobj_fromCenter) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_showCrosshair, showCrosshair, ArgInfo("showCrosshair", 0)) &&
        jsopencv_to_safe(info, pyobj_fromCenter, fromCenter, ArgInfo("fromCenter", 0)))
    {
        ERRWRAP2(retval = cv::selectROI(img, showCrosshair, fromCenter));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_showCrosshair = NULL;
    bool showCrosshair=true;
    Napi::Value* pyobj_fromCenter = NULL;
    bool fromCenter=false;
    Rect retval;

    const char* keywords[] = { "img", "showCrosshair", "fromCenter", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:selectROI", (char**)keywords, &pyobj_img, &pyobj_showCrosshair, &pyobj_fromCenter) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_showCrosshair, showCrosshair, ArgInfo("showCrosshair", 0)) &&
        jsopencv_to_safe(info, pyobj_fromCenter, fromCenter, ArgInfo("fromCenter", 0)))
    {
        ERRWRAP2(retval = cv::selectROI(img, showCrosshair, fromCenter));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("selectROI");

    return NULL;
}

static Napi::Value pyopencv_cv_selectROIs(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_windowName = NULL;
    String windowName;
    Napi::Value* pyobj_img = NULL;
    Mat img;
    vector_Rect boundingBoxes;
    Napi::Value* pyobj_showCrosshair = NULL;
    bool showCrosshair=true;
    Napi::Value* pyobj_fromCenter = NULL;
    bool fromCenter=false;

    const char* keywords[] = { "windowName", "img", "showCrosshair", "fromCenter", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:selectROIs", (char**)keywords, &pyobj_windowName, &pyobj_img, &pyobj_showCrosshair, &pyobj_fromCenter) &&
        jsopencv_to_safe(info, pyobj_windowName, windowName, ArgInfo("windowName", 0)) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_showCrosshair, showCrosshair, ArgInfo("showCrosshair", 0)) &&
        jsopencv_to_safe(info, pyobj_fromCenter, fromCenter, ArgInfo("fromCenter", 0)))
    {
        ERRWRAP2(cv::selectROIs(windowName, img, boundingBoxes, showCrosshair, fromCenter));
        return jsopencv_from(boundingBoxes);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_windowName = NULL;
    String windowName;
    Napi::Value* pyobj_img = NULL;
    UMat img;
    vector_Rect boundingBoxes;
    Napi::Value* pyobj_showCrosshair = NULL;
    bool showCrosshair=true;
    Napi::Value* pyobj_fromCenter = NULL;
    bool fromCenter=false;

    const char* keywords[] = { "windowName", "img", "showCrosshair", "fromCenter", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:selectROIs", (char**)keywords, &pyobj_windowName, &pyobj_img, &pyobj_showCrosshair, &pyobj_fromCenter) &&
        jsopencv_to_safe(info, pyobj_windowName, windowName, ArgInfo("windowName", 0)) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_showCrosshair, showCrosshair, ArgInfo("showCrosshair", 0)) &&
        jsopencv_to_safe(info, pyobj_fromCenter, fromCenter, ArgInfo("fromCenter", 0)))
    {
        ERRWRAP2(cv::selectROIs(windowName, img, boundingBoxes, showCrosshair, fromCenter));
        return jsopencv_from(boundingBoxes);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("selectROIs");

    return NULL;
}

static Napi::Value pyopencv_cv_sepFilter2D(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=0;
    Napi::Value* pyobj_kernelX = NULL;
    Mat kernelX;
    Napi::Value* pyobj_kernelY = NULL;
    Mat kernelY;
    Napi::Value* pyobj_anchor = NULL;
    Point anchor=Point(-1,-1);
    Napi::Value* pyobj_delta = NULL;
    double delta=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "ddepth", "kernelX", "kernelY", "dst", "anchor", "delta", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOO:sepFilter2D", (char**)keywords, &pyobj_src, &pyobj_ddepth, &pyobj_kernelX, &pyobj_kernelY, &pyobj_dst, &pyobj_anchor, &pyobj_delta, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)) &&
        jsopencv_to_safe(info, pyobj_kernelX, kernelX, ArgInfo("kernelX", 0)) &&
        jsopencv_to_safe(info, pyobj_kernelY, kernelY, ArgInfo("kernelY", 0)) &&
        jsopencv_to_safe(info, pyobj_anchor, anchor, ArgInfo("anchor", 0)) &&
        jsopencv_to_safe(info, pyobj_delta, delta, ArgInfo("delta", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::sepFilter2D(src, dst, ddepth, kernelX, kernelY, anchor, delta, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=0;
    Napi::Value* pyobj_kernelX = NULL;
    UMat kernelX;
    Napi::Value* pyobj_kernelY = NULL;
    UMat kernelY;
    Napi::Value* pyobj_anchor = NULL;
    Point anchor=Point(-1,-1);
    Napi::Value* pyobj_delta = NULL;
    double delta=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "ddepth", "kernelX", "kernelY", "dst", "anchor", "delta", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOO:sepFilter2D", (char**)keywords, &pyobj_src, &pyobj_ddepth, &pyobj_kernelX, &pyobj_kernelY, &pyobj_dst, &pyobj_anchor, &pyobj_delta, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)) &&
        jsopencv_to_safe(info, pyobj_kernelX, kernelX, ArgInfo("kernelX", 0)) &&
        jsopencv_to_safe(info, pyobj_kernelY, kernelY, ArgInfo("kernelY", 0)) &&
        jsopencv_to_safe(info, pyobj_anchor, anchor, ArgInfo("anchor", 0)) &&
        jsopencv_to_safe(info, pyobj_delta, delta, ArgInfo("delta", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::sepFilter2D(src, dst, ddepth, kernelX, kernelY, anchor, delta, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("sepFilter2D");

    return NULL;
}

static Napi::Value pyopencv_cv_setIdentity(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_mtx = NULL;
    Mat mtx;
    Napi::Value* pyobj_s = NULL;
    Scalar s=Scalar(1);

    const char* keywords[] = { "mtx", "s", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:setIdentity", (char**)keywords, &pyobj_mtx, &pyobj_s) &&
        jsopencv_to_safe(info, pyobj_mtx, mtx, ArgInfo("mtx", 1)) &&
        jsopencv_to_safe(info, pyobj_s, s, ArgInfo("s", 0)))
    {
        ERRWRAP2(cv::setIdentity(mtx, s));
        return jsopencv_from(mtx);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_mtx = NULL;
    UMat mtx;
    Napi::Value* pyobj_s = NULL;
    Scalar s=Scalar(1);

    const char* keywords[] = { "mtx", "s", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:setIdentity", (char**)keywords, &pyobj_mtx, &pyobj_s) &&
        jsopencv_to_safe(info, pyobj_mtx, mtx, ArgInfo("mtx", 1)) &&
        jsopencv_to_safe(info, pyobj_s, s, ArgInfo("s", 0)))
    {
        ERRWRAP2(cv::setIdentity(mtx, s));
        return jsopencv_from(mtx);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("setIdentity");

    return NULL;
}

static Napi::Value pyopencv_cv_setLogLevel(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_level = NULL;
    int level=0;
    int retval;

    const char* keywords[] = { "level", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:setLogLevel", (char**)keywords, &pyobj_level) &&
        jsopencv_to_safe(info, pyobj_level, level, ArgInfo("level", 0)))
    {
        ERRWRAP2(retval = cv::setLogLevel(level));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_setNumThreads(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_nthreads = NULL;
    int nthreads=0;

    const char* keywords[] = { "nthreads", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:setNumThreads", (char**)keywords, &pyobj_nthreads) &&
        jsopencv_to_safe(info, pyobj_nthreads, nthreads, ArgInfo("nthreads", 0)))
    {
        ERRWRAP2(cv::setNumThreads(nthreads));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_setRNGSeed(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_seed = NULL;
    int seed=0;

    const char* keywords[] = { "seed", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:setRNGSeed", (char**)keywords, &pyobj_seed) &&
        jsopencv_to_safe(info, pyobj_seed, seed, ArgInfo("seed", 0)))
    {
        ERRWRAP2(cv::setRNGSeed(seed));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_setTrackbarMax(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_trackbarname = NULL;
    String trackbarname;
    Napi::Value* pyobj_winname = NULL;
    String winname;
    Napi::Value* pyobj_maxval = NULL;
    int maxval=0;

    const char* keywords[] = { "trackbarname", "winname", "maxval", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:setTrackbarMax", (char**)keywords, &pyobj_trackbarname, &pyobj_winname, &pyobj_maxval) &&
        jsopencv_to_safe(info, pyobj_trackbarname, trackbarname, ArgInfo("trackbarname", 0)) &&
        jsopencv_to_safe(info, pyobj_winname, winname, ArgInfo("winname", 0)) &&
        jsopencv_to_safe(info, pyobj_maxval, maxval, ArgInfo("maxval", 0)))
    {
        ERRWRAP2(cv::setTrackbarMax(trackbarname, winname, maxval));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_setTrackbarMin(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_trackbarname = NULL;
    String trackbarname;
    Napi::Value* pyobj_winname = NULL;
    String winname;
    Napi::Value* pyobj_minval = NULL;
    int minval=0;

    const char* keywords[] = { "trackbarname", "winname", "minval", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:setTrackbarMin", (char**)keywords, &pyobj_trackbarname, &pyobj_winname, &pyobj_minval) &&
        jsopencv_to_safe(info, pyobj_trackbarname, trackbarname, ArgInfo("trackbarname", 0)) &&
        jsopencv_to_safe(info, pyobj_winname, winname, ArgInfo("winname", 0)) &&
        jsopencv_to_safe(info, pyobj_minval, minval, ArgInfo("minval", 0)))
    {
        ERRWRAP2(cv::setTrackbarMin(trackbarname, winname, minval));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_setTrackbarPos(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_trackbarname = NULL;
    String trackbarname;
    Napi::Value* pyobj_winname = NULL;
    String winname;
    Napi::Value* pyobj_pos = NULL;
    int pos=0;

    const char* keywords[] = { "trackbarname", "winname", "pos", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:setTrackbarPos", (char**)keywords, &pyobj_trackbarname, &pyobj_winname, &pyobj_pos) &&
        jsopencv_to_safe(info, pyobj_trackbarname, trackbarname, ArgInfo("trackbarname", 0)) &&
        jsopencv_to_safe(info, pyobj_winname, winname, ArgInfo("winname", 0)) &&
        jsopencv_to_safe(info, pyobj_pos, pos, ArgInfo("pos", 0)))
    {
        ERRWRAP2(cv::setTrackbarPos(trackbarname, winname, pos));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_setUseOpenVX(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_flag = NULL;
    bool flag=0;

    const char* keywords[] = { "flag", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:setUseOpenVX", (char**)keywords, &pyobj_flag) &&
        jsopencv_to_safe(info, pyobj_flag, flag, ArgInfo("flag", 0)))
    {
        ERRWRAP2(cv::setUseOpenVX(flag));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_setUseOptimized(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_onoff = NULL;
    bool onoff=0;

    const char* keywords[] = { "onoff", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:setUseOptimized", (char**)keywords, &pyobj_onoff) &&
        jsopencv_to_safe(info, pyobj_onoff, onoff, ArgInfo("onoff", 0)))
    {
        ERRWRAP2(cv::setUseOptimized(onoff));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_setWindowProperty(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_winname = NULL;
    String winname;
    Napi::Value* pyobj_prop_id = NULL;
    int prop_id=0;
    Napi::Value* pyobj_prop_value = NULL;
    double prop_value=0;

    const char* keywords[] = { "winname", "prop_id", "prop_value", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:setWindowProperty", (char**)keywords, &pyobj_winname, &pyobj_prop_id, &pyobj_prop_value) &&
        jsopencv_to_safe(info, pyobj_winname, winname, ArgInfo("winname", 0)) &&
        jsopencv_to_safe(info, pyobj_prop_id, prop_id, ArgInfo("prop_id", 0)) &&
        jsopencv_to_safe(info, pyobj_prop_value, prop_value, ArgInfo("prop_value", 0)))
    {
        ERRWRAP2(cv::setWindowProperty(winname, prop_id, prop_value));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_setWindowTitle(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_winname = NULL;
    String winname;
    Napi::Value* pyobj_title = NULL;
    String title;

    const char* keywords[] = { "winname", "title", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:setWindowTitle", (char**)keywords, &pyobj_winname, &pyobj_title) &&
        jsopencv_to_safe(info, pyobj_winname, winname, ArgInfo("winname", 0)) &&
        jsopencv_to_safe(info, pyobj_title, title, ArgInfo("title", 0)))
    {
        ERRWRAP2(cv::setWindowTitle(winname, title));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_solve(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    Mat src1;
    Napi::Value* pyobj_src2 = NULL;
    Mat src2;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_flags = NULL;
    int flags=DECOMP_LU;
    bool retval;

    const char* keywords[] = { "src1", "src2", "dst", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:solve", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::solve(src1, src2, dst, flags));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(dst));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    UMat src1;
    Napi::Value* pyobj_src2 = NULL;
    UMat src2;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_flags = NULL;
    int flags=DECOMP_LU;
    bool retval;

    const char* keywords[] = { "src1", "src2", "dst", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:solve", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::solve(src1, src2, dst, flags));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(dst));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("solve");

    return NULL;
}

static Napi::Value pyopencv_cv_solveCubic(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_coeffs = NULL;
    Mat coeffs;
    Napi::Value* pyobj_roots = NULL;
    Mat roots;
    int retval;

    const char* keywords[] = { "coeffs", "roots", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:solveCubic", (char**)keywords, &pyobj_coeffs, &pyobj_roots) &&
        jsopencv_to_safe(info, pyobj_coeffs, coeffs, ArgInfo("coeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_roots, roots, ArgInfo("roots", 1)))
    {
        ERRWRAP2(retval = cv::solveCubic(coeffs, roots));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(roots));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_coeffs = NULL;
    UMat coeffs;
    Napi::Value* pyobj_roots = NULL;
    UMat roots;
    int retval;

    const char* keywords[] = { "coeffs", "roots", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:solveCubic", (char**)keywords, &pyobj_coeffs, &pyobj_roots) &&
        jsopencv_to_safe(info, pyobj_coeffs, coeffs, ArgInfo("coeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_roots, roots, ArgInfo("roots", 1)))
    {
        ERRWRAP2(retval = cv::solveCubic(coeffs, roots));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(roots));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("solveCubic");

    return NULL;
}

static Napi::Value pyopencv_cv_solveLP(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_Func = NULL;
    Mat Func;
    Napi::Value* pyobj_Constr = NULL;
    Mat Constr;
    Napi::Value* pyobj_z = NULL;
    Mat z;
    int retval;

    const char* keywords[] = { "Func", "Constr", "z", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:solveLP", (char**)keywords, &pyobj_Func, &pyobj_Constr, &pyobj_z) &&
        jsopencv_to_safe(info, pyobj_Func, Func, ArgInfo("Func", 0)) &&
        jsopencv_to_safe(info, pyobj_Constr, Constr, ArgInfo("Constr", 0)) &&
        jsopencv_to_safe(info, pyobj_z, z, ArgInfo("z", 1)))
    {
        ERRWRAP2(retval = cv::solveLP(Func, Constr, z));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(z));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_Func = NULL;
    UMat Func;
    Napi::Value* pyobj_Constr = NULL;
    UMat Constr;
    Napi::Value* pyobj_z = NULL;
    UMat z;
    int retval;

    const char* keywords[] = { "Func", "Constr", "z", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:solveLP", (char**)keywords, &pyobj_Func, &pyobj_Constr, &pyobj_z) &&
        jsopencv_to_safe(info, pyobj_Func, Func, ArgInfo("Func", 0)) &&
        jsopencv_to_safe(info, pyobj_Constr, Constr, ArgInfo("Constr", 0)) &&
        jsopencv_to_safe(info, pyobj_z, z, ArgInfo("z", 1)))
    {
        ERRWRAP2(retval = cv::solveLP(Func, Constr, z));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(z));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("solveLP");

    return NULL;
}

static Napi::Value pyopencv_cv_solveP3P(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_objectPoints = NULL;
    Mat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    Mat imagePoints;
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    Mat distCoeffs;
    Napi::Value* pyobj_rvecs = NULL;
    vector_Mat rvecs;
    Napi::Value* pyobj_tvecs = NULL;
    vector_Mat tvecs;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    int retval;

    const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "flags", "rvecs", "tvecs", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OO:solveP3P", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_flags, &pyobj_rvecs, &pyobj_tvecs) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_rvecs, rvecs, ArgInfo("rvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_tvecs, tvecs, ArgInfo("tvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::solveP3P(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvecs, tvecs, flags));
        return Py_BuildValue("(NNN)", jsopencv_from(retval), jsopencv_from(rvecs), jsopencv_from(tvecs));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_objectPoints = NULL;
    UMat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    UMat imagePoints;
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    UMat distCoeffs;
    Napi::Value* pyobj_rvecs = NULL;
    vector_UMat rvecs;
    Napi::Value* pyobj_tvecs = NULL;
    vector_UMat tvecs;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    int retval;

    const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "flags", "rvecs", "tvecs", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OO:solveP3P", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_flags, &pyobj_rvecs, &pyobj_tvecs) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_rvecs, rvecs, ArgInfo("rvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_tvecs, tvecs, ArgInfo("tvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::solveP3P(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvecs, tvecs, flags));
        return Py_BuildValue("(NNN)", jsopencv_from(retval), jsopencv_from(rvecs), jsopencv_from(tvecs));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("solveP3P");

    return NULL;
}

static Napi::Value pyopencv_cv_solvePnP(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_objectPoints = NULL;
    Mat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    Mat imagePoints;
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    Mat distCoeffs;
    Napi::Value* pyobj_rvec = NULL;
    Mat rvec;
    Napi::Value* pyobj_tvec = NULL;
    Mat tvec;
    Napi::Value* pyobj_useExtrinsicGuess = NULL;
    bool useExtrinsicGuess=false;
    Napi::Value* pyobj_flags = NULL;
    int flags=SOLVEPNP_ITERATIVE;
    bool retval;

    const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvec", "tvec", "useExtrinsicGuess", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOO:solvePnP", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_rvec, &pyobj_tvec, &pyobj_useExtrinsicGuess, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_rvec, rvec, ArgInfo("rvec", 1)) &&
        jsopencv_to_safe(info, pyobj_tvec, tvec, ArgInfo("tvec", 1)) &&
        jsopencv_to_safe(info, pyobj_useExtrinsicGuess, useExtrinsicGuess, ArgInfo("useExtrinsicGuess", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::solvePnP(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec, useExtrinsicGuess, flags));
        return Py_BuildValue("(NNN)", jsopencv_from(retval), jsopencv_from(rvec), jsopencv_from(tvec));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_objectPoints = NULL;
    UMat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    UMat imagePoints;
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    UMat distCoeffs;
    Napi::Value* pyobj_rvec = NULL;
    UMat rvec;
    Napi::Value* pyobj_tvec = NULL;
    UMat tvec;
    Napi::Value* pyobj_useExtrinsicGuess = NULL;
    bool useExtrinsicGuess=false;
    Napi::Value* pyobj_flags = NULL;
    int flags=SOLVEPNP_ITERATIVE;
    bool retval;

    const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvec", "tvec", "useExtrinsicGuess", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOO:solvePnP", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_rvec, &pyobj_tvec, &pyobj_useExtrinsicGuess, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_rvec, rvec, ArgInfo("rvec", 1)) &&
        jsopencv_to_safe(info, pyobj_tvec, tvec, ArgInfo("tvec", 1)) &&
        jsopencv_to_safe(info, pyobj_useExtrinsicGuess, useExtrinsicGuess, ArgInfo("useExtrinsicGuess", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::solvePnP(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec, useExtrinsicGuess, flags));
        return Py_BuildValue("(NNN)", jsopencv_from(retval), jsopencv_from(rvec), jsopencv_from(tvec));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("solvePnP");

    return NULL;
}

static Napi::Value pyopencv_cv_solvePnPGeneric(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_objectPoints = NULL;
    Mat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    Mat imagePoints;
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    Mat distCoeffs;
    Napi::Value* pyobj_rvecs = NULL;
    vector_Mat rvecs;
    Napi::Value* pyobj_tvecs = NULL;
    vector_Mat tvecs;
    Napi::Value* pyobj_useExtrinsicGuess = NULL;
    bool useExtrinsicGuess=false;
    Napi::Value* pyobj_flags = NULL;
    SolvePnPMethod flags=SOLVEPNP_ITERATIVE;
    Napi::Value* pyobj_rvec = NULL;
    Mat rvec;
    Napi::Value* pyobj_tvec = NULL;
    Mat tvec;
    Napi::Value* pyobj_reprojectionError = NULL;
    Mat reprojectionError;
    int retval;

    const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvecs", "tvecs", "useExtrinsicGuess", "flags", "rvec", "tvec", "reprojectionError", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOOOOO:solvePnPGeneric", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_rvecs, &pyobj_tvecs, &pyobj_useExtrinsicGuess, &pyobj_flags, &pyobj_rvec, &pyobj_tvec, &pyobj_reprojectionError) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_rvecs, rvecs, ArgInfo("rvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_tvecs, tvecs, ArgInfo("tvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_useExtrinsicGuess, useExtrinsicGuess, ArgInfo("useExtrinsicGuess", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_rvec, rvec, ArgInfo("rvec", 0)) &&
        jsopencv_to_safe(info, pyobj_tvec, tvec, ArgInfo("tvec", 0)) &&
        jsopencv_to_safe(info, pyobj_reprojectionError, reprojectionError, ArgInfo("reprojectionError", 1)))
    {
        ERRWRAP2(retval = cv::solvePnPGeneric(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvecs, tvecs, useExtrinsicGuess, flags, rvec, tvec, reprojectionError));
        return Py_BuildValue("(NNNN)", jsopencv_from(retval), jsopencv_from(rvecs), jsopencv_from(tvecs), jsopencv_from(reprojectionError));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_objectPoints = NULL;
    UMat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    UMat imagePoints;
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    UMat distCoeffs;
    Napi::Value* pyobj_rvecs = NULL;
    vector_UMat rvecs;
    Napi::Value* pyobj_tvecs = NULL;
    vector_UMat tvecs;
    Napi::Value* pyobj_useExtrinsicGuess = NULL;
    bool useExtrinsicGuess=false;
    Napi::Value* pyobj_flags = NULL;
    SolvePnPMethod flags=SOLVEPNP_ITERATIVE;
    Napi::Value* pyobj_rvec = NULL;
    UMat rvec;
    Napi::Value* pyobj_tvec = NULL;
    UMat tvec;
    Napi::Value* pyobj_reprojectionError = NULL;
    UMat reprojectionError;
    int retval;

    const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvecs", "tvecs", "useExtrinsicGuess", "flags", "rvec", "tvec", "reprojectionError", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOOOOO:solvePnPGeneric", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_rvecs, &pyobj_tvecs, &pyobj_useExtrinsicGuess, &pyobj_flags, &pyobj_rvec, &pyobj_tvec, &pyobj_reprojectionError) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_rvecs, rvecs, ArgInfo("rvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_tvecs, tvecs, ArgInfo("tvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_useExtrinsicGuess, useExtrinsicGuess, ArgInfo("useExtrinsicGuess", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_rvec, rvec, ArgInfo("rvec", 0)) &&
        jsopencv_to_safe(info, pyobj_tvec, tvec, ArgInfo("tvec", 0)) &&
        jsopencv_to_safe(info, pyobj_reprojectionError, reprojectionError, ArgInfo("reprojectionError", 1)))
    {
        ERRWRAP2(retval = cv::solvePnPGeneric(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvecs, tvecs, useExtrinsicGuess, flags, rvec, tvec, reprojectionError));
        return Py_BuildValue("(NNNN)", jsopencv_from(retval), jsopencv_from(rvecs), jsopencv_from(tvecs), jsopencv_from(reprojectionError));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("solvePnPGeneric");

    return NULL;
}

static Napi::Value pyopencv_cv_solvePnPRansac(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_objectPoints = NULL;
    Mat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    Mat imagePoints;
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    Mat distCoeffs;
    Napi::Value* pyobj_rvec = NULL;
    Mat rvec;
    Napi::Value* pyobj_tvec = NULL;
    Mat tvec;
    Napi::Value* pyobj_useExtrinsicGuess = NULL;
    bool useExtrinsicGuess=false;
    Napi::Value* pyobj_iterationsCount = NULL;
    int iterationsCount=100;
    Napi::Value* pyobj_reprojectionError = NULL;
    float reprojectionError=8.0;
    Napi::Value* pyobj_confidence = NULL;
    double confidence=0.99;
    Napi::Value* pyobj_inliers = NULL;
    Mat inliers;
    Napi::Value* pyobj_flags = NULL;
    int flags=SOLVEPNP_ITERATIVE;
    bool retval;

    const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvec", "tvec", "useExtrinsicGuess", "iterationsCount", "reprojectionError", "confidence", "inliers", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOOOOOO:solvePnPRansac", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_rvec, &pyobj_tvec, &pyobj_useExtrinsicGuess, &pyobj_iterationsCount, &pyobj_reprojectionError, &pyobj_confidence, &pyobj_inliers, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_rvec, rvec, ArgInfo("rvec", 1)) &&
        jsopencv_to_safe(info, pyobj_tvec, tvec, ArgInfo("tvec", 1)) &&
        jsopencv_to_safe(info, pyobj_useExtrinsicGuess, useExtrinsicGuess, ArgInfo("useExtrinsicGuess", 0)) &&
        jsopencv_to_safe(info, pyobj_iterationsCount, iterationsCount, ArgInfo("iterationsCount", 0)) &&
        jsopencv_to_safe(info, pyobj_reprojectionError, reprojectionError, ArgInfo("reprojectionError", 0)) &&
        jsopencv_to_safe(info, pyobj_confidence, confidence, ArgInfo("confidence", 0)) &&
        jsopencv_to_safe(info, pyobj_inliers, inliers, ArgInfo("inliers", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::solvePnPRansac(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec, useExtrinsicGuess, iterationsCount, reprojectionError, confidence, inliers, flags));
        return Py_BuildValue("(NNNN)", jsopencv_from(retval), jsopencv_from(rvec), jsopencv_from(tvec), jsopencv_from(inliers));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_objectPoints = NULL;
    UMat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    UMat imagePoints;
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    UMat distCoeffs;
    Napi::Value* pyobj_rvec = NULL;
    UMat rvec;
    Napi::Value* pyobj_tvec = NULL;
    UMat tvec;
    Napi::Value* pyobj_useExtrinsicGuess = NULL;
    bool useExtrinsicGuess=false;
    Napi::Value* pyobj_iterationsCount = NULL;
    int iterationsCount=100;
    Napi::Value* pyobj_reprojectionError = NULL;
    float reprojectionError=8.0;
    Napi::Value* pyobj_confidence = NULL;
    double confidence=0.99;
    Napi::Value* pyobj_inliers = NULL;
    UMat inliers;
    Napi::Value* pyobj_flags = NULL;
    int flags=SOLVEPNP_ITERATIVE;
    bool retval;

    const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvec", "tvec", "useExtrinsicGuess", "iterationsCount", "reprojectionError", "confidence", "inliers", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOOOOOO:solvePnPRansac", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_rvec, &pyobj_tvec, &pyobj_useExtrinsicGuess, &pyobj_iterationsCount, &pyobj_reprojectionError, &pyobj_confidence, &pyobj_inliers, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_rvec, rvec, ArgInfo("rvec", 1)) &&
        jsopencv_to_safe(info, pyobj_tvec, tvec, ArgInfo("tvec", 1)) &&
        jsopencv_to_safe(info, pyobj_useExtrinsicGuess, useExtrinsicGuess, ArgInfo("useExtrinsicGuess", 0)) &&
        jsopencv_to_safe(info, pyobj_iterationsCount, iterationsCount, ArgInfo("iterationsCount", 0)) &&
        jsopencv_to_safe(info, pyobj_reprojectionError, reprojectionError, ArgInfo("reprojectionError", 0)) &&
        jsopencv_to_safe(info, pyobj_confidence, confidence, ArgInfo("confidence", 0)) &&
        jsopencv_to_safe(info, pyobj_inliers, inliers, ArgInfo("inliers", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::solvePnPRansac(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec, useExtrinsicGuess, iterationsCount, reprojectionError, confidence, inliers, flags));
        return Py_BuildValue("(NNNN)", jsopencv_from(retval), jsopencv_from(rvec), jsopencv_from(tvec), jsopencv_from(inliers));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_objectPoints = NULL;
    Mat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    Mat imagePoints;
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    Mat distCoeffs;
    Napi::Value* pyobj_rvec = NULL;
    Mat rvec;
    Napi::Value* pyobj_tvec = NULL;
    Mat tvec;
    Napi::Value* pyobj_inliers = NULL;
    Mat inliers;
    Napi::Value* pyobj_params = NULL;
    cv::UsacParams params;
    bool retval;

    const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvec", "tvec", "inliers", "params", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOO:solvePnPRansac", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_rvec, &pyobj_tvec, &pyobj_inliers, &pyobj_params) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 1)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_rvec, rvec, ArgInfo("rvec", 1)) &&
        jsopencv_to_safe(info, pyobj_tvec, tvec, ArgInfo("tvec", 1)) &&
        jsopencv_to_safe(info, pyobj_inliers, inliers, ArgInfo("inliers", 1)) &&
        jsopencv_to_safe(info, pyobj_params, params, ArgInfo("params", 0)))
    {
        ERRWRAP2(retval = cv::solvePnPRansac(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec, inliers, params));
        return Py_BuildValue("(NNNNN)", jsopencv_from(retval), jsopencv_from(cameraMatrix), jsopencv_from(rvec), jsopencv_from(tvec), jsopencv_from(inliers));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_objectPoints = NULL;
    UMat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    UMat imagePoints;
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    UMat distCoeffs;
    Napi::Value* pyobj_rvec = NULL;
    UMat rvec;
    Napi::Value* pyobj_tvec = NULL;
    UMat tvec;
    Napi::Value* pyobj_inliers = NULL;
    UMat inliers;
    Napi::Value* pyobj_params = NULL;
    cv::UsacParams params;
    bool retval;

    const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvec", "tvec", "inliers", "params", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOO:solvePnPRansac", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_rvec, &pyobj_tvec, &pyobj_inliers, &pyobj_params) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 1)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_rvec, rvec, ArgInfo("rvec", 1)) &&
        jsopencv_to_safe(info, pyobj_tvec, tvec, ArgInfo("tvec", 1)) &&
        jsopencv_to_safe(info, pyobj_inliers, inliers, ArgInfo("inliers", 1)) &&
        jsopencv_to_safe(info, pyobj_params, params, ArgInfo("params", 0)))
    {
        ERRWRAP2(retval = cv::solvePnPRansac(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec, inliers, params));
        return Py_BuildValue("(NNNNN)", jsopencv_from(retval), jsopencv_from(cameraMatrix), jsopencv_from(rvec), jsopencv_from(tvec), jsopencv_from(inliers));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("solvePnPRansac");

    return NULL;
}

static Napi::Value pyopencv_cv_solvePnPRefineLM(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_objectPoints = NULL;
    Mat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    Mat imagePoints;
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    Mat distCoeffs;
    Napi::Value* pyobj_rvec = NULL;
    Mat rvec;
    Napi::Value* pyobj_tvec = NULL;
    Mat tvec;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria(TermCriteria::EPS + TermCriteria::COUNT, 20, FLT_EPSILON);

    const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvec", "tvec", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|O:solvePnPRefineLM", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_rvec, &pyobj_tvec, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_rvec, rvec, ArgInfo("rvec", 1)) &&
        jsopencv_to_safe(info, pyobj_tvec, tvec, ArgInfo("tvec", 1)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(cv::solvePnPRefineLM(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec, criteria));
        return Py_BuildValue("(NN)", jsopencv_from(rvec), jsopencv_from(tvec));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_objectPoints = NULL;
    UMat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    UMat imagePoints;
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    UMat distCoeffs;
    Napi::Value* pyobj_rvec = NULL;
    UMat rvec;
    Napi::Value* pyobj_tvec = NULL;
    UMat tvec;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria(TermCriteria::EPS + TermCriteria::COUNT, 20, FLT_EPSILON);

    const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvec", "tvec", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|O:solvePnPRefineLM", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_rvec, &pyobj_tvec, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_rvec, rvec, ArgInfo("rvec", 1)) &&
        jsopencv_to_safe(info, pyobj_tvec, tvec, ArgInfo("tvec", 1)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(cv::solvePnPRefineLM(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec, criteria));
        return Py_BuildValue("(NN)", jsopencv_from(rvec), jsopencv_from(tvec));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("solvePnPRefineLM");

    return NULL;
}

static Napi::Value pyopencv_cv_solvePnPRefineVVS(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_objectPoints = NULL;
    Mat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    Mat imagePoints;
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    Mat distCoeffs;
    Napi::Value* pyobj_rvec = NULL;
    Mat rvec;
    Napi::Value* pyobj_tvec = NULL;
    Mat tvec;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria(TermCriteria::EPS + TermCriteria::COUNT, 20, FLT_EPSILON);
    Napi::Value* pyobj_VVSlambda = NULL;
    double VVSlambda=1;

    const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvec", "tvec", "criteria", "VVSlambda", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OO:solvePnPRefineVVS", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_rvec, &pyobj_tvec, &pyobj_criteria, &pyobj_VVSlambda) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_rvec, rvec, ArgInfo("rvec", 1)) &&
        jsopencv_to_safe(info, pyobj_tvec, tvec, ArgInfo("tvec", 1)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)) &&
        jsopencv_to_safe(info, pyobj_VVSlambda, VVSlambda, ArgInfo("VVSlambda", 0)))
    {
        ERRWRAP2(cv::solvePnPRefineVVS(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec, criteria, VVSlambda));
        return Py_BuildValue("(NN)", jsopencv_from(rvec), jsopencv_from(tvec));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_objectPoints = NULL;
    UMat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    UMat imagePoints;
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    UMat distCoeffs;
    Napi::Value* pyobj_rvec = NULL;
    UMat rvec;
    Napi::Value* pyobj_tvec = NULL;
    UMat tvec;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria(TermCriteria::EPS + TermCriteria::COUNT, 20, FLT_EPSILON);
    Napi::Value* pyobj_VVSlambda = NULL;
    double VVSlambda=1;

    const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvec", "tvec", "criteria", "VVSlambda", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OO:solvePnPRefineVVS", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_rvec, &pyobj_tvec, &pyobj_criteria, &pyobj_VVSlambda) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_rvec, rvec, ArgInfo("rvec", 1)) &&
        jsopencv_to_safe(info, pyobj_tvec, tvec, ArgInfo("tvec", 1)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)) &&
        jsopencv_to_safe(info, pyobj_VVSlambda, VVSlambda, ArgInfo("VVSlambda", 0)))
    {
        ERRWRAP2(cv::solvePnPRefineVVS(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec, criteria, VVSlambda));
        return Py_BuildValue("(NN)", jsopencv_from(rvec), jsopencv_from(tvec));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("solvePnPRefineVVS");

    return NULL;
}

static Napi::Value pyopencv_cv_solvePoly(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_coeffs = NULL;
    Mat coeffs;
    Napi::Value* pyobj_roots = NULL;
    Mat roots;
    Napi::Value* pyobj_maxIters = NULL;
    int maxIters=300;
    double retval;

    const char* keywords[] = { "coeffs", "roots", "maxIters", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:solvePoly", (char**)keywords, &pyobj_coeffs, &pyobj_roots, &pyobj_maxIters) &&
        jsopencv_to_safe(info, pyobj_coeffs, coeffs, ArgInfo("coeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_roots, roots, ArgInfo("roots", 1)) &&
        jsopencv_to_safe(info, pyobj_maxIters, maxIters, ArgInfo("maxIters", 0)))
    {
        ERRWRAP2(retval = cv::solvePoly(coeffs, roots, maxIters));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(roots));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_coeffs = NULL;
    UMat coeffs;
    Napi::Value* pyobj_roots = NULL;
    UMat roots;
    Napi::Value* pyobj_maxIters = NULL;
    int maxIters=300;
    double retval;

    const char* keywords[] = { "coeffs", "roots", "maxIters", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:solvePoly", (char**)keywords, &pyobj_coeffs, &pyobj_roots, &pyobj_maxIters) &&
        jsopencv_to_safe(info, pyobj_coeffs, coeffs, ArgInfo("coeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_roots, roots, ArgInfo("roots", 1)) &&
        jsopencv_to_safe(info, pyobj_maxIters, maxIters, ArgInfo("maxIters", 0)))
    {
        ERRWRAP2(retval = cv::solvePoly(coeffs, roots, maxIters));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(roots));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("solvePoly");

    return NULL;
}

static Napi::Value pyopencv_cv_sort(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;

    const char* keywords[] = { "src", "flags", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:sort", (char**)keywords, &pyobj_src, &pyobj_flags, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::sort(src, dst, flags));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;

    const char* keywords[] = { "src", "flags", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:sort", (char**)keywords, &pyobj_src, &pyobj_flags, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::sort(src, dst, flags));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("sort");

    return NULL;
}

static Napi::Value pyopencv_cv_sortIdx(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;

    const char* keywords[] = { "src", "flags", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:sortIdx", (char**)keywords, &pyobj_src, &pyobj_flags, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::sortIdx(src, dst, flags));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;

    const char* keywords[] = { "src", "flags", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:sortIdx", (char**)keywords, &pyobj_src, &pyobj_flags, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::sortIdx(src, dst, flags));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("sortIdx");

    return NULL;
}

static Napi::Value pyopencv_cv_spatialGradient(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dx = NULL;
    Mat dx;
    Napi::Value* pyobj_dy = NULL;
    Mat dy;
    Napi::Value* pyobj_ksize = NULL;
    int ksize=3;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "dx", "dy", "ksize", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOO:spatialGradient", (char**)keywords, &pyobj_src, &pyobj_dx, &pyobj_dy, &pyobj_ksize, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dx, dx, ArgInfo("dx", 1)) &&
        jsopencv_to_safe(info, pyobj_dy, dy, ArgInfo("dy", 1)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::spatialGradient(src, dx, dy, ksize, borderType));
        return Py_BuildValue("(NN)", jsopencv_from(dx), jsopencv_from(dy));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dx = NULL;
    UMat dx;
    Napi::Value* pyobj_dy = NULL;
    UMat dy;
    Napi::Value* pyobj_ksize = NULL;
    int ksize=3;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "dx", "dy", "ksize", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOO:spatialGradient", (char**)keywords, &pyobj_src, &pyobj_dx, &pyobj_dy, &pyobj_ksize, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dx, dx, ArgInfo("dx", 1)) &&
        jsopencv_to_safe(info, pyobj_dy, dy, ArgInfo("dy", 1)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::spatialGradient(src, dx, dy, ksize, borderType));
        return Py_BuildValue("(NN)", jsopencv_from(dx), jsopencv_from(dy));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("spatialGradient");

    return NULL;
}

static Napi::Value pyopencv_cv_split(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_m = NULL;
    Mat m;
    Napi::Value* pyobj_mv = NULL;
    vector_Mat mv;

    const char* keywords[] = { "m", "mv", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:split", (char**)keywords, &pyobj_m, &pyobj_mv) &&
        jsopencv_to_safe(info, pyobj_m, m, ArgInfo("m", 0)) &&
        jsopencv_to_safe(info, pyobj_mv, mv, ArgInfo("mv", 1)))
    {
        ERRWRAP2(cv::split(m, mv));
        return jsopencv_from(mv);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_m = NULL;
    UMat m;
    Napi::Value* pyobj_mv = NULL;
    vector_UMat mv;

    const char* keywords[] = { "m", "mv", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:split", (char**)keywords, &pyobj_m, &pyobj_mv) &&
        jsopencv_to_safe(info, pyobj_m, m, ArgInfo("m", 0)) &&
        jsopencv_to_safe(info, pyobj_mv, mv, ArgInfo("mv", 1)))
    {
        ERRWRAP2(cv::split(m, mv));
        return jsopencv_from(mv);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("split");

    return NULL;
}

static Napi::Value pyopencv_cv_sqrBoxFilter(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=0;
    Napi::Value* pyobj_ksize = NULL;
    Size ksize;
    Napi::Value* pyobj_anchor = NULL;
    Point anchor=Point(-1, -1);
    Napi::Value* pyobj_normalize = NULL;
    bool normalize=true;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "ddepth", "ksize", "dst", "anchor", "normalize", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:sqrBoxFilter", (char**)keywords, &pyobj_src, &pyobj_ddepth, &pyobj_ksize, &pyobj_dst, &pyobj_anchor, &pyobj_normalize, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_anchor, anchor, ArgInfo("anchor", 0)) &&
        jsopencv_to_safe(info, pyobj_normalize, normalize, ArgInfo("normalize", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::sqrBoxFilter(src, dst, ddepth, ksize, anchor, normalize, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=0;
    Napi::Value* pyobj_ksize = NULL;
    Size ksize;
    Napi::Value* pyobj_anchor = NULL;
    Point anchor=Point(-1, -1);
    Napi::Value* pyobj_normalize = NULL;
    bool normalize=true;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "ddepth", "ksize", "dst", "anchor", "normalize", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:sqrBoxFilter", (char**)keywords, &pyobj_src, &pyobj_ddepth, &pyobj_ksize, &pyobj_dst, &pyobj_anchor, &pyobj_normalize, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_anchor, anchor, ArgInfo("anchor", 0)) &&
        jsopencv_to_safe(info, pyobj_normalize, normalize, ArgInfo("normalize", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::sqrBoxFilter(src, dst, ddepth, ksize, anchor, normalize, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("sqrBoxFilter");

    return NULL;
}

static Napi::Value pyopencv_cv_sqrt(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;

    const char* keywords[] = { "src", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:sqrt", (char**)keywords, &pyobj_src, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::sqrt(src, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;

    const char* keywords[] = { "src", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:sqrt", (char**)keywords, &pyobj_src, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::sqrt(src, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("sqrt");

    return NULL;
}

static Napi::Value pyopencv_cv_stackBlur(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_ksize = NULL;
    Size ksize;

    const char* keywords[] = { "src", "ksize", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:stackBlur", (char**)keywords, &pyobj_src, &pyobj_ksize, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)))
    {
        ERRWRAP2(cv::stackBlur(src, dst, ksize));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_ksize = NULL;
    Size ksize;

    const char* keywords[] = { "src", "ksize", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:stackBlur", (char**)keywords, &pyobj_src, &pyobj_ksize, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)))
    {
        ERRWRAP2(cv::stackBlur(src, dst, ksize));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("stackBlur");

    return NULL;
}

static Napi::Value pyopencv_cv_startWindowThread(const Napi::CallbackInfo &info)
{
    using namespace cv;

    int retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::startWindowThread());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_stereoCalibrate(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_objectPoints = NULL;
    vector_Mat objectPoints;
    Napi::Value* pyobj_imagePoints1 = NULL;
    vector_Mat imagePoints1;
    Napi::Value* pyobj_imagePoints2 = NULL;
    vector_Mat imagePoints2;
    Napi::Value* pyobj_cameraMatrix1 = NULL;
    Mat cameraMatrix1;
    Napi::Value* pyobj_distCoeffs1 = NULL;
    Mat distCoeffs1;
    Napi::Value* pyobj_cameraMatrix2 = NULL;
    Mat cameraMatrix2;
    Napi::Value* pyobj_distCoeffs2 = NULL;
    Mat distCoeffs2;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_R = NULL;
    Mat R;
    Napi::Value* pyobj_T = NULL;
    Mat T;
    Napi::Value* pyobj_E = NULL;
    Mat E;
    Napi::Value* pyobj_F = NULL;
    Mat F;
    Napi::Value* pyobj_flags = NULL;
    int flags=CALIB_FIX_INTRINSIC;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6);
    double retval;

    const char* keywords[] = { "objectPoints", "imagePoints1", "imagePoints2", "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "imageSize", "R", "T", "E", "F", "flags", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOOO|OOOOOO:stereoCalibrate", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints1, &pyobj_imagePoints2, &pyobj_cameraMatrix1, &pyobj_distCoeffs1, &pyobj_cameraMatrix2, &pyobj_distCoeffs2, &pyobj_imageSize, &pyobj_R, &pyobj_T, &pyobj_E, &pyobj_F, &pyobj_flags, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints1, imagePoints1, ArgInfo("imagePoints1", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints2, imagePoints2, ArgInfo("imagePoints2", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix1, cameraMatrix1, ArgInfo("cameraMatrix1", 1)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs1, distCoeffs1, ArgInfo("distCoeffs1", 1)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix2, cameraMatrix2, ArgInfo("cameraMatrix2", 1)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs2, distCoeffs2, ArgInfo("distCoeffs2", 1)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 1)) &&
        jsopencv_to_safe(info, pyobj_T, T, ArgInfo("T", 1)) &&
        jsopencv_to_safe(info, pyobj_E, E, ArgInfo("E", 1)) &&
        jsopencv_to_safe(info, pyobj_F, F, ArgInfo("F", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(retval = cv::stereoCalibrate(objectPoints, imagePoints1, imagePoints2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T, E, F, flags, criteria));
        return Py_BuildValue("(NNNNNNNNN)", jsopencv_from(retval), jsopencv_from(cameraMatrix1), jsopencv_from(distCoeffs1), jsopencv_from(cameraMatrix2), jsopencv_from(distCoeffs2), jsopencv_from(R), jsopencv_from(T), jsopencv_from(E), jsopencv_from(F));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_objectPoints = NULL;
    vector_UMat objectPoints;
    Napi::Value* pyobj_imagePoints1 = NULL;
    vector_UMat imagePoints1;
    Napi::Value* pyobj_imagePoints2 = NULL;
    vector_UMat imagePoints2;
    Napi::Value* pyobj_cameraMatrix1 = NULL;
    UMat cameraMatrix1;
    Napi::Value* pyobj_distCoeffs1 = NULL;
    UMat distCoeffs1;
    Napi::Value* pyobj_cameraMatrix2 = NULL;
    UMat cameraMatrix2;
    Napi::Value* pyobj_distCoeffs2 = NULL;
    UMat distCoeffs2;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_R = NULL;
    UMat R;
    Napi::Value* pyobj_T = NULL;
    UMat T;
    Napi::Value* pyobj_E = NULL;
    UMat E;
    Napi::Value* pyobj_F = NULL;
    UMat F;
    Napi::Value* pyobj_flags = NULL;
    int flags=CALIB_FIX_INTRINSIC;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6);
    double retval;

    const char* keywords[] = { "objectPoints", "imagePoints1", "imagePoints2", "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "imageSize", "R", "T", "E", "F", "flags", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOOO|OOOOOO:stereoCalibrate", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints1, &pyobj_imagePoints2, &pyobj_cameraMatrix1, &pyobj_distCoeffs1, &pyobj_cameraMatrix2, &pyobj_distCoeffs2, &pyobj_imageSize, &pyobj_R, &pyobj_T, &pyobj_E, &pyobj_F, &pyobj_flags, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints1, imagePoints1, ArgInfo("imagePoints1", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints2, imagePoints2, ArgInfo("imagePoints2", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix1, cameraMatrix1, ArgInfo("cameraMatrix1", 1)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs1, distCoeffs1, ArgInfo("distCoeffs1", 1)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix2, cameraMatrix2, ArgInfo("cameraMatrix2", 1)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs2, distCoeffs2, ArgInfo("distCoeffs2", 1)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 1)) &&
        jsopencv_to_safe(info, pyobj_T, T, ArgInfo("T", 1)) &&
        jsopencv_to_safe(info, pyobj_E, E, ArgInfo("E", 1)) &&
        jsopencv_to_safe(info, pyobj_F, F, ArgInfo("F", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(retval = cv::stereoCalibrate(objectPoints, imagePoints1, imagePoints2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T, E, F, flags, criteria));
        return Py_BuildValue("(NNNNNNNNN)", jsopencv_from(retval), jsopencv_from(cameraMatrix1), jsopencv_from(distCoeffs1), jsopencv_from(cameraMatrix2), jsopencv_from(distCoeffs2), jsopencv_from(R), jsopencv_from(T), jsopencv_from(E), jsopencv_from(F));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_objectPoints = NULL;
    vector_Mat objectPoints;
    Napi::Value* pyobj_imagePoints1 = NULL;
    vector_Mat imagePoints1;
    Napi::Value* pyobj_imagePoints2 = NULL;
    vector_Mat imagePoints2;
    Napi::Value* pyobj_cameraMatrix1 = NULL;
    Mat cameraMatrix1;
    Napi::Value* pyobj_distCoeffs1 = NULL;
    Mat distCoeffs1;
    Napi::Value* pyobj_cameraMatrix2 = NULL;
    Mat cameraMatrix2;
    Napi::Value* pyobj_distCoeffs2 = NULL;
    Mat distCoeffs2;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_R = NULL;
    Mat R;
    Napi::Value* pyobj_T = NULL;
    Mat T;
    Napi::Value* pyobj_E = NULL;
    Mat E;
    Napi::Value* pyobj_F = NULL;
    Mat F;
    Napi::Value* pyobj_perViewErrors = NULL;
    Mat perViewErrors;
    Napi::Value* pyobj_flags = NULL;
    int flags=CALIB_FIX_INTRINSIC;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6);
    double retval;

    const char* keywords[] = { "objectPoints", "imagePoints1", "imagePoints2", "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "imageSize", "R", "T", "E", "F", "perViewErrors", "flags", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOOOOO|OOOOO:stereoCalibrate", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints1, &pyobj_imagePoints2, &pyobj_cameraMatrix1, &pyobj_distCoeffs1, &pyobj_cameraMatrix2, &pyobj_distCoeffs2, &pyobj_imageSize, &pyobj_R, &pyobj_T, &pyobj_E, &pyobj_F, &pyobj_perViewErrors, &pyobj_flags, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints1, imagePoints1, ArgInfo("imagePoints1", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints2, imagePoints2, ArgInfo("imagePoints2", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix1, cameraMatrix1, ArgInfo("cameraMatrix1", 1)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs1, distCoeffs1, ArgInfo("distCoeffs1", 1)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix2, cameraMatrix2, ArgInfo("cameraMatrix2", 1)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs2, distCoeffs2, ArgInfo("distCoeffs2", 1)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 1)) &&
        jsopencv_to_safe(info, pyobj_T, T, ArgInfo("T", 1)) &&
        jsopencv_to_safe(info, pyobj_E, E, ArgInfo("E", 1)) &&
        jsopencv_to_safe(info, pyobj_F, F, ArgInfo("F", 1)) &&
        jsopencv_to_safe(info, pyobj_perViewErrors, perViewErrors, ArgInfo("perViewErrors", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(retval = cv::stereoCalibrate(objectPoints, imagePoints1, imagePoints2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T, E, F, perViewErrors, flags, criteria));
        return Py_BuildValue("(NNNNNNNNNN)", jsopencv_from(retval), jsopencv_from(cameraMatrix1), jsopencv_from(distCoeffs1), jsopencv_from(cameraMatrix2), jsopencv_from(distCoeffs2), jsopencv_from(R), jsopencv_from(T), jsopencv_from(E), jsopencv_from(F), jsopencv_from(perViewErrors));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_objectPoints = NULL;
    vector_UMat objectPoints;
    Napi::Value* pyobj_imagePoints1 = NULL;
    vector_UMat imagePoints1;
    Napi::Value* pyobj_imagePoints2 = NULL;
    vector_UMat imagePoints2;
    Napi::Value* pyobj_cameraMatrix1 = NULL;
    UMat cameraMatrix1;
    Napi::Value* pyobj_distCoeffs1 = NULL;
    UMat distCoeffs1;
    Napi::Value* pyobj_cameraMatrix2 = NULL;
    UMat cameraMatrix2;
    Napi::Value* pyobj_distCoeffs2 = NULL;
    UMat distCoeffs2;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_R = NULL;
    UMat R;
    Napi::Value* pyobj_T = NULL;
    UMat T;
    Napi::Value* pyobj_E = NULL;
    UMat E;
    Napi::Value* pyobj_F = NULL;
    UMat F;
    Napi::Value* pyobj_perViewErrors = NULL;
    UMat perViewErrors;
    Napi::Value* pyobj_flags = NULL;
    int flags=CALIB_FIX_INTRINSIC;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6);
    double retval;

    const char* keywords[] = { "objectPoints", "imagePoints1", "imagePoints2", "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "imageSize", "R", "T", "E", "F", "perViewErrors", "flags", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOOOOO|OOOOO:stereoCalibrate", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints1, &pyobj_imagePoints2, &pyobj_cameraMatrix1, &pyobj_distCoeffs1, &pyobj_cameraMatrix2, &pyobj_distCoeffs2, &pyobj_imageSize, &pyobj_R, &pyobj_T, &pyobj_E, &pyobj_F, &pyobj_perViewErrors, &pyobj_flags, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints1, imagePoints1, ArgInfo("imagePoints1", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints2, imagePoints2, ArgInfo("imagePoints2", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix1, cameraMatrix1, ArgInfo("cameraMatrix1", 1)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs1, distCoeffs1, ArgInfo("distCoeffs1", 1)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix2, cameraMatrix2, ArgInfo("cameraMatrix2", 1)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs2, distCoeffs2, ArgInfo("distCoeffs2", 1)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 1)) &&
        jsopencv_to_safe(info, pyobj_T, T, ArgInfo("T", 1)) &&
        jsopencv_to_safe(info, pyobj_E, E, ArgInfo("E", 1)) &&
        jsopencv_to_safe(info, pyobj_F, F, ArgInfo("F", 1)) &&
        jsopencv_to_safe(info, pyobj_perViewErrors, perViewErrors, ArgInfo("perViewErrors", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(retval = cv::stereoCalibrate(objectPoints, imagePoints1, imagePoints2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T, E, F, perViewErrors, flags, criteria));
        return Py_BuildValue("(NNNNNNNNNN)", jsopencv_from(retval), jsopencv_from(cameraMatrix1), jsopencv_from(distCoeffs1), jsopencv_from(cameraMatrix2), jsopencv_from(distCoeffs2), jsopencv_from(R), jsopencv_from(T), jsopencv_from(E), jsopencv_from(F), jsopencv_from(perViewErrors));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("stereoCalibrate");

    return NULL;
}

static Napi::Value pyopencv_cv_stereoCalibrateExtended(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_objectPoints = NULL;
    vector_Mat objectPoints;
    Napi::Value* pyobj_imagePoints1 = NULL;
    vector_Mat imagePoints1;
    Napi::Value* pyobj_imagePoints2 = NULL;
    vector_Mat imagePoints2;
    Napi::Value* pyobj_cameraMatrix1 = NULL;
    Mat cameraMatrix1;
    Napi::Value* pyobj_distCoeffs1 = NULL;
    Mat distCoeffs1;
    Napi::Value* pyobj_cameraMatrix2 = NULL;
    Mat cameraMatrix2;
    Napi::Value* pyobj_distCoeffs2 = NULL;
    Mat distCoeffs2;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_R = NULL;
    Mat R;
    Napi::Value* pyobj_T = NULL;
    Mat T;
    Napi::Value* pyobj_E = NULL;
    Mat E;
    Napi::Value* pyobj_F = NULL;
    Mat F;
    Napi::Value* pyobj_rvecs = NULL;
    vector_Mat rvecs;
    Napi::Value* pyobj_tvecs = NULL;
    vector_Mat tvecs;
    Napi::Value* pyobj_perViewErrors = NULL;
    Mat perViewErrors;
    Napi::Value* pyobj_flags = NULL;
    int flags=CALIB_FIX_INTRINSIC;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6);
    double retval;

    const char* keywords[] = { "objectPoints", "imagePoints1", "imagePoints2", "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "imageSize", "R", "T", "E", "F", "rvecs", "tvecs", "perViewErrors", "flags", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOOOOO|OOOOOOO:stereoCalibrateExtended", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints1, &pyobj_imagePoints2, &pyobj_cameraMatrix1, &pyobj_distCoeffs1, &pyobj_cameraMatrix2, &pyobj_distCoeffs2, &pyobj_imageSize, &pyobj_R, &pyobj_T, &pyobj_E, &pyobj_F, &pyobj_rvecs, &pyobj_tvecs, &pyobj_perViewErrors, &pyobj_flags, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints1, imagePoints1, ArgInfo("imagePoints1", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints2, imagePoints2, ArgInfo("imagePoints2", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix1, cameraMatrix1, ArgInfo("cameraMatrix1", 1)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs1, distCoeffs1, ArgInfo("distCoeffs1", 1)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix2, cameraMatrix2, ArgInfo("cameraMatrix2", 1)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs2, distCoeffs2, ArgInfo("distCoeffs2", 1)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 1)) &&
        jsopencv_to_safe(info, pyobj_T, T, ArgInfo("T", 1)) &&
        jsopencv_to_safe(info, pyobj_E, E, ArgInfo("E", 1)) &&
        jsopencv_to_safe(info, pyobj_F, F, ArgInfo("F", 1)) &&
        jsopencv_to_safe(info, pyobj_rvecs, rvecs, ArgInfo("rvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_tvecs, tvecs, ArgInfo("tvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_perViewErrors, perViewErrors, ArgInfo("perViewErrors", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(retval = cv::stereoCalibrate(objectPoints, imagePoints1, imagePoints2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T, E, F, rvecs, tvecs, perViewErrors, flags, criteria));
        return Py_BuildValue("(NNNNNNNNNNNN)", jsopencv_from(retval), jsopencv_from(cameraMatrix1), jsopencv_from(distCoeffs1), jsopencv_from(cameraMatrix2), jsopencv_from(distCoeffs2), jsopencv_from(R), jsopencv_from(T), jsopencv_from(E), jsopencv_from(F), jsopencv_from(rvecs), jsopencv_from(tvecs), jsopencv_from(perViewErrors));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_objectPoints = NULL;
    vector_UMat objectPoints;
    Napi::Value* pyobj_imagePoints1 = NULL;
    vector_UMat imagePoints1;
    Napi::Value* pyobj_imagePoints2 = NULL;
    vector_UMat imagePoints2;
    Napi::Value* pyobj_cameraMatrix1 = NULL;
    UMat cameraMatrix1;
    Napi::Value* pyobj_distCoeffs1 = NULL;
    UMat distCoeffs1;
    Napi::Value* pyobj_cameraMatrix2 = NULL;
    UMat cameraMatrix2;
    Napi::Value* pyobj_distCoeffs2 = NULL;
    UMat distCoeffs2;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_R = NULL;
    UMat R;
    Napi::Value* pyobj_T = NULL;
    UMat T;
    Napi::Value* pyobj_E = NULL;
    UMat E;
    Napi::Value* pyobj_F = NULL;
    UMat F;
    Napi::Value* pyobj_rvecs = NULL;
    vector_UMat rvecs;
    Napi::Value* pyobj_tvecs = NULL;
    vector_UMat tvecs;
    Napi::Value* pyobj_perViewErrors = NULL;
    UMat perViewErrors;
    Napi::Value* pyobj_flags = NULL;
    int flags=CALIB_FIX_INTRINSIC;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6);
    double retval;

    const char* keywords[] = { "objectPoints", "imagePoints1", "imagePoints2", "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "imageSize", "R", "T", "E", "F", "rvecs", "tvecs", "perViewErrors", "flags", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOOOOO|OOOOOOO:stereoCalibrateExtended", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints1, &pyobj_imagePoints2, &pyobj_cameraMatrix1, &pyobj_distCoeffs1, &pyobj_cameraMatrix2, &pyobj_distCoeffs2, &pyobj_imageSize, &pyobj_R, &pyobj_T, &pyobj_E, &pyobj_F, &pyobj_rvecs, &pyobj_tvecs, &pyobj_perViewErrors, &pyobj_flags, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints1, imagePoints1, ArgInfo("imagePoints1", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints2, imagePoints2, ArgInfo("imagePoints2", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix1, cameraMatrix1, ArgInfo("cameraMatrix1", 1)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs1, distCoeffs1, ArgInfo("distCoeffs1", 1)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix2, cameraMatrix2, ArgInfo("cameraMatrix2", 1)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs2, distCoeffs2, ArgInfo("distCoeffs2", 1)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 1)) &&
        jsopencv_to_safe(info, pyobj_T, T, ArgInfo("T", 1)) &&
        jsopencv_to_safe(info, pyobj_E, E, ArgInfo("E", 1)) &&
        jsopencv_to_safe(info, pyobj_F, F, ArgInfo("F", 1)) &&
        jsopencv_to_safe(info, pyobj_rvecs, rvecs, ArgInfo("rvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_tvecs, tvecs, ArgInfo("tvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_perViewErrors, perViewErrors, ArgInfo("perViewErrors", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(retval = cv::stereoCalibrate(objectPoints, imagePoints1, imagePoints2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T, E, F, rvecs, tvecs, perViewErrors, flags, criteria));
        return Py_BuildValue("(NNNNNNNNNNNN)", jsopencv_from(retval), jsopencv_from(cameraMatrix1), jsopencv_from(distCoeffs1), jsopencv_from(cameraMatrix2), jsopencv_from(distCoeffs2), jsopencv_from(R), jsopencv_from(T), jsopencv_from(E), jsopencv_from(F), jsopencv_from(rvecs), jsopencv_from(tvecs), jsopencv_from(perViewErrors));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("stereoCalibrateExtended");

    return NULL;
}

static Napi::Value pyopencv_cv_stereoRectify(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_cameraMatrix1 = NULL;
    Mat cameraMatrix1;
    Napi::Value* pyobj_distCoeffs1 = NULL;
    Mat distCoeffs1;
    Napi::Value* pyobj_cameraMatrix2 = NULL;
    Mat cameraMatrix2;
    Napi::Value* pyobj_distCoeffs2 = NULL;
    Mat distCoeffs2;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_R = NULL;
    Mat R;
    Napi::Value* pyobj_T = NULL;
    Mat T;
    Napi::Value* pyobj_R1 = NULL;
    Mat R1;
    Napi::Value* pyobj_R2 = NULL;
    Mat R2;
    Napi::Value* pyobj_P1 = NULL;
    Mat P1;
    Napi::Value* pyobj_P2 = NULL;
    Mat P2;
    Napi::Value* pyobj_Q = NULL;
    Mat Q;
    Napi::Value* pyobj_flags = NULL;
    int flags=CALIB_ZERO_DISPARITY;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=-1;
    Napi::Value* pyobj_newImageSize = NULL;
    Size newImageSize;
    Rect validPixROI1;
    Rect validPixROI2;

    const char* keywords[] = { "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "imageSize", "R", "T", "R1", "R2", "P1", "P2", "Q", "flags", "alpha", "newImageSize", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOO|OOOOOOOO:stereoRectify", (char**)keywords, &pyobj_cameraMatrix1, &pyobj_distCoeffs1, &pyobj_cameraMatrix2, &pyobj_distCoeffs2, &pyobj_imageSize, &pyobj_R, &pyobj_T, &pyobj_R1, &pyobj_R2, &pyobj_P1, &pyobj_P2, &pyobj_Q, &pyobj_flags, &pyobj_alpha, &pyobj_newImageSize) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix1, cameraMatrix1, ArgInfo("cameraMatrix1", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs1, distCoeffs1, ArgInfo("distCoeffs1", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix2, cameraMatrix2, ArgInfo("cameraMatrix2", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs2, distCoeffs2, ArgInfo("distCoeffs2", 0)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 0)) &&
        jsopencv_to_safe(info, pyobj_T, T, ArgInfo("T", 0)) &&
        jsopencv_to_safe(info, pyobj_R1, R1, ArgInfo("R1", 1)) &&
        jsopencv_to_safe(info, pyobj_R2, R2, ArgInfo("R2", 1)) &&
        jsopencv_to_safe(info, pyobj_P1, P1, ArgInfo("P1", 1)) &&
        jsopencv_to_safe(info, pyobj_P2, P2, ArgInfo("P2", 1)) &&
        jsopencv_to_safe(info, pyobj_Q, Q, ArgInfo("Q", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_newImageSize, newImageSize, ArgInfo("newImageSize", 0)))
    {
        ERRWRAP2(cv::stereoRectify(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T, R1, R2, P1, P2, Q, flags, alpha, newImageSize, &validPixROI1, &validPixROI2));
        return Py_BuildValue("(NNNNNNN)", jsopencv_from(R1), jsopencv_from(R2), jsopencv_from(P1), jsopencv_from(P2), jsopencv_from(Q), jsopencv_from(validPixROI1), jsopencv_from(validPixROI2));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_cameraMatrix1 = NULL;
    UMat cameraMatrix1;
    Napi::Value* pyobj_distCoeffs1 = NULL;
    UMat distCoeffs1;
    Napi::Value* pyobj_cameraMatrix2 = NULL;
    UMat cameraMatrix2;
    Napi::Value* pyobj_distCoeffs2 = NULL;
    UMat distCoeffs2;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_R = NULL;
    UMat R;
    Napi::Value* pyobj_T = NULL;
    UMat T;
    Napi::Value* pyobj_R1 = NULL;
    UMat R1;
    Napi::Value* pyobj_R2 = NULL;
    UMat R2;
    Napi::Value* pyobj_P1 = NULL;
    UMat P1;
    Napi::Value* pyobj_P2 = NULL;
    UMat P2;
    Napi::Value* pyobj_Q = NULL;
    UMat Q;
    Napi::Value* pyobj_flags = NULL;
    int flags=CALIB_ZERO_DISPARITY;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=-1;
    Napi::Value* pyobj_newImageSize = NULL;
    Size newImageSize;
    Rect validPixROI1;
    Rect validPixROI2;

    const char* keywords[] = { "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "imageSize", "R", "T", "R1", "R2", "P1", "P2", "Q", "flags", "alpha", "newImageSize", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOO|OOOOOOOO:stereoRectify", (char**)keywords, &pyobj_cameraMatrix1, &pyobj_distCoeffs1, &pyobj_cameraMatrix2, &pyobj_distCoeffs2, &pyobj_imageSize, &pyobj_R, &pyobj_T, &pyobj_R1, &pyobj_R2, &pyobj_P1, &pyobj_P2, &pyobj_Q, &pyobj_flags, &pyobj_alpha, &pyobj_newImageSize) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix1, cameraMatrix1, ArgInfo("cameraMatrix1", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs1, distCoeffs1, ArgInfo("distCoeffs1", 0)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix2, cameraMatrix2, ArgInfo("cameraMatrix2", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs2, distCoeffs2, ArgInfo("distCoeffs2", 0)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 0)) &&
        jsopencv_to_safe(info, pyobj_T, T, ArgInfo("T", 0)) &&
        jsopencv_to_safe(info, pyobj_R1, R1, ArgInfo("R1", 1)) &&
        jsopencv_to_safe(info, pyobj_R2, R2, ArgInfo("R2", 1)) &&
        jsopencv_to_safe(info, pyobj_P1, P1, ArgInfo("P1", 1)) &&
        jsopencv_to_safe(info, pyobj_P2, P2, ArgInfo("P2", 1)) &&
        jsopencv_to_safe(info, pyobj_Q, Q, ArgInfo("Q", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_newImageSize, newImageSize, ArgInfo("newImageSize", 0)))
    {
        ERRWRAP2(cv::stereoRectify(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T, R1, R2, P1, P2, Q, flags, alpha, newImageSize, &validPixROI1, &validPixROI2));
        return Py_BuildValue("(NNNNNNN)", jsopencv_from(R1), jsopencv_from(R2), jsopencv_from(P1), jsopencv_from(P2), jsopencv_from(Q), jsopencv_from(validPixROI1), jsopencv_from(validPixROI2));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("stereoRectify");

    return NULL;
}

static Napi::Value pyopencv_cv_stereoRectifyUncalibrated(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_points1 = NULL;
    Mat points1;
    Napi::Value* pyobj_points2 = NULL;
    Mat points2;
    Napi::Value* pyobj_F = NULL;
    Mat F;
    Napi::Value* pyobj_imgSize = NULL;
    Size imgSize;
    Napi::Value* pyobj_H1 = NULL;
    Mat H1;
    Napi::Value* pyobj_H2 = NULL;
    Mat H2;
    Napi::Value* pyobj_threshold = NULL;
    double threshold=5;
    bool retval;

    const char* keywords[] = { "points1", "points2", "F", "imgSize", "H1", "H2", "threshold", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:stereoRectifyUncalibrated", (char**)keywords, &pyobj_points1, &pyobj_points2, &pyobj_F, &pyobj_imgSize, &pyobj_H1, &pyobj_H2, &pyobj_threshold) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_F, F, ArgInfo("F", 0)) &&
        jsopencv_to_safe(info, pyobj_imgSize, imgSize, ArgInfo("imgSize", 0)) &&
        jsopencv_to_safe(info, pyobj_H1, H1, ArgInfo("H1", 1)) &&
        jsopencv_to_safe(info, pyobj_H2, H2, ArgInfo("H2", 1)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)))
    {
        ERRWRAP2(retval = cv::stereoRectifyUncalibrated(points1, points2, F, imgSize, H1, H2, threshold));
        return Py_BuildValue("(NNN)", jsopencv_from(retval), jsopencv_from(H1), jsopencv_from(H2));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_points1 = NULL;
    UMat points1;
    Napi::Value* pyobj_points2 = NULL;
    UMat points2;
    Napi::Value* pyobj_F = NULL;
    UMat F;
    Napi::Value* pyobj_imgSize = NULL;
    Size imgSize;
    Napi::Value* pyobj_H1 = NULL;
    UMat H1;
    Napi::Value* pyobj_H2 = NULL;
    UMat H2;
    Napi::Value* pyobj_threshold = NULL;
    double threshold=5;
    bool retval;

    const char* keywords[] = { "points1", "points2", "F", "imgSize", "H1", "H2", "threshold", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:stereoRectifyUncalibrated", (char**)keywords, &pyobj_points1, &pyobj_points2, &pyobj_F, &pyobj_imgSize, &pyobj_H1, &pyobj_H2, &pyobj_threshold) &&
        jsopencv_to_safe(info, pyobj_points1, points1, ArgInfo("points1", 0)) &&
        jsopencv_to_safe(info, pyobj_points2, points2, ArgInfo("points2", 0)) &&
        jsopencv_to_safe(info, pyobj_F, F, ArgInfo("F", 0)) &&
        jsopencv_to_safe(info, pyobj_imgSize, imgSize, ArgInfo("imgSize", 0)) &&
        jsopencv_to_safe(info, pyobj_H1, H1, ArgInfo("H1", 1)) &&
        jsopencv_to_safe(info, pyobj_H2, H2, ArgInfo("H2", 1)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)))
    {
        ERRWRAP2(retval = cv::stereoRectifyUncalibrated(points1, points2, F, imgSize, H1, H2, threshold));
        return Py_BuildValue("(NNN)", jsopencv_from(retval), jsopencv_from(H1), jsopencv_from(H2));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("stereoRectifyUncalibrated");

    return NULL;
}

static Napi::Value pyopencv_cv_stylization(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_sigma_s = NULL;
    float sigma_s=60;
    Napi::Value* pyobj_sigma_r = NULL;
    float sigma_r=0.45f;

    const char* keywords[] = { "src", "dst", "sigma_s", "sigma_r", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:stylization", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_sigma_s, &pyobj_sigma_r) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_sigma_s, sigma_s, ArgInfo("sigma_s", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_r, sigma_r, ArgInfo("sigma_r", 0)))
    {
        ERRWRAP2(cv::stylization(src, dst, sigma_s, sigma_r));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_sigma_s = NULL;
    float sigma_s=60;
    Napi::Value* pyobj_sigma_r = NULL;
    float sigma_r=0.45f;

    const char* keywords[] = { "src", "dst", "sigma_s", "sigma_r", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:stylization", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_sigma_s, &pyobj_sigma_r) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_sigma_s, sigma_s, ArgInfo("sigma_s", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_r, sigma_r, ArgInfo("sigma_r", 0)))
    {
        ERRWRAP2(cv::stylization(src, dst, sigma_s, sigma_r));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("stylization");

    return NULL;
}

static Napi::Value pyopencv_cv_subtract(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    Mat src1;
    Napi::Value* pyobj_src2 = NULL;
    Mat src2;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Napi::Value* pyobj_dtype = NULL;
    int dtype=-1;

    const char* keywords[] = { "src1", "src2", "dst", "mask", "dtype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:subtract", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst, &pyobj_mask, &pyobj_dtype) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)) &&
        jsopencv_to_safe(info, pyobj_dtype, dtype, ArgInfo("dtype", 0)))
    {
        ERRWRAP2(cv::subtract(src1, src2, dst, mask, dtype));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    UMat src1;
    Napi::Value* pyobj_src2 = NULL;
    UMat src2;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    Napi::Value* pyobj_dtype = NULL;
    int dtype=-1;

    const char* keywords[] = { "src1", "src2", "dst", "mask", "dtype", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:subtract", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst, &pyobj_mask, &pyobj_dtype) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)) &&
        jsopencv_to_safe(info, pyobj_dtype, dtype, ArgInfo("dtype", 0)))
    {
        ERRWRAP2(cv::subtract(src1, src2, dst, mask, dtype));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("subtract");

    return NULL;
}

static Napi::Value pyopencv_cv_sumElems(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Scalar retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:sumElems", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::sum(src));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Scalar retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:sumElems", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::sum(src));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("sumElems");

    return NULL;
}

static Napi::Value pyopencv_cv_textureFlattening(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_low_threshold = NULL;
    float low_threshold=30;
    Napi::Value* pyobj_high_threshold = NULL;
    float high_threshold=45;
    Napi::Value* pyobj_kernel_size = NULL;
    int kernel_size=3;

    const char* keywords[] = { "src", "mask", "dst", "low_threshold", "high_threshold", "kernel_size", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOO:textureFlattening", (char**)keywords, &pyobj_src, &pyobj_mask, &pyobj_dst, &pyobj_low_threshold, &pyobj_high_threshold, &pyobj_kernel_size) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_low_threshold, low_threshold, ArgInfo("low_threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_high_threshold, high_threshold, ArgInfo("high_threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_kernel_size, kernel_size, ArgInfo("kernel_size", 0)))
    {
        ERRWRAP2(cv::textureFlattening(src, mask, dst, low_threshold, high_threshold, kernel_size));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_low_threshold = NULL;
    float low_threshold=30;
    Napi::Value* pyobj_high_threshold = NULL;
    float high_threshold=45;
    Napi::Value* pyobj_kernel_size = NULL;
    int kernel_size=3;

    const char* keywords[] = { "src", "mask", "dst", "low_threshold", "high_threshold", "kernel_size", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOO:textureFlattening", (char**)keywords, &pyobj_src, &pyobj_mask, &pyobj_dst, &pyobj_low_threshold, &pyobj_high_threshold, &pyobj_kernel_size) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_low_threshold, low_threshold, ArgInfo("low_threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_high_threshold, high_threshold, ArgInfo("high_threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_kernel_size, kernel_size, ArgInfo("kernel_size", 0)))
    {
        ERRWRAP2(cv::textureFlattening(src, mask, dst, low_threshold, high_threshold, kernel_size));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("textureFlattening");

    return NULL;
}

static Napi::Value pyopencv_cv_threshold(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_thresh = NULL;
    double thresh=0;
    Napi::Value* pyobj_maxval = NULL;
    double maxval=0;
    Napi::Value* pyobj_type = NULL;
    int type=0;
    double retval;

    const char* keywords[] = { "src", "thresh", "maxval", "type", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:threshold", (char**)keywords, &pyobj_src, &pyobj_thresh, &pyobj_maxval, &pyobj_type, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_thresh, thresh, ArgInfo("thresh", 0)) &&
        jsopencv_to_safe(info, pyobj_maxval, maxval, ArgInfo("maxval", 0)) &&
        jsopencv_to_safe(info, pyobj_type, type, ArgInfo("type", 0)))
    {
        ERRWRAP2(retval = cv::threshold(src, dst, thresh, maxval, type));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(dst));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_thresh = NULL;
    double thresh=0;
    Napi::Value* pyobj_maxval = NULL;
    double maxval=0;
    Napi::Value* pyobj_type = NULL;
    int type=0;
    double retval;

    const char* keywords[] = { "src", "thresh", "maxval", "type", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:threshold", (char**)keywords, &pyobj_src, &pyobj_thresh, &pyobj_maxval, &pyobj_type, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_thresh, thresh, ArgInfo("thresh", 0)) &&
        jsopencv_to_safe(info, pyobj_maxval, maxval, ArgInfo("maxval", 0)) &&
        jsopencv_to_safe(info, pyobj_type, type, ArgInfo("type", 0)))
    {
        ERRWRAP2(retval = cv::threshold(src, dst, thresh, maxval, type));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(dst));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("threshold");

    return NULL;
}

static Napi::Value pyopencv_cv_trace(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_mtx = NULL;
    Mat mtx;
    Scalar retval;

    const char* keywords[] = { "mtx", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:trace", (char**)keywords, &pyobj_mtx) &&
        jsopencv_to_safe(info, pyobj_mtx, mtx, ArgInfo("mtx", 0)))
    {
        ERRWRAP2(retval = cv::trace(mtx));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_mtx = NULL;
    UMat mtx;
    Scalar retval;

    const char* keywords[] = { "mtx", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:trace", (char**)keywords, &pyobj_mtx) &&
        jsopencv_to_safe(info, pyobj_mtx, mtx, ArgInfo("mtx", 0)))
    {
        ERRWRAP2(retval = cv::trace(mtx));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("trace");

    return NULL;
}

static Napi::Value pyopencv_cv_transform(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_m = NULL;
    Mat m;

    const char* keywords[] = { "src", "m", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:transform", (char**)keywords, &pyobj_src, &pyobj_m, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_m, m, ArgInfo("m", 0)))
    {
        ERRWRAP2(cv::transform(src, dst, m));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_m = NULL;
    UMat m;

    const char* keywords[] = { "src", "m", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:transform", (char**)keywords, &pyobj_src, &pyobj_m, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_m, m, ArgInfo("m", 0)))
    {
        ERRWRAP2(cv::transform(src, dst, m));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("transform");

    return NULL;
}

static Napi::Value pyopencv_cv_transpose(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;

    const char* keywords[] = { "src", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:transpose", (char**)keywords, &pyobj_src, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::transpose(src, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;

    const char* keywords[] = { "src", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:transpose", (char**)keywords, &pyobj_src, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::transpose(src, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("transpose");

    return NULL;
}

static Napi::Value pyopencv_cv_transposeND(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_order = NULL;
    vector_int order;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;

    const char* keywords[] = { "src", "order", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:transposeND", (char**)keywords, &pyobj_src, &pyobj_order, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_order, order, ArgInfo("order", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::transposeND(src, order, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_order = NULL;
    vector_int order;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;

    const char* keywords[] = { "src", "order", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:transposeND", (char**)keywords, &pyobj_src, &pyobj_order, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_order, order, ArgInfo("order", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::transposeND(src, order, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("transposeND");

    return NULL;
}

static Napi::Value pyopencv_cv_triangulatePoints(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_projMatr1 = NULL;
    Mat projMatr1;
    Napi::Value* pyobj_projMatr2 = NULL;
    Mat projMatr2;
    Napi::Value* pyobj_projPoints1 = NULL;
    Mat projPoints1;
    Napi::Value* pyobj_projPoints2 = NULL;
    Mat projPoints2;
    Napi::Value* pyobj_points4D = NULL;
    Mat points4D;

    const char* keywords[] = { "projMatr1", "projMatr2", "projPoints1", "projPoints2", "points4D", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:triangulatePoints", (char**)keywords, &pyobj_projMatr1, &pyobj_projMatr2, &pyobj_projPoints1, &pyobj_projPoints2, &pyobj_points4D) &&
        jsopencv_to_safe(info, pyobj_projMatr1, projMatr1, ArgInfo("projMatr1", 0)) &&
        jsopencv_to_safe(info, pyobj_projMatr2, projMatr2, ArgInfo("projMatr2", 0)) &&
        jsopencv_to_safe(info, pyobj_projPoints1, projPoints1, ArgInfo("projPoints1", 0)) &&
        jsopencv_to_safe(info, pyobj_projPoints2, projPoints2, ArgInfo("projPoints2", 0)) &&
        jsopencv_to_safe(info, pyobj_points4D, points4D, ArgInfo("points4D", 1)))
    {
        ERRWRAP2(cv::triangulatePoints(projMatr1, projMatr2, projPoints1, projPoints2, points4D));
        return jsopencv_from(points4D);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_projMatr1 = NULL;
    UMat projMatr1;
    Napi::Value* pyobj_projMatr2 = NULL;
    UMat projMatr2;
    Napi::Value* pyobj_projPoints1 = NULL;
    UMat projPoints1;
    Napi::Value* pyobj_projPoints2 = NULL;
    UMat projPoints2;
    Napi::Value* pyobj_points4D = NULL;
    UMat points4D;

    const char* keywords[] = { "projMatr1", "projMatr2", "projPoints1", "projPoints2", "points4D", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:triangulatePoints", (char**)keywords, &pyobj_projMatr1, &pyobj_projMatr2, &pyobj_projPoints1, &pyobj_projPoints2, &pyobj_points4D) &&
        jsopencv_to_safe(info, pyobj_projMatr1, projMatr1, ArgInfo("projMatr1", 0)) &&
        jsopencv_to_safe(info, pyobj_projMatr2, projMatr2, ArgInfo("projMatr2", 0)) &&
        jsopencv_to_safe(info, pyobj_projPoints1, projPoints1, ArgInfo("projPoints1", 0)) &&
        jsopencv_to_safe(info, pyobj_projPoints2, projPoints2, ArgInfo("projPoints2", 0)) &&
        jsopencv_to_safe(info, pyobj_points4D, points4D, ArgInfo("points4D", 1)))
    {
        ERRWRAP2(cv::triangulatePoints(projMatr1, projMatr2, projPoints1, projPoints2, points4D));
        return jsopencv_from(points4D);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("triangulatePoints");

    return NULL;
}

static Napi::Value pyopencv_cv_undistort(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    Mat distCoeffs;
    Napi::Value* pyobj_newCameraMatrix = NULL;
    Mat newCameraMatrix;

    const char* keywords[] = { "src", "cameraMatrix", "distCoeffs", "dst", "newCameraMatrix", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:undistort", (char**)keywords, &pyobj_src, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_dst, &pyobj_newCameraMatrix) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_newCameraMatrix, newCameraMatrix, ArgInfo("newCameraMatrix", 0)))
    {
        ERRWRAP2(cv::undistort(src, dst, cameraMatrix, distCoeffs, newCameraMatrix));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    UMat distCoeffs;
    Napi::Value* pyobj_newCameraMatrix = NULL;
    UMat newCameraMatrix;

    const char* keywords[] = { "src", "cameraMatrix", "distCoeffs", "dst", "newCameraMatrix", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:undistort", (char**)keywords, &pyobj_src, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_dst, &pyobj_newCameraMatrix) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_newCameraMatrix, newCameraMatrix, ArgInfo("newCameraMatrix", 0)))
    {
        ERRWRAP2(cv::undistort(src, dst, cameraMatrix, distCoeffs, newCameraMatrix));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("undistort");

    return NULL;
}

static Napi::Value pyopencv_cv_undistortImagePoints(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    Mat distCoeffs;
    Napi::Value* pyobj_arg1 = NULL;
    TermCriteria arg1=TermCriteria(TermCriteria::MAX_ITER + TermCriteria::EPS, 5, 0.01);

    const char* keywords[] = { "src", "cameraMatrix", "distCoeffs", "dst", "arg1", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:undistortImagePoints", (char**)keywords, &pyobj_src, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_dst, &pyobj_arg1) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_arg1, arg1, ArgInfo("arg1", 0)))
    {
        ERRWRAP2(cv::undistortImagePoints(src, dst, cameraMatrix, distCoeffs, arg1));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    UMat distCoeffs;
    Napi::Value* pyobj_arg1 = NULL;
    TermCriteria arg1=TermCriteria(TermCriteria::MAX_ITER + TermCriteria::EPS, 5, 0.01);

    const char* keywords[] = { "src", "cameraMatrix", "distCoeffs", "dst", "arg1", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:undistortImagePoints", (char**)keywords, &pyobj_src, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_dst, &pyobj_arg1) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_arg1, arg1, ArgInfo("arg1", 0)))
    {
        ERRWRAP2(cv::undistortImagePoints(src, dst, cameraMatrix, distCoeffs, arg1));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("undistortImagePoints");

    return NULL;
}

static Napi::Value pyopencv_cv_undistortPoints(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    Mat distCoeffs;
    Napi::Value* pyobj_R = NULL;
    Mat R;
    Napi::Value* pyobj_P = NULL;
    Mat P;

    const char* keywords[] = { "src", "cameraMatrix", "distCoeffs", "dst", "R", "P", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:undistortPoints", (char**)keywords, &pyobj_src, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_dst, &pyobj_R, &pyobj_P) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 0)) &&
        jsopencv_to_safe(info, pyobj_P, P, ArgInfo("P", 0)))
    {
        ERRWRAP2(cv::undistortPoints(src, dst, cameraMatrix, distCoeffs, R, P));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    UMat distCoeffs;
    Napi::Value* pyobj_R = NULL;
    UMat R;
    Napi::Value* pyobj_P = NULL;
    UMat P;

    const char* keywords[] = { "src", "cameraMatrix", "distCoeffs", "dst", "R", "P", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:undistortPoints", (char**)keywords, &pyobj_src, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_dst, &pyobj_R, &pyobj_P) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 0)) &&
        jsopencv_to_safe(info, pyobj_P, P, ArgInfo("P", 0)))
    {
        ERRWRAP2(cv::undistortPoints(src, dst, cameraMatrix, distCoeffs, R, P));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("undistortPoints");

    return NULL;
}

static Napi::Value pyopencv_cv_undistortPointsIter(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_cameraMatrix = NULL;
    Mat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    Mat distCoeffs;
    Napi::Value* pyobj_R = NULL;
    Mat R;
    Napi::Value* pyobj_P = NULL;
    Mat P;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria;

    const char* keywords[] = { "src", "cameraMatrix", "distCoeffs", "R", "P", "criteria", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|O:undistortPointsIter", (char**)keywords, &pyobj_src, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_R, &pyobj_P, &pyobj_criteria, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 0)) &&
        jsopencv_to_safe(info, pyobj_P, P, ArgInfo("P", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(cv::undistortPoints(src, dst, cameraMatrix, distCoeffs, R, P, criteria));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_cameraMatrix = NULL;
    UMat cameraMatrix;
    Napi::Value* pyobj_distCoeffs = NULL;
    UMat distCoeffs;
    Napi::Value* pyobj_R = NULL;
    UMat R;
    Napi::Value* pyobj_P = NULL;
    UMat P;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria;

    const char* keywords[] = { "src", "cameraMatrix", "distCoeffs", "R", "P", "criteria", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|O:undistortPointsIter", (char**)keywords, &pyobj_src, &pyobj_cameraMatrix, &pyobj_distCoeffs, &pyobj_R, &pyobj_P, &pyobj_criteria, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_cameraMatrix, cameraMatrix, ArgInfo("cameraMatrix", 0)) &&
        jsopencv_to_safe(info, pyobj_distCoeffs, distCoeffs, ArgInfo("distCoeffs", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 0)) &&
        jsopencv_to_safe(info, pyobj_P, P, ArgInfo("P", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(cv::undistortPoints(src, dst, cameraMatrix, distCoeffs, R, P, criteria));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("undistortPointsIter");

    return NULL;
}

static Napi::Value pyopencv_cv_useOpenVX(const Napi::CallbackInfo &info)
{
    using namespace cv;

    bool retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::useOpenVX());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_useOptimized(const Napi::CallbackInfo &info)
{
    using namespace cv;

    bool retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::useOptimized());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_validateDisparity(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_disparity = NULL;
    Mat disparity;
    Napi::Value* pyobj_cost = NULL;
    Mat cost;
    Napi::Value* pyobj_minDisparity = NULL;
    int minDisparity=0;
    Napi::Value* pyobj_numberOfDisparities = NULL;
    int numberOfDisparities=0;
    Napi::Value* pyobj_disp12MaxDisp = NULL;
    int disp12MaxDisp=1;

    const char* keywords[] = { "disparity", "cost", "minDisparity", "numberOfDisparities", "disp12MaxDisp", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:validateDisparity", (char**)keywords, &pyobj_disparity, &pyobj_cost, &pyobj_minDisparity, &pyobj_numberOfDisparities, &pyobj_disp12MaxDisp) &&
        jsopencv_to_safe(info, pyobj_disparity, disparity, ArgInfo("disparity", 1)) &&
        jsopencv_to_safe(info, pyobj_cost, cost, ArgInfo("cost", 0)) &&
        jsopencv_to_safe(info, pyobj_minDisparity, minDisparity, ArgInfo("minDisparity", 0)) &&
        jsopencv_to_safe(info, pyobj_numberOfDisparities, numberOfDisparities, ArgInfo("numberOfDisparities", 0)) &&
        jsopencv_to_safe(info, pyobj_disp12MaxDisp, disp12MaxDisp, ArgInfo("disp12MaxDisp", 0)))
    {
        ERRWRAP2(cv::validateDisparity(disparity, cost, minDisparity, numberOfDisparities, disp12MaxDisp));
        return jsopencv_from(disparity);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_disparity = NULL;
    UMat disparity;
    Napi::Value* pyobj_cost = NULL;
    UMat cost;
    Napi::Value* pyobj_minDisparity = NULL;
    int minDisparity=0;
    Napi::Value* pyobj_numberOfDisparities = NULL;
    int numberOfDisparities=0;
    Napi::Value* pyobj_disp12MaxDisp = NULL;
    int disp12MaxDisp=1;

    const char* keywords[] = { "disparity", "cost", "minDisparity", "numberOfDisparities", "disp12MaxDisp", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:validateDisparity", (char**)keywords, &pyobj_disparity, &pyobj_cost, &pyobj_minDisparity, &pyobj_numberOfDisparities, &pyobj_disp12MaxDisp) &&
        jsopencv_to_safe(info, pyobj_disparity, disparity, ArgInfo("disparity", 1)) &&
        jsopencv_to_safe(info, pyobj_cost, cost, ArgInfo("cost", 0)) &&
        jsopencv_to_safe(info, pyobj_minDisparity, minDisparity, ArgInfo("minDisparity", 0)) &&
        jsopencv_to_safe(info, pyobj_numberOfDisparities, numberOfDisparities, ArgInfo("numberOfDisparities", 0)) &&
        jsopencv_to_safe(info, pyobj_disp12MaxDisp, disp12MaxDisp, ArgInfo("disp12MaxDisp", 0)))
    {
        ERRWRAP2(cv::validateDisparity(disparity, cost, minDisparity, numberOfDisparities, disp12MaxDisp));
        return jsopencv_from(disparity);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("validateDisparity");

    return NULL;
}

static Napi::Value pyopencv_cv_vconcat(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    vector_Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;

    const char* keywords[] = { "src", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:vconcat", (char**)keywords, &pyobj_src, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::vconcat(src, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    vector_UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;

    const char* keywords[] = { "src", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:vconcat", (char**)keywords, &pyobj_src, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::vconcat(src, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("vconcat");

    return NULL;
}

static Napi::Value pyopencv_cv_waitKey(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_delay = NULL;
    int delay=0;
    int retval;

    const char* keywords[] = { "delay", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|O:waitKey", (char**)keywords, &pyobj_delay) &&
        jsopencv_to_safe(info, pyobj_delay, delay, ArgInfo("delay", 0)))
    {
        ERRWRAP2(retval = cv::waitKey(delay));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_waitKeyEx(const Napi::CallbackInfo &info)
{
    using namespace cv;

    Napi::Value* pyobj_delay = NULL;
    int delay=0;
    int retval;

    const char* keywords[] = { "delay", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|O:waitKeyEx", (char**)keywords, &pyobj_delay) &&
        jsopencv_to_safe(info, pyobj_delay, delay, ArgInfo("delay", 0)))
    {
        ERRWRAP2(retval = cv::waitKeyEx(delay));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_warpAffine(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_M = NULL;
    Mat M;
    Napi::Value* pyobj_dsize = NULL;
    Size dsize;
    Napi::Value* pyobj_flags = NULL;
    int flags=INTER_LINEAR;
    Napi::Value* pyobj_borderMode = NULL;
    int borderMode=BORDER_CONSTANT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue;

    const char* keywords[] = { "src", "M", "dsize", "dst", "flags", "borderMode", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:warpAffine", (char**)keywords, &pyobj_src, &pyobj_M, &pyobj_dsize, &pyobj_dst, &pyobj_flags, &pyobj_borderMode, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_M, M, ArgInfo("M", 0)) &&
        jsopencv_to_safe(info, pyobj_dsize, dsize, ArgInfo("dsize", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_borderMode, borderMode, ArgInfo("borderMode", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(cv::warpAffine(src, dst, M, dsize, flags, borderMode, borderValue));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_M = NULL;
    UMat M;
    Napi::Value* pyobj_dsize = NULL;
    Size dsize;
    Napi::Value* pyobj_flags = NULL;
    int flags=INTER_LINEAR;
    Napi::Value* pyobj_borderMode = NULL;
    int borderMode=BORDER_CONSTANT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue;

    const char* keywords[] = { "src", "M", "dsize", "dst", "flags", "borderMode", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:warpAffine", (char**)keywords, &pyobj_src, &pyobj_M, &pyobj_dsize, &pyobj_dst, &pyobj_flags, &pyobj_borderMode, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_M, M, ArgInfo("M", 0)) &&
        jsopencv_to_safe(info, pyobj_dsize, dsize, ArgInfo("dsize", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_borderMode, borderMode, ArgInfo("borderMode", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(cv::warpAffine(src, dst, M, dsize, flags, borderMode, borderValue));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("warpAffine");

    return NULL;
}

static Napi::Value pyopencv_cv_warpPerspective(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_M = NULL;
    Mat M;
    Napi::Value* pyobj_dsize = NULL;
    Size dsize;
    Napi::Value* pyobj_flags = NULL;
    int flags=INTER_LINEAR;
    Napi::Value* pyobj_borderMode = NULL;
    int borderMode=BORDER_CONSTANT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue;

    const char* keywords[] = { "src", "M", "dsize", "dst", "flags", "borderMode", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:warpPerspective", (char**)keywords, &pyobj_src, &pyobj_M, &pyobj_dsize, &pyobj_dst, &pyobj_flags, &pyobj_borderMode, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_M, M, ArgInfo("M", 0)) &&
        jsopencv_to_safe(info, pyobj_dsize, dsize, ArgInfo("dsize", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_borderMode, borderMode, ArgInfo("borderMode", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(cv::warpPerspective(src, dst, M, dsize, flags, borderMode, borderValue));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_M = NULL;
    UMat M;
    Napi::Value* pyobj_dsize = NULL;
    Size dsize;
    Napi::Value* pyobj_flags = NULL;
    int flags=INTER_LINEAR;
    Napi::Value* pyobj_borderMode = NULL;
    int borderMode=BORDER_CONSTANT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue;

    const char* keywords[] = { "src", "M", "dsize", "dst", "flags", "borderMode", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:warpPerspective", (char**)keywords, &pyobj_src, &pyobj_M, &pyobj_dsize, &pyobj_dst, &pyobj_flags, &pyobj_borderMode, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_M, M, ArgInfo("M", 0)) &&
        jsopencv_to_safe(info, pyobj_dsize, dsize, ArgInfo("dsize", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_borderMode, borderMode, ArgInfo("borderMode", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(cv::warpPerspective(src, dst, M, dsize, flags, borderMode, borderValue));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("warpPerspective");

    return NULL;
}

static Napi::Value pyopencv_cv_warpPolar(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_dsize = NULL;
    Size dsize;
    Napi::Value* pyobj_center = NULL;
    Point2f center;
    Napi::Value* pyobj_maxRadius = NULL;
    double maxRadius=0;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;

    const char* keywords[] = { "src", "dsize", "center", "maxRadius", "flags", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|O:warpPolar", (char**)keywords, &pyobj_src, &pyobj_dsize, &pyobj_center, &pyobj_maxRadius, &pyobj_flags, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_dsize, dsize, ArgInfo("dsize", 0)) &&
        jsopencv_to_safe(info, pyobj_center, center, ArgInfo("center", 0)) &&
        jsopencv_to_safe(info, pyobj_maxRadius, maxRadius, ArgInfo("maxRadius", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::warpPolar(src, dst, dsize, center, maxRadius, flags));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_dsize = NULL;
    Size dsize;
    Napi::Value* pyobj_center = NULL;
    Point2f center;
    Napi::Value* pyobj_maxRadius = NULL;
    double maxRadius=0;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;

    const char* keywords[] = { "src", "dsize", "center", "maxRadius", "flags", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|O:warpPolar", (char**)keywords, &pyobj_src, &pyobj_dsize, &pyobj_center, &pyobj_maxRadius, &pyobj_flags, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_dsize, dsize, ArgInfo("dsize", 0)) &&
        jsopencv_to_safe(info, pyobj_center, center, ArgInfo("center", 0)) &&
        jsopencv_to_safe(info, pyobj_maxRadius, maxRadius, ArgInfo("maxRadius", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(cv::warpPolar(src, dst, dsize, center, maxRadius, flags));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("warpPolar");

    return NULL;
}

static Napi::Value pyopencv_cv_watershed(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_markers = NULL;
    Mat markers;

    const char* keywords[] = { "image", "markers", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:watershed", (char**)keywords, &pyobj_image, &pyobj_markers) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_markers, markers, ArgInfo("markers", 1)))
    {
        ERRWRAP2(cv::watershed(image, markers));
        return jsopencv_from(markers);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_markers = NULL;
    UMat markers;

    const char* keywords[] = { "image", "markers", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:watershed", (char**)keywords, &pyobj_image, &pyobj_markers) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_markers, markers, ArgInfo("markers", 1)))
    {
        ERRWRAP2(cv::watershed(image, markers));
        return jsopencv_from(markers);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("watershed");

    return NULL;
}

static Napi::Value pyopencv_cv_writeOpticalFlow(const Napi::CallbackInfo &info)
{
    using namespace cv;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_path = NULL;
    String path;
    Napi::Value* pyobj_flow = NULL;
    Mat flow;
    bool retval;

    const char* keywords[] = { "path", "flow", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:writeOpticalFlow", (char**)keywords, &pyobj_path, &pyobj_flow) &&
        jsopencv_to_safe(info, pyobj_path, path, ArgInfo("path", 0)) &&
        jsopencv_to_safe(info, pyobj_flow, flow, ArgInfo("flow", 0)))
    {
        ERRWRAP2(retval = cv::writeOpticalFlow(path, flow));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_path = NULL;
    String path;
    Napi::Value* pyobj_flow = NULL;
    UMat flow;
    bool retval;

    const char* keywords[] = { "path", "flow", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:writeOpticalFlow", (char**)keywords, &pyobj_path, &pyobj_flow) &&
        jsopencv_to_safe(info, pyobj_path, path, ArgInfo("path", 0)) &&
        jsopencv_to_safe(info, pyobj_flow, flow, ArgInfo("flow", 0)))
    {
        ERRWRAP2(retval = cv::writeOpticalFlow(path, flow));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("writeOpticalFlow");

    return NULL;
}

static Napi::Value pyopencv_cv_aruco_Dictionary_getBitsFromByteList(const Napi::CallbackInfo &info)
{
    using namespace cv::aruco;

    Napi::Value* pyobj_byteList = NULL;
    Mat byteList;
    Napi::Value* pyobj_markerSize = NULL;
    int markerSize=0;
    Mat retval;

    const char* keywords[] = { "byteList", "markerSize", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:Dictionary_getBitsFromByteList", (char**)keywords, &pyobj_byteList, &pyobj_markerSize) &&
        jsopencv_to_safe(info, pyobj_byteList, byteList, ArgInfo("byteList", 0)) &&
        jsopencv_to_safe(info, pyobj_markerSize, markerSize, ArgInfo("markerSize", 0)))
    {
        ERRWRAP2(retval = cv::aruco::Dictionary::getBitsFromByteList(byteList, markerSize));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_aruco_Dictionary_getByteListFromBits(const Napi::CallbackInfo &info)
{
    using namespace cv::aruco;

    Napi::Value* pyobj_bits = NULL;
    Mat bits;
    Mat retval;

    const char* keywords[] = { "bits", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:Dictionary_getByteListFromBits", (char**)keywords, &pyobj_bits) &&
        jsopencv_to_safe(info, pyobj_bits, bits, ArgInfo("bits", 0)))
    {
        ERRWRAP2(retval = cv::aruco::Dictionary::getByteListFromBits(bits));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_aruco_drawDetectedCornersCharuco(const Napi::CallbackInfo &info)
{
    using namespace cv::aruco;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_charucoCorners = NULL;
    Mat charucoCorners;
    Napi::Value* pyobj_charucoIds = NULL;
    Mat charucoIds;
    Napi::Value* pyobj_cornerColor = NULL;
    Scalar cornerColor=Scalar(255, 0, 0);

    const char* keywords[] = { "image", "charucoCorners", "charucoIds", "cornerColor", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:drawDetectedCornersCharuco", (char**)keywords, &pyobj_image, &pyobj_charucoCorners, &pyobj_charucoIds, &pyobj_cornerColor) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 1)) &&
        jsopencv_to_safe(info, pyobj_charucoCorners, charucoCorners, ArgInfo("charucoCorners", 0)) &&
        jsopencv_to_safe(info, pyobj_charucoIds, charucoIds, ArgInfo("charucoIds", 0)) &&
        jsopencv_to_safe(info, pyobj_cornerColor, cornerColor, ArgInfo("cornerColor", 0)))
    {
        ERRWRAP2(cv::aruco::drawDetectedCornersCharuco(image, charucoCorners, charucoIds, cornerColor));
        return jsopencv_from(image);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_charucoCorners = NULL;
    UMat charucoCorners;
    Napi::Value* pyobj_charucoIds = NULL;
    UMat charucoIds;
    Napi::Value* pyobj_cornerColor = NULL;
    Scalar cornerColor=Scalar(255, 0, 0);

    const char* keywords[] = { "image", "charucoCorners", "charucoIds", "cornerColor", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:drawDetectedCornersCharuco", (char**)keywords, &pyobj_image, &pyobj_charucoCorners, &pyobj_charucoIds, &pyobj_cornerColor) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 1)) &&
        jsopencv_to_safe(info, pyobj_charucoCorners, charucoCorners, ArgInfo("charucoCorners", 0)) &&
        jsopencv_to_safe(info, pyobj_charucoIds, charucoIds, ArgInfo("charucoIds", 0)) &&
        jsopencv_to_safe(info, pyobj_cornerColor, cornerColor, ArgInfo("cornerColor", 0)))
    {
        ERRWRAP2(cv::aruco::drawDetectedCornersCharuco(image, charucoCorners, charucoIds, cornerColor));
        return jsopencv_from(image);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("drawDetectedCornersCharuco");

    return NULL;
}

static Napi::Value pyopencv_cv_aruco_drawDetectedDiamonds(const Napi::CallbackInfo &info)
{
    using namespace cv::aruco;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_diamondCorners = NULL;
    vector_Mat diamondCorners;
    Napi::Value* pyobj_diamondIds = NULL;
    Mat diamondIds;
    Napi::Value* pyobj_borderColor = NULL;
    Scalar borderColor=Scalar(0, 0, 255);

    const char* keywords[] = { "image", "diamondCorners", "diamondIds", "borderColor", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:drawDetectedDiamonds", (char**)keywords, &pyobj_image, &pyobj_diamondCorners, &pyobj_diamondIds, &pyobj_borderColor) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 1)) &&
        jsopencv_to_safe(info, pyobj_diamondCorners, diamondCorners, ArgInfo("diamondCorners", 0)) &&
        jsopencv_to_safe(info, pyobj_diamondIds, diamondIds, ArgInfo("diamondIds", 0)) &&
        jsopencv_to_safe(info, pyobj_borderColor, borderColor, ArgInfo("borderColor", 0)))
    {
        ERRWRAP2(cv::aruco::drawDetectedDiamonds(image, diamondCorners, diamondIds, borderColor));
        return jsopencv_from(image);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_diamondCorners = NULL;
    vector_UMat diamondCorners;
    Napi::Value* pyobj_diamondIds = NULL;
    UMat diamondIds;
    Napi::Value* pyobj_borderColor = NULL;
    Scalar borderColor=Scalar(0, 0, 255);

    const char* keywords[] = { "image", "diamondCorners", "diamondIds", "borderColor", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:drawDetectedDiamonds", (char**)keywords, &pyobj_image, &pyobj_diamondCorners, &pyobj_diamondIds, &pyobj_borderColor) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 1)) &&
        jsopencv_to_safe(info, pyobj_diamondCorners, diamondCorners, ArgInfo("diamondCorners", 0)) &&
        jsopencv_to_safe(info, pyobj_diamondIds, diamondIds, ArgInfo("diamondIds", 0)) &&
        jsopencv_to_safe(info, pyobj_borderColor, borderColor, ArgInfo("borderColor", 0)))
    {
        ERRWRAP2(cv::aruco::drawDetectedDiamonds(image, diamondCorners, diamondIds, borderColor));
        return jsopencv_from(image);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("drawDetectedDiamonds");

    return NULL;
}

static Napi::Value pyopencv_cv_aruco_drawDetectedMarkers(const Napi::CallbackInfo &info)
{
    using namespace cv::aruco;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_corners = NULL;
    vector_Mat corners;
    Napi::Value* pyobj_ids = NULL;
    Mat ids;
    Napi::Value* pyobj_borderColor = NULL;
    Scalar borderColor=Scalar(0, 255, 0);

    const char* keywords[] = { "image", "corners", "ids", "borderColor", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:drawDetectedMarkers", (char**)keywords, &pyobj_image, &pyobj_corners, &pyobj_ids, &pyobj_borderColor) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 1)) &&
        jsopencv_to_safe(info, pyobj_corners, corners, ArgInfo("corners", 0)) &&
        jsopencv_to_safe(info, pyobj_ids, ids, ArgInfo("ids", 0)) &&
        jsopencv_to_safe(info, pyobj_borderColor, borderColor, ArgInfo("borderColor", 0)))
    {
        ERRWRAP2(cv::aruco::drawDetectedMarkers(image, corners, ids, borderColor));
        return jsopencv_from(image);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_corners = NULL;
    vector_UMat corners;
    Napi::Value* pyobj_ids = NULL;
    UMat ids;
    Napi::Value* pyobj_borderColor = NULL;
    Scalar borderColor=Scalar(0, 255, 0);

    const char* keywords[] = { "image", "corners", "ids", "borderColor", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:drawDetectedMarkers", (char**)keywords, &pyobj_image, &pyobj_corners, &pyobj_ids, &pyobj_borderColor) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 1)) &&
        jsopencv_to_safe(info, pyobj_corners, corners, ArgInfo("corners", 0)) &&
        jsopencv_to_safe(info, pyobj_ids, ids, ArgInfo("ids", 0)) &&
        jsopencv_to_safe(info, pyobj_borderColor, borderColor, ArgInfo("borderColor", 0)))
    {
        ERRWRAP2(cv::aruco::drawDetectedMarkers(image, corners, ids, borderColor));
        return jsopencv_from(image);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("drawDetectedMarkers");

    return NULL;
}

static Napi::Value pyopencv_cv_aruco_extendDictionary(const Napi::CallbackInfo &info)
{
    using namespace cv::aruco;

    Napi::Value* pyobj_nMarkers = NULL;
    int nMarkers=0;
    Napi::Value* pyobj_markerSize = NULL;
    int markerSize=0;
    Napi::Value* pyobj_baseDictionary = NULL;
    Dictionary baseDictionary;
    Napi::Value* pyobj_randomSeed = NULL;
    int randomSeed=0;
    Dictionary retval;

    const char* keywords[] = { "nMarkers", "markerSize", "baseDictionary", "randomSeed", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:extendDictionary", (char**)keywords, &pyobj_nMarkers, &pyobj_markerSize, &pyobj_baseDictionary, &pyobj_randomSeed) &&
        jsopencv_to_safe(info, pyobj_nMarkers, nMarkers, ArgInfo("nMarkers", 0)) &&
        jsopencv_to_safe(info, pyobj_markerSize, markerSize, ArgInfo("markerSize", 0)) &&
        jsopencv_to_safe(info, pyobj_baseDictionary, baseDictionary, ArgInfo("baseDictionary", 0)) &&
        jsopencv_to_safe(info, pyobj_randomSeed, randomSeed, ArgInfo("randomSeed", 0)))
    {
        ERRWRAP2(retval = cv::aruco::extendDictionary(nMarkers, markerSize, baseDictionary, randomSeed));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_aruco_generateImageMarker(const Napi::CallbackInfo &info)
{
    using namespace cv::aruco;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_dictionary = NULL;
    Dictionary dictionary;
    Napi::Value* pyobj_id = NULL;
    int id=0;
    Napi::Value* pyobj_sidePixels = NULL;
    int sidePixels=0;
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_borderBits = NULL;
    int borderBits=1;

    const char* keywords[] = { "dictionary", "id", "sidePixels", "img", "borderBits", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:generateImageMarker", (char**)keywords, &pyobj_dictionary, &pyobj_id, &pyobj_sidePixels, &pyobj_img, &pyobj_borderBits) &&
        jsopencv_to_safe(info, pyobj_dictionary, dictionary, ArgInfo("dictionary", 0)) &&
        jsopencv_to_safe(info, pyobj_id, id, ArgInfo("id", 0)) &&
        jsopencv_to_safe(info, pyobj_sidePixels, sidePixels, ArgInfo("sidePixels", 0)) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_borderBits, borderBits, ArgInfo("borderBits", 0)))
    {
        ERRWRAP2(cv::aruco::generateImageMarker(dictionary, id, sidePixels, img, borderBits));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_dictionary = NULL;
    Dictionary dictionary;
    Napi::Value* pyobj_id = NULL;
    int id=0;
    Napi::Value* pyobj_sidePixels = NULL;
    int sidePixels=0;
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_borderBits = NULL;
    int borderBits=1;

    const char* keywords[] = { "dictionary", "id", "sidePixels", "img", "borderBits", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:generateImageMarker", (char**)keywords, &pyobj_dictionary, &pyobj_id, &pyobj_sidePixels, &pyobj_img, &pyobj_borderBits) &&
        jsopencv_to_safe(info, pyobj_dictionary, dictionary, ArgInfo("dictionary", 0)) &&
        jsopencv_to_safe(info, pyobj_id, id, ArgInfo("id", 0)) &&
        jsopencv_to_safe(info, pyobj_sidePixels, sidePixels, ArgInfo("sidePixels", 0)) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_borderBits, borderBits, ArgInfo("borderBits", 0)))
    {
        ERRWRAP2(cv::aruco::generateImageMarker(dictionary, id, sidePixels, img, borderBits));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("generateImageMarker");

    return NULL;
}

static Napi::Value pyopencv_cv_aruco_getPredefinedDictionary(const Napi::CallbackInfo &info)
{
    using namespace cv::aruco;

    Napi::Value* pyobj_dict = NULL;
    int dict=0;
    Dictionary retval;

    const char* keywords[] = { "dict", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:getPredefinedDictionary", (char**)keywords, &pyobj_dict) &&
        jsopencv_to_safe(info, pyobj_dict, dict, ArgInfo("dict", 0)))
    {
        ERRWRAP2(retval = cv::aruco::getPredefinedDictionary(dict));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_Event_elapsedTime(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    Napi::Value* pyobj_start = NULL;
    Event start;
    Napi::Value* pyobj_end = NULL;
    Event end;
    float retval;

    const char* keywords[] = { "start", "end", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:Event_elapsedTime", (char**)keywords, &pyobj_start, &pyobj_end) &&
        jsopencv_to_safe(info, pyobj_start, start, ArgInfo("start", 0)) &&
        jsopencv_to_safe(info, pyobj_end, end, ArgInfo("end", 0)))
    {
        ERRWRAP2(retval = cv::cuda::Event::elapsedTime(start, end));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_GpuMat_defaultAllocator(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    GpuMat::Allocator* retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::cuda::GpuMat::defaultAllocator());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_GpuMat_setDefaultAllocator(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    Napi::Value* pyobj_allocator = NULL;
    GpuMat_Allocator* allocator;

    const char* keywords[] = { "allocator", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:GpuMat_setDefaultAllocator", (char**)keywords, &pyobj_allocator) &&
        jsopencv_to_safe(info, pyobj_allocator, allocator, ArgInfo("allocator", 0)))
    {
        ERRWRAP2(cv::cuda::GpuMat::setDefaultAllocator(allocator));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_SURF_CUDA_create(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    Napi::Value* pyobj__hessianThreshold = NULL;
    double _hessianThreshold=0;
    Napi::Value* pyobj__nOctaves = NULL;
    int _nOctaves=4;
    Napi::Value* pyobj__nOctaveLayers = NULL;
    int _nOctaveLayers=2;
    Napi::Value* pyobj__extended = NULL;
    bool _extended=false;
    Napi::Value* pyobj__keypointsRatio = NULL;
    float _keypointsRatio=0.01f;
    Napi::Value* pyobj__upright = NULL;
    bool _upright=false;
    Ptr<SURF_CUDA> retval;

    const char* keywords[] = { "_hessianThreshold", "_nOctaves", "_nOctaveLayers", "_extended", "_keypointsRatio", "_upright", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOO:SURF_CUDA_create", (char**)keywords, &pyobj__hessianThreshold, &pyobj__nOctaves, &pyobj__nOctaveLayers, &pyobj__extended, &pyobj__keypointsRatio, &pyobj__upright) &&
        jsopencv_to_safe(info, pyobj__hessianThreshold, _hessianThreshold, ArgInfo("_hessianThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj__nOctaves, _nOctaves, ArgInfo("_nOctaves", 0)) &&
        jsopencv_to_safe(info, pyobj__nOctaveLayers, _nOctaveLayers, ArgInfo("_nOctaveLayers", 0)) &&
        jsopencv_to_safe(info, pyobj__extended, _extended, ArgInfo("_extended", 0)) &&
        jsopencv_to_safe(info, pyobj__keypointsRatio, _keypointsRatio, ArgInfo("_keypointsRatio", 0)) &&
        jsopencv_to_safe(info, pyobj__upright, _upright, ArgInfo("_upright", 0)))
    {
        ERRWRAP2(retval = cv::cuda::SURF_CUDA::create(_hessianThreshold, _nOctaves, _nOctaveLayers, _extended, _keypointsRatio, _upright));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_Stream_Null(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    Stream retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::cuda::Stream::Null());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_TargetArchs_has(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    Napi::Value* pyobj_major = NULL;
    int major=0;
    Napi::Value* pyobj_minor = NULL;
    int minor=0;
    bool retval;

    const char* keywords[] = { "major", "minor", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:TargetArchs_has", (char**)keywords, &pyobj_major, &pyobj_minor) &&
        jsopencv_to_safe(info, pyobj_major, major, ArgInfo("major", 0)) &&
        jsopencv_to_safe(info, pyobj_minor, minor, ArgInfo("minor", 0)))
    {
        ERRWRAP2(retval = cv::cuda::TargetArchs::has(major, minor));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_TargetArchs_hasBin(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    Napi::Value* pyobj_major = NULL;
    int major=0;
    Napi::Value* pyobj_minor = NULL;
    int minor=0;
    bool retval;

    const char* keywords[] = { "major", "minor", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:TargetArchs_hasBin", (char**)keywords, &pyobj_major, &pyobj_minor) &&
        jsopencv_to_safe(info, pyobj_major, major, ArgInfo("major", 0)) &&
        jsopencv_to_safe(info, pyobj_minor, minor, ArgInfo("minor", 0)))
    {
        ERRWRAP2(retval = cv::cuda::TargetArchs::hasBin(major, minor));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_TargetArchs_hasEqualOrGreater(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    Napi::Value* pyobj_major = NULL;
    int major=0;
    Napi::Value* pyobj_minor = NULL;
    int minor=0;
    bool retval;

    const char* keywords[] = { "major", "minor", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:TargetArchs_hasEqualOrGreater", (char**)keywords, &pyobj_major, &pyobj_minor) &&
        jsopencv_to_safe(info, pyobj_major, major, ArgInfo("major", 0)) &&
        jsopencv_to_safe(info, pyobj_minor, minor, ArgInfo("minor", 0)))
    {
        ERRWRAP2(retval = cv::cuda::TargetArchs::hasEqualOrGreater(major, minor));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_TargetArchs_hasEqualOrGreaterBin(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    Napi::Value* pyobj_major = NULL;
    int major=0;
    Napi::Value* pyobj_minor = NULL;
    int minor=0;
    bool retval;

    const char* keywords[] = { "major", "minor", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:TargetArchs_hasEqualOrGreaterBin", (char**)keywords, &pyobj_major, &pyobj_minor) &&
        jsopencv_to_safe(info, pyobj_major, major, ArgInfo("major", 0)) &&
        jsopencv_to_safe(info, pyobj_minor, minor, ArgInfo("minor", 0)))
    {
        ERRWRAP2(retval = cv::cuda::TargetArchs::hasEqualOrGreaterBin(major, minor));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_TargetArchs_hasEqualOrGreaterPtx(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    Napi::Value* pyobj_major = NULL;
    int major=0;
    Napi::Value* pyobj_minor = NULL;
    int minor=0;
    bool retval;

    const char* keywords[] = { "major", "minor", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:TargetArchs_hasEqualOrGreaterPtx", (char**)keywords, &pyobj_major, &pyobj_minor) &&
        jsopencv_to_safe(info, pyobj_major, major, ArgInfo("major", 0)) &&
        jsopencv_to_safe(info, pyobj_minor, minor, ArgInfo("minor", 0)))
    {
        ERRWRAP2(retval = cv::cuda::TargetArchs::hasEqualOrGreaterPtx(major, minor));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_TargetArchs_hasEqualOrLessPtx(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    Napi::Value* pyobj_major = NULL;
    int major=0;
    Napi::Value* pyobj_minor = NULL;
    int minor=0;
    bool retval;

    const char* keywords[] = { "major", "minor", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:TargetArchs_hasEqualOrLessPtx", (char**)keywords, &pyobj_major, &pyobj_minor) &&
        jsopencv_to_safe(info, pyobj_major, major, ArgInfo("major", 0)) &&
        jsopencv_to_safe(info, pyobj_minor, minor, ArgInfo("minor", 0)))
    {
        ERRWRAP2(retval = cv::cuda::TargetArchs::hasEqualOrLessPtx(major, minor));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_TargetArchs_hasPtx(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    Napi::Value* pyobj_major = NULL;
    int major=0;
    Napi::Value* pyobj_minor = NULL;
    int minor=0;
    bool retval;

    const char* keywords[] = { "major", "minor", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:TargetArchs_hasPtx", (char**)keywords, &pyobj_major, &pyobj_minor) &&
        jsopencv_to_safe(info, pyobj_major, major, ArgInfo("major", 0)) &&
        jsopencv_to_safe(info, pyobj_minor, minor, ArgInfo("minor", 0)))
    {
        ERRWRAP2(retval = cv::cuda::TargetArchs::hasPtx(major, minor));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_createContinuous(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    pyPrepareArgumentConversionErrorsStorage(3);

    {
    Napi::Value* pyobj_rows = NULL;
    int rows=0;
    Napi::Value* pyobj_cols = NULL;
    int cols=0;
    Napi::Value* pyobj_type = NULL;
    int type=0;
    Napi::Value* pyobj_arr = NULL;
    Mat arr;

    const char* keywords[] = { "rows", "cols", "type", "arr", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:createContinuous", (char**)keywords, &pyobj_rows, &pyobj_cols, &pyobj_type, &pyobj_arr) &&
        jsopencv_to_safe(info, pyobj_rows, rows, ArgInfo("rows", 0)) &&
        jsopencv_to_safe(info, pyobj_cols, cols, ArgInfo("cols", 0)) &&
        jsopencv_to_safe(info, pyobj_type, type, ArgInfo("type", 0)) &&
        jsopencv_to_safe(info, pyobj_arr, arr, ArgInfo("arr", 1)))
    {
        ERRWRAP2(cv::cuda::createContinuous(rows, cols, type, arr));
        return jsopencv_from(arr);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_rows = NULL;
    int rows=0;
    Napi::Value* pyobj_cols = NULL;
    int cols=0;
    Napi::Value* pyobj_type = NULL;
    int type=0;
    Napi::Value* pyobj_arr = NULL;
    cuda::GpuMat arr;

    const char* keywords[] = { "rows", "cols", "type", "arr", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:createContinuous", (char**)keywords, &pyobj_rows, &pyobj_cols, &pyobj_type, &pyobj_arr) &&
        jsopencv_to_safe(info, pyobj_rows, rows, ArgInfo("rows", 0)) &&
        jsopencv_to_safe(info, pyobj_cols, cols, ArgInfo("cols", 0)) &&
        jsopencv_to_safe(info, pyobj_type, type, ArgInfo("type", 0)) &&
        jsopencv_to_safe(info, pyobj_arr, arr, ArgInfo("arr", 1)))
    {
        ERRWRAP2(cv::cuda::createContinuous(rows, cols, type, arr));
        return jsopencv_from(arr);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_rows = NULL;
    int rows=0;
    Napi::Value* pyobj_cols = NULL;
    int cols=0;
    Napi::Value* pyobj_type = NULL;
    int type=0;
    Napi::Value* pyobj_arr = NULL;
    UMat arr;

    const char* keywords[] = { "rows", "cols", "type", "arr", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:createContinuous", (char**)keywords, &pyobj_rows, &pyobj_cols, &pyobj_type, &pyobj_arr) &&
        jsopencv_to_safe(info, pyobj_rows, rows, ArgInfo("rows", 0)) &&
        jsopencv_to_safe(info, pyobj_cols, cols, ArgInfo("cols", 0)) &&
        jsopencv_to_safe(info, pyobj_type, type, ArgInfo("type", 0)) &&
        jsopencv_to_safe(info, pyobj_arr, arr, ArgInfo("arr", 1)))
    {
        ERRWRAP2(cv::cuda::createContinuous(rows, cols, type, arr));
        return jsopencv_from(arr);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("createContinuous");

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_ensureSizeIsEnough(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    pyPrepareArgumentConversionErrorsStorage(3);

    {
    Napi::Value* pyobj_rows = NULL;
    int rows=0;
    Napi::Value* pyobj_cols = NULL;
    int cols=0;
    Napi::Value* pyobj_type = NULL;
    int type=0;
    Napi::Value* pyobj_arr = NULL;
    Mat arr;

    const char* keywords[] = { "rows", "cols", "type", "arr", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:ensureSizeIsEnough", (char**)keywords, &pyobj_rows, &pyobj_cols, &pyobj_type, &pyobj_arr) &&
        jsopencv_to_safe(info, pyobj_rows, rows, ArgInfo("rows", 0)) &&
        jsopencv_to_safe(info, pyobj_cols, cols, ArgInfo("cols", 0)) &&
        jsopencv_to_safe(info, pyobj_type, type, ArgInfo("type", 0)) &&
        jsopencv_to_safe(info, pyobj_arr, arr, ArgInfo("arr", 1)))
    {
        ERRWRAP2(cv::cuda::ensureSizeIsEnough(rows, cols, type, arr));
        return jsopencv_from(arr);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_rows = NULL;
    int rows=0;
    Napi::Value* pyobj_cols = NULL;
    int cols=0;
    Napi::Value* pyobj_type = NULL;
    int type=0;
    Napi::Value* pyobj_arr = NULL;
    cuda::GpuMat arr;

    const char* keywords[] = { "rows", "cols", "type", "arr", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:ensureSizeIsEnough", (char**)keywords, &pyobj_rows, &pyobj_cols, &pyobj_type, &pyobj_arr) &&
        jsopencv_to_safe(info, pyobj_rows, rows, ArgInfo("rows", 0)) &&
        jsopencv_to_safe(info, pyobj_cols, cols, ArgInfo("cols", 0)) &&
        jsopencv_to_safe(info, pyobj_type, type, ArgInfo("type", 0)) &&
        jsopencv_to_safe(info, pyobj_arr, arr, ArgInfo("arr", 1)))
    {
        ERRWRAP2(cv::cuda::ensureSizeIsEnough(rows, cols, type, arr));
        return jsopencv_from(arr);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_rows = NULL;
    int rows=0;
    Napi::Value* pyobj_cols = NULL;
    int cols=0;
    Napi::Value* pyobj_type = NULL;
    int type=0;
    Napi::Value* pyobj_arr = NULL;
    UMat arr;

    const char* keywords[] = { "rows", "cols", "type", "arr", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:ensureSizeIsEnough", (char**)keywords, &pyobj_rows, &pyobj_cols, &pyobj_type, &pyobj_arr) &&
        jsopencv_to_safe(info, pyobj_rows, rows, ArgInfo("rows", 0)) &&
        jsopencv_to_safe(info, pyobj_cols, cols, ArgInfo("cols", 0)) &&
        jsopencv_to_safe(info, pyobj_type, type, ArgInfo("type", 0)) &&
        jsopencv_to_safe(info, pyobj_arr, arr, ArgInfo("arr", 1)))
    {
        ERRWRAP2(cv::cuda::ensureSizeIsEnough(rows, cols, type, arr));
        return jsopencv_from(arr);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("ensureSizeIsEnough");

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_fastNlMeansDenoising(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    Napi::Value* pyobj_src = NULL;
    GpuMat src;
    Napi::Value* pyobj_dst = NULL;
    GpuMat dst;
    Napi::Value* pyobj_h = NULL;
    float h=0.f;
    Napi::Value* pyobj_search_window = NULL;
    int search_window=21;
    Napi::Value* pyobj_block_size = NULL;
    int block_size=7;
    Napi::Value* pyobj_stream = NULL;
    Stream stream=Stream::Null();

    const char* keywords[] = { "src", "h", "dst", "search_window", "block_size", "stream", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOO:fastNlMeansDenoising", (char**)keywords, &pyobj_src, &pyobj_h, &pyobj_dst, &pyobj_search_window, &pyobj_block_size, &pyobj_stream) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_h, h, ArgInfo("h", 0)) &&
        jsopencv_to_safe(info, pyobj_search_window, search_window, ArgInfo("search_window", 0)) &&
        jsopencv_to_safe(info, pyobj_block_size, block_size, ArgInfo("block_size", 0)) &&
        jsopencv_to_safe(info, pyobj_stream, stream, ArgInfo("stream", 0)))
    {
        ERRWRAP2(cv::cuda::fastNlMeansDenoising(src, dst, h, search_window, block_size, stream));
        return jsopencv_from(dst);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_fastNlMeansDenoisingColored(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    Napi::Value* pyobj_src = NULL;
    GpuMat src;
    Napi::Value* pyobj_dst = NULL;
    GpuMat dst;
    Napi::Value* pyobj_h_luminance = NULL;
    float h_luminance=0.f;
    Napi::Value* pyobj_photo_render = NULL;
    float photo_render=0.f;
    Napi::Value* pyobj_search_window = NULL;
    int search_window=21;
    Napi::Value* pyobj_block_size = NULL;
    int block_size=7;
    Napi::Value* pyobj_stream = NULL;
    Stream stream=Stream::Null();

    const char* keywords[] = { "src", "h_luminance", "photo_render", "dst", "search_window", "block_size", "stream", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:fastNlMeansDenoisingColored", (char**)keywords, &pyobj_src, &pyobj_h_luminance, &pyobj_photo_render, &pyobj_dst, &pyobj_search_window, &pyobj_block_size, &pyobj_stream) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_h_luminance, h_luminance, ArgInfo("h_luminance", 0)) &&
        jsopencv_to_safe(info, pyobj_photo_render, photo_render, ArgInfo("photo_render", 0)) &&
        jsopencv_to_safe(info, pyobj_search_window, search_window, ArgInfo("search_window", 0)) &&
        jsopencv_to_safe(info, pyobj_block_size, block_size, ArgInfo("block_size", 0)) &&
        jsopencv_to_safe(info, pyobj_stream, stream, ArgInfo("stream", 0)))
    {
        ERRWRAP2(cv::cuda::fastNlMeansDenoisingColored(src, dst, h_luminance, photo_render, search_window, block_size, stream));
        return jsopencv_from(dst);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_getCudaEnabledDeviceCount(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    int retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::cuda::getCudaEnabledDeviceCount());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_getDevice(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    int retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::cuda::getDevice());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_nonLocalMeans(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    Napi::Value* pyobj_src = NULL;
    GpuMat src;
    Napi::Value* pyobj_dst = NULL;
    GpuMat dst;
    Napi::Value* pyobj_h = NULL;
    float h=0.f;
    Napi::Value* pyobj_search_window = NULL;
    int search_window=21;
    Napi::Value* pyobj_block_size = NULL;
    int block_size=7;
    Napi::Value* pyobj_borderMode = NULL;
    int borderMode=BORDER_DEFAULT;
    Napi::Value* pyobj_stream = NULL;
    Stream stream=Stream::Null();

    const char* keywords[] = { "src", "h", "dst", "search_window", "block_size", "borderMode", "stream", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOOO:nonLocalMeans", (char**)keywords, &pyobj_src, &pyobj_h, &pyobj_dst, &pyobj_search_window, &pyobj_block_size, &pyobj_borderMode, &pyobj_stream) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_h, h, ArgInfo("h", 0)) &&
        jsopencv_to_safe(info, pyobj_search_window, search_window, ArgInfo("search_window", 0)) &&
        jsopencv_to_safe(info, pyobj_block_size, block_size, ArgInfo("block_size", 0)) &&
        jsopencv_to_safe(info, pyobj_borderMode, borderMode, ArgInfo("borderMode", 0)) &&
        jsopencv_to_safe(info, pyobj_stream, stream, ArgInfo("stream", 0)))
    {
        ERRWRAP2(cv::cuda::nonLocalMeans(src, dst, h, search_window, block_size, borderMode, stream));
        return jsopencv_from(dst);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_printCudaDeviceInfo(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    Napi::Value* pyobj_device = NULL;
    int device=0;

    const char* keywords[] = { "device", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:printCudaDeviceInfo", (char**)keywords, &pyobj_device) &&
        jsopencv_to_safe(info, pyobj_device, device, ArgInfo("device", 0)))
    {
        ERRWRAP2(cv::cuda::printCudaDeviceInfo(device));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_printShortCudaDeviceInfo(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    Napi::Value* pyobj_device = NULL;
    int device=0;

    const char* keywords[] = { "device", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:printShortCudaDeviceInfo", (char**)keywords, &pyobj_device) &&
        jsopencv_to_safe(info, pyobj_device, device, ArgInfo("device", 0)))
    {
        ERRWRAP2(cv::cuda::printShortCudaDeviceInfo(device));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_registerPageLocked(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    Napi::Value* pyobj_m = NULL;
    Mat m;

    const char* keywords[] = { "m", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:registerPageLocked", (char**)keywords, &pyobj_m) &&
        jsopencv_to_safe(info, pyobj_m, m, ArgInfo("m", 0)))
    {
        ERRWRAP2(cv::cuda::registerPageLocked(m));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_resetDevice(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;


    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(cv::cuda::resetDevice());
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_setBufferPoolConfig(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    Napi::Value* pyobj_deviceId = NULL;
    int deviceId=0;
    Napi::Value* pyobj_stackSize = NULL;
    size_t stackSize=0;
    Napi::Value* pyobj_stackCount = NULL;
    int stackCount=0;

    const char* keywords[] = { "deviceId", "stackSize", "stackCount", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:setBufferPoolConfig", (char**)keywords, &pyobj_deviceId, &pyobj_stackSize, &pyobj_stackCount) &&
        jsopencv_to_safe(info, pyobj_deviceId, deviceId, ArgInfo("deviceId", 0)) &&
        jsopencv_to_safe(info, pyobj_stackSize, stackSize, ArgInfo("stackSize", 0)) &&
        jsopencv_to_safe(info, pyobj_stackCount, stackCount, ArgInfo("stackCount", 0)))
    {
        ERRWRAP2(cv::cuda::setBufferPoolConfig(deviceId, stackSize, stackCount));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_setBufferPoolUsage(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    Napi::Value* pyobj_on = NULL;
    bool on=0;

    const char* keywords[] = { "on", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:setBufferPoolUsage", (char**)keywords, &pyobj_on) &&
        jsopencv_to_safe(info, pyobj_on, on, ArgInfo("on", 0)))
    {
        ERRWRAP2(cv::cuda::setBufferPoolUsage(on));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_setDevice(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    Napi::Value* pyobj_device = NULL;
    int device=0;

    const char* keywords[] = { "device", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:setDevice", (char**)keywords, &pyobj_device) &&
        jsopencv_to_safe(info, pyobj_device, device, ArgInfo("device", 0)))
    {
        ERRWRAP2(cv::cuda::setDevice(device));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_cuda_unregisterPageLocked(const Napi::CallbackInfo &info)
{
    using namespace cv::cuda;

    Napi::Value* pyobj_m = NULL;
    Mat m;

    const char* keywords[] = { "m", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:unregisterPageLocked", (char**)keywords, &pyobj_m) &&
        jsopencv_to_safe(info, pyobj_m, m, ArgInfo("m", 0)))
    {
        ERRWRAP2(cv::cuda::unregisterPageLocked(m));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_detail_strip(const Napi::CallbackInfo &info)
{
    using namespace cv::detail;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_params = NULL;
    cv::gapi::ie::PyParams params;
    gapi::GNetParam retval;

    const char* keywords[] = { "params", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:strip", (char**)keywords, &pyobj_params) &&
        jsopencv_to_safe(info, pyobj_params, params, ArgInfo("params", 0)))
    {
        ERRWRAP2(retval = cv::detail::strip(params));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_params = NULL;
    cv::gapi::onnx::PyParams params;
    gapi::GNetParam retval;

    const char* keywords[] = { "params", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:strip", (char**)keywords, &pyobj_params) &&
        jsopencv_to_safe(info, pyobj_params, params, ArgInfo("params", 0)))
    {
        ERRWRAP2(retval = cv::detail::strip(params));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("strip");

    return NULL;
}

static Napi::Value pyopencv_cv_dnn_NMSBoxes(const Napi::CallbackInfo &info)
{
    using namespace cv::dnn;

    Napi::Value* pyobj_bboxes = NULL;
    vector_Rect2d bboxes;
    Napi::Value* pyobj_scores = NULL;
    vector_float scores;
    Napi::Value* pyobj_score_threshold = NULL;
    float score_threshold=0.f;
    Napi::Value* pyobj_nms_threshold = NULL;
    float nms_threshold=0.f;
    vector_int indices;
    Napi::Value* pyobj_eta = NULL;
    float eta=1.f;
    Napi::Value* pyobj_top_k = NULL;
    int top_k=0;

    const char* keywords[] = { "bboxes", "scores", "score_threshold", "nms_threshold", "eta", "top_k", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OO:NMSBoxes", (char**)keywords, &pyobj_bboxes, &pyobj_scores, &pyobj_score_threshold, &pyobj_nms_threshold, &pyobj_eta, &pyobj_top_k) &&
        jsopencv_to_safe(info, pyobj_bboxes, bboxes, ArgInfo("bboxes", 0)) &&
        jsopencv_to_safe(info, pyobj_scores, scores, ArgInfo("scores", 0)) &&
        jsopencv_to_safe(info, pyobj_score_threshold, score_threshold, ArgInfo("score_threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_nms_threshold, nms_threshold, ArgInfo("nms_threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_eta, eta, ArgInfo("eta", 0)) &&
        jsopencv_to_safe(info, pyobj_top_k, top_k, ArgInfo("top_k", 0)))
    {
        ERRWRAP2(cv::dnn::NMSBoxes(bboxes, scores, score_threshold, nms_threshold, indices, eta, top_k));
        return jsopencv_from(indices);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_dnn_NMSBoxesBatched(const Napi::CallbackInfo &info)
{
    using namespace cv::dnn;

    Napi::Value* pyobj_bboxes = NULL;
    vector_Rect2d bboxes;
    Napi::Value* pyobj_scores = NULL;
    vector_float scores;
    Napi::Value* pyobj_class_ids = NULL;
    vector_int class_ids;
    Napi::Value* pyobj_score_threshold = NULL;
    float score_threshold=0.f;
    Napi::Value* pyobj_nms_threshold = NULL;
    float nms_threshold=0.f;
    vector_int indices;
    Napi::Value* pyobj_eta = NULL;
    float eta=1.f;
    Napi::Value* pyobj_top_k = NULL;
    int top_k=0;

    const char* keywords[] = { "bboxes", "scores", "class_ids", "score_threshold", "nms_threshold", "eta", "top_k", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OO:NMSBoxesBatched", (char**)keywords, &pyobj_bboxes, &pyobj_scores, &pyobj_class_ids, &pyobj_score_threshold, &pyobj_nms_threshold, &pyobj_eta, &pyobj_top_k) &&
        jsopencv_to_safe(info, pyobj_bboxes, bboxes, ArgInfo("bboxes", 0)) &&
        jsopencv_to_safe(info, pyobj_scores, scores, ArgInfo("scores", 0)) &&
        jsopencv_to_safe(info, pyobj_class_ids, class_ids, ArgInfo("class_ids", 0)) &&
        jsopencv_to_safe(info, pyobj_score_threshold, score_threshold, ArgInfo("score_threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_nms_threshold, nms_threshold, ArgInfo("nms_threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_eta, eta, ArgInfo("eta", 0)) &&
        jsopencv_to_safe(info, pyobj_top_k, top_k, ArgInfo("top_k", 0)))
    {
        ERRWRAP2(cv::dnn::NMSBoxesBatched(bboxes, scores, class_ids, score_threshold, nms_threshold, indices, eta, top_k));
        return jsopencv_from(indices);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_dnn_NMSBoxesRotated(const Napi::CallbackInfo &info)
{
    using namespace cv::dnn;

    Napi::Value* pyobj_bboxes = NULL;
    vector_RotatedRect bboxes;
    Napi::Value* pyobj_scores = NULL;
    vector_float scores;
    Napi::Value* pyobj_score_threshold = NULL;
    float score_threshold=0.f;
    Napi::Value* pyobj_nms_threshold = NULL;
    float nms_threshold=0.f;
    vector_int indices;
    Napi::Value* pyobj_eta = NULL;
    float eta=1.f;
    Napi::Value* pyobj_top_k = NULL;
    int top_k=0;

    const char* keywords[] = { "bboxes", "scores", "score_threshold", "nms_threshold", "eta", "top_k", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OO:NMSBoxesRotated", (char**)keywords, &pyobj_bboxes, &pyobj_scores, &pyobj_score_threshold, &pyobj_nms_threshold, &pyobj_eta, &pyobj_top_k) &&
        jsopencv_to_safe(info, pyobj_bboxes, bboxes, ArgInfo("bboxes", 0)) &&
        jsopencv_to_safe(info, pyobj_scores, scores, ArgInfo("scores", 0)) &&
        jsopencv_to_safe(info, pyobj_score_threshold, score_threshold, ArgInfo("score_threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_nms_threshold, nms_threshold, ArgInfo("nms_threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_eta, eta, ArgInfo("eta", 0)) &&
        jsopencv_to_safe(info, pyobj_top_k, top_k, ArgInfo("top_k", 0)))
    {
        ERRWRAP2(cv::dnn::NMSBoxes(bboxes, scores, score_threshold, nms_threshold, indices, eta, top_k));
        return jsopencv_from(indices);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_dnn_Net_readFromModelOptimizer(const Napi::CallbackInfo &info)
{
    using namespace cv::dnn;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_xml = NULL;
    String xml;
    Napi::Value* pyobj_bin = NULL;
    String bin;
    Net retval;

    const char* keywords[] = { "xml", "bin", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:Net_readFromModelOptimizer", (char**)keywords, &pyobj_xml, &pyobj_bin) &&
        jsopencv_to_safe(info, pyobj_xml, xml, ArgInfo("xml", 0)) &&
        jsopencv_to_safe(info, pyobj_bin, bin, ArgInfo("bin", 0)))
    {
        ERRWRAP2(retval = cv::dnn::Net::readFromModelOptimizer(xml, bin));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_bufferModelConfig = NULL;
    vector_uchar bufferModelConfig;
    Napi::Value* pyobj_bufferWeights = NULL;
    vector_uchar bufferWeights;
    Net retval;

    const char* keywords[] = { "bufferModelConfig", "bufferWeights", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:Net_readFromModelOptimizer", (char**)keywords, &pyobj_bufferModelConfig, &pyobj_bufferWeights) &&
        jsopencv_to_safe(info, pyobj_bufferModelConfig, bufferModelConfig, ArgInfo("bufferModelConfig", 0)) &&
        jsopencv_to_safe(info, pyobj_bufferWeights, bufferWeights, ArgInfo("bufferWeights", 0)))
    {
        ERRWRAP2(retval = cv::dnn::Net::readFromModelOptimizer(bufferModelConfig, bufferWeights));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("Net_readFromModelOptimizer");

    return NULL;
}

static Napi::Value pyopencv_cv_dnn_blobFromImage(const Napi::CallbackInfo &info)
{
    using namespace cv::dnn;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_scalefactor = NULL;
    double scalefactor=1.0;
    Napi::Value* pyobj_size = NULL;
    Size size;
    Napi::Value* pyobj_mean = NULL;
    Scalar mean;
    Napi::Value* pyobj_swapRB = NULL;
    bool swapRB=false;
    Napi::Value* pyobj_crop = NULL;
    bool crop=false;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=CV_32F;
    Mat retval;

    const char* keywords[] = { "image", "scalefactor", "size", "mean", "swapRB", "crop", "ddepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOOO:blobFromImage", (char**)keywords, &pyobj_image, &pyobj_scalefactor, &pyobj_size, &pyobj_mean, &pyobj_swapRB, &pyobj_crop, &pyobj_ddepth) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_scalefactor, scalefactor, ArgInfo("scalefactor", 0)) &&
        jsopencv_to_safe(info, pyobj_size, size, ArgInfo("size", 0)) &&
        jsopencv_to_safe(info, pyobj_mean, mean, ArgInfo("mean", 0)) &&
        jsopencv_to_safe(info, pyobj_swapRB, swapRB, ArgInfo("swapRB", 0)) &&
        jsopencv_to_safe(info, pyobj_crop, crop, ArgInfo("crop", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)))
    {
        ERRWRAP2(retval = cv::dnn::blobFromImage(image, scalefactor, size, mean, swapRB, crop, ddepth));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_scalefactor = NULL;
    double scalefactor=1.0;
    Napi::Value* pyobj_size = NULL;
    Size size;
    Napi::Value* pyobj_mean = NULL;
    Scalar mean;
    Napi::Value* pyobj_swapRB = NULL;
    bool swapRB=false;
    Napi::Value* pyobj_crop = NULL;
    bool crop=false;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=CV_32F;
    Mat retval;

    const char* keywords[] = { "image", "scalefactor", "size", "mean", "swapRB", "crop", "ddepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOOO:blobFromImage", (char**)keywords, &pyobj_image, &pyobj_scalefactor, &pyobj_size, &pyobj_mean, &pyobj_swapRB, &pyobj_crop, &pyobj_ddepth) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_scalefactor, scalefactor, ArgInfo("scalefactor", 0)) &&
        jsopencv_to_safe(info, pyobj_size, size, ArgInfo("size", 0)) &&
        jsopencv_to_safe(info, pyobj_mean, mean, ArgInfo("mean", 0)) &&
        jsopencv_to_safe(info, pyobj_swapRB, swapRB, ArgInfo("swapRB", 0)) &&
        jsopencv_to_safe(info, pyobj_crop, crop, ArgInfo("crop", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)))
    {
        ERRWRAP2(retval = cv::dnn::blobFromImage(image, scalefactor, size, mean, swapRB, crop, ddepth));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("blobFromImage");

    return NULL;
}

static Napi::Value pyopencv_cv_dnn_blobFromImages(const Napi::CallbackInfo &info)
{
    using namespace cv::dnn;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_images = NULL;
    vector_Mat images;
    Napi::Value* pyobj_scalefactor = NULL;
    double scalefactor=1.0;
    Napi::Value* pyobj_size = NULL;
    Size size;
    Napi::Value* pyobj_mean = NULL;
    Scalar mean;
    Napi::Value* pyobj_swapRB = NULL;
    bool swapRB=false;
    Napi::Value* pyobj_crop = NULL;
    bool crop=false;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=CV_32F;
    Mat retval;

    const char* keywords[] = { "images", "scalefactor", "size", "mean", "swapRB", "crop", "ddepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOOO:blobFromImages", (char**)keywords, &pyobj_images, &pyobj_scalefactor, &pyobj_size, &pyobj_mean, &pyobj_swapRB, &pyobj_crop, &pyobj_ddepth) &&
        jsopencv_to_safe(info, pyobj_images, images, ArgInfo("images", 0)) &&
        jsopencv_to_safe(info, pyobj_scalefactor, scalefactor, ArgInfo("scalefactor", 0)) &&
        jsopencv_to_safe(info, pyobj_size, size, ArgInfo("size", 0)) &&
        jsopencv_to_safe(info, pyobj_mean, mean, ArgInfo("mean", 0)) &&
        jsopencv_to_safe(info, pyobj_swapRB, swapRB, ArgInfo("swapRB", 0)) &&
        jsopencv_to_safe(info, pyobj_crop, crop, ArgInfo("crop", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)))
    {
        ERRWRAP2(retval = cv::dnn::blobFromImages(images, scalefactor, size, mean, swapRB, crop, ddepth));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_images = NULL;
    vector_UMat images;
    Napi::Value* pyobj_scalefactor = NULL;
    double scalefactor=1.0;
    Napi::Value* pyobj_size = NULL;
    Size size;
    Napi::Value* pyobj_mean = NULL;
    Scalar mean;
    Napi::Value* pyobj_swapRB = NULL;
    bool swapRB=false;
    Napi::Value* pyobj_crop = NULL;
    bool crop=false;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=CV_32F;
    Mat retval;

    const char* keywords[] = { "images", "scalefactor", "size", "mean", "swapRB", "crop", "ddepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOOO:blobFromImages", (char**)keywords, &pyobj_images, &pyobj_scalefactor, &pyobj_size, &pyobj_mean, &pyobj_swapRB, &pyobj_crop, &pyobj_ddepth) &&
        jsopencv_to_safe(info, pyobj_images, images, ArgInfo("images", 0)) &&
        jsopencv_to_safe(info, pyobj_scalefactor, scalefactor, ArgInfo("scalefactor", 0)) &&
        jsopencv_to_safe(info, pyobj_size, size, ArgInfo("size", 0)) &&
        jsopencv_to_safe(info, pyobj_mean, mean, ArgInfo("mean", 0)) &&
        jsopencv_to_safe(info, pyobj_swapRB, swapRB, ArgInfo("swapRB", 0)) &&
        jsopencv_to_safe(info, pyobj_crop, crop, ArgInfo("crop", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)))
    {
        ERRWRAP2(retval = cv::dnn::blobFromImages(images, scalefactor, size, mean, swapRB, crop, ddepth));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("blobFromImages");

    return NULL;
}

static Napi::Value pyopencv_cv_dnn_getAvailableTargets(const Napi::CallbackInfo &info)
{
    using namespace cv::dnn;

    Napi::Value* pyobj_be = NULL;
    dnn_Backend be=static_cast<dnn_Backend>(0);
    std::vector<Target> retval;

    const char* keywords[] = { "be", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:getAvailableTargets", (char**)keywords, &pyobj_be) &&
        jsopencv_to_safe(info, pyobj_be, be, ArgInfo("be", 0)))
    {
        ERRWRAP2(retval = cv::dnn::getAvailableTargets(be));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_dnn_imagesFromBlob(const Napi::CallbackInfo &info)
{
    using namespace cv::dnn;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_blob_ = NULL;
    Mat blob_;
    Napi::Value* pyobj_images_ = NULL;
    vector_Mat images_;

    const char* keywords[] = { "blob_", "images_", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:imagesFromBlob", (char**)keywords, &pyobj_blob_, &pyobj_images_) &&
        jsopencv_to_safe(info, pyobj_blob_, blob_, ArgInfo("blob_", 0)) &&
        jsopencv_to_safe(info, pyobj_images_, images_, ArgInfo("images_", 1)))
    {
        ERRWRAP2(cv::dnn::imagesFromBlob(blob_, images_));
        return jsopencv_from(images_);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_blob_ = NULL;
    Mat blob_;
    Napi::Value* pyobj_images_ = NULL;
    vector_UMat images_;

    const char* keywords[] = { "blob_", "images_", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:imagesFromBlob", (char**)keywords, &pyobj_blob_, &pyobj_images_) &&
        jsopencv_to_safe(info, pyobj_blob_, blob_, ArgInfo("blob_", 0)) &&
        jsopencv_to_safe(info, pyobj_images_, images_, ArgInfo("images_", 1)))
    {
        ERRWRAP2(cv::dnn::imagesFromBlob(blob_, images_));
        return jsopencv_from(images_);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("imagesFromBlob");

    return NULL;
}

static Napi::Value pyopencv_cv_dnn_readNet(const Napi::CallbackInfo &info)
{
    using namespace cv::dnn;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_model = NULL;
    String model;
    Napi::Value* pyobj_config = NULL;
    String config="";
    Napi::Value* pyobj_framework = NULL;
    String framework="";
    Net retval;

    const char* keywords[] = { "model", "config", "framework", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:readNet", (char**)keywords, &pyobj_model, &pyobj_config, &pyobj_framework) &&
        jsopencv_to_safe(info, pyobj_model, model, ArgInfo("model", 0)) &&
        jsopencv_to_safe(info, pyobj_config, config, ArgInfo("config", 0)) &&
        jsopencv_to_safe(info, pyobj_framework, framework, ArgInfo("framework", 0)))
    {
        ERRWRAP2(retval = cv::dnn::readNet(model, config, framework));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_framework = NULL;
    String framework;
    Napi::Value* pyobj_bufferModel = NULL;
    vector_uchar bufferModel;
    Napi::Value* pyobj_bufferConfig = NULL;
    vector_uchar bufferConfig=std::vector<uchar>();
    Net retval;

    const char* keywords[] = { "framework", "bufferModel", "bufferConfig", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:readNet", (char**)keywords, &pyobj_framework, &pyobj_bufferModel, &pyobj_bufferConfig) &&
        jsopencv_to_safe(info, pyobj_framework, framework, ArgInfo("framework", 0)) &&
        jsopencv_to_safe(info, pyobj_bufferModel, bufferModel, ArgInfo("bufferModel", 0)) &&
        jsopencv_to_safe(info, pyobj_bufferConfig, bufferConfig, ArgInfo("bufferConfig", 0)))
    {
        ERRWRAP2(retval = cv::dnn::readNet(framework, bufferModel, bufferConfig));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("readNet");

    return NULL;
}

static Napi::Value pyopencv_cv_dnn_readNetFromCaffe(const Napi::CallbackInfo &info)
{
    using namespace cv::dnn;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_prototxt = NULL;
    String prototxt;
    Napi::Value* pyobj_caffeModel = NULL;
    String caffeModel;
    Net retval;

    const char* keywords[] = { "prototxt", "caffeModel", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:readNetFromCaffe", (char**)keywords, &pyobj_prototxt, &pyobj_caffeModel) &&
        jsopencv_to_safe(info, pyobj_prototxt, prototxt, ArgInfo("prototxt", 0)) &&
        jsopencv_to_safe(info, pyobj_caffeModel, caffeModel, ArgInfo("caffeModel", 0)))
    {
        ERRWRAP2(retval = cv::dnn::readNetFromCaffe(prototxt, caffeModel));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_bufferProto = NULL;
    vector_uchar bufferProto;
    Napi::Value* pyobj_bufferModel = NULL;
    vector_uchar bufferModel=std::vector<uchar>();
    Net retval;

    const char* keywords[] = { "bufferProto", "bufferModel", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:readNetFromCaffe", (char**)keywords, &pyobj_bufferProto, &pyobj_bufferModel) &&
        jsopencv_to_safe(info, pyobj_bufferProto, bufferProto, ArgInfo("bufferProto", 0)) &&
        jsopencv_to_safe(info, pyobj_bufferModel, bufferModel, ArgInfo("bufferModel", 0)))
    {
        ERRWRAP2(retval = cv::dnn::readNetFromCaffe(bufferProto, bufferModel));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("readNetFromCaffe");

    return NULL;
}

static Napi::Value pyopencv_cv_dnn_readNetFromDarknet(const Napi::CallbackInfo &info)
{
    using namespace cv::dnn;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_cfgFile = NULL;
    String cfgFile;
    Napi::Value* pyobj_darknetModel = NULL;
    String darknetModel;
    Net retval;

    const char* keywords[] = { "cfgFile", "darknetModel", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:readNetFromDarknet", (char**)keywords, &pyobj_cfgFile, &pyobj_darknetModel) &&
        jsopencv_to_safe(info, pyobj_cfgFile, cfgFile, ArgInfo("cfgFile", 0)) &&
        jsopencv_to_safe(info, pyobj_darknetModel, darknetModel, ArgInfo("darknetModel", 0)))
    {
        ERRWRAP2(retval = cv::dnn::readNetFromDarknet(cfgFile, darknetModel));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_bufferCfg = NULL;
    vector_uchar bufferCfg;
    Napi::Value* pyobj_bufferModel = NULL;
    vector_uchar bufferModel=std::vector<uchar>();
    Net retval;

    const char* keywords[] = { "bufferCfg", "bufferModel", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:readNetFromDarknet", (char**)keywords, &pyobj_bufferCfg, &pyobj_bufferModel) &&
        jsopencv_to_safe(info, pyobj_bufferCfg, bufferCfg, ArgInfo("bufferCfg", 0)) &&
        jsopencv_to_safe(info, pyobj_bufferModel, bufferModel, ArgInfo("bufferModel", 0)))
    {
        ERRWRAP2(retval = cv::dnn::readNetFromDarknet(bufferCfg, bufferModel));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("readNetFromDarknet");

    return NULL;
}

static Napi::Value pyopencv_cv_dnn_readNetFromModelOptimizer(const Napi::CallbackInfo &info)
{
    using namespace cv::dnn;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_xml = NULL;
    String xml;
    Napi::Value* pyobj_bin = NULL;
    String bin;
    Net retval;

    const char* keywords[] = { "xml", "bin", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:readNetFromModelOptimizer", (char**)keywords, &pyobj_xml, &pyobj_bin) &&
        jsopencv_to_safe(info, pyobj_xml, xml, ArgInfo("xml", 0)) &&
        jsopencv_to_safe(info, pyobj_bin, bin, ArgInfo("bin", 0)))
    {
        ERRWRAP2(retval = cv::dnn::readNetFromModelOptimizer(xml, bin));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_bufferModelConfig = NULL;
    vector_uchar bufferModelConfig;
    Napi::Value* pyobj_bufferWeights = NULL;
    vector_uchar bufferWeights;
    Net retval;

    const char* keywords[] = { "bufferModelConfig", "bufferWeights", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:readNetFromModelOptimizer", (char**)keywords, &pyobj_bufferModelConfig, &pyobj_bufferWeights) &&
        jsopencv_to_safe(info, pyobj_bufferModelConfig, bufferModelConfig, ArgInfo("bufferModelConfig", 0)) &&
        jsopencv_to_safe(info, pyobj_bufferWeights, bufferWeights, ArgInfo("bufferWeights", 0)))
    {
        ERRWRAP2(retval = cv::dnn::readNetFromModelOptimizer(bufferModelConfig, bufferWeights));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("readNetFromModelOptimizer");

    return NULL;
}

static Napi::Value pyopencv_cv_dnn_readNetFromONNX(const Napi::CallbackInfo &info)
{
    using namespace cv::dnn;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_onnxFile = NULL;
    String onnxFile;
    Net retval;

    const char* keywords[] = { "onnxFile", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:readNetFromONNX", (char**)keywords, &pyobj_onnxFile) &&
        jsopencv_to_safe(info, pyobj_onnxFile, onnxFile, ArgInfo("onnxFile", 0)))
    {
        ERRWRAP2(retval = cv::dnn::readNetFromONNX(onnxFile));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_buffer = NULL;
    vector_uchar buffer;
    Net retval;

    const char* keywords[] = { "buffer", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:readNetFromONNX", (char**)keywords, &pyobj_buffer) &&
        jsopencv_to_safe(info, pyobj_buffer, buffer, ArgInfo("buffer", 0)))
    {
        ERRWRAP2(retval = cv::dnn::readNetFromONNX(buffer));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("readNetFromONNX");

    return NULL;
}

static Napi::Value pyopencv_cv_dnn_readNetFromTensorflow(const Napi::CallbackInfo &info)
{
    using namespace cv::dnn;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_model = NULL;
    String model;
    Napi::Value* pyobj_config = NULL;
    String config;
    Net retval;

    const char* keywords[] = { "model", "config", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:readNetFromTensorflow", (char**)keywords, &pyobj_model, &pyobj_config) &&
        jsopencv_to_safe(info, pyobj_model, model, ArgInfo("model", 0)) &&
        jsopencv_to_safe(info, pyobj_config, config, ArgInfo("config", 0)))
    {
        ERRWRAP2(retval = cv::dnn::readNetFromTensorflow(model, config));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_bufferModel = NULL;
    vector_uchar bufferModel;
    Napi::Value* pyobj_bufferConfig = NULL;
    vector_uchar bufferConfig=std::vector<uchar>();
    Net retval;

    const char* keywords[] = { "bufferModel", "bufferConfig", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:readNetFromTensorflow", (char**)keywords, &pyobj_bufferModel, &pyobj_bufferConfig) &&
        jsopencv_to_safe(info, pyobj_bufferModel, bufferModel, ArgInfo("bufferModel", 0)) &&
        jsopencv_to_safe(info, pyobj_bufferConfig, bufferConfig, ArgInfo("bufferConfig", 0)))
    {
        ERRWRAP2(retval = cv::dnn::readNetFromTensorflow(bufferModel, bufferConfig));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("readNetFromTensorflow");

    return NULL;
}

static Napi::Value pyopencv_cv_dnn_readNetFromTorch(const Napi::CallbackInfo &info)
{
    using namespace cv::dnn;

    Napi::Value* pyobj_model = NULL;
    String model;
    Napi::Value* pyobj_isBinary = NULL;
    bool isBinary=true;
    Napi::Value* pyobj_evaluate = NULL;
    bool evaluate=true;
    Net retval;

    const char* keywords[] = { "model", "isBinary", "evaluate", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:readNetFromTorch", (char**)keywords, &pyobj_model, &pyobj_isBinary, &pyobj_evaluate) &&
        jsopencv_to_safe(info, pyobj_model, model, ArgInfo("model", 0)) &&
        jsopencv_to_safe(info, pyobj_isBinary, isBinary, ArgInfo("isBinary", 0)) &&
        jsopencv_to_safe(info, pyobj_evaluate, evaluate, ArgInfo("evaluate", 0)))
    {
        ERRWRAP2(retval = cv::dnn::readNetFromTorch(model, isBinary, evaluate));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_dnn_readTensorFromONNX(const Napi::CallbackInfo &info)
{
    using namespace cv::dnn;

    Napi::Value* pyobj_path = NULL;
    String path;
    Mat retval;

    const char* keywords[] = { "path", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:readTensorFromONNX", (char**)keywords, &pyobj_path) &&
        jsopencv_to_safe(info, pyobj_path, path, ArgInfo("path", 0)))
    {
        ERRWRAP2(retval = cv::dnn::readTensorFromONNX(path));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_dnn_readTorchBlob(const Napi::CallbackInfo &info)
{
    using namespace cv::dnn;

    Napi::Value* pyobj_filename = NULL;
    String filename;
    Napi::Value* pyobj_isBinary = NULL;
    bool isBinary=true;
    Mat retval;

    const char* keywords[] = { "filename", "isBinary", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:readTorchBlob", (char**)keywords, &pyobj_filename, &pyobj_isBinary) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)) &&
        jsopencv_to_safe(info, pyobj_isBinary, isBinary, ArgInfo("isBinary", 0)))
    {
        ERRWRAP2(retval = cv::dnn::readTorchBlob(filename, isBinary));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_dnn_shrinkCaffeModel(const Napi::CallbackInfo &info)
{
    using namespace cv::dnn;

    Napi::Value* pyobj_src = NULL;
    String src;
    Napi::Value* pyobj_dst = NULL;
    String dst;
    Napi::Value* pyobj_layersTypes = NULL;
    vector_String layersTypes=std::vector<String>();

    const char* keywords[] = { "src", "dst", "layersTypes", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:shrinkCaffeModel", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_layersTypes) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 0)) &&
        jsopencv_to_safe(info, pyobj_layersTypes, layersTypes, ArgInfo("layersTypes", 0)))
    {
        ERRWRAP2(cv::dnn::shrinkCaffeModel(src, dst, layersTypes));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_dnn_softNMSBoxes(const Napi::CallbackInfo &info)
{
    using namespace cv::dnn;

    Napi::Value* pyobj_bboxes = NULL;
    vector_Rect bboxes;
    Napi::Value* pyobj_scores = NULL;
    vector_float scores;
    vector_float updated_scores;
    Napi::Value* pyobj_score_threshold = NULL;
    float score_threshold=0.f;
    Napi::Value* pyobj_nms_threshold = NULL;
    float nms_threshold=0.f;
    vector_int indices;
    Napi::Value* pyobj_top_k = NULL;
    size_t top_k=0;
    Napi::Value* pyobj_sigma = NULL;
    float sigma=0.5;
    Napi::Value* pyobj_method = NULL;
    SoftNMSMethod method=SoftNMSMethod::SOFTNMS_GAUSSIAN;

    const char* keywords[] = { "bboxes", "scores", "score_threshold", "nms_threshold", "top_k", "sigma", "method", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:softNMSBoxes", (char**)keywords, &pyobj_bboxes, &pyobj_scores, &pyobj_score_threshold, &pyobj_nms_threshold, &pyobj_top_k, &pyobj_sigma, &pyobj_method) &&
        jsopencv_to_safe(info, pyobj_bboxes, bboxes, ArgInfo("bboxes", 0)) &&
        jsopencv_to_safe(info, pyobj_scores, scores, ArgInfo("scores", 0)) &&
        jsopencv_to_safe(info, pyobj_score_threshold, score_threshold, ArgInfo("score_threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_nms_threshold, nms_threshold, ArgInfo("nms_threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_top_k, top_k, ArgInfo("top_k", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma, sigma, ArgInfo("sigma", 0)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)))
    {
        ERRWRAP2(cv::dnn::softNMSBoxes(bboxes, scores, updated_scores, score_threshold, nms_threshold, indices, top_k, sigma, method));
        return Py_BuildValue("(NN)", jsopencv_from(updated_scores), jsopencv_from(indices));
    }

    return NULL;
}

static Napi::Value pyopencv_cv_dnn_writeTextGraph(const Napi::CallbackInfo &info)
{
    using namespace cv::dnn;

    Napi::Value* pyobj_model = NULL;
    String model;
    Napi::Value* pyobj_output = NULL;
    String output;

    const char* keywords[] = { "model", "output", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:writeTextGraph", (char**)keywords, &pyobj_model, &pyobj_output) &&
        jsopencv_to_safe(info, pyobj_model, model, ArgInfo("model", 0)) &&
        jsopencv_to_safe(info, pyobj_output, output, ArgInfo("output", 0)))
    {
        ERRWRAP2(cv::dnn::writeTextGraph(model, output));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_dnn_superres_DnnSuperResImpl_create(const Napi::CallbackInfo &info)
{
    using namespace cv::dnn_superres;

    Ptr<DnnSuperResImpl> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::dnn_superres::DnnSuperResImpl::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_face_BIF_create(const Napi::CallbackInfo &info)
{
    using namespace cv::face;

    Napi::Value* pyobj_num_bands = NULL;
    int num_bands=8;
    Napi::Value* pyobj_num_rotations = NULL;
    int num_rotations=12;
    Ptr<BIF> retval;

    const char* keywords[] = { "num_bands", "num_rotations", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OO:BIF_create", (char**)keywords, &pyobj_num_bands, &pyobj_num_rotations) &&
        jsopencv_to_safe(info, pyobj_num_bands, num_bands, ArgInfo("num_bands", 0)) &&
        jsopencv_to_safe(info, pyobj_num_rotations, num_rotations, ArgInfo("num_rotations", 0)))
    {
        ERRWRAP2(retval = cv::face::BIF::create(num_bands, num_rotations));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_face_EigenFaceRecognizer_create(const Napi::CallbackInfo &info)
{
    using namespace cv::face;

    Napi::Value* pyobj_num_components = NULL;
    int num_components=0;
    Napi::Value* pyobj_threshold = NULL;
    double threshold=DBL_MAX;
    Ptr<EigenFaceRecognizer> retval;

    const char* keywords[] = { "num_components", "threshold", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OO:EigenFaceRecognizer_create", (char**)keywords, &pyobj_num_components, &pyobj_threshold) &&
        jsopencv_to_safe(info, pyobj_num_components, num_components, ArgInfo("num_components", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)))
    {
        ERRWRAP2(retval = cv::face::EigenFaceRecognizer::create(num_components, threshold));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_face_FisherFaceRecognizer_create(const Napi::CallbackInfo &info)
{
    using namespace cv::face;

    Napi::Value* pyobj_num_components = NULL;
    int num_components=0;
    Napi::Value* pyobj_threshold = NULL;
    double threshold=DBL_MAX;
    Ptr<FisherFaceRecognizer> retval;

    const char* keywords[] = { "num_components", "threshold", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OO:FisherFaceRecognizer_create", (char**)keywords, &pyobj_num_components, &pyobj_threshold) &&
        jsopencv_to_safe(info, pyobj_num_components, num_components, ArgInfo("num_components", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)))
    {
        ERRWRAP2(retval = cv::face::FisherFaceRecognizer::create(num_components, threshold));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_face_LBPHFaceRecognizer_create(const Napi::CallbackInfo &info)
{
    using namespace cv::face;

    Napi::Value* pyobj_radius = NULL;
    int radius=1;
    Napi::Value* pyobj_neighbors = NULL;
    int neighbors=8;
    Napi::Value* pyobj_grid_x = NULL;
    int grid_x=8;
    Napi::Value* pyobj_grid_y = NULL;
    int grid_y=8;
    Napi::Value* pyobj_threshold = NULL;
    double threshold=DBL_MAX;
    Ptr<LBPHFaceRecognizer> retval;

    const char* keywords[] = { "radius", "neighbors", "grid_x", "grid_y", "threshold", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOOO:LBPHFaceRecognizer_create", (char**)keywords, &pyobj_radius, &pyobj_neighbors, &pyobj_grid_x, &pyobj_grid_y, &pyobj_threshold) &&
        jsopencv_to_safe(info, pyobj_radius, radius, ArgInfo("radius", 0)) &&
        jsopencv_to_safe(info, pyobj_neighbors, neighbors, ArgInfo("neighbors", 0)) &&
        jsopencv_to_safe(info, pyobj_grid_x, grid_x, ArgInfo("grid_x", 0)) &&
        jsopencv_to_safe(info, pyobj_grid_y, grid_y, ArgInfo("grid_y", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)))
    {
        ERRWRAP2(retval = cv::face::LBPHFaceRecognizer::create(radius, neighbors, grid_x, grid_y, threshold));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_face_MACE_create(const Napi::CallbackInfo &info)
{
    using namespace cv::face;

    Napi::Value* pyobj_IMGSIZE = NULL;
    int IMGSIZE=64;
    cv::Ptr<MACE> retval;

    const char* keywords[] = { "IMGSIZE", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|O:MACE_create", (char**)keywords, &pyobj_IMGSIZE) &&
        jsopencv_to_safe(info, pyobj_IMGSIZE, IMGSIZE, ArgInfo("IMGSIZE", 0)))
    {
        ERRWRAP2(retval = cv::face::MACE::create(IMGSIZE));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_face_MACE_load(const Napi::CallbackInfo &info)
{
    using namespace cv::face;

    Napi::Value* pyobj_filename = NULL;
    String filename;
    Napi::Value* pyobj_objname = NULL;
    String objname;
    cv::Ptr<MACE> retval;

    const char* keywords[] = { "filename", "objname", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:MACE_load", (char**)keywords, &pyobj_filename, &pyobj_objname) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)) &&
        jsopencv_to_safe(info, pyobj_objname, objname, ArgInfo("objname", 0)))
    {
        ERRWRAP2(retval = cv::face::MACE::load(filename, objname));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_face_StandardCollector_create(const Napi::CallbackInfo &info)
{
    using namespace cv::face;

    Napi::Value* pyobj_threshold = NULL;
    double threshold=DBL_MAX;
    Ptr<StandardCollector> retval;

    const char* keywords[] = { "threshold", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|O:StandardCollector_create", (char**)keywords, &pyobj_threshold) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)))
    {
        ERRWRAP2(retval = cv::face::StandardCollector::create(threshold));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_face_createFacemarkAAM(const Napi::CallbackInfo &info)
{
    using namespace cv::face;

    Ptr<Facemark> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::face::createFacemarkAAM());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_face_createFacemarkKazemi(const Napi::CallbackInfo &info)
{
    using namespace cv::face;

    Ptr<Facemark> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::face::createFacemarkKazemi());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_face_createFacemarkLBF(const Napi::CallbackInfo &info)
{
    using namespace cv::face;

    Ptr<Facemark> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::face::createFacemarkLBF());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_face_drawFacemarks(const Napi::CallbackInfo &info)
{
    using namespace cv::face;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_points = NULL;
    Mat points;
    Napi::Value* pyobj_color = NULL;
    Scalar color=Scalar(255,0,0);

    const char* keywords[] = { "image", "points", "color", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:drawFacemarks", (char**)keywords, &pyobj_image, &pyobj_points, &pyobj_color) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 1)) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)))
    {
        ERRWRAP2(cv::face::drawFacemarks(image, points, color));
        return jsopencv_from(image);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_points = NULL;
    UMat points;
    Napi::Value* pyobj_color = NULL;
    Scalar color=Scalar(255,0,0);

    const char* keywords[] = { "image", "points", "color", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:drawFacemarks", (char**)keywords, &pyobj_image, &pyobj_points, &pyobj_color) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 1)) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)))
    {
        ERRWRAP2(cv::face::drawFacemarks(image, points, color));
        return jsopencv_from(image);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("drawFacemarks");

    return NULL;
}

static Napi::Value pyopencv_cv_face_getFacesHAAR(const Napi::CallbackInfo &info)
{
    using namespace cv::face;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_faces = NULL;
    Mat faces;
    Napi::Value* pyobj_face_cascade_name = NULL;
    String face_cascade_name;
    bool retval;

    const char* keywords[] = { "image", "face_cascade_name", "faces", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:getFacesHAAR", (char**)keywords, &pyobj_image, &pyobj_face_cascade_name, &pyobj_faces) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_faces, faces, ArgInfo("faces", 1)) &&
        jsopencv_to_safe(info, pyobj_face_cascade_name, face_cascade_name, ArgInfo("face_cascade_name", 0)))
    {
        ERRWRAP2(retval = cv::face::getFacesHAAR(image, faces, face_cascade_name));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(faces));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_faces = NULL;
    UMat faces;
    Napi::Value* pyobj_face_cascade_name = NULL;
    String face_cascade_name;
    bool retval;

    const char* keywords[] = { "image", "face_cascade_name", "faces", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:getFacesHAAR", (char**)keywords, &pyobj_image, &pyobj_face_cascade_name, &pyobj_faces) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_faces, faces, ArgInfo("faces", 1)) &&
        jsopencv_to_safe(info, pyobj_face_cascade_name, face_cascade_name, ArgInfo("face_cascade_name", 0)))
    {
        ERRWRAP2(retval = cv::face::getFacesHAAR(image, faces, face_cascade_name));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(faces));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("getFacesHAAR");

    return NULL;
}

static Napi::Value pyopencv_cv_face_loadDatasetList(const Napi::CallbackInfo &info)
{
    using namespace cv::face;

    Napi::Value* pyobj_imageList = NULL;
    String imageList;
    Napi::Value* pyobj_annotationList = NULL;
    String annotationList;
    Napi::Value* pyobj_images = NULL;
    vector_String images;
    Napi::Value* pyobj_annotations = NULL;
    vector_String annotations;
    bool retval;

    const char* keywords[] = { "imageList", "annotationList", "images", "annotations", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO:loadDatasetList", (char**)keywords, &pyobj_imageList, &pyobj_annotationList, &pyobj_images, &pyobj_annotations) &&
        jsopencv_to_safe(info, pyobj_imageList, imageList, ArgInfo("imageList", 0)) &&
        jsopencv_to_safe(info, pyobj_annotationList, annotationList, ArgInfo("annotationList", 0)) &&
        jsopencv_to_safe(info, pyobj_images, images, ArgInfo("images", 0)) &&
        jsopencv_to_safe(info, pyobj_annotations, annotations, ArgInfo("annotations", 0)))
    {
        ERRWRAP2(retval = cv::face::loadDatasetList(imageList, annotationList, images, annotations));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_face_loadFacePoints(const Napi::CallbackInfo &info)
{
    using namespace cv::face;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_filename = NULL;
    String filename;
    Napi::Value* pyobj_points = NULL;
    Mat points;
    Napi::Value* pyobj_offset = NULL;
    float offset=0.0f;
    bool retval;

    const char* keywords[] = { "filename", "points", "offset", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:loadFacePoints", (char**)keywords, &pyobj_filename, &pyobj_points, &pyobj_offset) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 1)) &&
        jsopencv_to_safe(info, pyobj_offset, offset, ArgInfo("offset", 0)))
    {
        ERRWRAP2(retval = cv::face::loadFacePoints(filename, points, offset));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(points));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_filename = NULL;
    String filename;
    Napi::Value* pyobj_points = NULL;
    UMat points;
    Napi::Value* pyobj_offset = NULL;
    float offset=0.0f;
    bool retval;

    const char* keywords[] = { "filename", "points", "offset", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:loadFacePoints", (char**)keywords, &pyobj_filename, &pyobj_points, &pyobj_offset) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)) &&
        jsopencv_to_safe(info, pyobj_points, points, ArgInfo("points", 1)) &&
        jsopencv_to_safe(info, pyobj_offset, offset, ArgInfo("offset", 0)))
    {
        ERRWRAP2(retval = cv::face::loadFacePoints(filename, points, offset));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(points));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("loadFacePoints");

    return NULL;
}

static Napi::Value pyopencv_cv_face_loadTrainingData(const Napi::CallbackInfo &info)
{
    using namespace cv::face;

    pyPrepareArgumentConversionErrorsStorage(5);

    {
    Napi::Value* pyobj_filename = NULL;
    String filename;
    Napi::Value* pyobj_images = NULL;
    vector_String images;
    Napi::Value* pyobj_facePoints = NULL;
    Mat facePoints;
    Napi::Value* pyobj_delim = NULL;
    char delim=' ';
    Napi::Value* pyobj_offset = NULL;
    float offset=0.0f;
    bool retval;

    const char* keywords[] = { "filename", "images", "facePoints", "delim", "offset", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:loadTrainingData", (char**)keywords, &pyobj_filename, &pyobj_images, &pyobj_facePoints, &pyobj_delim, &pyobj_offset) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)) &&
        jsopencv_to_safe(info, pyobj_images, images, ArgInfo("images", 0)) &&
        jsopencv_to_safe(info, pyobj_facePoints, facePoints, ArgInfo("facePoints", 1)) &&
        convert_to_char(pyobj_delim, &delim, ArgInfo("delim", 0)) &&
        jsopencv_to_safe(info, pyobj_offset, offset, ArgInfo("offset", 0)))
    {
        ERRWRAP2(retval = cv::face::loadTrainingData(filename, images, facePoints, delim, offset));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(facePoints));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_filename = NULL;
    String filename;
    Napi::Value* pyobj_images = NULL;
    vector_String images;
    Napi::Value* pyobj_facePoints = NULL;
    UMat facePoints;
    Napi::Value* pyobj_delim = NULL;
    char delim=' ';
    Napi::Value* pyobj_offset = NULL;
    float offset=0.0f;
    bool retval;

    const char* keywords[] = { "filename", "images", "facePoints", "delim", "offset", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:loadTrainingData", (char**)keywords, &pyobj_filename, &pyobj_images, &pyobj_facePoints, &pyobj_delim, &pyobj_offset) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)) &&
        jsopencv_to_safe(info, pyobj_images, images, ArgInfo("images", 0)) &&
        jsopencv_to_safe(info, pyobj_facePoints, facePoints, ArgInfo("facePoints", 1)) &&
        convert_to_char(pyobj_delim, &delim, ArgInfo("delim", 0)) &&
        jsopencv_to_safe(info, pyobj_offset, offset, ArgInfo("offset", 0)))
    {
        ERRWRAP2(retval = cv::face::loadTrainingData(filename, images, facePoints, delim, offset));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(facePoints));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_imageList = NULL;
    String imageList;
    Napi::Value* pyobj_groundTruth = NULL;
    String groundTruth;
    Napi::Value* pyobj_images = NULL;
    vector_String images;
    Napi::Value* pyobj_facePoints = NULL;
    Mat facePoints;
    Napi::Value* pyobj_offset = NULL;
    float offset=0.0f;
    bool retval;

    const char* keywords[] = { "imageList", "groundTruth", "images", "facePoints", "offset", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:loadTrainingData", (char**)keywords, &pyobj_imageList, &pyobj_groundTruth, &pyobj_images, &pyobj_facePoints, &pyobj_offset) &&
        jsopencv_to_safe(info, pyobj_imageList, imageList, ArgInfo("imageList", 0)) &&
        jsopencv_to_safe(info, pyobj_groundTruth, groundTruth, ArgInfo("groundTruth", 0)) &&
        jsopencv_to_safe(info, pyobj_images, images, ArgInfo("images", 0)) &&
        jsopencv_to_safe(info, pyobj_facePoints, facePoints, ArgInfo("facePoints", 1)) &&
        jsopencv_to_safe(info, pyobj_offset, offset, ArgInfo("offset", 0)))
    {
        ERRWRAP2(retval = cv::face::loadTrainingData(imageList, groundTruth, images, facePoints, offset));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(facePoints));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_imageList = NULL;
    String imageList;
    Napi::Value* pyobj_groundTruth = NULL;
    String groundTruth;
    Napi::Value* pyobj_images = NULL;
    vector_String images;
    Napi::Value* pyobj_facePoints = NULL;
    UMat facePoints;
    Napi::Value* pyobj_offset = NULL;
    float offset=0.0f;
    bool retval;

    const char* keywords[] = { "imageList", "groundTruth", "images", "facePoints", "offset", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:loadTrainingData", (char**)keywords, &pyobj_imageList, &pyobj_groundTruth, &pyobj_images, &pyobj_facePoints, &pyobj_offset) &&
        jsopencv_to_safe(info, pyobj_imageList, imageList, ArgInfo("imageList", 0)) &&
        jsopencv_to_safe(info, pyobj_groundTruth, groundTruth, ArgInfo("groundTruth", 0)) &&
        jsopencv_to_safe(info, pyobj_images, images, ArgInfo("images", 0)) &&
        jsopencv_to_safe(info, pyobj_facePoints, facePoints, ArgInfo("facePoints", 1)) &&
        jsopencv_to_safe(info, pyobj_offset, offset, ArgInfo("offset", 0)))
    {
        ERRWRAP2(retval = cv::face::loadTrainingData(imageList, groundTruth, images, facePoints, offset));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(facePoints));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_filename = NULL;
    vector_String filename;
    Napi::Value* pyobj_trainlandmarks = NULL;
    vector_vector_Point2f trainlandmarks;
    Napi::Value* pyobj_trainimages = NULL;
    vector_String trainimages;
    bool retval;

    const char* keywords[] = { "filename", "trainlandmarks", "trainimages", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:loadTrainingData", (char**)keywords, &pyobj_filename, &pyobj_trainlandmarks, &pyobj_trainimages) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)) &&
        jsopencv_to_safe(info, pyobj_trainlandmarks, trainlandmarks, ArgInfo("trainlandmarks", 0)) &&
        jsopencv_to_safe(info, pyobj_trainimages, trainimages, ArgInfo("trainimages", 0)))
    {
        ERRWRAP2(retval = cv::face::loadTrainingData(filename, trainlandmarks, trainimages));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("loadTrainingData");

    return NULL;
}

static Napi::Value pyopencv_cv_fisheye_calibrate(const Napi::CallbackInfo &info)
{
    using namespace cv::fisheye;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_objectPoints = NULL;
    vector_Mat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    vector_Mat imagePoints;
    Napi::Value* pyobj_image_size = NULL;
    Size image_size;
    Napi::Value* pyobj_K = NULL;
    Mat K;
    Napi::Value* pyobj_D = NULL;
    Mat D;
    Napi::Value* pyobj_rvecs = NULL;
    vector_Mat rvecs;
    Napi::Value* pyobj_tvecs = NULL;
    vector_Mat tvecs;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, DBL_EPSILON);
    double retval;

    const char* keywords[] = { "objectPoints", "imagePoints", "image_size", "K", "D", "rvecs", "tvecs", "flags", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OOOO:calibrate", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_image_size, &pyobj_K, &pyobj_D, &pyobj_rvecs, &pyobj_tvecs, &pyobj_flags, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_image_size, image_size, ArgInfo("image_size", 0)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 1)) &&
        jsopencv_to_safe(info, pyobj_D, D, ArgInfo("D", 1)) &&
        jsopencv_to_safe(info, pyobj_rvecs, rvecs, ArgInfo("rvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_tvecs, tvecs, ArgInfo("tvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(retval = cv::fisheye::calibrate(objectPoints, imagePoints, image_size, K, D, rvecs, tvecs, flags, criteria));
        return Py_BuildValue("(NNNNN)", jsopencv_from(retval), jsopencv_from(K), jsopencv_from(D), jsopencv_from(rvecs), jsopencv_from(tvecs));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_objectPoints = NULL;
    vector_UMat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    vector_UMat imagePoints;
    Napi::Value* pyobj_image_size = NULL;
    Size image_size;
    Napi::Value* pyobj_K = NULL;
    UMat K;
    Napi::Value* pyobj_D = NULL;
    UMat D;
    Napi::Value* pyobj_rvecs = NULL;
    vector_UMat rvecs;
    Napi::Value* pyobj_tvecs = NULL;
    vector_UMat tvecs;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, DBL_EPSILON);
    double retval;

    const char* keywords[] = { "objectPoints", "imagePoints", "image_size", "K", "D", "rvecs", "tvecs", "flags", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OOOO:calibrate", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints, &pyobj_image_size, &pyobj_K, &pyobj_D, &pyobj_rvecs, &pyobj_tvecs, &pyobj_flags, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 0)) &&
        jsopencv_to_safe(info, pyobj_image_size, image_size, ArgInfo("image_size", 0)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 1)) &&
        jsopencv_to_safe(info, pyobj_D, D, ArgInfo("D", 1)) &&
        jsopencv_to_safe(info, pyobj_rvecs, rvecs, ArgInfo("rvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_tvecs, tvecs, ArgInfo("tvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(retval = cv::fisheye::calibrate(objectPoints, imagePoints, image_size, K, D, rvecs, tvecs, flags, criteria));
        return Py_BuildValue("(NNNNN)", jsopencv_from(retval), jsopencv_from(K), jsopencv_from(D), jsopencv_from(rvecs), jsopencv_from(tvecs));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("calibrate");

    return NULL;
}

static Napi::Value pyopencv_cv_fisheye_distortPoints(const Napi::CallbackInfo &info)
{
    using namespace cv::fisheye;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_undistorted = NULL;
    Mat undistorted;
    Napi::Value* pyobj_distorted = NULL;
    Mat distorted;
    Napi::Value* pyobj_K = NULL;
    Mat K;
    Napi::Value* pyobj_D = NULL;
    Mat D;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=0;

    const char* keywords[] = { "undistorted", "K", "D", "distorted", "alpha", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:distortPoints", (char**)keywords, &pyobj_undistorted, &pyobj_K, &pyobj_D, &pyobj_distorted, &pyobj_alpha) &&
        jsopencv_to_safe(info, pyobj_undistorted, undistorted, ArgInfo("undistorted", 0)) &&
        jsopencv_to_safe(info, pyobj_distorted, distorted, ArgInfo("distorted", 1)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_D, D, ArgInfo("D", 0)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)))
    {
        ERRWRAP2(cv::fisheye::distortPoints(undistorted, distorted, K, D, alpha));
        return jsopencv_from(distorted);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_undistorted = NULL;
    UMat undistorted;
    Napi::Value* pyobj_distorted = NULL;
    UMat distorted;
    Napi::Value* pyobj_K = NULL;
    UMat K;
    Napi::Value* pyobj_D = NULL;
    UMat D;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=0;

    const char* keywords[] = { "undistorted", "K", "D", "distorted", "alpha", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:distortPoints", (char**)keywords, &pyobj_undistorted, &pyobj_K, &pyobj_D, &pyobj_distorted, &pyobj_alpha) &&
        jsopencv_to_safe(info, pyobj_undistorted, undistorted, ArgInfo("undistorted", 0)) &&
        jsopencv_to_safe(info, pyobj_distorted, distorted, ArgInfo("distorted", 1)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_D, D, ArgInfo("D", 0)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)))
    {
        ERRWRAP2(cv::fisheye::distortPoints(undistorted, distorted, K, D, alpha));
        return jsopencv_from(distorted);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("distortPoints");

    return NULL;
}

static Napi::Value pyopencv_cv_fisheye_estimateNewCameraMatrixForUndistortRectify(const Napi::CallbackInfo &info)
{
    using namespace cv::fisheye;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_K = NULL;
    Mat K;
    Napi::Value* pyobj_D = NULL;
    Mat D;
    Napi::Value* pyobj_image_size = NULL;
    Size image_size;
    Napi::Value* pyobj_R = NULL;
    Mat R;
    Napi::Value* pyobj_P = NULL;
    Mat P;
    Napi::Value* pyobj_balance = NULL;
    double balance=0.0;
    Napi::Value* pyobj_new_size = NULL;
    Size new_size;
    Napi::Value* pyobj_fov_scale = NULL;
    double fov_scale=1.0;

    const char* keywords[] = { "K", "D", "image_size", "R", "P", "balance", "new_size", "fov_scale", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOO:estimateNewCameraMatrixForUndistortRectify", (char**)keywords, &pyobj_K, &pyobj_D, &pyobj_image_size, &pyobj_R, &pyobj_P, &pyobj_balance, &pyobj_new_size, &pyobj_fov_scale) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_D, D, ArgInfo("D", 0)) &&
        jsopencv_to_safe(info, pyobj_image_size, image_size, ArgInfo("image_size", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 0)) &&
        jsopencv_to_safe(info, pyobj_P, P, ArgInfo("P", 1)) &&
        jsopencv_to_safe(info, pyobj_balance, balance, ArgInfo("balance", 0)) &&
        jsopencv_to_safe(info, pyobj_new_size, new_size, ArgInfo("new_size", 0)) &&
        jsopencv_to_safe(info, pyobj_fov_scale, fov_scale, ArgInfo("fov_scale", 0)))
    {
        ERRWRAP2(cv::fisheye::estimateNewCameraMatrixForUndistortRectify(K, D, image_size, R, P, balance, new_size, fov_scale));
        return jsopencv_from(P);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_K = NULL;
    UMat K;
    Napi::Value* pyobj_D = NULL;
    UMat D;
    Napi::Value* pyobj_image_size = NULL;
    Size image_size;
    Napi::Value* pyobj_R = NULL;
    UMat R;
    Napi::Value* pyobj_P = NULL;
    UMat P;
    Napi::Value* pyobj_balance = NULL;
    double balance=0.0;
    Napi::Value* pyobj_new_size = NULL;
    Size new_size;
    Napi::Value* pyobj_fov_scale = NULL;
    double fov_scale=1.0;

    const char* keywords[] = { "K", "D", "image_size", "R", "P", "balance", "new_size", "fov_scale", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOO:estimateNewCameraMatrixForUndistortRectify", (char**)keywords, &pyobj_K, &pyobj_D, &pyobj_image_size, &pyobj_R, &pyobj_P, &pyobj_balance, &pyobj_new_size, &pyobj_fov_scale) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_D, D, ArgInfo("D", 0)) &&
        jsopencv_to_safe(info, pyobj_image_size, image_size, ArgInfo("image_size", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 0)) &&
        jsopencv_to_safe(info, pyobj_P, P, ArgInfo("P", 1)) &&
        jsopencv_to_safe(info, pyobj_balance, balance, ArgInfo("balance", 0)) &&
        jsopencv_to_safe(info, pyobj_new_size, new_size, ArgInfo("new_size", 0)) &&
        jsopencv_to_safe(info, pyobj_fov_scale, fov_scale, ArgInfo("fov_scale", 0)))
    {
        ERRWRAP2(cv::fisheye::estimateNewCameraMatrixForUndistortRectify(K, D, image_size, R, P, balance, new_size, fov_scale));
        return jsopencv_from(P);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("estimateNewCameraMatrixForUndistortRectify");

    return NULL;
}

static Napi::Value pyopencv_cv_fisheye_initUndistortRectifyMap(const Napi::CallbackInfo &info)
{
    using namespace cv::fisheye;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_K = NULL;
    Mat K;
    Napi::Value* pyobj_D = NULL;
    Mat D;
    Napi::Value* pyobj_R = NULL;
    Mat R;
    Napi::Value* pyobj_P = NULL;
    Mat P;
    Napi::Value* pyobj_size = NULL;
    Size size;
    Napi::Value* pyobj_m1type = NULL;
    int m1type=0;
    Napi::Value* pyobj_map1 = NULL;
    Mat map1;
    Napi::Value* pyobj_map2 = NULL;
    Mat map2;

    const char* keywords[] = { "K", "D", "R", "P", "size", "m1type", "map1", "map2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OO:initUndistortRectifyMap", (char**)keywords, &pyobj_K, &pyobj_D, &pyobj_R, &pyobj_P, &pyobj_size, &pyobj_m1type, &pyobj_map1, &pyobj_map2) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_D, D, ArgInfo("D", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 0)) &&
        jsopencv_to_safe(info, pyobj_P, P, ArgInfo("P", 0)) &&
        jsopencv_to_safe(info, pyobj_size, size, ArgInfo("size", 0)) &&
        jsopencv_to_safe(info, pyobj_m1type, m1type, ArgInfo("m1type", 0)) &&
        jsopencv_to_safe(info, pyobj_map1, map1, ArgInfo("map1", 1)) &&
        jsopencv_to_safe(info, pyobj_map2, map2, ArgInfo("map2", 1)))
    {
        ERRWRAP2(cv::fisheye::initUndistortRectifyMap(K, D, R, P, size, m1type, map1, map2));
        return Py_BuildValue("(NN)", jsopencv_from(map1), jsopencv_from(map2));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_K = NULL;
    UMat K;
    Napi::Value* pyobj_D = NULL;
    UMat D;
    Napi::Value* pyobj_R = NULL;
    UMat R;
    Napi::Value* pyobj_P = NULL;
    UMat P;
    Napi::Value* pyobj_size = NULL;
    Size size;
    Napi::Value* pyobj_m1type = NULL;
    int m1type=0;
    Napi::Value* pyobj_map1 = NULL;
    UMat map1;
    Napi::Value* pyobj_map2 = NULL;
    UMat map2;

    const char* keywords[] = { "K", "D", "R", "P", "size", "m1type", "map1", "map2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OO:initUndistortRectifyMap", (char**)keywords, &pyobj_K, &pyobj_D, &pyobj_R, &pyobj_P, &pyobj_size, &pyobj_m1type, &pyobj_map1, &pyobj_map2) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_D, D, ArgInfo("D", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 0)) &&
        jsopencv_to_safe(info, pyobj_P, P, ArgInfo("P", 0)) &&
        jsopencv_to_safe(info, pyobj_size, size, ArgInfo("size", 0)) &&
        jsopencv_to_safe(info, pyobj_m1type, m1type, ArgInfo("m1type", 0)) &&
        jsopencv_to_safe(info, pyobj_map1, map1, ArgInfo("map1", 1)) &&
        jsopencv_to_safe(info, pyobj_map2, map2, ArgInfo("map2", 1)))
    {
        ERRWRAP2(cv::fisheye::initUndistortRectifyMap(K, D, R, P, size, m1type, map1, map2));
        return Py_BuildValue("(NN)", jsopencv_from(map1), jsopencv_from(map2));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("initUndistortRectifyMap");

    return NULL;
}

static Napi::Value pyopencv_cv_fisheye_projectPoints(const Napi::CallbackInfo &info)
{
    using namespace cv::fisheye;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_objectPoints = NULL;
    Mat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    Mat imagePoints;
    Napi::Value* pyobj_rvec = NULL;
    Mat rvec;
    Napi::Value* pyobj_tvec = NULL;
    Mat tvec;
    Napi::Value* pyobj_K = NULL;
    Mat K;
    Napi::Value* pyobj_D = NULL;
    Mat D;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=0;
    Napi::Value* pyobj_jacobian = NULL;
    Mat jacobian;

    const char* keywords[] = { "objectPoints", "rvec", "tvec", "K", "D", "imagePoints", "alpha", "jacobian", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OOO:projectPoints", (char**)keywords, &pyobj_objectPoints, &pyobj_rvec, &pyobj_tvec, &pyobj_K, &pyobj_D, &pyobj_imagePoints, &pyobj_alpha, &pyobj_jacobian) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 1)) &&
        jsopencv_to_safe(info, pyobj_rvec, rvec, ArgInfo("rvec", 0)) &&
        jsopencv_to_safe(info, pyobj_tvec, tvec, ArgInfo("tvec", 0)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_D, D, ArgInfo("D", 0)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_jacobian, jacobian, ArgInfo("jacobian", 1)))
    {
        ERRWRAP2(cv::fisheye::projectPoints(objectPoints, imagePoints, rvec, tvec, K, D, alpha, jacobian));
        return Py_BuildValue("(NN)", jsopencv_from(imagePoints), jsopencv_from(jacobian));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_objectPoints = NULL;
    UMat objectPoints;
    Napi::Value* pyobj_imagePoints = NULL;
    UMat imagePoints;
    Napi::Value* pyobj_rvec = NULL;
    UMat rvec;
    Napi::Value* pyobj_tvec = NULL;
    UMat tvec;
    Napi::Value* pyobj_K = NULL;
    UMat K;
    Napi::Value* pyobj_D = NULL;
    UMat D;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=0;
    Napi::Value* pyobj_jacobian = NULL;
    UMat jacobian;

    const char* keywords[] = { "objectPoints", "rvec", "tvec", "K", "D", "imagePoints", "alpha", "jacobian", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OOO:projectPoints", (char**)keywords, &pyobj_objectPoints, &pyobj_rvec, &pyobj_tvec, &pyobj_K, &pyobj_D, &pyobj_imagePoints, &pyobj_alpha, &pyobj_jacobian) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints, imagePoints, ArgInfo("imagePoints", 1)) &&
        jsopencv_to_safe(info, pyobj_rvec, rvec, ArgInfo("rvec", 0)) &&
        jsopencv_to_safe(info, pyobj_tvec, tvec, ArgInfo("tvec", 0)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_D, D, ArgInfo("D", 0)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_jacobian, jacobian, ArgInfo("jacobian", 1)))
    {
        ERRWRAP2(cv::fisheye::projectPoints(objectPoints, imagePoints, rvec, tvec, K, D, alpha, jacobian));
        return Py_BuildValue("(NN)", jsopencv_from(imagePoints), jsopencv_from(jacobian));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("projectPoints");

    return NULL;
}

static Napi::Value pyopencv_cv_fisheye_stereoCalibrate(const Napi::CallbackInfo &info)
{
    using namespace cv::fisheye;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_objectPoints = NULL;
    vector_Mat objectPoints;
    Napi::Value* pyobj_imagePoints1 = NULL;
    vector_Mat imagePoints1;
    Napi::Value* pyobj_imagePoints2 = NULL;
    vector_Mat imagePoints2;
    Napi::Value* pyobj_K1 = NULL;
    Mat K1;
    Napi::Value* pyobj_D1 = NULL;
    Mat D1;
    Napi::Value* pyobj_K2 = NULL;
    Mat K2;
    Napi::Value* pyobj_D2 = NULL;
    Mat D2;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_R = NULL;
    Mat R;
    Napi::Value* pyobj_T = NULL;
    Mat T;
    Napi::Value* pyobj_rvecs = NULL;
    vector_Mat rvecs;
    Napi::Value* pyobj_tvecs = NULL;
    vector_Mat tvecs;
    Napi::Value* pyobj_flags = NULL;
    int flags=fisheye::CALIB_FIX_INTRINSIC;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, DBL_EPSILON);
    double retval;

    const char* keywords[] = { "objectPoints", "imagePoints1", "imagePoints2", "K1", "D1", "K2", "D2", "imageSize", "R", "T", "rvecs", "tvecs", "flags", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOOO|OOOOOO:stereoCalibrate", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints1, &pyobj_imagePoints2, &pyobj_K1, &pyobj_D1, &pyobj_K2, &pyobj_D2, &pyobj_imageSize, &pyobj_R, &pyobj_T, &pyobj_rvecs, &pyobj_tvecs, &pyobj_flags, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints1, imagePoints1, ArgInfo("imagePoints1", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints2, imagePoints2, ArgInfo("imagePoints2", 0)) &&
        jsopencv_to_safe(info, pyobj_K1, K1, ArgInfo("K1", 1)) &&
        jsopencv_to_safe(info, pyobj_D1, D1, ArgInfo("D1", 1)) &&
        jsopencv_to_safe(info, pyobj_K2, K2, ArgInfo("K2", 1)) &&
        jsopencv_to_safe(info, pyobj_D2, D2, ArgInfo("D2", 1)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 1)) &&
        jsopencv_to_safe(info, pyobj_T, T, ArgInfo("T", 1)) &&
        jsopencv_to_safe(info, pyobj_rvecs, rvecs, ArgInfo("rvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_tvecs, tvecs, ArgInfo("tvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(retval = cv::fisheye::stereoCalibrate(objectPoints, imagePoints1, imagePoints2, K1, D1, K2, D2, imageSize, R, T, rvecs, tvecs, flags, criteria));
        return Py_BuildValue("(NNNNNNNNN)", jsopencv_from(retval), jsopencv_from(K1), jsopencv_from(D1), jsopencv_from(K2), jsopencv_from(D2), jsopencv_from(R), jsopencv_from(T), jsopencv_from(rvecs), jsopencv_from(tvecs));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_objectPoints = NULL;
    vector_UMat objectPoints;
    Napi::Value* pyobj_imagePoints1 = NULL;
    vector_UMat imagePoints1;
    Napi::Value* pyobj_imagePoints2 = NULL;
    vector_UMat imagePoints2;
    Napi::Value* pyobj_K1 = NULL;
    UMat K1;
    Napi::Value* pyobj_D1 = NULL;
    UMat D1;
    Napi::Value* pyobj_K2 = NULL;
    UMat K2;
    Napi::Value* pyobj_D2 = NULL;
    UMat D2;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_R = NULL;
    UMat R;
    Napi::Value* pyobj_T = NULL;
    UMat T;
    Napi::Value* pyobj_rvecs = NULL;
    vector_UMat rvecs;
    Napi::Value* pyobj_tvecs = NULL;
    vector_UMat tvecs;
    Napi::Value* pyobj_flags = NULL;
    int flags=fisheye::CALIB_FIX_INTRINSIC;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, DBL_EPSILON);
    double retval;

    const char* keywords[] = { "objectPoints", "imagePoints1", "imagePoints2", "K1", "D1", "K2", "D2", "imageSize", "R", "T", "rvecs", "tvecs", "flags", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOOO|OOOOOO:stereoCalibrate", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints1, &pyobj_imagePoints2, &pyobj_K1, &pyobj_D1, &pyobj_K2, &pyobj_D2, &pyobj_imageSize, &pyobj_R, &pyobj_T, &pyobj_rvecs, &pyobj_tvecs, &pyobj_flags, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints1, imagePoints1, ArgInfo("imagePoints1", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints2, imagePoints2, ArgInfo("imagePoints2", 0)) &&
        jsopencv_to_safe(info, pyobj_K1, K1, ArgInfo("K1", 1)) &&
        jsopencv_to_safe(info, pyobj_D1, D1, ArgInfo("D1", 1)) &&
        jsopencv_to_safe(info, pyobj_K2, K2, ArgInfo("K2", 1)) &&
        jsopencv_to_safe(info, pyobj_D2, D2, ArgInfo("D2", 1)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 1)) &&
        jsopencv_to_safe(info, pyobj_T, T, ArgInfo("T", 1)) &&
        jsopencv_to_safe(info, pyobj_rvecs, rvecs, ArgInfo("rvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_tvecs, tvecs, ArgInfo("tvecs", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(retval = cv::fisheye::stereoCalibrate(objectPoints, imagePoints1, imagePoints2, K1, D1, K2, D2, imageSize, R, T, rvecs, tvecs, flags, criteria));
        return Py_BuildValue("(NNNNNNNNN)", jsopencv_from(retval), jsopencv_from(K1), jsopencv_from(D1), jsopencv_from(K2), jsopencv_from(D2), jsopencv_from(R), jsopencv_from(T), jsopencv_from(rvecs), jsopencv_from(tvecs));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_objectPoints = NULL;
    vector_Mat objectPoints;
    Napi::Value* pyobj_imagePoints1 = NULL;
    vector_Mat imagePoints1;
    Napi::Value* pyobj_imagePoints2 = NULL;
    vector_Mat imagePoints2;
    Napi::Value* pyobj_K1 = NULL;
    Mat K1;
    Napi::Value* pyobj_D1 = NULL;
    Mat D1;
    Napi::Value* pyobj_K2 = NULL;
    Mat K2;
    Napi::Value* pyobj_D2 = NULL;
    Mat D2;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_R = NULL;
    Mat R;
    Napi::Value* pyobj_T = NULL;
    Mat T;
    Napi::Value* pyobj_flags = NULL;
    int flags=fisheye::CALIB_FIX_INTRINSIC;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, DBL_EPSILON);
    double retval;

    const char* keywords[] = { "objectPoints", "imagePoints1", "imagePoints2", "K1", "D1", "K2", "D2", "imageSize", "R", "T", "flags", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOOO|OOOO:stereoCalibrate", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints1, &pyobj_imagePoints2, &pyobj_K1, &pyobj_D1, &pyobj_K2, &pyobj_D2, &pyobj_imageSize, &pyobj_R, &pyobj_T, &pyobj_flags, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints1, imagePoints1, ArgInfo("imagePoints1", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints2, imagePoints2, ArgInfo("imagePoints2", 0)) &&
        jsopencv_to_safe(info, pyobj_K1, K1, ArgInfo("K1", 1)) &&
        jsopencv_to_safe(info, pyobj_D1, D1, ArgInfo("D1", 1)) &&
        jsopencv_to_safe(info, pyobj_K2, K2, ArgInfo("K2", 1)) &&
        jsopencv_to_safe(info, pyobj_D2, D2, ArgInfo("D2", 1)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 1)) &&
        jsopencv_to_safe(info, pyobj_T, T, ArgInfo("T", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(retval = cv::fisheye::stereoCalibrate(objectPoints, imagePoints1, imagePoints2, K1, D1, K2, D2, imageSize, R, T, flags, criteria));
        return Py_BuildValue("(NNNNNNN)", jsopencv_from(retval), jsopencv_from(K1), jsopencv_from(D1), jsopencv_from(K2), jsopencv_from(D2), jsopencv_from(R), jsopencv_from(T));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_objectPoints = NULL;
    vector_UMat objectPoints;
    Napi::Value* pyobj_imagePoints1 = NULL;
    vector_UMat imagePoints1;
    Napi::Value* pyobj_imagePoints2 = NULL;
    vector_UMat imagePoints2;
    Napi::Value* pyobj_K1 = NULL;
    UMat K1;
    Napi::Value* pyobj_D1 = NULL;
    UMat D1;
    Napi::Value* pyobj_K2 = NULL;
    UMat K2;
    Napi::Value* pyobj_D2 = NULL;
    UMat D2;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_R = NULL;
    UMat R;
    Napi::Value* pyobj_T = NULL;
    UMat T;
    Napi::Value* pyobj_flags = NULL;
    int flags=fisheye::CALIB_FIX_INTRINSIC;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, DBL_EPSILON);
    double retval;

    const char* keywords[] = { "objectPoints", "imagePoints1", "imagePoints2", "K1", "D1", "K2", "D2", "imageSize", "R", "T", "flags", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOOO|OOOO:stereoCalibrate", (char**)keywords, &pyobj_objectPoints, &pyobj_imagePoints1, &pyobj_imagePoints2, &pyobj_K1, &pyobj_D1, &pyobj_K2, &pyobj_D2, &pyobj_imageSize, &pyobj_R, &pyobj_T, &pyobj_flags, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_objectPoints, objectPoints, ArgInfo("objectPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints1, imagePoints1, ArgInfo("imagePoints1", 0)) &&
        jsopencv_to_safe(info, pyobj_imagePoints2, imagePoints2, ArgInfo("imagePoints2", 0)) &&
        jsopencv_to_safe(info, pyobj_K1, K1, ArgInfo("K1", 1)) &&
        jsopencv_to_safe(info, pyobj_D1, D1, ArgInfo("D1", 1)) &&
        jsopencv_to_safe(info, pyobj_K2, K2, ArgInfo("K2", 1)) &&
        jsopencv_to_safe(info, pyobj_D2, D2, ArgInfo("D2", 1)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 1)) &&
        jsopencv_to_safe(info, pyobj_T, T, ArgInfo("T", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(retval = cv::fisheye::stereoCalibrate(objectPoints, imagePoints1, imagePoints2, K1, D1, K2, D2, imageSize, R, T, flags, criteria));
        return Py_BuildValue("(NNNNNNN)", jsopencv_from(retval), jsopencv_from(K1), jsopencv_from(D1), jsopencv_from(K2), jsopencv_from(D2), jsopencv_from(R), jsopencv_from(T));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("stereoCalibrate");

    return NULL;
}

static Napi::Value pyopencv_cv_fisheye_stereoRectify(const Napi::CallbackInfo &info)
{
    using namespace cv::fisheye;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_K1 = NULL;
    Mat K1;
    Napi::Value* pyobj_D1 = NULL;
    Mat D1;
    Napi::Value* pyobj_K2 = NULL;
    Mat K2;
    Napi::Value* pyobj_D2 = NULL;
    Mat D2;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_R = NULL;
    Mat R;
    Napi::Value* pyobj_tvec = NULL;
    Mat tvec;
    Napi::Value* pyobj_R1 = NULL;
    Mat R1;
    Napi::Value* pyobj_R2 = NULL;
    Mat R2;
    Napi::Value* pyobj_P1 = NULL;
    Mat P1;
    Napi::Value* pyobj_P2 = NULL;
    Mat P2;
    Napi::Value* pyobj_Q = NULL;
    Mat Q;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_newImageSize = NULL;
    Size newImageSize;
    Napi::Value* pyobj_balance = NULL;
    double balance=0.0;
    Napi::Value* pyobj_fov_scale = NULL;
    double fov_scale=1.0;

    const char* keywords[] = { "K1", "D1", "K2", "D2", "imageSize", "R", "tvec", "flags", "R1", "R2", "P1", "P2", "Q", "newImageSize", "balance", "fov_scale", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOOO|OOOOOOOO:stereoRectify", (char**)keywords, &pyobj_K1, &pyobj_D1, &pyobj_K2, &pyobj_D2, &pyobj_imageSize, &pyobj_R, &pyobj_tvec, &pyobj_flags, &pyobj_R1, &pyobj_R2, &pyobj_P1, &pyobj_P2, &pyobj_Q, &pyobj_newImageSize, &pyobj_balance, &pyobj_fov_scale) &&
        jsopencv_to_safe(info, pyobj_K1, K1, ArgInfo("K1", 0)) &&
        jsopencv_to_safe(info, pyobj_D1, D1, ArgInfo("D1", 0)) &&
        jsopencv_to_safe(info, pyobj_K2, K2, ArgInfo("K2", 0)) &&
        jsopencv_to_safe(info, pyobj_D2, D2, ArgInfo("D2", 0)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 0)) &&
        jsopencv_to_safe(info, pyobj_tvec, tvec, ArgInfo("tvec", 0)) &&
        jsopencv_to_safe(info, pyobj_R1, R1, ArgInfo("R1", 1)) &&
        jsopencv_to_safe(info, pyobj_R2, R2, ArgInfo("R2", 1)) &&
        jsopencv_to_safe(info, pyobj_P1, P1, ArgInfo("P1", 1)) &&
        jsopencv_to_safe(info, pyobj_P2, P2, ArgInfo("P2", 1)) &&
        jsopencv_to_safe(info, pyobj_Q, Q, ArgInfo("Q", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_newImageSize, newImageSize, ArgInfo("newImageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_balance, balance, ArgInfo("balance", 0)) &&
        jsopencv_to_safe(info, pyobj_fov_scale, fov_scale, ArgInfo("fov_scale", 0)))
    {
        ERRWRAP2(cv::fisheye::stereoRectify(K1, D1, K2, D2, imageSize, R, tvec, R1, R2, P1, P2, Q, flags, newImageSize, balance, fov_scale));
        return Py_BuildValue("(NNNNN)", jsopencv_from(R1), jsopencv_from(R2), jsopencv_from(P1), jsopencv_from(P2), jsopencv_from(Q));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_K1 = NULL;
    UMat K1;
    Napi::Value* pyobj_D1 = NULL;
    UMat D1;
    Napi::Value* pyobj_K2 = NULL;
    UMat K2;
    Napi::Value* pyobj_D2 = NULL;
    UMat D2;
    Napi::Value* pyobj_imageSize = NULL;
    Size imageSize;
    Napi::Value* pyobj_R = NULL;
    UMat R;
    Napi::Value* pyobj_tvec = NULL;
    UMat tvec;
    Napi::Value* pyobj_R1 = NULL;
    UMat R1;
    Napi::Value* pyobj_R2 = NULL;
    UMat R2;
    Napi::Value* pyobj_P1 = NULL;
    UMat P1;
    Napi::Value* pyobj_P2 = NULL;
    UMat P2;
    Napi::Value* pyobj_Q = NULL;
    UMat Q;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_newImageSize = NULL;
    Size newImageSize;
    Napi::Value* pyobj_balance = NULL;
    double balance=0.0;
    Napi::Value* pyobj_fov_scale = NULL;
    double fov_scale=1.0;

    const char* keywords[] = { "K1", "D1", "K2", "D2", "imageSize", "R", "tvec", "flags", "R1", "R2", "P1", "P2", "Q", "newImageSize", "balance", "fov_scale", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOOO|OOOOOOOO:stereoRectify", (char**)keywords, &pyobj_K1, &pyobj_D1, &pyobj_K2, &pyobj_D2, &pyobj_imageSize, &pyobj_R, &pyobj_tvec, &pyobj_flags, &pyobj_R1, &pyobj_R2, &pyobj_P1, &pyobj_P2, &pyobj_Q, &pyobj_newImageSize, &pyobj_balance, &pyobj_fov_scale) &&
        jsopencv_to_safe(info, pyobj_K1, K1, ArgInfo("K1", 0)) &&
        jsopencv_to_safe(info, pyobj_D1, D1, ArgInfo("D1", 0)) &&
        jsopencv_to_safe(info, pyobj_K2, K2, ArgInfo("K2", 0)) &&
        jsopencv_to_safe(info, pyobj_D2, D2, ArgInfo("D2", 0)) &&
        jsopencv_to_safe(info, pyobj_imageSize, imageSize, ArgInfo("imageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 0)) &&
        jsopencv_to_safe(info, pyobj_tvec, tvec, ArgInfo("tvec", 0)) &&
        jsopencv_to_safe(info, pyobj_R1, R1, ArgInfo("R1", 1)) &&
        jsopencv_to_safe(info, pyobj_R2, R2, ArgInfo("R2", 1)) &&
        jsopencv_to_safe(info, pyobj_P1, P1, ArgInfo("P1", 1)) &&
        jsopencv_to_safe(info, pyobj_P2, P2, ArgInfo("P2", 1)) &&
        jsopencv_to_safe(info, pyobj_Q, Q, ArgInfo("Q", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_newImageSize, newImageSize, ArgInfo("newImageSize", 0)) &&
        jsopencv_to_safe(info, pyobj_balance, balance, ArgInfo("balance", 0)) &&
        jsopencv_to_safe(info, pyobj_fov_scale, fov_scale, ArgInfo("fov_scale", 0)))
    {
        ERRWRAP2(cv::fisheye::stereoRectify(K1, D1, K2, D2, imageSize, R, tvec, R1, R2, P1, P2, Q, flags, newImageSize, balance, fov_scale));
        return Py_BuildValue("(NNNNN)", jsopencv_from(R1), jsopencv_from(R2), jsopencv_from(P1), jsopencv_from(P2), jsopencv_from(Q));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("stereoRectify");

    return NULL;
}

static Napi::Value pyopencv_cv_fisheye_undistortImage(const Napi::CallbackInfo &info)
{
    using namespace cv::fisheye;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_distorted = NULL;
    Mat distorted;
    Napi::Value* pyobj_undistorted = NULL;
    Mat undistorted;
    Napi::Value* pyobj_K = NULL;
    Mat K;
    Napi::Value* pyobj_D = NULL;
    Mat D;
    Napi::Value* pyobj_Knew = NULL;
    Mat Knew=cv::Mat();
    Napi::Value* pyobj_new_size = NULL;
    Size new_size;

    const char* keywords[] = { "distorted", "K", "D", "undistorted", "Knew", "new_size", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:undistortImage", (char**)keywords, &pyobj_distorted, &pyobj_K, &pyobj_D, &pyobj_undistorted, &pyobj_Knew, &pyobj_new_size) &&
        jsopencv_to_safe(info, pyobj_distorted, distorted, ArgInfo("distorted", 0)) &&
        jsopencv_to_safe(info, pyobj_undistorted, undistorted, ArgInfo("undistorted", 1)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_D, D, ArgInfo("D", 0)) &&
        jsopencv_to_safe(info, pyobj_Knew, Knew, ArgInfo("Knew", 0)) &&
        jsopencv_to_safe(info, pyobj_new_size, new_size, ArgInfo("new_size", 0)))
    {
        ERRWRAP2(cv::fisheye::undistortImage(distorted, undistorted, K, D, Knew, new_size));
        return jsopencv_from(undistorted);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_distorted = NULL;
    UMat distorted;
    Napi::Value* pyobj_undistorted = NULL;
    UMat undistorted;
    Napi::Value* pyobj_K = NULL;
    UMat K;
    Napi::Value* pyobj_D = NULL;
    UMat D;
    Napi::Value* pyobj_Knew = NULL;
    UMat Knew=cv::UMat();
    Napi::Value* pyobj_new_size = NULL;
    Size new_size;

    const char* keywords[] = { "distorted", "K", "D", "undistorted", "Knew", "new_size", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:undistortImage", (char**)keywords, &pyobj_distorted, &pyobj_K, &pyobj_D, &pyobj_undistorted, &pyobj_Knew, &pyobj_new_size) &&
        jsopencv_to_safe(info, pyobj_distorted, distorted, ArgInfo("distorted", 0)) &&
        jsopencv_to_safe(info, pyobj_undistorted, undistorted, ArgInfo("undistorted", 1)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_D, D, ArgInfo("D", 0)) &&
        jsopencv_to_safe(info, pyobj_Knew, Knew, ArgInfo("Knew", 0)) &&
        jsopencv_to_safe(info, pyobj_new_size, new_size, ArgInfo("new_size", 0)))
    {
        ERRWRAP2(cv::fisheye::undistortImage(distorted, undistorted, K, D, Knew, new_size));
        return jsopencv_from(undistorted);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("undistortImage");

    return NULL;
}

static Napi::Value pyopencv_cv_fisheye_undistortPoints(const Napi::CallbackInfo &info)
{
    using namespace cv::fisheye;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_distorted = NULL;
    Mat distorted;
    Napi::Value* pyobj_undistorted = NULL;
    Mat undistorted;
    Napi::Value* pyobj_K = NULL;
    Mat K;
    Napi::Value* pyobj_D = NULL;
    Mat D;
    Napi::Value* pyobj_R = NULL;
    Mat R;
    Napi::Value* pyobj_P = NULL;
    Mat P;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER + TermCriteria::EPS, 10, 1e-8);

    const char* keywords[] = { "distorted", "K", "D", "undistorted", "R", "P", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:undistortPoints", (char**)keywords, &pyobj_distorted, &pyobj_K, &pyobj_D, &pyobj_undistorted, &pyobj_R, &pyobj_P, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_distorted, distorted, ArgInfo("distorted", 0)) &&
        jsopencv_to_safe(info, pyobj_undistorted, undistorted, ArgInfo("undistorted", 1)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_D, D, ArgInfo("D", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 0)) &&
        jsopencv_to_safe(info, pyobj_P, P, ArgInfo("P", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(cv::fisheye::undistortPoints(distorted, undistorted, K, D, R, P, criteria));
        return jsopencv_from(undistorted);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_distorted = NULL;
    UMat distorted;
    Napi::Value* pyobj_undistorted = NULL;
    UMat undistorted;
    Napi::Value* pyobj_K = NULL;
    UMat K;
    Napi::Value* pyobj_D = NULL;
    UMat D;
    Napi::Value* pyobj_R = NULL;
    UMat R;
    Napi::Value* pyobj_P = NULL;
    UMat P;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER + TermCriteria::EPS, 10, 1e-8);

    const char* keywords[] = { "distorted", "K", "D", "undistorted", "R", "P", "criteria", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:undistortPoints", (char**)keywords, &pyobj_distorted, &pyobj_K, &pyobj_D, &pyobj_undistorted, &pyobj_R, &pyobj_P, &pyobj_criteria) &&
        jsopencv_to_safe(info, pyobj_distorted, distorted, ArgInfo("distorted", 0)) &&
        jsopencv_to_safe(info, pyobj_undistorted, undistorted, ArgInfo("undistorted", 1)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_D, D, ArgInfo("D", 0)) &&
        jsopencv_to_safe(info, pyobj_R, R, ArgInfo("R", 0)) &&
        jsopencv_to_safe(info, pyobj_P, P, ArgInfo("P", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)))
    {
        ERRWRAP2(cv::fisheye::undistortPoints(distorted, undistorted, K, D, R, P, criteria));
        return jsopencv_from(undistorted);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("undistortPoints");

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_BGR2Gray(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GMat retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:BGR2Gray", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::BGR2Gray(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_BGR2I420(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GMat retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:BGR2I420", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::BGR2I420(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_BGR2LUV(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GMat retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:BGR2LUV", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::BGR2LUV(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_BGR2RGB(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GMat retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:BGR2RGB", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::BGR2RGB(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_BGR2YUV(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GMat retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:BGR2YUV", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::BGR2YUV(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_BayerGR2RGB(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src_gr = NULL;
    cv::GMat src_gr;
    GMat retval;

    const char* keywords[] = { "src_gr", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:BayerGR2RGB", (char**)keywords, &pyobj_src_gr) &&
        jsopencv_to_safe(info, pyobj_src_gr, src_gr, ArgInfo("src_gr", 0)))
    {
        ERRWRAP2(retval = cv::gapi::BayerGR2RGB(src_gr));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_Canny(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_image = NULL;
    cv::GMat image;
    Napi::Value* pyobj_threshold1 = NULL;
    double threshold1=0;
    Napi::Value* pyobj_threshold2 = NULL;
    double threshold2=0;
    Napi::Value* pyobj_apertureSize = NULL;
    int apertureSize=3;
    Napi::Value* pyobj_L2gradient = NULL;
    bool L2gradient=false;
    GMat retval;

    const char* keywords[] = { "image", "threshold1", "threshold2", "apertureSize", "L2gradient", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:Canny", (char**)keywords, &pyobj_image, &pyobj_threshold1, &pyobj_threshold2, &pyobj_apertureSize, &pyobj_L2gradient) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold1, threshold1, ArgInfo("threshold1", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold2, threshold2, ArgInfo("threshold2", 0)) &&
        jsopencv_to_safe(info, pyobj_apertureSize, apertureSize, ArgInfo("apertureSize", 0)) &&
        jsopencv_to_safe(info, pyobj_L2gradient, L2gradient, ArgInfo("L2gradient", 0)))
    {
        ERRWRAP2(retval = cv::gapi::Canny(image, threshold1, threshold2, apertureSize, L2gradient));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_I4202BGR(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GMat retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:I4202BGR", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::I4202BGR(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_I4202RGB(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GMat retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:I4202RGB", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::I4202RGB(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_LUT(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_lut = NULL;
    Mat lut;
    GMat retval;

    const char* keywords[] = { "src", "lut", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:LUT", (char**)keywords, &pyobj_src, &pyobj_lut) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_lut, lut, ArgInfo("lut", 0)))
    {
        ERRWRAP2(retval = cv::gapi::LUT(src, lut));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_LUV2BGR(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GMat retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:LUV2BGR", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::LUV2BGR(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_Laplacian(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=0;
    Napi::Value* pyobj_ksize = NULL;
    int ksize=1;
    Napi::Value* pyobj_scale = NULL;
    double scale=1;
    Napi::Value* pyobj_delta = NULL;
    double delta=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;
    GMat retval;

    const char* keywords[] = { "src", "ddepth", "ksize", "scale", "delta", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOO:Laplacian", (char**)keywords, &pyobj_src, &pyobj_ddepth, &pyobj_ksize, &pyobj_scale, &pyobj_delta, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)) &&
        jsopencv_to_safe(info, pyobj_delta, delta, ArgInfo("delta", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(retval = cv::gapi::Laplacian(src, ddepth, ksize, scale, delta, borderType));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_NV12toBGR(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src_y = NULL;
    cv::GMat src_y;
    Napi::Value* pyobj_src_uv = NULL;
    cv::GMat src_uv;
    GMat retval;

    const char* keywords[] = { "src_y", "src_uv", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:NV12toBGR", (char**)keywords, &pyobj_src_y, &pyobj_src_uv) &&
        jsopencv_to_safe(info, pyobj_src_y, src_y, ArgInfo("src_y", 0)) &&
        jsopencv_to_safe(info, pyobj_src_uv, src_uv, ArgInfo("src_uv", 0)))
    {
        ERRWRAP2(retval = cv::gapi::NV12toBGR(src_y, src_uv));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_NV12toGray(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src_y = NULL;
    cv::GMat src_y;
    Napi::Value* pyobj_src_uv = NULL;
    cv::GMat src_uv;
    GMat retval;

    const char* keywords[] = { "src_y", "src_uv", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:NV12toGray", (char**)keywords, &pyobj_src_y, &pyobj_src_uv) &&
        jsopencv_to_safe(info, pyobj_src_y, src_y, ArgInfo("src_y", 0)) &&
        jsopencv_to_safe(info, pyobj_src_uv, src_uv, ArgInfo("src_uv", 0)))
    {
        ERRWRAP2(retval = cv::gapi::NV12toGray(src_y, src_uv));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_NV12toRGB(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src_y = NULL;
    cv::GMat src_y;
    Napi::Value* pyobj_src_uv = NULL;
    cv::GMat src_uv;
    GMat retval;

    const char* keywords[] = { "src_y", "src_uv", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:NV12toRGB", (char**)keywords, &pyobj_src_y, &pyobj_src_uv) &&
        jsopencv_to_safe(info, pyobj_src_y, src_y, ArgInfo("src_y", 0)) &&
        jsopencv_to_safe(info, pyobj_src_uv, src_uv, ArgInfo("src_uv", 0)))
    {
        ERRWRAP2(retval = cv::gapi::NV12toRGB(src_y, src_uv));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_RGB2Gray(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GMat retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:RGB2Gray", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::RGB2Gray(src));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_rY = NULL;
    float rY=0.f;
    Napi::Value* pyobj_gY = NULL;
    float gY=0.f;
    Napi::Value* pyobj_bY = NULL;
    float bY=0.f;
    GMat retval;

    const char* keywords[] = { "src", "rY", "gY", "bY", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO:RGB2Gray", (char**)keywords, &pyobj_src, &pyobj_rY, &pyobj_gY, &pyobj_bY) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_rY, rY, ArgInfo("rY", 0)) &&
        jsopencv_to_safe(info, pyobj_gY, gY, ArgInfo("gY", 0)) &&
        jsopencv_to_safe(info, pyobj_bY, bY, ArgInfo("bY", 0)))
    {
        ERRWRAP2(retval = cv::gapi::RGB2Gray(src, rY, gY, bY));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("RGB2Gray");

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_RGB2HSV(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GMat retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:RGB2HSV", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::RGB2HSV(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_RGB2I420(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GMat retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:RGB2I420", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::RGB2I420(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_RGB2Lab(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GMat retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:RGB2Lab", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::RGB2Lab(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_RGB2YUV(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GMat retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:RGB2YUV", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::RGB2YUV(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_RGB2YUV422(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GMat retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:RGB2YUV422", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::RGB2YUV422(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_Sobel(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=0;
    Napi::Value* pyobj_dx = NULL;
    int dx=0;
    Napi::Value* pyobj_dy = NULL;
    int dy=0;
    Napi::Value* pyobj_ksize = NULL;
    int ksize=3;
    Napi::Value* pyobj_scale = NULL;
    double scale=1;
    Napi::Value* pyobj_delta = NULL;
    double delta=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue=Scalar(0);
    GMat retval;

    const char* keywords[] = { "src", "ddepth", "dx", "dy", "ksize", "scale", "delta", "borderType", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOOO:Sobel", (char**)keywords, &pyobj_src, &pyobj_ddepth, &pyobj_dx, &pyobj_dy, &pyobj_ksize, &pyobj_scale, &pyobj_delta, &pyobj_borderType, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)) &&
        jsopencv_to_safe(info, pyobj_dx, dx, ArgInfo("dx", 0)) &&
        jsopencv_to_safe(info, pyobj_dy, dy, ArgInfo("dy", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)) &&
        jsopencv_to_safe(info, pyobj_delta, delta, ArgInfo("delta", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(retval = cv::gapi::Sobel(src, ddepth, dx, dy, ksize, scale, delta, borderType, borderValue));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_SobelXY(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=0;
    Napi::Value* pyobj_order = NULL;
    int order=0;
    Napi::Value* pyobj_ksize = NULL;
    int ksize=3;
    Napi::Value* pyobj_scale = NULL;
    double scale=1;
    Napi::Value* pyobj_delta = NULL;
    double delta=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue=Scalar(0);
    std::tuple<GMat, GMat> retval;

    const char* keywords[] = { "src", "ddepth", "order", "ksize", "scale", "delta", "borderType", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOOO:SobelXY", (char**)keywords, &pyobj_src, &pyobj_ddepth, &pyobj_order, &pyobj_ksize, &pyobj_scale, &pyobj_delta, &pyobj_borderType, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)) &&
        jsopencv_to_safe(info, pyobj_order, order, ArgInfo("order", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)) &&
        jsopencv_to_safe(info, pyobj_delta, delta, ArgInfo("delta", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(retval = cv::gapi::SobelXY(src, ddepth, order, ksize, scale, delta, borderType, borderValue));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_YUV2BGR(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GMat retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:YUV2BGR", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::YUV2BGR(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_YUV2RGB(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GMat retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:YUV2RGB", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::YUV2RGB(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_absDiff(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GMat src2;
    GMat retval;

    const char* keywords[] = { "src1", "src2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:absDiff", (char**)keywords, &pyobj_src1, &pyobj_src2) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)))
    {
        ERRWRAP2(retval = cv::gapi::absDiff(src1, src2));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_absDiffC(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_c = NULL;
    cv::GScalar c;
    GMat retval;

    const char* keywords[] = { "src", "c", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:absDiffC", (char**)keywords, &pyobj_src, &pyobj_c) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_c, c, ArgInfo("c", 0)))
    {
        ERRWRAP2(retval = cv::gapi::absDiffC(src, c));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_add(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GMat src2;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=-1;
    GMat retval;

    const char* keywords[] = { "src1", "src2", "ddepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:add", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_ddepth) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)))
    {
        ERRWRAP2(retval = cv::gapi::add(src1, src2, ddepth));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_addC(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_c = NULL;
    cv::GScalar c;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=-1;
    GMat retval;

    const char* keywords[] = { "src1", "c", "ddepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:addC", (char**)keywords, &pyobj_src1, &pyobj_c, &pyobj_ddepth) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_c, c, ArgInfo("c", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)))
    {
        ERRWRAP2(retval = cv::gapi::addC(src1, c, ddepth));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_c = NULL;
    cv::GScalar c;
    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=-1;
    GMat retval;

    const char* keywords[] = { "c", "src1", "ddepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:addC", (char**)keywords, &pyobj_c, &pyobj_src1, &pyobj_ddepth) &&
        jsopencv_to_safe(info, pyobj_c, c, ArgInfo("c", 0)) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)))
    {
        ERRWRAP2(retval = cv::gapi::addC(c, src1, ddepth));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("addC");

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_addWeighted(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=0;
    Napi::Value* pyobj_src2 = NULL;
    cv::GMat src2;
    Napi::Value* pyobj_beta = NULL;
    double beta=0;
    Napi::Value* pyobj_gamma = NULL;
    double gamma=0;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=-1;
    GMat retval;

    const char* keywords[] = { "src1", "alpha", "src2", "beta", "gamma", "ddepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|O:addWeighted", (char**)keywords, &pyobj_src1, &pyobj_alpha, &pyobj_src2, &pyobj_beta, &pyobj_gamma, &pyobj_ddepth) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_beta, beta, ArgInfo("beta", 0)) &&
        jsopencv_to_safe(info, pyobj_gamma, gamma, ArgInfo("gamma", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)))
    {
        ERRWRAP2(retval = cv::gapi::addWeighted(src1, alpha, src2, beta, gamma, ddepth));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_bilateralFilter(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_d = NULL;
    int d=0;
    Napi::Value* pyobj_sigmaColor = NULL;
    double sigmaColor=0;
    Napi::Value* pyobj_sigmaSpace = NULL;
    double sigmaSpace=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;
    GMat retval;

    const char* keywords[] = { "src", "d", "sigmaColor", "sigmaSpace", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:bilateralFilter", (char**)keywords, &pyobj_src, &pyobj_d, &pyobj_sigmaColor, &pyobj_sigmaSpace, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_d, d, ArgInfo("d", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaColor, sigmaColor, ArgInfo("sigmaColor", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaSpace, sigmaSpace, ArgInfo("sigmaSpace", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(retval = cv::gapi::bilateralFilter(src, d, sigmaColor, sigmaSpace, borderType));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_bitwise_and(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GMat src2;
    GMat retval;

    const char* keywords[] = { "src1", "src2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:bitwise_and", (char**)keywords, &pyobj_src1, &pyobj_src2) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)))
    {
        ERRWRAP2(retval = cv::gapi::bitwise_and(src1, src2));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GScalar src2;
    GMat retval;

    const char* keywords[] = { "src1", "src2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:bitwise_and", (char**)keywords, &pyobj_src1, &pyobj_src2) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)))
    {
        ERRWRAP2(retval = cv::gapi::bitwise_and(src1, src2));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("bitwise_and");

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_bitwise_not(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GMat retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:bitwise_not", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::bitwise_not(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_bitwise_or(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GMat src2;
    GMat retval;

    const char* keywords[] = { "src1", "src2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:bitwise_or", (char**)keywords, &pyobj_src1, &pyobj_src2) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)))
    {
        ERRWRAP2(retval = cv::gapi::bitwise_or(src1, src2));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GScalar src2;
    GMat retval;

    const char* keywords[] = { "src1", "src2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:bitwise_or", (char**)keywords, &pyobj_src1, &pyobj_src2) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)))
    {
        ERRWRAP2(retval = cv::gapi::bitwise_or(src1, src2));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("bitwise_or");

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_bitwise_xor(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GMat src2;
    GMat retval;

    const char* keywords[] = { "src1", "src2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:bitwise_xor", (char**)keywords, &pyobj_src1, &pyobj_src2) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)))
    {
        ERRWRAP2(retval = cv::gapi::bitwise_xor(src1, src2));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GScalar src2;
    GMat retval;

    const char* keywords[] = { "src1", "src2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:bitwise_xor", (char**)keywords, &pyobj_src1, &pyobj_src2) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)))
    {
        ERRWRAP2(retval = cv::gapi::bitwise_xor(src1, src2));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("bitwise_xor");

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_blur(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_ksize = NULL;
    Size ksize;
    Napi::Value* pyobj_anchor = NULL;
    Point anchor=Point(-1,-1);
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue=Scalar(0);
    GMat retval;

    const char* keywords[] = { "src", "ksize", "anchor", "borderType", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:blur", (char**)keywords, &pyobj_src, &pyobj_ksize, &pyobj_anchor, &pyobj_borderType, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_anchor, anchor, ArgInfo("anchor", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(retval = cv::gapi::blur(src, ksize, anchor, borderType, borderValue));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_boundingRect(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    pyPrepareArgumentConversionErrorsStorage(3);

    {
    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GOpaque<Rect> retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:boundingRect", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::boundingRect(src));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    GArray_Point2i src;
    GOpaque<Rect> retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:boundingRect", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::boundingRect(src));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    GArray_Point2f src;
    GOpaque<Rect> retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:boundingRect", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::boundingRect(src));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("boundingRect");

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_boxFilter(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_dtype = NULL;
    int dtype=0;
    Napi::Value* pyobj_ksize = NULL;
    Size ksize;
    Napi::Value* pyobj_anchor = NULL;
    Point anchor=Point(-1,-1);
    Napi::Value* pyobj_normalize = NULL;
    bool normalize=true;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue=Scalar(0);
    GMat retval;

    const char* keywords[] = { "src", "dtype", "ksize", "anchor", "normalize", "borderType", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:boxFilter", (char**)keywords, &pyobj_src, &pyobj_dtype, &pyobj_ksize, &pyobj_anchor, &pyobj_normalize, &pyobj_borderType, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dtype, dtype, ArgInfo("dtype", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_anchor, anchor, ArgInfo("anchor", 0)) &&
        jsopencv_to_safe(info, pyobj_normalize, normalize, ArgInfo("normalize", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(retval = cv::gapi::boxFilter(src, dtype, ksize, anchor, normalize, borderType, borderValue));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_cartToPolar(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_x = NULL;
    cv::GMat x;
    Napi::Value* pyobj_y = NULL;
    cv::GMat y;
    Napi::Value* pyobj_angleInDegrees = NULL;
    bool angleInDegrees=false;
    std::tuple<GMat, GMat> retval;

    const char* keywords[] = { "x", "y", "angleInDegrees", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:cartToPolar", (char**)keywords, &pyobj_x, &pyobj_y, &pyobj_angleInDegrees) &&
        jsopencv_to_safe(info, pyobj_x, x, ArgInfo("x", 0)) &&
        jsopencv_to_safe(info, pyobj_y, y, ArgInfo("y", 0)) &&
        jsopencv_to_safe(info, pyobj_angleInDegrees, angleInDegrees, ArgInfo("angleInDegrees", 0)))
    {
        ERRWRAP2(retval = cv::gapi::cartToPolar(x, y, angleInDegrees));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_cmpEQ(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GMat src2;
    GMat retval;

    const char* keywords[] = { "src1", "src2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:cmpEQ", (char**)keywords, &pyobj_src1, &pyobj_src2) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)))
    {
        ERRWRAP2(retval = cv::gapi::cmpEQ(src1, src2));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GScalar src2;
    GMat retval;

    const char* keywords[] = { "src1", "src2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:cmpEQ", (char**)keywords, &pyobj_src1, &pyobj_src2) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)))
    {
        ERRWRAP2(retval = cv::gapi::cmpEQ(src1, src2));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("cmpEQ");

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_cmpGE(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GMat src2;
    GMat retval;

    const char* keywords[] = { "src1", "src2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:cmpGE", (char**)keywords, &pyobj_src1, &pyobj_src2) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)))
    {
        ERRWRAP2(retval = cv::gapi::cmpGE(src1, src2));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GScalar src2;
    GMat retval;

    const char* keywords[] = { "src1", "src2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:cmpGE", (char**)keywords, &pyobj_src1, &pyobj_src2) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)))
    {
        ERRWRAP2(retval = cv::gapi::cmpGE(src1, src2));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("cmpGE");

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_cmpGT(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GMat src2;
    GMat retval;

    const char* keywords[] = { "src1", "src2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:cmpGT", (char**)keywords, &pyobj_src1, &pyobj_src2) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)))
    {
        ERRWRAP2(retval = cv::gapi::cmpGT(src1, src2));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GScalar src2;
    GMat retval;

    const char* keywords[] = { "src1", "src2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:cmpGT", (char**)keywords, &pyobj_src1, &pyobj_src2) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)))
    {
        ERRWRAP2(retval = cv::gapi::cmpGT(src1, src2));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("cmpGT");

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_cmpLE(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GMat src2;
    GMat retval;

    const char* keywords[] = { "src1", "src2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:cmpLE", (char**)keywords, &pyobj_src1, &pyobj_src2) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)))
    {
        ERRWRAP2(retval = cv::gapi::cmpLE(src1, src2));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GScalar src2;
    GMat retval;

    const char* keywords[] = { "src1", "src2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:cmpLE", (char**)keywords, &pyobj_src1, &pyobj_src2) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)))
    {
        ERRWRAP2(retval = cv::gapi::cmpLE(src1, src2));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("cmpLE");

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_cmpLT(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GMat src2;
    GMat retval;

    const char* keywords[] = { "src1", "src2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:cmpLT", (char**)keywords, &pyobj_src1, &pyobj_src2) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)))
    {
        ERRWRAP2(retval = cv::gapi::cmpLT(src1, src2));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GScalar src2;
    GMat retval;

    const char* keywords[] = { "src1", "src2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:cmpLT", (char**)keywords, &pyobj_src1, &pyobj_src2) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)))
    {
        ERRWRAP2(retval = cv::gapi::cmpLT(src1, src2));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("cmpLT");

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_cmpNE(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GMat src2;
    GMat retval;

    const char* keywords[] = { "src1", "src2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:cmpNE", (char**)keywords, &pyobj_src1, &pyobj_src2) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)))
    {
        ERRWRAP2(retval = cv::gapi::cmpNE(src1, src2));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GScalar src2;
    GMat retval;

    const char* keywords[] = { "src1", "src2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:cmpNE", (char**)keywords, &pyobj_src1, &pyobj_src2) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)))
    {
        ERRWRAP2(retval = cv::gapi::cmpNE(src1, src2));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("cmpNE");

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_concatHor(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GMat src2;
    GMat retval;

    const char* keywords[] = { "src1", "src2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:concatHor", (char**)keywords, &pyobj_src1, &pyobj_src2) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)))
    {
        ERRWRAP2(retval = cv::gapi::concatHor(src1, src2));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_v = NULL;
    vector_GMat v;
    GMat retval;

    const char* keywords[] = { "v", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:concatHor", (char**)keywords, &pyobj_v) &&
        jsopencv_to_safe(info, pyobj_v, v, ArgInfo("v", 0)))
    {
        ERRWRAP2(retval = cv::gapi::concatHor(v));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("concatHor");

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_concatVert(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GMat src2;
    GMat retval;

    const char* keywords[] = { "src1", "src2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:concatVert", (char**)keywords, &pyobj_src1, &pyobj_src2) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)))
    {
        ERRWRAP2(retval = cv::gapi::concatVert(src1, src2));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_v = NULL;
    vector_GMat v;
    GMat retval;

    const char* keywords[] = { "v", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:concatVert", (char**)keywords, &pyobj_v) &&
        jsopencv_to_safe(info, pyobj_v, v, ArgInfo("v", 0)))
    {
        ERRWRAP2(retval = cv::gapi::concatVert(v));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("concatVert");

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_convertTo(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_rdepth = NULL;
    int rdepth=0;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=1;
    Napi::Value* pyobj_beta = NULL;
    double beta=0;
    GMat retval;

    const char* keywords[] = { "src", "rdepth", "alpha", "beta", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:convertTo", (char**)keywords, &pyobj_src, &pyobj_rdepth, &pyobj_alpha, &pyobj_beta) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_rdepth, rdepth, ArgInfo("rdepth", 0)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_beta, beta, ArgInfo("beta", 0)))
    {
        ERRWRAP2(retval = cv::gapi::convertTo(src, rdepth, alpha, beta));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_copy(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_in = NULL;
    cv::GMat in;
    GMat retval;

    const char* keywords[] = { "in_", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:copy", (char**)keywords, &pyobj_in) &&
        jsopencv_to_safe(info, pyobj_in, in, ArgInfo("in", 0)))
    {
        ERRWRAP2(retval = cv::gapi::copy(in));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_countNonZero(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GOpaque<int> retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:countNonZero", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::countNonZero(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_crop(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_rect = NULL;
    Rect rect;
    GMat retval;

    const char* keywords[] = { "src", "rect", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:crop", (char**)keywords, &pyobj_src, &pyobj_rect) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_rect, rect, ArgInfo("rect", 0)))
    {
        ERRWRAP2(retval = cv::gapi::crop(src, rect));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_dilate(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_kernel = NULL;
    Mat kernel;
    Napi::Value* pyobj_anchor = NULL;
    Point anchor=Point(-1,-1);
    Napi::Value* pyobj_iterations = NULL;
    int iterations=1;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_CONSTANT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue=morphologyDefaultBorderValue();
    GMat retval;

    const char* keywords[] = { "src", "kernel", "anchor", "iterations", "borderType", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOO:dilate", (char**)keywords, &pyobj_src, &pyobj_kernel, &pyobj_anchor, &pyobj_iterations, &pyobj_borderType, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_kernel, kernel, ArgInfo("kernel", 0)) &&
        jsopencv_to_safe(info, pyobj_anchor, anchor, ArgInfo("anchor", 0)) &&
        jsopencv_to_safe(info, pyobj_iterations, iterations, ArgInfo("iterations", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(retval = cv::gapi::dilate(src, kernel, anchor, iterations, borderType, borderValue));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_dilate3x3(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_iterations = NULL;
    int iterations=1;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_CONSTANT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue=morphologyDefaultBorderValue();
    GMat retval;

    const char* keywords[] = { "src", "iterations", "borderType", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:dilate3x3", (char**)keywords, &pyobj_src, &pyobj_iterations, &pyobj_borderType, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_iterations, iterations, ArgInfo("iterations", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(retval = cv::gapi::dilate3x3(src, iterations, borderType, borderValue));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_div(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GMat src2;
    Napi::Value* pyobj_scale = NULL;
    double scale=0;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=-1;
    GMat retval;

    const char* keywords[] = { "src1", "src2", "scale", "ddepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:div", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_scale, &pyobj_ddepth) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)))
    {
        ERRWRAP2(retval = cv::gapi::div(src1, src2, scale, ddepth));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_divC(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_divisor = NULL;
    cv::GScalar divisor;
    Napi::Value* pyobj_scale = NULL;
    double scale=0;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=-1;
    GMat retval;

    const char* keywords[] = { "src", "divisor", "scale", "ddepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:divC", (char**)keywords, &pyobj_src, &pyobj_divisor, &pyobj_scale, &pyobj_ddepth) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_divisor, divisor, ArgInfo("divisor", 0)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)))
    {
        ERRWRAP2(retval = cv::gapi::divC(src, divisor, scale, ddepth));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_divRC(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_divident = NULL;
    cv::GScalar divident;
    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_scale = NULL;
    double scale=0;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=-1;
    GMat retval;

    const char* keywords[] = { "divident", "src", "scale", "ddepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:divRC", (char**)keywords, &pyobj_divident, &pyobj_src, &pyobj_scale, &pyobj_ddepth) &&
        jsopencv_to_safe(info, pyobj_divident, divident, ArgInfo("divident", 0)) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)))
    {
        ERRWRAP2(retval = cv::gapi::divRC(divident, src, scale, ddepth));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_equalizeHist(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GMat retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:equalizeHist", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::equalizeHist(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_erode(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_kernel = NULL;
    Mat kernel;
    Napi::Value* pyobj_anchor = NULL;
    Point anchor=Point(-1,-1);
    Napi::Value* pyobj_iterations = NULL;
    int iterations=1;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_CONSTANT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue=morphologyDefaultBorderValue();
    GMat retval;

    const char* keywords[] = { "src", "kernel", "anchor", "iterations", "borderType", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOO:erode", (char**)keywords, &pyobj_src, &pyobj_kernel, &pyobj_anchor, &pyobj_iterations, &pyobj_borderType, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_kernel, kernel, ArgInfo("kernel", 0)) &&
        jsopencv_to_safe(info, pyobj_anchor, anchor, ArgInfo("anchor", 0)) &&
        jsopencv_to_safe(info, pyobj_iterations, iterations, ArgInfo("iterations", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(retval = cv::gapi::erode(src, kernel, anchor, iterations, borderType, borderValue));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_erode3x3(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_iterations = NULL;
    int iterations=1;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_CONSTANT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue=morphologyDefaultBorderValue();
    GMat retval;

    const char* keywords[] = { "src", "iterations", "borderType", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:erode3x3", (char**)keywords, &pyobj_src, &pyobj_iterations, &pyobj_borderType, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_iterations, iterations, ArgInfo("iterations", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(retval = cv::gapi::erode3x3(src, iterations, borderType, borderValue));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_filter2D(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=0;
    Napi::Value* pyobj_kernel = NULL;
    Mat kernel;
    Napi::Value* pyobj_anchor = NULL;
    Point anchor=Point(-1,-1);
    Napi::Value* pyobj_delta = NULL;
    Scalar delta=Scalar(0);
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue=Scalar(0);
    GMat retval;

    const char* keywords[] = { "src", "ddepth", "kernel", "anchor", "delta", "borderType", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:filter2D", (char**)keywords, &pyobj_src, &pyobj_ddepth, &pyobj_kernel, &pyobj_anchor, &pyobj_delta, &pyobj_borderType, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)) &&
        jsopencv_to_safe(info, pyobj_kernel, kernel, ArgInfo("kernel", 0)) &&
        jsopencv_to_safe(info, pyobj_anchor, anchor, ArgInfo("anchor", 0)) &&
        jsopencv_to_safe(info, pyobj_delta, delta, ArgInfo("delta", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(retval = cv::gapi::filter2D(src, ddepth, kernel, anchor, delta, borderType, borderValue));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_flip(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_flipCode = NULL;
    int flipCode=0;
    GMat retval;

    const char* keywords[] = { "src", "flipCode", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:flip", (char**)keywords, &pyobj_src, &pyobj_flipCode) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_flipCode, flipCode, ArgInfo("flipCode", 0)))
    {
        ERRWRAP2(retval = cv::gapi::flip(src, flipCode));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_gaussianBlur(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_ksize = NULL;
    Size ksize;
    Napi::Value* pyobj_sigmaX = NULL;
    double sigmaX=0;
    Napi::Value* pyobj_sigmaY = NULL;
    double sigmaY=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue=Scalar(0);
    GMat retval;

    const char* keywords[] = { "src", "ksize", "sigmaX", "sigmaY", "borderType", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:gaussianBlur", (char**)keywords, &pyobj_src, &pyobj_ksize, &pyobj_sigmaX, &pyobj_sigmaY, &pyobj_borderType, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaX, sigmaX, ArgInfo("sigmaX", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaY, sigmaY, ArgInfo("sigmaY", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(retval = cv::gapi::gaussianBlur(src, ksize, sigmaX, sigmaY, borderType, borderValue));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_goodFeaturesToTrack(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_image = NULL;
    cv::GMat image;
    Napi::Value* pyobj_maxCorners = NULL;
    int maxCorners=0;
    Napi::Value* pyobj_qualityLevel = NULL;
    double qualityLevel=0;
    Napi::Value* pyobj_minDistance = NULL;
    double minDistance=0;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;
    Napi::Value* pyobj_blockSize = NULL;
    int blockSize=3;
    Napi::Value* pyobj_useHarrisDetector = NULL;
    bool useHarrisDetector=false;
    Napi::Value* pyobj_k = NULL;
    double k=0.04;
    GArray<Point2f> retval;

    const char* keywords[] = { "image", "maxCorners", "qualityLevel", "minDistance", "mask", "blockSize", "useHarrisDetector", "k", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOOO:goodFeaturesToTrack", (char**)keywords, &pyobj_image, &pyobj_maxCorners, &pyobj_qualityLevel, &pyobj_minDistance, &pyobj_mask, &pyobj_blockSize, &pyobj_useHarrisDetector, &pyobj_k) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_maxCorners, maxCorners, ArgInfo("maxCorners", 0)) &&
        jsopencv_to_safe(info, pyobj_qualityLevel, qualityLevel, ArgInfo("qualityLevel", 0)) &&
        jsopencv_to_safe(info, pyobj_minDistance, minDistance, ArgInfo("minDistance", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)) &&
        jsopencv_to_safe(info, pyobj_blockSize, blockSize, ArgInfo("blockSize", 0)) &&
        jsopencv_to_safe(info, pyobj_useHarrisDetector, useHarrisDetector, ArgInfo("useHarrisDetector", 0)) &&
        jsopencv_to_safe(info, pyobj_k, k, ArgInfo("k", 0)))
    {
        ERRWRAP2(retval = cv::gapi::goodFeaturesToTrack(image, maxCorners, qualityLevel, minDistance, mask, blockSize, useHarrisDetector, k));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_inRange(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_threshLow = NULL;
    cv::GScalar threshLow;
    Napi::Value* pyobj_threshUp = NULL;
    cv::GScalar threshUp;
    GMat retval;

    const char* keywords[] = { "src", "threshLow", "threshUp", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:inRange", (char**)keywords, &pyobj_src, &pyobj_threshLow, &pyobj_threshUp) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_threshLow, threshLow, ArgInfo("threshLow", 0)) &&
        jsopencv_to_safe(info, pyobj_threshUp, threshUp, ArgInfo("threshUp", 0)))
    {
        ERRWRAP2(retval = cv::gapi::inRange(src, threshLow, threshUp));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_infer(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    pyPrepareArgumentConversionErrorsStorage(3);

    {
    Napi::Value* pyobj_name = NULL;
    String name;
    Napi::Value* pyobj_inputs = NULL;
    cv::GInferInputs inputs;
    cv::GInferOutputs retval;

    const char* keywords[] = { "name", "inputs", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:infer", (char**)keywords, &pyobj_name, &pyobj_inputs) &&
        jsopencv_to_safe(info, pyobj_name, name, ArgInfo("name", 0)) &&
        jsopencv_to_safe(info, pyobj_inputs, inputs, ArgInfo("inputs", 0)))
    {
        ERRWRAP2(retval = cv::gapi::infer(name, inputs));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_name = NULL;
    std::string name;
    Napi::Value* pyobj_roi = NULL;
    GOpaque_Rect roi;
    Napi::Value* pyobj_inputs = NULL;
    cv::GInferInputs inputs;
    GInferOutputs retval;

    const char* keywords[] = { "name", "roi", "inputs", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:infer", (char**)keywords, &pyobj_name, &pyobj_roi, &pyobj_inputs) &&
        jsopencv_to_safe(info, pyobj_name, name, ArgInfo("name", 0)) &&
        jsopencv_to_safe(info, pyobj_roi, roi, ArgInfo("roi", 0)) &&
        jsopencv_to_safe(info, pyobj_inputs, inputs, ArgInfo("inputs", 0)))
    {
        ERRWRAP2(retval = cv::gapi::infer(name, roi, inputs));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_name = NULL;
    std::string name;
    Napi::Value* pyobj_rois = NULL;
    GArray_Rect rois;
    Napi::Value* pyobj_inputs = NULL;
    cv::GInferInputs inputs;
    GInferListOutputs retval;

    const char* keywords[] = { "name", "rois", "inputs", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:infer", (char**)keywords, &pyobj_name, &pyobj_rois, &pyobj_inputs) &&
        jsopencv_to_safe(info, pyobj_name, name, ArgInfo("name", 0)) &&
        jsopencv_to_safe(info, pyobj_rois, rois, ArgInfo("rois", 0)) &&
        jsopencv_to_safe(info, pyobj_inputs, inputs, ArgInfo("inputs", 0)))
    {
        ERRWRAP2(retval = cv::gapi::infer(name, rois, inputs));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("infer");

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_infer2(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_name = NULL;
    std::string name;
    Napi::Value* pyobj_in = NULL;
    cv::GMat in;
    Napi::Value* pyobj_inputs = NULL;
    cv::GInferListInputs inputs;
    GInferListOutputs retval;

    const char* keywords[] = { "name", "in_", "inputs", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:infer2", (char**)keywords, &pyobj_name, &pyobj_in, &pyobj_inputs) &&
        jsopencv_to_safe(info, pyobj_name, name, ArgInfo("name", 0)) &&
        jsopencv_to_safe(info, pyobj_in, in, ArgInfo("in", 0)) &&
        jsopencv_to_safe(info, pyobj_inputs, inputs, ArgInfo("inputs", 0)))
    {
        ERRWRAP2(retval = cv::gapi::infer2(name, in, inputs));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_integral(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_sdepth = NULL;
    int sdepth=-1;
    Napi::Value* pyobj_sqdepth = NULL;
    int sqdepth=-1;
    std::tuple<GMat, GMat> retval;

    const char* keywords[] = { "src", "sdepth", "sqdepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:integral", (char**)keywords, &pyobj_src, &pyobj_sdepth, &pyobj_sqdepth) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_sdepth, sdepth, ArgInfo("sdepth", 0)) &&
        jsopencv_to_safe(info, pyobj_sqdepth, sqdepth, ArgInfo("sqdepth", 0)))
    {
        ERRWRAP2(retval = cv::gapi::integral(src, sdepth, sqdepth));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_kmeans(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_data = NULL;
    cv::GMat data;
    Napi::Value* pyobj_K = NULL;
    int K=0;
    Napi::Value* pyobj_bestLabels = NULL;
    cv::GMat bestLabels;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria;
    Napi::Value* pyobj_attempts = NULL;
    int attempts=0;
    Napi::Value* pyobj_flags = NULL;
    KmeansFlags flags=static_cast<KmeansFlags>(0);
    std::tuple<GOpaque<double>,GMat,GMat> retval;

    const char* keywords[] = { "data", "K", "bestLabels", "criteria", "attempts", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO:kmeans", (char**)keywords, &pyobj_data, &pyobj_K, &pyobj_bestLabels, &pyobj_criteria, &pyobj_attempts, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_data, data, ArgInfo("data", 0)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_bestLabels, bestLabels, ArgInfo("bestLabels", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)) &&
        jsopencv_to_safe(info, pyobj_attempts, attempts, ArgInfo("attempts", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::gapi::kmeans(data, K, bestLabels, criteria, attempts, flags));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_data = NULL;
    cv::GMat data;
    Napi::Value* pyobj_K = NULL;
    int K=0;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria;
    Napi::Value* pyobj_attempts = NULL;
    int attempts=0;
    Napi::Value* pyobj_flags = NULL;
    KmeansFlags flags=static_cast<KmeansFlags>(0);
    std::tuple<GOpaque<double>,GMat,GMat> retval;

    const char* keywords[] = { "data", "K", "criteria", "attempts", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO:kmeans", (char**)keywords, &pyobj_data, &pyobj_K, &pyobj_criteria, &pyobj_attempts, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_data, data, ArgInfo("data", 0)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)) &&
        jsopencv_to_safe(info, pyobj_attempts, attempts, ArgInfo("attempts", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::gapi::kmeans(data, K, criteria, attempts, flags));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_data = NULL;
    GArray_Point2f data;
    Napi::Value* pyobj_K = NULL;
    int K=0;
    Napi::Value* pyobj_bestLabels = NULL;
    GArray_int bestLabels;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria;
    Napi::Value* pyobj_attempts = NULL;
    int attempts=0;
    Napi::Value* pyobj_flags = NULL;
    KmeansFlags flags=static_cast<KmeansFlags>(0);
    std::tuple<GOpaque<double>,GArray<int>,GArray<Point2f>> retval;

    const char* keywords[] = { "data", "K", "bestLabels", "criteria", "attempts", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO:kmeans", (char**)keywords, &pyobj_data, &pyobj_K, &pyobj_bestLabels, &pyobj_criteria, &pyobj_attempts, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_data, data, ArgInfo("data", 0)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_bestLabels, bestLabels, ArgInfo("bestLabels", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)) &&
        jsopencv_to_safe(info, pyobj_attempts, attempts, ArgInfo("attempts", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::gapi::kmeans(data, K, bestLabels, criteria, attempts, flags));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_data = NULL;
    GArray_Point3f data;
    Napi::Value* pyobj_K = NULL;
    int K=0;
    Napi::Value* pyobj_bestLabels = NULL;
    GArray_int bestLabels;
    Napi::Value* pyobj_criteria = NULL;
    TermCriteria criteria;
    Napi::Value* pyobj_attempts = NULL;
    int attempts=0;
    Napi::Value* pyobj_flags = NULL;
    KmeansFlags flags=static_cast<KmeansFlags>(0);
    std::tuple<GOpaque<double>,GArray<int>,GArray<Point3f>> retval;

    const char* keywords[] = { "data", "K", "bestLabels", "criteria", "attempts", "flags", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO:kmeans", (char**)keywords, &pyobj_data, &pyobj_K, &pyobj_bestLabels, &pyobj_criteria, &pyobj_attempts, &pyobj_flags) &&
        jsopencv_to_safe(info, pyobj_data, data, ArgInfo("data", 0)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_bestLabels, bestLabels, ArgInfo("bestLabels", 0)) &&
        jsopencv_to_safe(info, pyobj_criteria, criteria, ArgInfo("criteria", 0)) &&
        jsopencv_to_safe(info, pyobj_attempts, attempts, ArgInfo("attempts", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)))
    {
        ERRWRAP2(retval = cv::gapi::kmeans(data, K, bestLabels, criteria, attempts, flags));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("kmeans");

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_mask(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_mask = NULL;
    cv::GMat mask;
    GMat retval;

    const char* keywords[] = { "src", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:mask", (char**)keywords, &pyobj_src, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(retval = cv::gapi::mask(src, mask));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_max(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GMat src2;
    GMat retval;

    const char* keywords[] = { "src1", "src2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:max", (char**)keywords, &pyobj_src1, &pyobj_src2) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)))
    {
        ERRWRAP2(retval = cv::gapi::max(src1, src2));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_mean(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GScalar retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:mean", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::mean(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_medianBlur(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_ksize = NULL;
    int ksize=0;
    GMat retval;

    const char* keywords[] = { "src", "ksize", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:medianBlur", (char**)keywords, &pyobj_src, &pyobj_ksize) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)))
    {
        ERRWRAP2(retval = cv::gapi::medianBlur(src, ksize));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_merge3(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GMat src2;
    Napi::Value* pyobj_src3 = NULL;
    cv::GMat src3;
    GMat retval;

    const char* keywords[] = { "src1", "src2", "src3", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:merge3", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_src3) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_src3, src3, ArgInfo("src3", 0)))
    {
        ERRWRAP2(retval = cv::gapi::merge3(src1, src2, src3));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_merge4(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GMat src2;
    Napi::Value* pyobj_src3 = NULL;
    cv::GMat src3;
    Napi::Value* pyobj_src4 = NULL;
    cv::GMat src4;
    GMat retval;

    const char* keywords[] = { "src1", "src2", "src3", "src4", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO:merge4", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_src3, &pyobj_src4) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_src3, src3, ArgInfo("src3", 0)) &&
        jsopencv_to_safe(info, pyobj_src4, src4, ArgInfo("src4", 0)))
    {
        ERRWRAP2(retval = cv::gapi::merge4(src1, src2, src3, src4));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_min(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GMat src2;
    GMat retval;

    const char* keywords[] = { "src1", "src2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:min", (char**)keywords, &pyobj_src1, &pyobj_src2) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)))
    {
        ERRWRAP2(retval = cv::gapi::min(src1, src2));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_morphologyEx(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_op = NULL;
    MorphTypes op=static_cast<MorphTypes>(0);
    Napi::Value* pyobj_kernel = NULL;
    Mat kernel;
    Napi::Value* pyobj_anchor = NULL;
    Point anchor=Point(-1,-1);
    Napi::Value* pyobj_iterations = NULL;
    int iterations=1;
    Napi::Value* pyobj_borderType = NULL;
    BorderTypes borderType=BORDER_CONSTANT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue=morphologyDefaultBorderValue();
    GMat retval;

    const char* keywords[] = { "src", "op", "kernel", "anchor", "iterations", "borderType", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:morphologyEx", (char**)keywords, &pyobj_src, &pyobj_op, &pyobj_kernel, &pyobj_anchor, &pyobj_iterations, &pyobj_borderType, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_op, op, ArgInfo("op", 0)) &&
        jsopencv_to_safe(info, pyobj_kernel, kernel, ArgInfo("kernel", 0)) &&
        jsopencv_to_safe(info, pyobj_anchor, anchor, ArgInfo("anchor", 0)) &&
        jsopencv_to_safe(info, pyobj_iterations, iterations, ArgInfo("iterations", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(retval = cv::gapi::morphologyEx(src, op, kernel, anchor, iterations, borderType, borderValue));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_mul(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GMat src2;
    Napi::Value* pyobj_scale = NULL;
    double scale=1.0;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=-1;
    GMat retval;

    const char* keywords[] = { "src1", "src2", "scale", "ddepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:mul", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_scale, &pyobj_ddepth) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)))
    {
        ERRWRAP2(retval = cv::gapi::mul(src1, src2, scale, ddepth));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_mulC(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    pyPrepareArgumentConversionErrorsStorage(3);

    {
    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_multiplier = NULL;
    double multiplier=0;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=-1;
    GMat retval;

    const char* keywords[] = { "src", "multiplier", "ddepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:mulC", (char**)keywords, &pyobj_src, &pyobj_multiplier, &pyobj_ddepth) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_multiplier, multiplier, ArgInfo("multiplier", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)))
    {
        ERRWRAP2(retval = cv::gapi::mulC(src, multiplier, ddepth));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_multiplier = NULL;
    cv::GScalar multiplier;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=-1;
    GMat retval;

    const char* keywords[] = { "src", "multiplier", "ddepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:mulC", (char**)keywords, &pyobj_src, &pyobj_multiplier, &pyobj_ddepth) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_multiplier, multiplier, ArgInfo("multiplier", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)))
    {
        ERRWRAP2(retval = cv::gapi::mulC(src, multiplier, ddepth));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_multiplier = NULL;
    cv::GScalar multiplier;
    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=-1;
    GMat retval;

    const char* keywords[] = { "multiplier", "src", "ddepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:mulC", (char**)keywords, &pyobj_multiplier, &pyobj_src, &pyobj_ddepth) &&
        jsopencv_to_safe(info, pyobj_multiplier, multiplier, ArgInfo("multiplier", 0)) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)))
    {
        ERRWRAP2(retval = cv::gapi::mulC(multiplier, src, ddepth));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("mulC");

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_normInf(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GScalar retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:normInf", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::normInf(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_normL1(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GScalar retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:normL1", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::normL1(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_normL2(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GScalar retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:normL2", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::normL2(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_normalize(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=0;
    Napi::Value* pyobj_beta = NULL;
    double beta=0;
    Napi::Value* pyobj_norm_type = NULL;
    int norm_type=0;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=-1;
    GMat retval;

    const char* keywords[] = { "src", "alpha", "beta", "norm_type", "ddepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:normalize", (char**)keywords, &pyobj_src, &pyobj_alpha, &pyobj_beta, &pyobj_norm_type, &pyobj_ddepth) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_beta, beta, ArgInfo("beta", 0)) &&
        jsopencv_to_safe(info, pyobj_norm_type, norm_type, ArgInfo("norm_type", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)))
    {
        ERRWRAP2(retval = cv::gapi::normalize(src, alpha, beta, norm_type, ddepth));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_parseSSD(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_in = NULL;
    cv::GMat in;
    Napi::Value* pyobj_inSz = NULL;
    GOpaque_Size inSz;
    Napi::Value* pyobj_confidenceThreshold = NULL;
    float confidenceThreshold=0.5f;
    Napi::Value* pyobj_filterLabel = NULL;
    int filterLabel=-1;
    std::tuple<GArray<Rect>, GArray<int>> retval;

    const char* keywords[] = { "in_", "inSz", "confidenceThreshold", "filterLabel", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:parseSSD", (char**)keywords, &pyobj_in, &pyobj_inSz, &pyobj_confidenceThreshold, &pyobj_filterLabel) &&
        jsopencv_to_safe(info, pyobj_in, in, ArgInfo("in", 0)) &&
        jsopencv_to_safe(info, pyobj_inSz, inSz, ArgInfo("inSz", 0)) &&
        jsopencv_to_safe(info, pyobj_confidenceThreshold, confidenceThreshold, ArgInfo("confidenceThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_filterLabel, filterLabel, ArgInfo("filterLabel", 0)))
    {
        ERRWRAP2(retval = cv::gapi::parseSSD(in, inSz, confidenceThreshold, filterLabel));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_in = NULL;
    cv::GMat in;
    Napi::Value* pyobj_inSz = NULL;
    GOpaque_Size inSz;
    Napi::Value* pyobj_confidenceThreshold = NULL;
    float confidenceThreshold=0.f;
    Napi::Value* pyobj_alignmentToSquare = NULL;
    bool alignmentToSquare=0;
    Napi::Value* pyobj_filterOutOfBounds = NULL;
    bool filterOutOfBounds=0;
    GArray<Rect> retval;

    const char* keywords[] = { "in_", "inSz", "confidenceThreshold", "alignmentToSquare", "filterOutOfBounds", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO:parseSSD", (char**)keywords, &pyobj_in, &pyobj_inSz, &pyobj_confidenceThreshold, &pyobj_alignmentToSquare, &pyobj_filterOutOfBounds) &&
        jsopencv_to_safe(info, pyobj_in, in, ArgInfo("in", 0)) &&
        jsopencv_to_safe(info, pyobj_inSz, inSz, ArgInfo("inSz", 0)) &&
        jsopencv_to_safe(info, pyobj_confidenceThreshold, confidenceThreshold, ArgInfo("confidenceThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_alignmentToSquare, alignmentToSquare, ArgInfo("alignmentToSquare", 0)) &&
        jsopencv_to_safe(info, pyobj_filterOutOfBounds, filterOutOfBounds, ArgInfo("filterOutOfBounds", 0)))
    {
        ERRWRAP2(retval = cv::gapi::parseSSD(in, inSz, confidenceThreshold, alignmentToSquare, filterOutOfBounds));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("parseSSD");

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_parseYolo(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_in = NULL;
    cv::GMat in;
    Napi::Value* pyobj_inSz = NULL;
    GOpaque_Size inSz;
    Napi::Value* pyobj_confidenceThreshold = NULL;
    float confidenceThreshold=0.5f;
    Napi::Value* pyobj_nmsThreshold = NULL;
    float nmsThreshold=0.5f;
    Napi::Value* pyobj_anchors = NULL;
    vector_float anchors=nn::parsers::GParseYolo::defaultAnchors();
    std::tuple<GArray<Rect>, GArray<int>> retval;

    const char* keywords[] = { "in_", "inSz", "confidenceThreshold", "nmsThreshold", "anchors", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:parseYolo", (char**)keywords, &pyobj_in, &pyobj_inSz, &pyobj_confidenceThreshold, &pyobj_nmsThreshold, &pyobj_anchors) &&
        jsopencv_to_safe(info, pyobj_in, in, ArgInfo("in", 0)) &&
        jsopencv_to_safe(info, pyobj_inSz, inSz, ArgInfo("inSz", 0)) &&
        jsopencv_to_safe(info, pyobj_confidenceThreshold, confidenceThreshold, ArgInfo("confidenceThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_nmsThreshold, nmsThreshold, ArgInfo("nmsThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_anchors, anchors, ArgInfo("anchors", 0)))
    {
        ERRWRAP2(retval = cv::gapi::parseYolo(in, inSz, confidenceThreshold, nmsThreshold, anchors));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_phase(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_x = NULL;
    cv::GMat x;
    Napi::Value* pyobj_y = NULL;
    cv::GMat y;
    Napi::Value* pyobj_angleInDegrees = NULL;
    bool angleInDegrees=false;
    GMat retval;

    const char* keywords[] = { "x", "y", "angleInDegrees", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:phase", (char**)keywords, &pyobj_x, &pyobj_y, &pyobj_angleInDegrees) &&
        jsopencv_to_safe(info, pyobj_x, x, ArgInfo("x", 0)) &&
        jsopencv_to_safe(info, pyobj_y, y, ArgInfo("y", 0)) &&
        jsopencv_to_safe(info, pyobj_angleInDegrees, angleInDegrees, ArgInfo("angleInDegrees", 0)))
    {
        ERRWRAP2(retval = cv::gapi::phase(x, y, angleInDegrees));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_polarToCart(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_magnitude = NULL;
    cv::GMat magnitude;
    Napi::Value* pyobj_angle = NULL;
    cv::GMat angle;
    Napi::Value* pyobj_angleInDegrees = NULL;
    bool angleInDegrees=false;
    std::tuple<GMat, GMat> retval;

    const char* keywords[] = { "magnitude", "angle", "angleInDegrees", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:polarToCart", (char**)keywords, &pyobj_magnitude, &pyobj_angle, &pyobj_angleInDegrees) &&
        jsopencv_to_safe(info, pyobj_magnitude, magnitude, ArgInfo("magnitude", 0)) &&
        jsopencv_to_safe(info, pyobj_angle, angle, ArgInfo("angle", 0)) &&
        jsopencv_to_safe(info, pyobj_angleInDegrees, angleInDegrees, ArgInfo("angleInDegrees", 0)))
    {
        ERRWRAP2(retval = cv::gapi::polarToCart(magnitude, angle, angleInDegrees));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_remap(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_map1 = NULL;
    Mat map1;
    Napi::Value* pyobj_map2 = NULL;
    Mat map2;
    Napi::Value* pyobj_interpolation = NULL;
    int interpolation=0;
    Napi::Value* pyobj_borderMode = NULL;
    int borderMode=BORDER_CONSTANT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue;
    GMat retval;

    const char* keywords[] = { "src", "map1", "map2", "interpolation", "borderMode", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OO:remap", (char**)keywords, &pyobj_src, &pyobj_map1, &pyobj_map2, &pyobj_interpolation, &pyobj_borderMode, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_map1, map1, ArgInfo("map1", 0)) &&
        jsopencv_to_safe(info, pyobj_map2, map2, ArgInfo("map2", 0)) &&
        jsopencv_to_safe(info, pyobj_interpolation, interpolation, ArgInfo("interpolation", 0)) &&
        jsopencv_to_safe(info, pyobj_borderMode, borderMode, ArgInfo("borderMode", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(retval = cv::gapi::remap(src, map1, map2, interpolation, borderMode, borderValue));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_resize(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_dsize = NULL;
    Size dsize;
    Napi::Value* pyobj_fx = NULL;
    double fx=0;
    Napi::Value* pyobj_fy = NULL;
    double fy=0;
    Napi::Value* pyobj_interpolation = NULL;
    int interpolation=INTER_LINEAR;
    GMat retval;

    const char* keywords[] = { "src", "dsize", "fx", "fy", "interpolation", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:resize", (char**)keywords, &pyobj_src, &pyobj_dsize, &pyobj_fx, &pyobj_fy, &pyobj_interpolation) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dsize, dsize, ArgInfo("dsize", 0)) &&
        jsopencv_to_safe(info, pyobj_fx, fx, ArgInfo("fx", 0)) &&
        jsopencv_to_safe(info, pyobj_fy, fy, ArgInfo("fy", 0)) &&
        jsopencv_to_safe(info, pyobj_interpolation, interpolation, ArgInfo("interpolation", 0)))
    {
        ERRWRAP2(retval = cv::gapi::resize(src, dsize, fx, fy, interpolation));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_select(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GMat src2;
    Napi::Value* pyobj_mask = NULL;
    cv::GMat mask;
    GMat retval;

    const char* keywords[] = { "src1", "src2", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:select", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(retval = cv::gapi::select(src1, src2, mask));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_sepFilter(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=0;
    Napi::Value* pyobj_kernelX = NULL;
    Mat kernelX;
    Napi::Value* pyobj_kernelY = NULL;
    Mat kernelY;
    Napi::Value* pyobj_anchor = NULL;
    Point anchor;
    Napi::Value* pyobj_delta = NULL;
    Scalar delta;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue=Scalar(0);
    GMat retval;

    const char* keywords[] = { "src", "ddepth", "kernelX", "kernelY", "anchor", "delta", "borderType", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO|OO:sepFilter", (char**)keywords, &pyobj_src, &pyobj_ddepth, &pyobj_kernelX, &pyobj_kernelY, &pyobj_anchor, &pyobj_delta, &pyobj_borderType, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)) &&
        jsopencv_to_safe(info, pyobj_kernelX, kernelX, ArgInfo("kernelX", 0)) &&
        jsopencv_to_safe(info, pyobj_kernelY, kernelY, ArgInfo("kernelY", 0)) &&
        jsopencv_to_safe(info, pyobj_anchor, anchor, ArgInfo("anchor", 0)) &&
        jsopencv_to_safe(info, pyobj_delta, delta, ArgInfo("delta", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(retval = cv::gapi::sepFilter(src, ddepth, kernelX, kernelY, anchor, delta, borderType, borderValue));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_split3(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    std::tuple<GMat, GMat, GMat> retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:split3", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::split3(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_split4(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    std::tuple<GMat, GMat, GMat,GMat> retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:split4", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::split4(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_sqrt(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GMat retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:sqrt", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::sqrt(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_sub(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src1 = NULL;
    cv::GMat src1;
    Napi::Value* pyobj_src2 = NULL;
    cv::GMat src2;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=-1;
    GMat retval;

    const char* keywords[] = { "src1", "src2", "ddepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:sub", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_ddepth) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)))
    {
        ERRWRAP2(retval = cv::gapi::sub(src1, src2, ddepth));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_subC(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_c = NULL;
    cv::GScalar c;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=-1;
    GMat retval;

    const char* keywords[] = { "src", "c", "ddepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:subC", (char**)keywords, &pyobj_src, &pyobj_c, &pyobj_ddepth) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_c, c, ArgInfo("c", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)))
    {
        ERRWRAP2(retval = cv::gapi::subC(src, c, ddepth));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_subRC(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_c = NULL;
    cv::GScalar c;
    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=-1;
    GMat retval;

    const char* keywords[] = { "c", "src", "ddepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:subRC", (char**)keywords, &pyobj_c, &pyobj_src, &pyobj_ddepth) &&
        jsopencv_to_safe(info, pyobj_c, c, ArgInfo("c", 0)) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)))
    {
        ERRWRAP2(retval = cv::gapi::subRC(c, src, ddepth));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_sum(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GScalar retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:sum", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::sum(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_threshold(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_thresh = NULL;
    cv::GScalar thresh;
    Napi::Value* pyobj_maxval = NULL;
    cv::GScalar maxval;
    Napi::Value* pyobj_type = NULL;
    int type=0;
    GMat retval;

    const char* keywords[] = { "src", "thresh", "maxval", "type", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO:threshold", (char**)keywords, &pyobj_src, &pyobj_thresh, &pyobj_maxval, &pyobj_type) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_thresh, thresh, ArgInfo("thresh", 0)) &&
        jsopencv_to_safe(info, pyobj_maxval, maxval, ArgInfo("maxval", 0)) &&
        jsopencv_to_safe(info, pyobj_type, type, ArgInfo("type", 0)))
    {
        ERRWRAP2(retval = cv::gapi::threshold(src, thresh, maxval, type));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_maxval = NULL;
    cv::GScalar maxval;
    Napi::Value* pyobj_type = NULL;
    int type=0;
    std::tuple<GMat, GScalar> retval;

    const char* keywords[] = { "src", "maxval", "type", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:threshold", (char**)keywords, &pyobj_src, &pyobj_maxval, &pyobj_type) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_maxval, maxval, ArgInfo("maxval", 0)) &&
        jsopencv_to_safe(info, pyobj_type, type, ArgInfo("type", 0)))
    {
        ERRWRAP2(retval = cv::gapi::threshold(src, maxval, type));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("threshold");

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_transpose(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GMat retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:transpose", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::transpose(src));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_warpAffine(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_M = NULL;
    Mat M;
    Napi::Value* pyobj_dsize = NULL;
    Size dsize;
    Napi::Value* pyobj_flags = NULL;
    int flags=cv::INTER_LINEAR;
    Napi::Value* pyobj_borderMode = NULL;
    int borderMode=cv::BORDER_CONSTANT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue;
    GMat retval;

    const char* keywords[] = { "src", "M", "dsize", "flags", "borderMode", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:warpAffine", (char**)keywords, &pyobj_src, &pyobj_M, &pyobj_dsize, &pyobj_flags, &pyobj_borderMode, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_M, M, ArgInfo("M", 0)) &&
        jsopencv_to_safe(info, pyobj_dsize, dsize, ArgInfo("dsize", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_borderMode, borderMode, ArgInfo("borderMode", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(retval = cv::gapi::warpAffine(src, M, dsize, flags, borderMode, borderValue));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_warpPerspective(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_M = NULL;
    Mat M;
    Napi::Value* pyobj_dsize = NULL;
    Size dsize;
    Napi::Value* pyobj_flags = NULL;
    int flags=cv::INTER_LINEAR;
    Napi::Value* pyobj_borderMode = NULL;
    int borderMode=cv::BORDER_CONSTANT;
    Napi::Value* pyobj_borderValue = NULL;
    Scalar borderValue;
    GMat retval;

    const char* keywords[] = { "src", "M", "dsize", "flags", "borderMode", "borderValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:warpPerspective", (char**)keywords, &pyobj_src, &pyobj_M, &pyobj_dsize, &pyobj_flags, &pyobj_borderMode, &pyobj_borderValue) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_M, M, ArgInfo("M", 0)) &&
        jsopencv_to_safe(info, pyobj_dsize, dsize, ArgInfo("dsize", 0)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_borderMode, borderMode, ArgInfo("borderMode", 0)) &&
        jsopencv_to_safe(info, pyobj_borderValue, borderValue, ArgInfo("borderValue", 0)))
    {
        ERRWRAP2(retval = cv::gapi::warpPerspective(src, M, dsize, flags, borderMode, borderValue));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_core_cpu_kernels(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi::core::cpu;

    cv::GKernelPackage retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::gapi::core::cpu::kernels());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_core_fluid_kernels(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi::core::fluid;

    cv::GKernelPackage retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::gapi::core::fluid::kernels());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_core_ocl_kernels(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi::core::ocl;

    cv::GKernelPackage retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::gapi::core::ocl::kernels());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_ie_params(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi::ie;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_tag = NULL;
    std::string tag;
    Napi::Value* pyobj_model = NULL;
    std::string model;
    Napi::Value* pyobj_weights = NULL;
    std::string weights;
    Napi::Value* pyobj_device = NULL;
    std::string device;
    PyParams retval;

    const char* keywords[] = { "tag", "model", "weights", "device", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO:params", (char**)keywords, &pyobj_tag, &pyobj_model, &pyobj_weights, &pyobj_device) &&
        jsopencv_to_safe(info, pyobj_tag, tag, ArgInfo("tag", 0)) &&
        jsopencv_to_safe(info, pyobj_model, model, ArgInfo("model", 0)) &&
        jsopencv_to_safe(info, pyobj_weights, weights, ArgInfo("weights", 0)) &&
        jsopencv_to_safe(info, pyobj_device, device, ArgInfo("device", 0)))
    {
        ERRWRAP2(retval = cv::gapi::ie::params(tag, model, weights, device));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_tag = NULL;
    std::string tag;
    Napi::Value* pyobj_model = NULL;
    std::string model;
    Napi::Value* pyobj_device = NULL;
    std::string device;
    PyParams retval;

    const char* keywords[] = { "tag", "model", "device", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:params", (char**)keywords, &pyobj_tag, &pyobj_model, &pyobj_device) &&
        jsopencv_to_safe(info, pyobj_tag, tag, ArgInfo("tag", 0)) &&
        jsopencv_to_safe(info, pyobj_model, model, ArgInfo("model", 0)) &&
        jsopencv_to_safe(info, pyobj_device, device, ArgInfo("device", 0)))
    {
        ERRWRAP2(retval = cv::gapi::ie::params(tag, model, device));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("params");

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_onnx_params(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi::onnx;

    Napi::Value* pyobj_tag = NULL;
    std::string tag;
    Napi::Value* pyobj_model_path = NULL;
    std::string model_path;
    PyParams retval;

    const char* keywords[] = { "tag", "model_path", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:params", (char**)keywords, &pyobj_tag, &pyobj_model_path) &&
        jsopencv_to_safe(info, pyobj_tag, tag, ArgInfo("tag", 0)) &&
        jsopencv_to_safe(info, pyobj_model_path, model_path, ArgInfo("model_path", 0)))
    {
        ERRWRAP2(retval = cv::gapi::onnx::params(tag, model_path));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_render_ocv_kernels(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi::render::ocv;

    cv::GKernelPackage retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::gapi::render::ocv::kernels());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_streaming_desync(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi::streaming;

    Napi::Value* pyobj_g = NULL;
    cv::GMat g;
    cv::GMat retval;

    const char* keywords[] = { "g", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:desync", (char**)keywords, &pyobj_g) &&
        jsopencv_to_safe(info, pyobj_g, g, ArgInfo("g", 0)))
    {
        ERRWRAP2(retval = cv::gapi::streaming::desync(g));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_streaming_seqNo(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi::streaming;

    Napi::Value* pyobj_arg1 = NULL;
    cv::GMat arg1;
    cv::GOpaque<int64_t> retval;

    const char* keywords[] = { "arg1", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:seqNo", (char**)keywords, &pyobj_arg1) &&
        jsopencv_to_safe(info, pyobj_arg1, arg1, ArgInfo("arg1", 0)))
    {
        ERRWRAP2(retval = cv::gapi::streaming::seqNo(arg1));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_streaming_seq_id(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi::streaming;

    Napi::Value* pyobj_arg1 = NULL;
    cv::GMat arg1;
    cv::GOpaque<int64_t> retval;

    const char* keywords[] = { "arg1", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:seq_id", (char**)keywords, &pyobj_arg1) &&
        jsopencv_to_safe(info, pyobj_arg1, arg1, ArgInfo("arg1", 0)))
    {
        ERRWRAP2(retval = cv::gapi::streaming::seq_id(arg1));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_streaming_size(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi::streaming;

    pyPrepareArgumentConversionErrorsStorage(3);

    {
    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    GOpaque<Size> retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:size", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::streaming::size(src));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_r = NULL;
    GOpaque_Rect r;
    GOpaque<Size> retval;

    const char* keywords[] = { "r", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:size", (char**)keywords, &pyobj_r) &&
        jsopencv_to_safe(info, pyobj_r, r, ArgInfo("r", 0)))
    {
        ERRWRAP2(retval = cv::gapi::streaming::size(r));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    cv::GFrame src;
    GOpaque<Size> retval;

    const char* keywords[] = { "src", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:size", (char**)keywords, &pyobj_src) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)))
    {
        ERRWRAP2(retval = cv::gapi::streaming::size(src));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("size");

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_streaming_timestamp(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi::streaming;

    Napi::Value* pyobj_arg1 = NULL;
    cv::GMat arg1;
    cv::GOpaque<int64_t> retval;

    const char* keywords[] = { "arg1", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:timestamp", (char**)keywords, &pyobj_arg1) &&
        jsopencv_to_safe(info, pyobj_arg1, arg1, ArgInfo("arg1", 0)))
    {
        ERRWRAP2(retval = cv::gapi::streaming::timestamp(arg1));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_wip_get_streaming_source(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi::wip;

    Napi::Value* pyobj_pipeline = NULL;
    Ptr<GStreamerPipeline> pipeline;
    Napi::Value* pyobj_appsinkName = NULL;
    std::string appsinkName;
    Napi::Value* pyobj_outputType = NULL;
    GStreamerSource_OutputType outputType=GStreamerSource::OutputType::MAT;
    cv::Ptr<IStreamSource> retval;

    const char* keywords[] = { "pipeline", "appsinkName", "outputType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:get_streaming_source", (char**)keywords, &pyobj_pipeline, &pyobj_appsinkName, &pyobj_outputType) &&
        jsopencv_to_safe(info, pyobj_pipeline, pipeline, ArgInfo("pipeline", 0)) &&
        jsopencv_to_safe(info, pyobj_appsinkName, appsinkName, ArgInfo("appsinkName", 0)) &&
        jsopencv_to_safe(info, pyobj_outputType, outputType, ArgInfo("outputType", 0)))
    {
        ERRWRAP2(retval = cv::gapi::wip::get_streaming_source(pipeline, appsinkName, outputType));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_wip_make_capture_src(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi::wip;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_path = NULL;
    std::string path;
    cv::Ptr<IStreamSource> retval;

    const char* keywords[] = { "path", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:make_capture_src", (char**)keywords, &pyobj_path) &&
        jsopencv_to_safe(info, pyobj_path, path, ArgInfo("path", 0)))
    {
        ERRWRAP2(retval = cv::gapi::wip::make_capture_src(path));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_id = NULL;
    int id=0;
    cv::Ptr<IStreamSource> retval;

    const char* keywords[] = { "id", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:make_capture_src", (char**)keywords, &pyobj_id) &&
        jsopencv_to_safe(info, pyobj_id, id, ArgInfo("id", 0)))
    {
        ERRWRAP2(retval = cv::gapi::wip::make_capture_src(id));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("make_capture_src");

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_wip_make_gst_src(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi::wip;

    Napi::Value* pyobj_pipeline = NULL;
    std::string pipeline;
    Napi::Value* pyobj_outputType = NULL;
    GStreamerSource_OutputType outputType=GStreamerSource::OutputType::MAT;
    cv::Ptr<IStreamSource> retval;

    const char* keywords[] = { "pipeline", "outputType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:make_gst_src", (char**)keywords, &pyobj_pipeline, &pyobj_outputType) &&
        jsopencv_to_safe(info, pyobj_pipeline, pipeline, ArgInfo("pipeline", 0)) &&
        jsopencv_to_safe(info, pyobj_outputType, outputType, ArgInfo("outputType", 0)))
    {
        ERRWRAP2(retval = cv::gapi::wip::make_gst_src(pipeline, outputType));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_wip_draw_render(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi::wip::draw;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_bgr = NULL;
    Mat bgr;
    Napi::Value* pyobj_prims = NULL;
    Prims prims;
    Napi::Value* pyobj_args = NULL;
    GCompileArgs args={};

    const char* keywords[] = { "bgr", "prims", "args", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:render", (char**)keywords, &pyobj_bgr, &pyobj_prims, &pyobj_args) &&
        jsopencv_to_safe(info, pyobj_bgr, bgr, ArgInfo("bgr", 0)) &&
        jsopencv_to_safe(info, pyobj_prims, prims, ArgInfo("prims", 0)) &&
        jsopencv_to_safe(info, pyobj_args, args, ArgInfo("args", 0)))
    {
        ERRWRAP2(cv::gapi::wip::draw::render(bgr, prims, std::move(args)));
        Py_RETURN_NONE;
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_y_plane = NULL;
    Mat y_plane;
    Napi::Value* pyobj_uv_plane = NULL;
    Mat uv_plane;
    Napi::Value* pyobj_prims = NULL;
    Prims prims;
    Napi::Value* pyobj_args = NULL;
    GCompileArgs args={};

    const char* keywords[] = { "y_plane", "uv_plane", "prims", "args", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:render", (char**)keywords, &pyobj_y_plane, &pyobj_uv_plane, &pyobj_prims, &pyobj_args) &&
        jsopencv_to_safe(info, pyobj_y_plane, y_plane, ArgInfo("y_plane", 0)) &&
        jsopencv_to_safe(info, pyobj_uv_plane, uv_plane, ArgInfo("uv_plane", 0)) &&
        jsopencv_to_safe(info, pyobj_prims, prims, ArgInfo("prims", 0)) &&
        jsopencv_to_safe(info, pyobj_args, args, ArgInfo("args", 0)))
    {
        ERRWRAP2(cv::gapi::wip::draw::render(y_plane, uv_plane, prims, std::move(args)));
        Py_RETURN_NONE;
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("render");

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_wip_draw_render3ch(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi::wip::draw;

    Napi::Value* pyobj_src = NULL;
    cv::GMat src;
    Napi::Value* pyobj_prims = NULL;
    GArray_Prim prims;
    GMat retval;

    const char* keywords[] = { "src", "prims", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:render3ch", (char**)keywords, &pyobj_src, &pyobj_prims) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_prims, prims, ArgInfo("prims", 0)))
    {
        ERRWRAP2(retval = cv::gapi::wip::draw::render3ch(src, prims));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_gapi_wip_draw_renderNV12(const Napi::CallbackInfo &info)
{
    using namespace cv::gapi::wip::draw;

    Napi::Value* pyobj_y = NULL;
    cv::GMat y;
    Napi::Value* pyobj_uv = NULL;
    cv::GMat uv;
    Napi::Value* pyobj_prims = NULL;
    GArray_Prim prims;
    GMat2 retval;

    const char* keywords[] = { "y", "uv", "prims", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:renderNV12", (char**)keywords, &pyobj_y, &pyobj_uv, &pyobj_prims) &&
        jsopencv_to_safe(info, pyobj_y, y, ArgInfo("y", 0)) &&
        jsopencv_to_safe(info, pyobj_uv, uv, ArgInfo("uv", 0)) &&
        jsopencv_to_safe(info, pyobj_prims, prims, ArgInfo("prims", 0)))
    {
        ERRWRAP2(retval = cv::gapi::wip::draw::renderNV12(y, uv, prims));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_img_hash_AverageHash_create(const Napi::CallbackInfo &info)
{
    using namespace cv::img_hash;

    Ptr<AverageHash> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::img_hash::AverageHash::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_img_hash_BlockMeanHash_create(const Napi::CallbackInfo &info)
{
    using namespace cv::img_hash;

    Napi::Value* pyobj_mode = NULL;
    int mode=BLOCK_MEAN_HASH_MODE_0;
    Ptr<BlockMeanHash> retval;

    const char* keywords[] = { "mode", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|O:BlockMeanHash_create", (char**)keywords, &pyobj_mode) &&
        jsopencv_to_safe(info, pyobj_mode, mode, ArgInfo("mode", 0)))
    {
        ERRWRAP2(retval = cv::img_hash::BlockMeanHash::create(mode));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_img_hash_ColorMomentHash_create(const Napi::CallbackInfo &info)
{
    using namespace cv::img_hash;

    Ptr<ColorMomentHash> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::img_hash::ColorMomentHash::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_img_hash_MarrHildrethHash_create(const Napi::CallbackInfo &info)
{
    using namespace cv::img_hash;

    Napi::Value* pyobj_alpha = NULL;
    float alpha=2.0f;
    Napi::Value* pyobj_scale = NULL;
    float scale=1.0f;
    Ptr<MarrHildrethHash> retval;

    const char* keywords[] = { "alpha", "scale", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OO:MarrHildrethHash_create", (char**)keywords, &pyobj_alpha, &pyobj_scale) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)))
    {
        ERRWRAP2(retval = cv::img_hash::MarrHildrethHash::create(alpha, scale));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_img_hash_PHash_create(const Napi::CallbackInfo &info)
{
    using namespace cv::img_hash;

    Ptr<PHash> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::img_hash::PHash::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_img_hash_RadialVarianceHash_create(const Napi::CallbackInfo &info)
{
    using namespace cv::img_hash;

    Napi::Value* pyobj_sigma = NULL;
    double sigma=1;
    Napi::Value* pyobj_numOfAngleLine = NULL;
    int numOfAngleLine=180;
    Ptr<RadialVarianceHash> retval;

    const char* keywords[] = { "sigma", "numOfAngleLine", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OO:RadialVarianceHash_create", (char**)keywords, &pyobj_sigma, &pyobj_numOfAngleLine) &&
        jsopencv_to_safe(info, pyobj_sigma, sigma, ArgInfo("sigma", 0)) &&
        jsopencv_to_safe(info, pyobj_numOfAngleLine, numOfAngleLine, ArgInfo("numOfAngleLine", 0)))
    {
        ERRWRAP2(retval = cv::img_hash::RadialVarianceHash::create(sigma, numOfAngleLine));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_img_hash_averageHash(const Napi::CallbackInfo &info)
{
    using namespace cv::img_hash;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_inputArr = NULL;
    Mat inputArr;
    Napi::Value* pyobj_outputArr = NULL;
    Mat outputArr;

    const char* keywords[] = { "inputArr", "outputArr", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:averageHash", (char**)keywords, &pyobj_inputArr, &pyobj_outputArr) &&
        jsopencv_to_safe(info, pyobj_inputArr, inputArr, ArgInfo("inputArr", 0)) &&
        jsopencv_to_safe(info, pyobj_outputArr, outputArr, ArgInfo("outputArr", 1)))
    {
        ERRWRAP2(cv::img_hash::averageHash(inputArr, outputArr));
        return jsopencv_from(outputArr);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_inputArr = NULL;
    UMat inputArr;
    Napi::Value* pyobj_outputArr = NULL;
    UMat outputArr;

    const char* keywords[] = { "inputArr", "outputArr", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:averageHash", (char**)keywords, &pyobj_inputArr, &pyobj_outputArr) &&
        jsopencv_to_safe(info, pyobj_inputArr, inputArr, ArgInfo("inputArr", 0)) &&
        jsopencv_to_safe(info, pyobj_outputArr, outputArr, ArgInfo("outputArr", 1)))
    {
        ERRWRAP2(cv::img_hash::averageHash(inputArr, outputArr));
        return jsopencv_from(outputArr);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("averageHash");

    return NULL;
}

static Napi::Value pyopencv_cv_img_hash_blockMeanHash(const Napi::CallbackInfo &info)
{
    using namespace cv::img_hash;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_inputArr = NULL;
    Mat inputArr;
    Napi::Value* pyobj_outputArr = NULL;
    Mat outputArr;
    Napi::Value* pyobj_mode = NULL;
    int mode=BLOCK_MEAN_HASH_MODE_0;

    const char* keywords[] = { "inputArr", "outputArr", "mode", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:blockMeanHash", (char**)keywords, &pyobj_inputArr, &pyobj_outputArr, &pyobj_mode) &&
        jsopencv_to_safe(info, pyobj_inputArr, inputArr, ArgInfo("inputArr", 0)) &&
        jsopencv_to_safe(info, pyobj_outputArr, outputArr, ArgInfo("outputArr", 1)) &&
        jsopencv_to_safe(info, pyobj_mode, mode, ArgInfo("mode", 0)))
    {
        ERRWRAP2(cv::img_hash::blockMeanHash(inputArr, outputArr, mode));
        return jsopencv_from(outputArr);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_inputArr = NULL;
    UMat inputArr;
    Napi::Value* pyobj_outputArr = NULL;
    UMat outputArr;
    Napi::Value* pyobj_mode = NULL;
    int mode=BLOCK_MEAN_HASH_MODE_0;

    const char* keywords[] = { "inputArr", "outputArr", "mode", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:blockMeanHash", (char**)keywords, &pyobj_inputArr, &pyobj_outputArr, &pyobj_mode) &&
        jsopencv_to_safe(info, pyobj_inputArr, inputArr, ArgInfo("inputArr", 0)) &&
        jsopencv_to_safe(info, pyobj_outputArr, outputArr, ArgInfo("outputArr", 1)) &&
        jsopencv_to_safe(info, pyobj_mode, mode, ArgInfo("mode", 0)))
    {
        ERRWRAP2(cv::img_hash::blockMeanHash(inputArr, outputArr, mode));
        return jsopencv_from(outputArr);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("blockMeanHash");

    return NULL;
}

static Napi::Value pyopencv_cv_img_hash_colorMomentHash(const Napi::CallbackInfo &info)
{
    using namespace cv::img_hash;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_inputArr = NULL;
    Mat inputArr;
    Napi::Value* pyobj_outputArr = NULL;
    Mat outputArr;

    const char* keywords[] = { "inputArr", "outputArr", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:colorMomentHash", (char**)keywords, &pyobj_inputArr, &pyobj_outputArr) &&
        jsopencv_to_safe(info, pyobj_inputArr, inputArr, ArgInfo("inputArr", 0)) &&
        jsopencv_to_safe(info, pyobj_outputArr, outputArr, ArgInfo("outputArr", 1)))
    {
        ERRWRAP2(cv::img_hash::colorMomentHash(inputArr, outputArr));
        return jsopencv_from(outputArr);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_inputArr = NULL;
    UMat inputArr;
    Napi::Value* pyobj_outputArr = NULL;
    UMat outputArr;

    const char* keywords[] = { "inputArr", "outputArr", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:colorMomentHash", (char**)keywords, &pyobj_inputArr, &pyobj_outputArr) &&
        jsopencv_to_safe(info, pyobj_inputArr, inputArr, ArgInfo("inputArr", 0)) &&
        jsopencv_to_safe(info, pyobj_outputArr, outputArr, ArgInfo("outputArr", 1)))
    {
        ERRWRAP2(cv::img_hash::colorMomentHash(inputArr, outputArr));
        return jsopencv_from(outputArr);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("colorMomentHash");

    return NULL;
}

static Napi::Value pyopencv_cv_img_hash_marrHildrethHash(const Napi::CallbackInfo &info)
{
    using namespace cv::img_hash;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_inputArr = NULL;
    Mat inputArr;
    Napi::Value* pyobj_outputArr = NULL;
    Mat outputArr;
    Napi::Value* pyobj_alpha = NULL;
    float alpha=2.0f;
    Napi::Value* pyobj_scale = NULL;
    float scale=1.0f;

    const char* keywords[] = { "inputArr", "outputArr", "alpha", "scale", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:marrHildrethHash", (char**)keywords, &pyobj_inputArr, &pyobj_outputArr, &pyobj_alpha, &pyobj_scale) &&
        jsopencv_to_safe(info, pyobj_inputArr, inputArr, ArgInfo("inputArr", 0)) &&
        jsopencv_to_safe(info, pyobj_outputArr, outputArr, ArgInfo("outputArr", 1)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)))
    {
        ERRWRAP2(cv::img_hash::marrHildrethHash(inputArr, outputArr, alpha, scale));
        return jsopencv_from(outputArr);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_inputArr = NULL;
    UMat inputArr;
    Napi::Value* pyobj_outputArr = NULL;
    UMat outputArr;
    Napi::Value* pyobj_alpha = NULL;
    float alpha=2.0f;
    Napi::Value* pyobj_scale = NULL;
    float scale=1.0f;

    const char* keywords[] = { "inputArr", "outputArr", "alpha", "scale", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:marrHildrethHash", (char**)keywords, &pyobj_inputArr, &pyobj_outputArr, &pyobj_alpha, &pyobj_scale) &&
        jsopencv_to_safe(info, pyobj_inputArr, inputArr, ArgInfo("inputArr", 0)) &&
        jsopencv_to_safe(info, pyobj_outputArr, outputArr, ArgInfo("outputArr", 1)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)))
    {
        ERRWRAP2(cv::img_hash::marrHildrethHash(inputArr, outputArr, alpha, scale));
        return jsopencv_from(outputArr);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("marrHildrethHash");

    return NULL;
}

static Napi::Value pyopencv_cv_img_hash_pHash(const Napi::CallbackInfo &info)
{
    using namespace cv::img_hash;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_inputArr = NULL;
    Mat inputArr;
    Napi::Value* pyobj_outputArr = NULL;
    Mat outputArr;

    const char* keywords[] = { "inputArr", "outputArr", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:pHash", (char**)keywords, &pyobj_inputArr, &pyobj_outputArr) &&
        jsopencv_to_safe(info, pyobj_inputArr, inputArr, ArgInfo("inputArr", 0)) &&
        jsopencv_to_safe(info, pyobj_outputArr, outputArr, ArgInfo("outputArr", 1)))
    {
        ERRWRAP2(cv::img_hash::pHash(inputArr, outputArr));
        return jsopencv_from(outputArr);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_inputArr = NULL;
    UMat inputArr;
    Napi::Value* pyobj_outputArr = NULL;
    UMat outputArr;

    const char* keywords[] = { "inputArr", "outputArr", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:pHash", (char**)keywords, &pyobj_inputArr, &pyobj_outputArr) &&
        jsopencv_to_safe(info, pyobj_inputArr, inputArr, ArgInfo("inputArr", 0)) &&
        jsopencv_to_safe(info, pyobj_outputArr, outputArr, ArgInfo("outputArr", 1)))
    {
        ERRWRAP2(cv::img_hash::pHash(inputArr, outputArr));
        return jsopencv_from(outputArr);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("pHash");

    return NULL;
}

static Napi::Value pyopencv_cv_img_hash_radialVarianceHash(const Napi::CallbackInfo &info)
{
    using namespace cv::img_hash;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_inputArr = NULL;
    Mat inputArr;
    Napi::Value* pyobj_outputArr = NULL;
    Mat outputArr;
    Napi::Value* pyobj_sigma = NULL;
    double sigma=1;
    Napi::Value* pyobj_numOfAngleLine = NULL;
    int numOfAngleLine=180;

    const char* keywords[] = { "inputArr", "outputArr", "sigma", "numOfAngleLine", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:radialVarianceHash", (char**)keywords, &pyobj_inputArr, &pyobj_outputArr, &pyobj_sigma, &pyobj_numOfAngleLine) &&
        jsopencv_to_safe(info, pyobj_inputArr, inputArr, ArgInfo("inputArr", 0)) &&
        jsopencv_to_safe(info, pyobj_outputArr, outputArr, ArgInfo("outputArr", 1)) &&
        jsopencv_to_safe(info, pyobj_sigma, sigma, ArgInfo("sigma", 0)) &&
        jsopencv_to_safe(info, pyobj_numOfAngleLine, numOfAngleLine, ArgInfo("numOfAngleLine", 0)))
    {
        ERRWRAP2(cv::img_hash::radialVarianceHash(inputArr, outputArr, sigma, numOfAngleLine));
        return jsopencv_from(outputArr);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_inputArr = NULL;
    UMat inputArr;
    Napi::Value* pyobj_outputArr = NULL;
    UMat outputArr;
    Napi::Value* pyobj_sigma = NULL;
    double sigma=1;
    Napi::Value* pyobj_numOfAngleLine = NULL;
    int numOfAngleLine=180;

    const char* keywords[] = { "inputArr", "outputArr", "sigma", "numOfAngleLine", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:radialVarianceHash", (char**)keywords, &pyobj_inputArr, &pyobj_outputArr, &pyobj_sigma, &pyobj_numOfAngleLine) &&
        jsopencv_to_safe(info, pyobj_inputArr, inputArr, ArgInfo("inputArr", 0)) &&
        jsopencv_to_safe(info, pyobj_outputArr, outputArr, ArgInfo("outputArr", 1)) &&
        jsopencv_to_safe(info, pyobj_sigma, sigma, ArgInfo("sigma", 0)) &&
        jsopencv_to_safe(info, pyobj_numOfAngleLine, numOfAngleLine, ArgInfo("numOfAngleLine", 0)))
    {
        ERRWRAP2(cv::img_hash::radialVarianceHash(inputArr, outputArr, sigma, numOfAngleLine));
        return jsopencv_from(outputArr);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("radialVarianceHash");

    return NULL;
}

static Napi::Value pyopencv_cv_intensity_transform_BIMEF(const Napi::CallbackInfo &info)
{
    using namespace cv::intensity_transform;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_input = NULL;
    Mat input;
    Napi::Value* pyobj_output = NULL;
    Mat output;
    Napi::Value* pyobj_mu = NULL;
    float mu=0.5f;
    Napi::Value* pyobj_a = NULL;
    float a=-0.3293f;
    Napi::Value* pyobj_b = NULL;
    float b=1.1258f;

    const char* keywords[] = { "input", "output", "mu", "a", "b", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOO:BIMEF", (char**)keywords, &pyobj_input, &pyobj_output, &pyobj_mu, &pyobj_a, &pyobj_b) &&
        jsopencv_to_safe(info, pyobj_input, input, ArgInfo("input", 0)) &&
        jsopencv_to_safe(info, pyobj_output, output, ArgInfo("output", 1)) &&
        jsopencv_to_safe(info, pyobj_mu, mu, ArgInfo("mu", 0)) &&
        jsopencv_to_safe(info, pyobj_a, a, ArgInfo("a", 0)) &&
        jsopencv_to_safe(info, pyobj_b, b, ArgInfo("b", 0)))
    {
        ERRWRAP2(cv::intensity_transform::BIMEF(input, output, mu, a, b));
        return jsopencv_from(output);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_input = NULL;
    UMat input;
    Napi::Value* pyobj_output = NULL;
    UMat output;
    Napi::Value* pyobj_mu = NULL;
    float mu=0.5f;
    Napi::Value* pyobj_a = NULL;
    float a=-0.3293f;
    Napi::Value* pyobj_b = NULL;
    float b=1.1258f;

    const char* keywords[] = { "input", "output", "mu", "a", "b", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOO:BIMEF", (char**)keywords, &pyobj_input, &pyobj_output, &pyobj_mu, &pyobj_a, &pyobj_b) &&
        jsopencv_to_safe(info, pyobj_input, input, ArgInfo("input", 0)) &&
        jsopencv_to_safe(info, pyobj_output, output, ArgInfo("output", 1)) &&
        jsopencv_to_safe(info, pyobj_mu, mu, ArgInfo("mu", 0)) &&
        jsopencv_to_safe(info, pyobj_a, a, ArgInfo("a", 0)) &&
        jsopencv_to_safe(info, pyobj_b, b, ArgInfo("b", 0)))
    {
        ERRWRAP2(cv::intensity_transform::BIMEF(input, output, mu, a, b));
        return jsopencv_from(output);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("BIMEF");

    return NULL;
}

static Napi::Value pyopencv_cv_intensity_transform_BIMEF2(const Napi::CallbackInfo &info)
{
    using namespace cv::intensity_transform;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_input = NULL;
    Mat input;
    Napi::Value* pyobj_output = NULL;
    Mat output;
    Napi::Value* pyobj_k = NULL;
    float k=0.f;
    Napi::Value* pyobj_mu = NULL;
    float mu=0.f;
    Napi::Value* pyobj_a = NULL;
    float a=0.f;
    Napi::Value* pyobj_b = NULL;
    float b=0.f;

    const char* keywords[] = { "input", "k", "mu", "a", "b", "output", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|O:BIMEF2", (char**)keywords, &pyobj_input, &pyobj_k, &pyobj_mu, &pyobj_a, &pyobj_b, &pyobj_output) &&
        jsopencv_to_safe(info, pyobj_input, input, ArgInfo("input", 0)) &&
        jsopencv_to_safe(info, pyobj_output, output, ArgInfo("output", 1)) &&
        jsopencv_to_safe(info, pyobj_k, k, ArgInfo("k", 0)) &&
        jsopencv_to_safe(info, pyobj_mu, mu, ArgInfo("mu", 0)) &&
        jsopencv_to_safe(info, pyobj_a, a, ArgInfo("a", 0)) &&
        jsopencv_to_safe(info, pyobj_b, b, ArgInfo("b", 0)))
    {
        ERRWRAP2(cv::intensity_transform::BIMEF(input, output, k, mu, a, b));
        return jsopencv_from(output);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_input = NULL;
    UMat input;
    Napi::Value* pyobj_output = NULL;
    UMat output;
    Napi::Value* pyobj_k = NULL;
    float k=0.f;
    Napi::Value* pyobj_mu = NULL;
    float mu=0.f;
    Napi::Value* pyobj_a = NULL;
    float a=0.f;
    Napi::Value* pyobj_b = NULL;
    float b=0.f;

    const char* keywords[] = { "input", "k", "mu", "a", "b", "output", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|O:BIMEF2", (char**)keywords, &pyobj_input, &pyobj_k, &pyobj_mu, &pyobj_a, &pyobj_b, &pyobj_output) &&
        jsopencv_to_safe(info, pyobj_input, input, ArgInfo("input", 0)) &&
        jsopencv_to_safe(info, pyobj_output, output, ArgInfo("output", 1)) &&
        jsopencv_to_safe(info, pyobj_k, k, ArgInfo("k", 0)) &&
        jsopencv_to_safe(info, pyobj_mu, mu, ArgInfo("mu", 0)) &&
        jsopencv_to_safe(info, pyobj_a, a, ArgInfo("a", 0)) &&
        jsopencv_to_safe(info, pyobj_b, b, ArgInfo("b", 0)))
    {
        ERRWRAP2(cv::intensity_transform::BIMEF(input, output, k, mu, a, b));
        return jsopencv_from(output);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("BIMEF2");

    return NULL;
}

static Napi::Value pyopencv_cv_intensity_transform_autoscaling(const Napi::CallbackInfo &info)
{
    using namespace cv::intensity_transform;

    Napi::Value* pyobj_input = NULL;
    Mat input;
    Napi::Value* pyobj_output = NULL;
    Mat output;

    const char* keywords[] = { "input", "output", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:autoscaling", (char**)keywords, &pyobj_input, &pyobj_output) &&
        jsopencv_to_safe(info, pyobj_input, input, ArgInfo("input", 0)) &&
        jsopencv_to_safe(info, pyobj_output, output, ArgInfo("output", 0)))
    {
        ERRWRAP2(cv::intensity_transform::autoscaling(input, output));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_intensity_transform_contrastStretching(const Napi::CallbackInfo &info)
{
    using namespace cv::intensity_transform;

    Napi::Value* pyobj_input = NULL;
    Mat input;
    Napi::Value* pyobj_output = NULL;
    Mat output;
    Napi::Value* pyobj_r1 = NULL;
    int r1=0;
    Napi::Value* pyobj_s1 = NULL;
    int s1=0;
    Napi::Value* pyobj_r2 = NULL;
    int r2=0;
    Napi::Value* pyobj_s2 = NULL;
    int s2=0;

    const char* keywords[] = { "input", "output", "r1", "s1", "r2", "s2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOO:contrastStretching", (char**)keywords, &pyobj_input, &pyobj_output, &pyobj_r1, &pyobj_s1, &pyobj_r2, &pyobj_s2) &&
        jsopencv_to_safe(info, pyobj_input, input, ArgInfo("input", 0)) &&
        jsopencv_to_safe(info, pyobj_output, output, ArgInfo("output", 0)) &&
        jsopencv_to_safe(info, pyobj_r1, r1, ArgInfo("r1", 0)) &&
        jsopencv_to_safe(info, pyobj_s1, s1, ArgInfo("s1", 0)) &&
        jsopencv_to_safe(info, pyobj_r2, r2, ArgInfo("r2", 0)) &&
        jsopencv_to_safe(info, pyobj_s2, s2, ArgInfo("s2", 0)))
    {
        ERRWRAP2(cv::intensity_transform::contrastStretching(input, output, r1, s1, r2, s2));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_intensity_transform_gammaCorrection(const Napi::CallbackInfo &info)
{
    using namespace cv::intensity_transform;

    Napi::Value* pyobj_input = NULL;
    Mat input;
    Napi::Value* pyobj_output = NULL;
    Mat output;
    Napi::Value* pyobj_gamma = NULL;
    float gamma=0.f;

    const char* keywords[] = { "input", "output", "gamma", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:gammaCorrection", (char**)keywords, &pyobj_input, &pyobj_output, &pyobj_gamma) &&
        jsopencv_to_safe(info, pyobj_input, input, ArgInfo("input", 0)) &&
        jsopencv_to_safe(info, pyobj_output, output, ArgInfo("output", 0)) &&
        jsopencv_to_safe(info, pyobj_gamma, gamma, ArgInfo("gamma", 0)))
    {
        ERRWRAP2(cv::intensity_transform::gammaCorrection(input, output, gamma));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_intensity_transform_logTransform(const Napi::CallbackInfo &info)
{
    using namespace cv::intensity_transform;

    Napi::Value* pyobj_input = NULL;
    Mat input;
    Napi::Value* pyobj_output = NULL;
    Mat output;

    const char* keywords[] = { "input", "output", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:logTransform", (char**)keywords, &pyobj_input, &pyobj_output) &&
        jsopencv_to_safe(info, pyobj_input, input, ArgInfo("input", 0)) &&
        jsopencv_to_safe(info, pyobj_output, output, ArgInfo("output", 0)))
    {
        ERRWRAP2(cv::intensity_transform::logTransform(input, output));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ipp_getIppVersion(const Napi::CallbackInfo &info)
{
    using namespace cv::ipp;

    String retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ipp::getIppVersion());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ipp_setUseIPP(const Napi::CallbackInfo &info)
{
    using namespace cv::ipp;

    Napi::Value* pyobj_flag = NULL;
    bool flag=0;

    const char* keywords[] = { "flag", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:setUseIPP", (char**)keywords, &pyobj_flag) &&
        jsopencv_to_safe(info, pyobj_flag, flag, ArgInfo("flag", 0)))
    {
        ERRWRAP2(cv::ipp::setUseIPP(flag));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ipp_setUseIPP_NotExact(const Napi::CallbackInfo &info)
{
    using namespace cv::ipp;

    Napi::Value* pyobj_flag = NULL;
    bool flag=0;

    const char* keywords[] = { "flag", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:setUseIPP_NotExact", (char**)keywords, &pyobj_flag) &&
        jsopencv_to_safe(info, pyobj_flag, flag, ArgInfo("flag", 0)))
    {
        ERRWRAP2(cv::ipp::setUseIPP_NotExact(flag));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ipp_useIPP(const Napi::CallbackInfo &info)
{
    using namespace cv::ipp;

    bool retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ipp::useIPP());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ipp_useIPP_NotExact(const Napi::CallbackInfo &info)
{
    using namespace cv::ipp;

    bool retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ipp::useIPP_NotExact());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_legacy_MultiTracker_create(const Napi::CallbackInfo &info)
{
    using namespace cv::legacy;

    Ptr<MultiTracker> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::legacy::MultiTracker::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_legacy_TrackerBoosting_create(const Napi::CallbackInfo &info)
{
    using namespace cv::legacy;

    Ptr<legacy::TrackerBoosting> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::legacy::TrackerBoosting::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_legacy_TrackerCSRT_create(const Napi::CallbackInfo &info)
{
    using namespace cv::legacy;

    Ptr<legacy::TrackerCSRT> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::legacy::TrackerCSRT::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_legacy_TrackerKCF_create(const Napi::CallbackInfo &info)
{
    using namespace cv::legacy;

    Ptr<legacy::TrackerKCF> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::legacy::TrackerKCF::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_legacy_TrackerMIL_create(const Napi::CallbackInfo &info)
{
    using namespace cv::legacy;

    Ptr<legacy::TrackerMIL> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::legacy::TrackerMIL::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_legacy_TrackerMOSSE_create(const Napi::CallbackInfo &info)
{
    using namespace cv::legacy;

    Ptr<legacy::TrackerMOSSE> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::legacy::TrackerMOSSE::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_legacy_TrackerMedianFlow_create(const Napi::CallbackInfo &info)
{
    using namespace cv::legacy;

    Ptr<legacy::TrackerMedianFlow> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::legacy::TrackerMedianFlow::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_legacy_TrackerTLD_create(const Napi::CallbackInfo &info)
{
    using namespace cv::legacy;

    Ptr<legacy::TrackerTLD> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::legacy::TrackerTLD::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_legacy_upgradeTrackingAPI(const Napi::CallbackInfo &info)
{
    using namespace cv::legacy;

    Napi::Value* pyobj_legacy_tracker = NULL;
    Ptr<legacy::Tracker> legacy_tracker;
    Ptr<cv::Tracker> retval;

    const char* keywords[] = { "legacy_tracker", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:upgradeTrackingAPI", (char**)keywords, &pyobj_legacy_tracker) &&
        jsopencv_to_safe(info, pyobj_legacy_tracker, legacy_tracker, ArgInfo("legacy_tracker", 0)))
    {
        ERRWRAP2(retval = cv::legacy::upgradeTrackingAPI(legacy_tracker));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_mcc_CCheckerDetector_create(const Napi::CallbackInfo &info)
{
    using namespace cv::mcc;

    Ptr<CCheckerDetector> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::mcc::CCheckerDetector::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_mcc_CCheckerDraw_create(const Napi::CallbackInfo &info)
{
    using namespace cv::mcc;

    Napi::Value* pyobj_pChecker = NULL;
    Ptr<CChecker> pChecker;
    Napi::Value* pyobj_color = NULL;
    Scalar color=CV_RGB(0, 250, 0);
    Napi::Value* pyobj_thickness = NULL;
    int thickness=2;
    Ptr<CCheckerDraw> retval;

    const char* keywords[] = { "pChecker", "color", "thickness", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:CCheckerDraw_create", (char**)keywords, &pyobj_pChecker, &pyobj_color, &pyobj_thickness) &&
        jsopencv_to_safe(info, pyobj_pChecker, pChecker, ArgInfo("pChecker", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_thickness, thickness, ArgInfo("thickness", 0)))
    {
        ERRWRAP2(retval = cv::mcc::CCheckerDraw::create(pChecker, color, thickness));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_mcc_CChecker_create(const Napi::CallbackInfo &info)
{
    using namespace cv::mcc;

    Ptr<CChecker> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::mcc::CChecker::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_mcc_DetectorParameters_create(const Napi::CallbackInfo &info)
{
    using namespace cv::mcc;

    Ptr<DetectorParameters> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::mcc::DetectorParameters::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ml_ANN_MLP_create(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    Ptr<ANN_MLP> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ml::ANN_MLP::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ml_ANN_MLP_load(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    Napi::Value* pyobj_filepath = NULL;
    String filepath;
    Ptr<ANN_MLP> retval;

    const char* keywords[] = { "filepath", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:ANN_MLP_load", (char**)keywords, &pyobj_filepath) &&
        jsopencv_to_safe(info, pyobj_filepath, filepath, ArgInfo("filepath", 0)))
    {
        ERRWRAP2(retval = cv::ml::ANN_MLP::load(filepath));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ml_Boost_create(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    Ptr<Boost> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ml::Boost::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ml_Boost_load(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    Napi::Value* pyobj_filepath = NULL;
    String filepath;
    Napi::Value* pyobj_nodeName = NULL;
    String nodeName;
    Ptr<Boost> retval;

    const char* keywords[] = { "filepath", "nodeName", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:Boost_load", (char**)keywords, &pyobj_filepath, &pyobj_nodeName) &&
        jsopencv_to_safe(info, pyobj_filepath, filepath, ArgInfo("filepath", 0)) &&
        jsopencv_to_safe(info, pyobj_nodeName, nodeName, ArgInfo("nodeName", 0)))
    {
        ERRWRAP2(retval = cv::ml::Boost::load(filepath, nodeName));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ml_DTrees_create(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    Ptr<DTrees> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ml::DTrees::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ml_DTrees_load(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    Napi::Value* pyobj_filepath = NULL;
    String filepath;
    Napi::Value* pyobj_nodeName = NULL;
    String nodeName;
    Ptr<DTrees> retval;

    const char* keywords[] = { "filepath", "nodeName", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:DTrees_load", (char**)keywords, &pyobj_filepath, &pyobj_nodeName) &&
        jsopencv_to_safe(info, pyobj_filepath, filepath, ArgInfo("filepath", 0)) &&
        jsopencv_to_safe(info, pyobj_nodeName, nodeName, ArgInfo("nodeName", 0)))
    {
        ERRWRAP2(retval = cv::ml::DTrees::load(filepath, nodeName));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ml_EM_create(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    Ptr<EM> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ml::EM::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ml_EM_load(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    Napi::Value* pyobj_filepath = NULL;
    String filepath;
    Napi::Value* pyobj_nodeName = NULL;
    String nodeName;
    Ptr<EM> retval;

    const char* keywords[] = { "filepath", "nodeName", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:EM_load", (char**)keywords, &pyobj_filepath, &pyobj_nodeName) &&
        jsopencv_to_safe(info, pyobj_filepath, filepath, ArgInfo("filepath", 0)) &&
        jsopencv_to_safe(info, pyobj_nodeName, nodeName, ArgInfo("nodeName", 0)))
    {
        ERRWRAP2(retval = cv::ml::EM::load(filepath, nodeName));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ml_KNearest_create(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    Ptr<KNearest> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ml::KNearest::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ml_KNearest_load(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    Napi::Value* pyobj_filepath = NULL;
    String filepath;
    Ptr<KNearest> retval;

    const char* keywords[] = { "filepath", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:KNearest_load", (char**)keywords, &pyobj_filepath) &&
        jsopencv_to_safe(info, pyobj_filepath, filepath, ArgInfo("filepath", 0)))
    {
        ERRWRAP2(retval = cv::ml::KNearest::load(filepath));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ml_LogisticRegression_create(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    Ptr<LogisticRegression> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ml::LogisticRegression::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ml_LogisticRegression_load(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    Napi::Value* pyobj_filepath = NULL;
    String filepath;
    Napi::Value* pyobj_nodeName = NULL;
    String nodeName;
    Ptr<LogisticRegression> retval;

    const char* keywords[] = { "filepath", "nodeName", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:LogisticRegression_load", (char**)keywords, &pyobj_filepath, &pyobj_nodeName) &&
        jsopencv_to_safe(info, pyobj_filepath, filepath, ArgInfo("filepath", 0)) &&
        jsopencv_to_safe(info, pyobj_nodeName, nodeName, ArgInfo("nodeName", 0)))
    {
        ERRWRAP2(retval = cv::ml::LogisticRegression::load(filepath, nodeName));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ml_NormalBayesClassifier_create(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    Ptr<NormalBayesClassifier> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ml::NormalBayesClassifier::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ml_NormalBayesClassifier_load(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    Napi::Value* pyobj_filepath = NULL;
    String filepath;
    Napi::Value* pyobj_nodeName = NULL;
    String nodeName;
    Ptr<NormalBayesClassifier> retval;

    const char* keywords[] = { "filepath", "nodeName", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:NormalBayesClassifier_load", (char**)keywords, &pyobj_filepath, &pyobj_nodeName) &&
        jsopencv_to_safe(info, pyobj_filepath, filepath, ArgInfo("filepath", 0)) &&
        jsopencv_to_safe(info, pyobj_nodeName, nodeName, ArgInfo("nodeName", 0)))
    {
        ERRWRAP2(retval = cv::ml::NormalBayesClassifier::load(filepath, nodeName));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ml_ParamGrid_create(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    Napi::Value* pyobj_minVal = NULL;
    double minVal=0.;
    Napi::Value* pyobj_maxVal = NULL;
    double maxVal=0.;
    Napi::Value* pyobj_logstep = NULL;
    double logstep=1.;
    Ptr<ParamGrid> retval;

    const char* keywords[] = { "minVal", "maxVal", "logstep", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOO:ParamGrid_create", (char**)keywords, &pyobj_minVal, &pyobj_maxVal, &pyobj_logstep) &&
        jsopencv_to_safe(info, pyobj_minVal, minVal, ArgInfo("minVal", 0)) &&
        jsopencv_to_safe(info, pyobj_maxVal, maxVal, ArgInfo("maxVal", 0)) &&
        jsopencv_to_safe(info, pyobj_logstep, logstep, ArgInfo("logstep", 0)))
    {
        ERRWRAP2(retval = cv::ml::ParamGrid::create(minVal, maxVal, logstep));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ml_RTrees_create(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    Ptr<RTrees> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ml::RTrees::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ml_RTrees_load(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    Napi::Value* pyobj_filepath = NULL;
    String filepath;
    Napi::Value* pyobj_nodeName = NULL;
    String nodeName;
    Ptr<RTrees> retval;

    const char* keywords[] = { "filepath", "nodeName", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:RTrees_load", (char**)keywords, &pyobj_filepath, &pyobj_nodeName) &&
        jsopencv_to_safe(info, pyobj_filepath, filepath, ArgInfo("filepath", 0)) &&
        jsopencv_to_safe(info, pyobj_nodeName, nodeName, ArgInfo("nodeName", 0)))
    {
        ERRWRAP2(retval = cv::ml::RTrees::load(filepath, nodeName));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ml_SVMSGD_create(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    Ptr<SVMSGD> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ml::SVMSGD::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ml_SVMSGD_load(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    Napi::Value* pyobj_filepath = NULL;
    String filepath;
    Napi::Value* pyobj_nodeName = NULL;
    String nodeName;
    Ptr<SVMSGD> retval;

    const char* keywords[] = { "filepath", "nodeName", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:SVMSGD_load", (char**)keywords, &pyobj_filepath, &pyobj_nodeName) &&
        jsopencv_to_safe(info, pyobj_filepath, filepath, ArgInfo("filepath", 0)) &&
        jsopencv_to_safe(info, pyobj_nodeName, nodeName, ArgInfo("nodeName", 0)))
    {
        ERRWRAP2(retval = cv::ml::SVMSGD::load(filepath, nodeName));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ml_SVM_create(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    Ptr<SVM> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ml::SVM::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ml_SVM_getDefaultGridPtr(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    Napi::Value* pyobj_param_id = NULL;
    int param_id=0;
    Ptr<ParamGrid> retval;

    const char* keywords[] = { "param_id", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:SVM_getDefaultGridPtr", (char**)keywords, &pyobj_param_id) &&
        jsopencv_to_safe(info, pyobj_param_id, param_id, ArgInfo("param_id", 0)))
    {
        ERRWRAP2(retval = cv::ml::SVM::getDefaultGridPtr(param_id));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ml_SVM_load(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    Napi::Value* pyobj_filepath = NULL;
    String filepath;
    Ptr<SVM> retval;

    const char* keywords[] = { "filepath", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:SVM_load", (char**)keywords, &pyobj_filepath) &&
        jsopencv_to_safe(info, pyobj_filepath, filepath, ArgInfo("filepath", 0)))
    {
        ERRWRAP2(retval = cv::ml::SVM::load(filepath));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ml_TrainData_create(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_samples = NULL;
    Mat samples;
    Napi::Value* pyobj_layout = NULL;
    int layout=0;
    Napi::Value* pyobj_responses = NULL;
    Mat responses;
    Napi::Value* pyobj_varIdx = NULL;
    Mat varIdx;
    Napi::Value* pyobj_sampleIdx = NULL;
    Mat sampleIdx;
    Napi::Value* pyobj_sampleWeights = NULL;
    Mat sampleWeights;
    Napi::Value* pyobj_varType = NULL;
    Mat varType;
    Ptr<TrainData> retval;

    const char* keywords[] = { "samples", "layout", "responses", "varIdx", "sampleIdx", "sampleWeights", "varType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:TrainData_create", (char**)keywords, &pyobj_samples, &pyobj_layout, &pyobj_responses, &pyobj_varIdx, &pyobj_sampleIdx, &pyobj_sampleWeights, &pyobj_varType) &&
        jsopencv_to_safe(info, pyobj_samples, samples, ArgInfo("samples", 0)) &&
        jsopencv_to_safe(info, pyobj_layout, layout, ArgInfo("layout", 0)) &&
        jsopencv_to_safe(info, pyobj_responses, responses, ArgInfo("responses", 0)) &&
        jsopencv_to_safe(info, pyobj_varIdx, varIdx, ArgInfo("varIdx", 0)) &&
        jsopencv_to_safe(info, pyobj_sampleIdx, sampleIdx, ArgInfo("sampleIdx", 0)) &&
        jsopencv_to_safe(info, pyobj_sampleWeights, sampleWeights, ArgInfo("sampleWeights", 0)) &&
        jsopencv_to_safe(info, pyobj_varType, varType, ArgInfo("varType", 0)))
    {
        ERRWRAP2(retval = cv::ml::TrainData::create(samples, layout, responses, varIdx, sampleIdx, sampleWeights, varType));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_samples = NULL;
    UMat samples;
    Napi::Value* pyobj_layout = NULL;
    int layout=0;
    Napi::Value* pyobj_responses = NULL;
    UMat responses;
    Napi::Value* pyobj_varIdx = NULL;
    UMat varIdx;
    Napi::Value* pyobj_sampleIdx = NULL;
    UMat sampleIdx;
    Napi::Value* pyobj_sampleWeights = NULL;
    UMat sampleWeights;
    Napi::Value* pyobj_varType = NULL;
    UMat varType;
    Ptr<TrainData> retval;

    const char* keywords[] = { "samples", "layout", "responses", "varIdx", "sampleIdx", "sampleWeights", "varType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:TrainData_create", (char**)keywords, &pyobj_samples, &pyobj_layout, &pyobj_responses, &pyobj_varIdx, &pyobj_sampleIdx, &pyobj_sampleWeights, &pyobj_varType) &&
        jsopencv_to_safe(info, pyobj_samples, samples, ArgInfo("samples", 0)) &&
        jsopencv_to_safe(info, pyobj_layout, layout, ArgInfo("layout", 0)) &&
        jsopencv_to_safe(info, pyobj_responses, responses, ArgInfo("responses", 0)) &&
        jsopencv_to_safe(info, pyobj_varIdx, varIdx, ArgInfo("varIdx", 0)) &&
        jsopencv_to_safe(info, pyobj_sampleIdx, sampleIdx, ArgInfo("sampleIdx", 0)) &&
        jsopencv_to_safe(info, pyobj_sampleWeights, sampleWeights, ArgInfo("sampleWeights", 0)) &&
        jsopencv_to_safe(info, pyobj_varType, varType, ArgInfo("varType", 0)))
    {
        ERRWRAP2(retval = cv::ml::TrainData::create(samples, layout, responses, varIdx, sampleIdx, sampleWeights, varType));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("TrainData_create");

    return NULL;
}

static Napi::Value pyopencv_cv_ml_TrainData_getSubMatrix(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    Napi::Value* pyobj_matrix = NULL;
    Mat matrix;
    Napi::Value* pyobj_idx = NULL;
    Mat idx;
    Napi::Value* pyobj_layout = NULL;
    int layout=0;
    Mat retval;

    const char* keywords[] = { "matrix", "idx", "layout", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:TrainData_getSubMatrix", (char**)keywords, &pyobj_matrix, &pyobj_idx, &pyobj_layout) &&
        jsopencv_to_safe(info, pyobj_matrix, matrix, ArgInfo("matrix", 0)) &&
        jsopencv_to_safe(info, pyobj_idx, idx, ArgInfo("idx", 0)) &&
        jsopencv_to_safe(info, pyobj_layout, layout, ArgInfo("layout", 0)))
    {
        ERRWRAP2(retval = cv::ml::TrainData::getSubMatrix(matrix, idx, layout));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ml_TrainData_getSubVector(const Napi::CallbackInfo &info)
{
    using namespace cv::ml;

    Napi::Value* pyobj_vec = NULL;
    Mat vec;
    Napi::Value* pyobj_idx = NULL;
    Mat idx;
    Mat retval;

    const char* keywords[] = { "vec", "idx", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:TrainData_getSubVector", (char**)keywords, &pyobj_vec, &pyobj_idx) &&
        jsopencv_to_safe(info, pyobj_vec, vec, ArgInfo("vec", 0)) &&
        jsopencv_to_safe(info, pyobj_idx, idx, ArgInfo("idx", 0)))
    {
        ERRWRAP2(retval = cv::ml::TrainData::getSubVector(vec, idx));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ocl_Device_getDefault(const Napi::CallbackInfo &info)
{
    using namespace cv::ocl;

    Device retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ocl::Device::getDefault());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ocl_finish(const Napi::CallbackInfo &info)
{
    using namespace cv::ocl;


    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(cv::ocl::finish());
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ocl_haveAmdBlas(const Napi::CallbackInfo &info)
{
    using namespace cv::ocl;

    bool retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ocl::haveAmdBlas());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ocl_haveAmdFft(const Napi::CallbackInfo &info)
{
    using namespace cv::ocl;

    bool retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ocl::haveAmdFft());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ocl_haveOpenCL(const Napi::CallbackInfo &info)
{
    using namespace cv::ocl;

    bool retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ocl::haveOpenCL());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ocl_setUseOpenCL(const Napi::CallbackInfo &info)
{
    using namespace cv::ocl;

    Napi::Value* pyobj_flag = NULL;
    bool flag=0;

    const char* keywords[] = { "flag", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:setUseOpenCL", (char**)keywords, &pyobj_flag) &&
        jsopencv_to_safe(info, pyobj_flag, flag, ArgInfo("flag", 0)))
    {
        ERRWRAP2(cv::ocl::setUseOpenCL(flag));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ocl_useOpenCL(const Napi::CallbackInfo &info)
{
    using namespace cv::ocl;

    bool retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ocl::useOpenCL());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_parallel_setParallelForBackend(const Napi::CallbackInfo &info)
{
    using namespace cv::parallel;

    Napi::Value* pyobj_backendName = NULL;
    std::string backendName;
    Napi::Value* pyobj_propagateNumThreads = NULL;
    bool propagateNumThreads=true;
    bool retval;

    const char* keywords[] = { "backendName", "propagateNumThreads", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:setParallelForBackend", (char**)keywords, &pyobj_backendName, &pyobj_propagateNumThreads) &&
        jsopencv_to_safe(info, pyobj_backendName, backendName, ArgInfo("backendName", 0)) &&
        jsopencv_to_safe(info, pyobj_propagateNumThreads, propagateNumThreads, ArgInfo("propagateNumThreads", 0)))
    {
        ERRWRAP2(retval = cv::parallel::setParallelForBackend(backendName, propagateNumThreads));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_plot_Plot2d_create(const Napi::CallbackInfo &info)
{
    using namespace cv::plot;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_data = NULL;
    Mat data;
    Ptr<Plot2d> retval;

    const char* keywords[] = { "data", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:Plot2d_create", (char**)keywords, &pyobj_data) &&
        jsopencv_to_safe(info, pyobj_data, data, ArgInfo("data", 0)))
    {
        ERRWRAP2(retval = cv::plot::Plot2d::create(data));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_data = NULL;
    UMat data;
    Ptr<Plot2d> retval;

    const char* keywords[] = { "data", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:Plot2d_create", (char**)keywords, &pyobj_data) &&
        jsopencv_to_safe(info, pyobj_data, data, ArgInfo("data", 0)))
    {
        ERRWRAP2(retval = cv::plot::Plot2d::create(data));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_dataX = NULL;
    Mat dataX;
    Napi::Value* pyobj_dataY = NULL;
    Mat dataY;
    Ptr<Plot2d> retval;

    const char* keywords[] = { "dataX", "dataY", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:Plot2d_create", (char**)keywords, &pyobj_dataX, &pyobj_dataY) &&
        jsopencv_to_safe(info, pyobj_dataX, dataX, ArgInfo("dataX", 0)) &&
        jsopencv_to_safe(info, pyobj_dataY, dataY, ArgInfo("dataY", 0)))
    {
        ERRWRAP2(retval = cv::plot::Plot2d::create(dataX, dataY));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_dataX = NULL;
    UMat dataX;
    Napi::Value* pyobj_dataY = NULL;
    UMat dataY;
    Ptr<Plot2d> retval;

    const char* keywords[] = { "dataX", "dataY", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:Plot2d_create", (char**)keywords, &pyobj_dataX, &pyobj_dataY) &&
        jsopencv_to_safe(info, pyobj_dataX, dataX, ArgInfo("dataX", 0)) &&
        jsopencv_to_safe(info, pyobj_dataY, dataY, ArgInfo("dataY", 0)))
    {
        ERRWRAP2(retval = cv::plot::Plot2d::create(dataX, dataY));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("Plot2d_create");

    return NULL;
}

static Napi::Value pyopencv_cv_quality_QualityBRISQUE_compute(const Napi::CallbackInfo &info)
{
    using namespace cv::quality;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_model_file_path = NULL;
    String model_file_path;
    Napi::Value* pyobj_range_file_path = NULL;
    String range_file_path;
    cv::Scalar retval;

    const char* keywords[] = { "img", "model_file_path", "range_file_path", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:QualityBRISQUE_compute", (char**)keywords, &pyobj_img, &pyobj_model_file_path, &pyobj_range_file_path) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_model_file_path, model_file_path, ArgInfo("model_file_path", 0)) &&
        jsopencv_to_safe(info, pyobj_range_file_path, range_file_path, ArgInfo("range_file_path", 0)))
    {
        ERRWRAP2(retval = cv::quality::QualityBRISQUE::compute(img, model_file_path, range_file_path));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_model_file_path = NULL;
    String model_file_path;
    Napi::Value* pyobj_range_file_path = NULL;
    String range_file_path;
    cv::Scalar retval;

    const char* keywords[] = { "img", "model_file_path", "range_file_path", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:QualityBRISQUE_compute", (char**)keywords, &pyobj_img, &pyobj_model_file_path, &pyobj_range_file_path) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_model_file_path, model_file_path, ArgInfo("model_file_path", 0)) &&
        jsopencv_to_safe(info, pyobj_range_file_path, range_file_path, ArgInfo("range_file_path", 0)))
    {
        ERRWRAP2(retval = cv::quality::QualityBRISQUE::compute(img, model_file_path, range_file_path));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("QualityBRISQUE_compute");

    return NULL;
}

static Napi::Value pyopencv_cv_quality_QualityBRISQUE_computeFeatures(const Napi::CallbackInfo &info)
{
    using namespace cv::quality;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_features = NULL;
    Mat features;

    const char* keywords[] = { "img", "features", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:QualityBRISQUE_computeFeatures", (char**)keywords, &pyobj_img, &pyobj_features) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_features, features, ArgInfo("features", 1)))
    {
        ERRWRAP2(cv::quality::QualityBRISQUE::computeFeatures(img, features));
        return jsopencv_from(features);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_features = NULL;
    UMat features;

    const char* keywords[] = { "img", "features", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:QualityBRISQUE_computeFeatures", (char**)keywords, &pyobj_img, &pyobj_features) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_features, features, ArgInfo("features", 1)))
    {
        ERRWRAP2(cv::quality::QualityBRISQUE::computeFeatures(img, features));
        return jsopencv_from(features);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("QualityBRISQUE_computeFeatures");

    return NULL;
}

static Napi::Value pyopencv_cv_quality_QualityBRISQUE_create(const Napi::CallbackInfo &info)
{
    using namespace cv::quality;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_model_file_path = NULL;
    String model_file_path;
    Napi::Value* pyobj_range_file_path = NULL;
    String range_file_path;
    Ptr<QualityBRISQUE> retval;

    const char* keywords[] = { "model_file_path", "range_file_path", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:QualityBRISQUE_create", (char**)keywords, &pyobj_model_file_path, &pyobj_range_file_path) &&
        jsopencv_to_safe(info, pyobj_model_file_path, model_file_path, ArgInfo("model_file_path", 0)) &&
        jsopencv_to_safe(info, pyobj_range_file_path, range_file_path, ArgInfo("range_file_path", 0)))
    {
        ERRWRAP2(retval = cv::quality::QualityBRISQUE::create(model_file_path, range_file_path));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_model = NULL;
    Ptr<ml::SVM> model;
    Napi::Value* pyobj_range = NULL;
    Mat range;
    Ptr<QualityBRISQUE> retval;

    const char* keywords[] = { "model", "range", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:QualityBRISQUE_create", (char**)keywords, &pyobj_model, &pyobj_range) &&
        jsopencv_to_safe(info, pyobj_model, model, ArgInfo("model", 0)) &&
        jsopencv_to_safe(info, pyobj_range, range, ArgInfo("range", 0)))
    {
        ERRWRAP2(retval = cv::quality::QualityBRISQUE::create(model, range));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("QualityBRISQUE_create");

    return NULL;
}

static Napi::Value pyopencv_cv_quality_QualityGMSD_compute(const Napi::CallbackInfo &info)
{
    using namespace cv::quality;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_ref = NULL;
    Mat ref;
    Napi::Value* pyobj_cmp = NULL;
    Mat cmp;
    Napi::Value* pyobj_qualityMap = NULL;
    Mat qualityMap;
    cv::Scalar retval;

    const char* keywords[] = { "ref", "cmp", "qualityMap", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:QualityGMSD_compute", (char**)keywords, &pyobj_ref, &pyobj_cmp, &pyobj_qualityMap) &&
        jsopencv_to_safe(info, pyobj_ref, ref, ArgInfo("ref", 0)) &&
        jsopencv_to_safe(info, pyobj_cmp, cmp, ArgInfo("cmp", 0)) &&
        jsopencv_to_safe(info, pyobj_qualityMap, qualityMap, ArgInfo("qualityMap", 1)))
    {
        ERRWRAP2(retval = cv::quality::QualityGMSD::compute(ref, cmp, qualityMap));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(qualityMap));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_ref = NULL;
    UMat ref;
    Napi::Value* pyobj_cmp = NULL;
    UMat cmp;
    Napi::Value* pyobj_qualityMap = NULL;
    UMat qualityMap;
    cv::Scalar retval;

    const char* keywords[] = { "ref", "cmp", "qualityMap", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:QualityGMSD_compute", (char**)keywords, &pyobj_ref, &pyobj_cmp, &pyobj_qualityMap) &&
        jsopencv_to_safe(info, pyobj_ref, ref, ArgInfo("ref", 0)) &&
        jsopencv_to_safe(info, pyobj_cmp, cmp, ArgInfo("cmp", 0)) &&
        jsopencv_to_safe(info, pyobj_qualityMap, qualityMap, ArgInfo("qualityMap", 1)))
    {
        ERRWRAP2(retval = cv::quality::QualityGMSD::compute(ref, cmp, qualityMap));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(qualityMap));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("QualityGMSD_compute");

    return NULL;
}

static Napi::Value pyopencv_cv_quality_QualityGMSD_create(const Napi::CallbackInfo &info)
{
    using namespace cv::quality;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_ref = NULL;
    Mat ref;
    Ptr<QualityGMSD> retval;

    const char* keywords[] = { "ref", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:QualityGMSD_create", (char**)keywords, &pyobj_ref) &&
        jsopencv_to_safe(info, pyobj_ref, ref, ArgInfo("ref", 0)))
    {
        ERRWRAP2(retval = cv::quality::QualityGMSD::create(ref));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_ref = NULL;
    UMat ref;
    Ptr<QualityGMSD> retval;

    const char* keywords[] = { "ref", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:QualityGMSD_create", (char**)keywords, &pyobj_ref) &&
        jsopencv_to_safe(info, pyobj_ref, ref, ArgInfo("ref", 0)))
    {
        ERRWRAP2(retval = cv::quality::QualityGMSD::create(ref));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("QualityGMSD_create");

    return NULL;
}

static Napi::Value pyopencv_cv_quality_QualityMSE_compute(const Napi::CallbackInfo &info)
{
    using namespace cv::quality;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_ref = NULL;
    Mat ref;
    Napi::Value* pyobj_cmp = NULL;
    Mat cmp;
    Napi::Value* pyobj_qualityMap = NULL;
    Mat qualityMap;
    cv::Scalar retval;

    const char* keywords[] = { "ref", "cmp", "qualityMap", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:QualityMSE_compute", (char**)keywords, &pyobj_ref, &pyobj_cmp, &pyobj_qualityMap) &&
        jsopencv_to_safe(info, pyobj_ref, ref, ArgInfo("ref", 0)) &&
        jsopencv_to_safe(info, pyobj_cmp, cmp, ArgInfo("cmp", 0)) &&
        jsopencv_to_safe(info, pyobj_qualityMap, qualityMap, ArgInfo("qualityMap", 1)))
    {
        ERRWRAP2(retval = cv::quality::QualityMSE::compute(ref, cmp, qualityMap));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(qualityMap));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_ref = NULL;
    UMat ref;
    Napi::Value* pyobj_cmp = NULL;
    UMat cmp;
    Napi::Value* pyobj_qualityMap = NULL;
    UMat qualityMap;
    cv::Scalar retval;

    const char* keywords[] = { "ref", "cmp", "qualityMap", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:QualityMSE_compute", (char**)keywords, &pyobj_ref, &pyobj_cmp, &pyobj_qualityMap) &&
        jsopencv_to_safe(info, pyobj_ref, ref, ArgInfo("ref", 0)) &&
        jsopencv_to_safe(info, pyobj_cmp, cmp, ArgInfo("cmp", 0)) &&
        jsopencv_to_safe(info, pyobj_qualityMap, qualityMap, ArgInfo("qualityMap", 1)))
    {
        ERRWRAP2(retval = cv::quality::QualityMSE::compute(ref, cmp, qualityMap));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(qualityMap));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("QualityMSE_compute");

    return NULL;
}

static Napi::Value pyopencv_cv_quality_QualityMSE_create(const Napi::CallbackInfo &info)
{
    using namespace cv::quality;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_ref = NULL;
    Mat ref;
    Ptr<QualityMSE> retval;

    const char* keywords[] = { "ref", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:QualityMSE_create", (char**)keywords, &pyobj_ref) &&
        jsopencv_to_safe(info, pyobj_ref, ref, ArgInfo("ref", 0)))
    {
        ERRWRAP2(retval = cv::quality::QualityMSE::create(ref));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_ref = NULL;
    UMat ref;
    Ptr<QualityMSE> retval;

    const char* keywords[] = { "ref", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:QualityMSE_create", (char**)keywords, &pyobj_ref) &&
        jsopencv_to_safe(info, pyobj_ref, ref, ArgInfo("ref", 0)))
    {
        ERRWRAP2(retval = cv::quality::QualityMSE::create(ref));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("QualityMSE_create");

    return NULL;
}

static Napi::Value pyopencv_cv_quality_QualityPSNR_compute(const Napi::CallbackInfo &info)
{
    using namespace cv::quality;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_ref = NULL;
    Mat ref;
    Napi::Value* pyobj_cmp = NULL;
    Mat cmp;
    Napi::Value* pyobj_qualityMap = NULL;
    Mat qualityMap;
    Napi::Value* pyobj_maxPixelValue = NULL;
    double maxPixelValue=QualityPSNR::MAX_PIXEL_VALUE_DEFAULT;
    cv::Scalar retval;

    const char* keywords[] = { "ref", "cmp", "qualityMap", "maxPixelValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:QualityPSNR_compute", (char**)keywords, &pyobj_ref, &pyobj_cmp, &pyobj_qualityMap, &pyobj_maxPixelValue) &&
        jsopencv_to_safe(info, pyobj_ref, ref, ArgInfo("ref", 0)) &&
        jsopencv_to_safe(info, pyobj_cmp, cmp, ArgInfo("cmp", 0)) &&
        jsopencv_to_safe(info, pyobj_qualityMap, qualityMap, ArgInfo("qualityMap", 1)) &&
        jsopencv_to_safe(info, pyobj_maxPixelValue, maxPixelValue, ArgInfo("maxPixelValue", 0)))
    {
        ERRWRAP2(retval = cv::quality::QualityPSNR::compute(ref, cmp, qualityMap, maxPixelValue));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(qualityMap));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_ref = NULL;
    UMat ref;
    Napi::Value* pyobj_cmp = NULL;
    UMat cmp;
    Napi::Value* pyobj_qualityMap = NULL;
    UMat qualityMap;
    Napi::Value* pyobj_maxPixelValue = NULL;
    double maxPixelValue=QualityPSNR::MAX_PIXEL_VALUE_DEFAULT;
    cv::Scalar retval;

    const char* keywords[] = { "ref", "cmp", "qualityMap", "maxPixelValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:QualityPSNR_compute", (char**)keywords, &pyobj_ref, &pyobj_cmp, &pyobj_qualityMap, &pyobj_maxPixelValue) &&
        jsopencv_to_safe(info, pyobj_ref, ref, ArgInfo("ref", 0)) &&
        jsopencv_to_safe(info, pyobj_cmp, cmp, ArgInfo("cmp", 0)) &&
        jsopencv_to_safe(info, pyobj_qualityMap, qualityMap, ArgInfo("qualityMap", 1)) &&
        jsopencv_to_safe(info, pyobj_maxPixelValue, maxPixelValue, ArgInfo("maxPixelValue", 0)))
    {
        ERRWRAP2(retval = cv::quality::QualityPSNR::compute(ref, cmp, qualityMap, maxPixelValue));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(qualityMap));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("QualityPSNR_compute");

    return NULL;
}

static Napi::Value pyopencv_cv_quality_QualityPSNR_create(const Napi::CallbackInfo &info)
{
    using namespace cv::quality;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_ref = NULL;
    Mat ref;
    Napi::Value* pyobj_maxPixelValue = NULL;
    double maxPixelValue=QualityPSNR::MAX_PIXEL_VALUE_DEFAULT;
    Ptr<QualityPSNR> retval;

    const char* keywords[] = { "ref", "maxPixelValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:QualityPSNR_create", (char**)keywords, &pyobj_ref, &pyobj_maxPixelValue) &&
        jsopencv_to_safe(info, pyobj_ref, ref, ArgInfo("ref", 0)) &&
        jsopencv_to_safe(info, pyobj_maxPixelValue, maxPixelValue, ArgInfo("maxPixelValue", 0)))
    {
        ERRWRAP2(retval = cv::quality::QualityPSNR::create(ref, maxPixelValue));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_ref = NULL;
    UMat ref;
    Napi::Value* pyobj_maxPixelValue = NULL;
    double maxPixelValue=QualityPSNR::MAX_PIXEL_VALUE_DEFAULT;
    Ptr<QualityPSNR> retval;

    const char* keywords[] = { "ref", "maxPixelValue", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:QualityPSNR_create", (char**)keywords, &pyobj_ref, &pyobj_maxPixelValue) &&
        jsopencv_to_safe(info, pyobj_ref, ref, ArgInfo("ref", 0)) &&
        jsopencv_to_safe(info, pyobj_maxPixelValue, maxPixelValue, ArgInfo("maxPixelValue", 0)))
    {
        ERRWRAP2(retval = cv::quality::QualityPSNR::create(ref, maxPixelValue));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("QualityPSNR_create");

    return NULL;
}

static Napi::Value pyopencv_cv_quality_QualitySSIM_compute(const Napi::CallbackInfo &info)
{
    using namespace cv::quality;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_ref = NULL;
    Mat ref;
    Napi::Value* pyobj_cmp = NULL;
    Mat cmp;
    Napi::Value* pyobj_qualityMap = NULL;
    Mat qualityMap;
    cv::Scalar retval;

    const char* keywords[] = { "ref", "cmp", "qualityMap", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:QualitySSIM_compute", (char**)keywords, &pyobj_ref, &pyobj_cmp, &pyobj_qualityMap) &&
        jsopencv_to_safe(info, pyobj_ref, ref, ArgInfo("ref", 0)) &&
        jsopencv_to_safe(info, pyobj_cmp, cmp, ArgInfo("cmp", 0)) &&
        jsopencv_to_safe(info, pyobj_qualityMap, qualityMap, ArgInfo("qualityMap", 1)))
    {
        ERRWRAP2(retval = cv::quality::QualitySSIM::compute(ref, cmp, qualityMap));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(qualityMap));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_ref = NULL;
    UMat ref;
    Napi::Value* pyobj_cmp = NULL;
    UMat cmp;
    Napi::Value* pyobj_qualityMap = NULL;
    UMat qualityMap;
    cv::Scalar retval;

    const char* keywords[] = { "ref", "cmp", "qualityMap", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:QualitySSIM_compute", (char**)keywords, &pyobj_ref, &pyobj_cmp, &pyobj_qualityMap) &&
        jsopencv_to_safe(info, pyobj_ref, ref, ArgInfo("ref", 0)) &&
        jsopencv_to_safe(info, pyobj_cmp, cmp, ArgInfo("cmp", 0)) &&
        jsopencv_to_safe(info, pyobj_qualityMap, qualityMap, ArgInfo("qualityMap", 1)))
    {
        ERRWRAP2(retval = cv::quality::QualitySSIM::compute(ref, cmp, qualityMap));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(qualityMap));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("QualitySSIM_compute");

    return NULL;
}

static Napi::Value pyopencv_cv_quality_QualitySSIM_create(const Napi::CallbackInfo &info)
{
    using namespace cv::quality;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_ref = NULL;
    Mat ref;
    Ptr<QualitySSIM> retval;

    const char* keywords[] = { "ref", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:QualitySSIM_create", (char**)keywords, &pyobj_ref) &&
        jsopencv_to_safe(info, pyobj_ref, ref, ArgInfo("ref", 0)))
    {
        ERRWRAP2(retval = cv::quality::QualitySSIM::create(ref));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_ref = NULL;
    UMat ref;
    Ptr<QualitySSIM> retval;

    const char* keywords[] = { "ref", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:QualitySSIM_create", (char**)keywords, &pyobj_ref) &&
        jsopencv_to_safe(info, pyobj_ref, ref, ArgInfo("ref", 0)))
    {
        ERRWRAP2(retval = cv::quality::QualitySSIM::create(ref));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("QualitySSIM_create");

    return NULL;
}

static Napi::Value pyopencv_cv_rapid_GOSTracker_create(const Napi::CallbackInfo &info)
{
    using namespace cv::rapid;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_pts3d = NULL;
    Mat pts3d;
    Napi::Value* pyobj_tris = NULL;
    Mat tris;
    Napi::Value* pyobj_histBins = NULL;
    int histBins=4;
    Napi::Value* pyobj_sobelThesh = NULL;
    uchar sobelThesh=10;
    Ptr<OLSTracker> retval;

    const char* keywords[] = { "pts3d", "tris", "histBins", "sobelThesh", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:GOSTracker_create", (char**)keywords, &pyobj_pts3d, &pyobj_tris, &pyobj_histBins, &pyobj_sobelThesh) &&
        jsopencv_to_safe(info, pyobj_pts3d, pts3d, ArgInfo("pts3d", 0)) &&
        jsopencv_to_safe(info, pyobj_tris, tris, ArgInfo("tris", 0)) &&
        jsopencv_to_safe(info, pyobj_histBins, histBins, ArgInfo("histBins", 0)) &&
        jsopencv_to_safe(info, pyobj_sobelThesh, sobelThesh, ArgInfo("sobelThesh", 0)))
    {
        ERRWRAP2(retval = cv::rapid::GOSTracker::create(pts3d, tris, histBins, sobelThesh));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_pts3d = NULL;
    UMat pts3d;
    Napi::Value* pyobj_tris = NULL;
    UMat tris;
    Napi::Value* pyobj_histBins = NULL;
    int histBins=4;
    Napi::Value* pyobj_sobelThesh = NULL;
    uchar sobelThesh=10;
    Ptr<OLSTracker> retval;

    const char* keywords[] = { "pts3d", "tris", "histBins", "sobelThesh", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:GOSTracker_create", (char**)keywords, &pyobj_pts3d, &pyobj_tris, &pyobj_histBins, &pyobj_sobelThesh) &&
        jsopencv_to_safe(info, pyobj_pts3d, pts3d, ArgInfo("pts3d", 0)) &&
        jsopencv_to_safe(info, pyobj_tris, tris, ArgInfo("tris", 0)) &&
        jsopencv_to_safe(info, pyobj_histBins, histBins, ArgInfo("histBins", 0)) &&
        jsopencv_to_safe(info, pyobj_sobelThesh, sobelThesh, ArgInfo("sobelThesh", 0)))
    {
        ERRWRAP2(retval = cv::rapid::GOSTracker::create(pts3d, tris, histBins, sobelThesh));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("GOSTracker_create");

    return NULL;
}

static Napi::Value pyopencv_cv_rapid_OLSTracker_create(const Napi::CallbackInfo &info)
{
    using namespace cv::rapid;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_pts3d = NULL;
    Mat pts3d;
    Napi::Value* pyobj_tris = NULL;
    Mat tris;
    Napi::Value* pyobj_histBins = NULL;
    int histBins=8;
    Napi::Value* pyobj_sobelThesh = NULL;
    uchar sobelThesh=10;
    Ptr<OLSTracker> retval;

    const char* keywords[] = { "pts3d", "tris", "histBins", "sobelThesh", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:OLSTracker_create", (char**)keywords, &pyobj_pts3d, &pyobj_tris, &pyobj_histBins, &pyobj_sobelThesh) &&
        jsopencv_to_safe(info, pyobj_pts3d, pts3d, ArgInfo("pts3d", 0)) &&
        jsopencv_to_safe(info, pyobj_tris, tris, ArgInfo("tris", 0)) &&
        jsopencv_to_safe(info, pyobj_histBins, histBins, ArgInfo("histBins", 0)) &&
        jsopencv_to_safe(info, pyobj_sobelThesh, sobelThesh, ArgInfo("sobelThesh", 0)))
    {
        ERRWRAP2(retval = cv::rapid::OLSTracker::create(pts3d, tris, histBins, sobelThesh));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_pts3d = NULL;
    UMat pts3d;
    Napi::Value* pyobj_tris = NULL;
    UMat tris;
    Napi::Value* pyobj_histBins = NULL;
    int histBins=8;
    Napi::Value* pyobj_sobelThesh = NULL;
    uchar sobelThesh=10;
    Ptr<OLSTracker> retval;

    const char* keywords[] = { "pts3d", "tris", "histBins", "sobelThesh", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:OLSTracker_create", (char**)keywords, &pyobj_pts3d, &pyobj_tris, &pyobj_histBins, &pyobj_sobelThesh) &&
        jsopencv_to_safe(info, pyobj_pts3d, pts3d, ArgInfo("pts3d", 0)) &&
        jsopencv_to_safe(info, pyobj_tris, tris, ArgInfo("tris", 0)) &&
        jsopencv_to_safe(info, pyobj_histBins, histBins, ArgInfo("histBins", 0)) &&
        jsopencv_to_safe(info, pyobj_sobelThesh, sobelThesh, ArgInfo("sobelThesh", 0)))
    {
        ERRWRAP2(retval = cv::rapid::OLSTracker::create(pts3d, tris, histBins, sobelThesh));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("OLSTracker_create");

    return NULL;
}

static Napi::Value pyopencv_cv_rapid_Rapid_create(const Napi::CallbackInfo &info)
{
    using namespace cv::rapid;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_pts3d = NULL;
    Mat pts3d;
    Napi::Value* pyobj_tris = NULL;
    Mat tris;
    Ptr<Rapid> retval;

    const char* keywords[] = { "pts3d", "tris", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:Rapid_create", (char**)keywords, &pyobj_pts3d, &pyobj_tris) &&
        jsopencv_to_safe(info, pyobj_pts3d, pts3d, ArgInfo("pts3d", 0)) &&
        jsopencv_to_safe(info, pyobj_tris, tris, ArgInfo("tris", 0)))
    {
        ERRWRAP2(retval = cv::rapid::Rapid::create(pts3d, tris));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_pts3d = NULL;
    UMat pts3d;
    Napi::Value* pyobj_tris = NULL;
    UMat tris;
    Ptr<Rapid> retval;

    const char* keywords[] = { "pts3d", "tris", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:Rapid_create", (char**)keywords, &pyobj_pts3d, &pyobj_tris) &&
        jsopencv_to_safe(info, pyobj_pts3d, pts3d, ArgInfo("pts3d", 0)) &&
        jsopencv_to_safe(info, pyobj_tris, tris, ArgInfo("tris", 0)))
    {
        ERRWRAP2(retval = cv::rapid::Rapid::create(pts3d, tris));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("Rapid_create");

    return NULL;
}

static Napi::Value pyopencv_cv_rapid_convertCorrespondencies(const Napi::CallbackInfo &info)
{
    using namespace cv::rapid;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_cols = NULL;
    Mat cols;
    Napi::Value* pyobj_srcLocations = NULL;
    Mat srcLocations;
    Napi::Value* pyobj_pts2d = NULL;
    Mat pts2d;
    Napi::Value* pyobj_pts3d = NULL;
    Mat pts3d;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;

    const char* keywords[] = { "cols", "srcLocations", "pts2d", "pts3d", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:convertCorrespondencies", (char**)keywords, &pyobj_cols, &pyobj_srcLocations, &pyobj_pts2d, &pyobj_pts3d, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_cols, cols, ArgInfo("cols", 0)) &&
        jsopencv_to_safe(info, pyobj_srcLocations, srcLocations, ArgInfo("srcLocations", 0)) &&
        jsopencv_to_safe(info, pyobj_pts2d, pts2d, ArgInfo("pts2d", 1)) &&
        jsopencv_to_safe(info, pyobj_pts3d, pts3d, ArgInfo("pts3d", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::rapid::convertCorrespondencies(cols, srcLocations, pts2d, pts3d, mask));
        return Py_BuildValue("(NN)", jsopencv_from(pts2d), jsopencv_from(pts3d));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_cols = NULL;
    UMat cols;
    Napi::Value* pyobj_srcLocations = NULL;
    UMat srcLocations;
    Napi::Value* pyobj_pts2d = NULL;
    UMat pts2d;
    Napi::Value* pyobj_pts3d = NULL;
    UMat pts3d;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;

    const char* keywords[] = { "cols", "srcLocations", "pts2d", "pts3d", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:convertCorrespondencies", (char**)keywords, &pyobj_cols, &pyobj_srcLocations, &pyobj_pts2d, &pyobj_pts3d, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_cols, cols, ArgInfo("cols", 0)) &&
        jsopencv_to_safe(info, pyobj_srcLocations, srcLocations, ArgInfo("srcLocations", 0)) &&
        jsopencv_to_safe(info, pyobj_pts2d, pts2d, ArgInfo("pts2d", 1)) &&
        jsopencv_to_safe(info, pyobj_pts3d, pts3d, ArgInfo("pts3d", 1)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::rapid::convertCorrespondencies(cols, srcLocations, pts2d, pts3d, mask));
        return Py_BuildValue("(NN)", jsopencv_from(pts2d), jsopencv_from(pts3d));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("convertCorrespondencies");

    return NULL;
}

static Napi::Value pyopencv_cv_rapid_drawCorrespondencies(const Napi::CallbackInfo &info)
{
    using namespace cv::rapid;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_bundle = NULL;
    Mat bundle;
    Napi::Value* pyobj_cols = NULL;
    Mat cols;
    Napi::Value* pyobj_colors = NULL;
    Mat colors;

    const char* keywords[] = { "bundle", "cols", "colors", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:drawCorrespondencies", (char**)keywords, &pyobj_bundle, &pyobj_cols, &pyobj_colors) &&
        jsopencv_to_safe(info, pyobj_bundle, bundle, ArgInfo("bundle", 1)) &&
        jsopencv_to_safe(info, pyobj_cols, cols, ArgInfo("cols", 0)) &&
        jsopencv_to_safe(info, pyobj_colors, colors, ArgInfo("colors", 0)))
    {
        ERRWRAP2(cv::rapid::drawCorrespondencies(bundle, cols, colors));
        return jsopencv_from(bundle);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_bundle = NULL;
    UMat bundle;
    Napi::Value* pyobj_cols = NULL;
    UMat cols;
    Napi::Value* pyobj_colors = NULL;
    UMat colors;

    const char* keywords[] = { "bundle", "cols", "colors", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:drawCorrespondencies", (char**)keywords, &pyobj_bundle, &pyobj_cols, &pyobj_colors) &&
        jsopencv_to_safe(info, pyobj_bundle, bundle, ArgInfo("bundle", 1)) &&
        jsopencv_to_safe(info, pyobj_cols, cols, ArgInfo("cols", 0)) &&
        jsopencv_to_safe(info, pyobj_colors, colors, ArgInfo("colors", 0)))
    {
        ERRWRAP2(cv::rapid::drawCorrespondencies(bundle, cols, colors));
        return jsopencv_from(bundle);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("drawCorrespondencies");

    return NULL;
}

static Napi::Value pyopencv_cv_rapid_drawSearchLines(const Napi::CallbackInfo &info)
{
    using namespace cv::rapid;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_locations = NULL;
    Mat locations;
    Napi::Value* pyobj_color = NULL;
    Scalar color;

    const char* keywords[] = { "img", "locations", "color", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:drawSearchLines", (char**)keywords, &pyobj_img, &pyobj_locations, &pyobj_color) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_locations, locations, ArgInfo("locations", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)))
    {
        ERRWRAP2(cv::rapid::drawSearchLines(img, locations, color));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_locations = NULL;
    UMat locations;
    Napi::Value* pyobj_color = NULL;
    Scalar color;

    const char* keywords[] = { "img", "locations", "color", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:drawSearchLines", (char**)keywords, &pyobj_img, &pyobj_locations, &pyobj_color) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_locations, locations, ArgInfo("locations", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)))
    {
        ERRWRAP2(cv::rapid::drawSearchLines(img, locations, color));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("drawSearchLines");

    return NULL;
}

static Napi::Value pyopencv_cv_rapid_drawWireframe(const Napi::CallbackInfo &info)
{
    using namespace cv::rapid;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_pts2d = NULL;
    Mat pts2d;
    Napi::Value* pyobj_tris = NULL;
    Mat tris;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_type = NULL;
    int type=LINE_8;
    Napi::Value* pyobj_cullBackface = NULL;
    bool cullBackface=false;

    const char* keywords[] = { "img", "pts2d", "tris", "color", "type", "cullBackface", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OO:drawWireframe", (char**)keywords, &pyobj_img, &pyobj_pts2d, &pyobj_tris, &pyobj_color, &pyobj_type, &pyobj_cullBackface) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_pts2d, pts2d, ArgInfo("pts2d", 0)) &&
        jsopencv_to_safe(info, pyobj_tris, tris, ArgInfo("tris", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_type, type, ArgInfo("type", 0)) &&
        jsopencv_to_safe(info, pyobj_cullBackface, cullBackface, ArgInfo("cullBackface", 0)))
    {
        ERRWRAP2(cv::rapid::drawWireframe(img, pts2d, tris, color, type, cullBackface));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_pts2d = NULL;
    UMat pts2d;
    Napi::Value* pyobj_tris = NULL;
    UMat tris;
    Napi::Value* pyobj_color = NULL;
    Scalar color;
    Napi::Value* pyobj_type = NULL;
    int type=LINE_8;
    Napi::Value* pyobj_cullBackface = NULL;
    bool cullBackface=false;

    const char* keywords[] = { "img", "pts2d", "tris", "color", "type", "cullBackface", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OO:drawWireframe", (char**)keywords, &pyobj_img, &pyobj_pts2d, &pyobj_tris, &pyobj_color, &pyobj_type, &pyobj_cullBackface) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 1)) &&
        jsopencv_to_safe(info, pyobj_pts2d, pts2d, ArgInfo("pts2d", 0)) &&
        jsopencv_to_safe(info, pyobj_tris, tris, ArgInfo("tris", 0)) &&
        jsopencv_to_safe(info, pyobj_color, color, ArgInfo("color", 0)) &&
        jsopencv_to_safe(info, pyobj_type, type, ArgInfo("type", 0)) &&
        jsopencv_to_safe(info, pyobj_cullBackface, cullBackface, ArgInfo("cullBackface", 0)))
    {
        ERRWRAP2(cv::rapid::drawWireframe(img, pts2d, tris, color, type, cullBackface));
        return jsopencv_from(img);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("drawWireframe");

    return NULL;
}

static Napi::Value pyopencv_cv_rapid_extractControlPoints(const Napi::CallbackInfo &info)
{
    using namespace cv::rapid;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_num = NULL;
    int num=0;
    Napi::Value* pyobj_len = NULL;
    int len=0;
    Napi::Value* pyobj_pts3d = NULL;
    Mat pts3d;
    Napi::Value* pyobj_rvec = NULL;
    Mat rvec;
    Napi::Value* pyobj_tvec = NULL;
    Mat tvec;
    Napi::Value* pyobj_K = NULL;
    Mat K;
    Napi::Value* pyobj_imsize = NULL;
    Size imsize;
    Napi::Value* pyobj_tris = NULL;
    Mat tris;
    Napi::Value* pyobj_ctl2d = NULL;
    Mat ctl2d;
    Napi::Value* pyobj_ctl3d = NULL;
    Mat ctl3d;

    const char* keywords[] = { "num", "len", "pts3d", "rvec", "tvec", "K", "imsize", "tris", "ctl2d", "ctl3d", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOOO|OO:extractControlPoints", (char**)keywords, &pyobj_num, &pyobj_len, &pyobj_pts3d, &pyobj_rvec, &pyobj_tvec, &pyobj_K, &pyobj_imsize, &pyobj_tris, &pyobj_ctl2d, &pyobj_ctl3d) &&
        jsopencv_to_safe(info, pyobj_num, num, ArgInfo("num", 0)) &&
        jsopencv_to_safe(info, pyobj_len, len, ArgInfo("len", 0)) &&
        jsopencv_to_safe(info, pyobj_pts3d, pts3d, ArgInfo("pts3d", 0)) &&
        jsopencv_to_safe(info, pyobj_rvec, rvec, ArgInfo("rvec", 0)) &&
        jsopencv_to_safe(info, pyobj_tvec, tvec, ArgInfo("tvec", 0)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_imsize, imsize, ArgInfo("imsize", 0)) &&
        jsopencv_to_safe(info, pyobj_tris, tris, ArgInfo("tris", 0)) &&
        jsopencv_to_safe(info, pyobj_ctl2d, ctl2d, ArgInfo("ctl2d", 1)) &&
        jsopencv_to_safe(info, pyobj_ctl3d, ctl3d, ArgInfo("ctl3d", 1)))
    {
        ERRWRAP2(cv::rapid::extractControlPoints(num, len, pts3d, rvec, tvec, K, imsize, tris, ctl2d, ctl3d));
        return Py_BuildValue("(NN)", jsopencv_from(ctl2d), jsopencv_from(ctl3d));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_num = NULL;
    int num=0;
    Napi::Value* pyobj_len = NULL;
    int len=0;
    Napi::Value* pyobj_pts3d = NULL;
    UMat pts3d;
    Napi::Value* pyobj_rvec = NULL;
    UMat rvec;
    Napi::Value* pyobj_tvec = NULL;
    UMat tvec;
    Napi::Value* pyobj_K = NULL;
    UMat K;
    Napi::Value* pyobj_imsize = NULL;
    Size imsize;
    Napi::Value* pyobj_tris = NULL;
    UMat tris;
    Napi::Value* pyobj_ctl2d = NULL;
    UMat ctl2d;
    Napi::Value* pyobj_ctl3d = NULL;
    UMat ctl3d;

    const char* keywords[] = { "num", "len", "pts3d", "rvec", "tvec", "K", "imsize", "tris", "ctl2d", "ctl3d", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOOO|OO:extractControlPoints", (char**)keywords, &pyobj_num, &pyobj_len, &pyobj_pts3d, &pyobj_rvec, &pyobj_tvec, &pyobj_K, &pyobj_imsize, &pyobj_tris, &pyobj_ctl2d, &pyobj_ctl3d) &&
        jsopencv_to_safe(info, pyobj_num, num, ArgInfo("num", 0)) &&
        jsopencv_to_safe(info, pyobj_len, len, ArgInfo("len", 0)) &&
        jsopencv_to_safe(info, pyobj_pts3d, pts3d, ArgInfo("pts3d", 0)) &&
        jsopencv_to_safe(info, pyobj_rvec, rvec, ArgInfo("rvec", 0)) &&
        jsopencv_to_safe(info, pyobj_tvec, tvec, ArgInfo("tvec", 0)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_imsize, imsize, ArgInfo("imsize", 0)) &&
        jsopencv_to_safe(info, pyobj_tris, tris, ArgInfo("tris", 0)) &&
        jsopencv_to_safe(info, pyobj_ctl2d, ctl2d, ArgInfo("ctl2d", 1)) &&
        jsopencv_to_safe(info, pyobj_ctl3d, ctl3d, ArgInfo("ctl3d", 1)))
    {
        ERRWRAP2(cv::rapid::extractControlPoints(num, len, pts3d, rvec, tvec, K, imsize, tris, ctl2d, ctl3d));
        return Py_BuildValue("(NN)", jsopencv_from(ctl2d), jsopencv_from(ctl3d));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("extractControlPoints");

    return NULL;
}

static Napi::Value pyopencv_cv_rapid_extractLineBundle(const Napi::CallbackInfo &info)
{
    using namespace cv::rapid;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_len = NULL;
    int len=0;
    Napi::Value* pyobj_ctl2d = NULL;
    Mat ctl2d;
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_bundle = NULL;
    Mat bundle;
    Napi::Value* pyobj_srcLocations = NULL;
    Mat srcLocations;

    const char* keywords[] = { "len", "ctl2d", "img", "bundle", "srcLocations", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:extractLineBundle", (char**)keywords, &pyobj_len, &pyobj_ctl2d, &pyobj_img, &pyobj_bundle, &pyobj_srcLocations) &&
        jsopencv_to_safe(info, pyobj_len, len, ArgInfo("len", 0)) &&
        jsopencv_to_safe(info, pyobj_ctl2d, ctl2d, ArgInfo("ctl2d", 0)) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_bundle, bundle, ArgInfo("bundle", 1)) &&
        jsopencv_to_safe(info, pyobj_srcLocations, srcLocations, ArgInfo("srcLocations", 1)))
    {
        ERRWRAP2(cv::rapid::extractLineBundle(len, ctl2d, img, bundle, srcLocations));
        return Py_BuildValue("(NN)", jsopencv_from(bundle), jsopencv_from(srcLocations));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_len = NULL;
    int len=0;
    Napi::Value* pyobj_ctl2d = NULL;
    UMat ctl2d;
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_bundle = NULL;
    UMat bundle;
    Napi::Value* pyobj_srcLocations = NULL;
    UMat srcLocations;

    const char* keywords[] = { "len", "ctl2d", "img", "bundle", "srcLocations", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:extractLineBundle", (char**)keywords, &pyobj_len, &pyobj_ctl2d, &pyobj_img, &pyobj_bundle, &pyobj_srcLocations) &&
        jsopencv_to_safe(info, pyobj_len, len, ArgInfo("len", 0)) &&
        jsopencv_to_safe(info, pyobj_ctl2d, ctl2d, ArgInfo("ctl2d", 0)) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_bundle, bundle, ArgInfo("bundle", 1)) &&
        jsopencv_to_safe(info, pyobj_srcLocations, srcLocations, ArgInfo("srcLocations", 1)))
    {
        ERRWRAP2(cv::rapid::extractLineBundle(len, ctl2d, img, bundle, srcLocations));
        return Py_BuildValue("(NN)", jsopencv_from(bundle), jsopencv_from(srcLocations));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("extractLineBundle");

    return NULL;
}

static Napi::Value pyopencv_cv_rapid_findCorrespondencies(const Napi::CallbackInfo &info)
{
    using namespace cv::rapid;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_bundle = NULL;
    Mat bundle;
    Napi::Value* pyobj_cols = NULL;
    Mat cols;
    Napi::Value* pyobj_response = NULL;
    Mat response;

    const char* keywords[] = { "bundle", "cols", "response", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:findCorrespondencies", (char**)keywords, &pyobj_bundle, &pyobj_cols, &pyobj_response) &&
        jsopencv_to_safe(info, pyobj_bundle, bundle, ArgInfo("bundle", 0)) &&
        jsopencv_to_safe(info, pyobj_cols, cols, ArgInfo("cols", 1)) &&
        jsopencv_to_safe(info, pyobj_response, response, ArgInfo("response", 1)))
    {
        ERRWRAP2(cv::rapid::findCorrespondencies(bundle, cols, response));
        return Py_BuildValue("(NN)", jsopencv_from(cols), jsopencv_from(response));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_bundle = NULL;
    UMat bundle;
    Napi::Value* pyobj_cols = NULL;
    UMat cols;
    Napi::Value* pyobj_response = NULL;
    UMat response;

    const char* keywords[] = { "bundle", "cols", "response", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:findCorrespondencies", (char**)keywords, &pyobj_bundle, &pyobj_cols, &pyobj_response) &&
        jsopencv_to_safe(info, pyobj_bundle, bundle, ArgInfo("bundle", 0)) &&
        jsopencv_to_safe(info, pyobj_cols, cols, ArgInfo("cols", 1)) &&
        jsopencv_to_safe(info, pyobj_response, response, ArgInfo("response", 1)))
    {
        ERRWRAP2(cv::rapid::findCorrespondencies(bundle, cols, response));
        return Py_BuildValue("(NN)", jsopencv_from(cols), jsopencv_from(response));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("findCorrespondencies");

    return NULL;
}

static Napi::Value pyopencv_cv_rapid_rapid(const Napi::CallbackInfo &info)
{
    using namespace cv::rapid;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_num = NULL;
    int num=0;
    Napi::Value* pyobj_len = NULL;
    int len=0;
    Napi::Value* pyobj_pts3d = NULL;
    Mat pts3d;
    Napi::Value* pyobj_tris = NULL;
    Mat tris;
    Napi::Value* pyobj_K = NULL;
    Mat K;
    Napi::Value* pyobj_rvec = NULL;
    Mat rvec;
    Napi::Value* pyobj_tvec = NULL;
    Mat tvec;
    double rmsd;
    float retval;

    const char* keywords[] = { "img", "num", "len", "pts3d", "tris", "K", "rvec", "tvec", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOOO:rapid", (char**)keywords, &pyobj_img, &pyobj_num, &pyobj_len, &pyobj_pts3d, &pyobj_tris, &pyobj_K, &pyobj_rvec, &pyobj_tvec) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_num, num, ArgInfo("num", 0)) &&
        jsopencv_to_safe(info, pyobj_len, len, ArgInfo("len", 0)) &&
        jsopencv_to_safe(info, pyobj_pts3d, pts3d, ArgInfo("pts3d", 0)) &&
        jsopencv_to_safe(info, pyobj_tris, tris, ArgInfo("tris", 0)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_rvec, rvec, ArgInfo("rvec", 1)) &&
        jsopencv_to_safe(info, pyobj_tvec, tvec, ArgInfo("tvec", 1)))
    {
        ERRWRAP2(retval = cv::rapid::rapid(img, num, len, pts3d, tris, K, rvec, tvec, &rmsd));
        return Py_BuildValue("(NNNN)", jsopencv_from(retval), jsopencv_from(rvec), jsopencv_from(tvec), jsopencv_from(rmsd));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_num = NULL;
    int num=0;
    Napi::Value* pyobj_len = NULL;
    int len=0;
    Napi::Value* pyobj_pts3d = NULL;
    UMat pts3d;
    Napi::Value* pyobj_tris = NULL;
    UMat tris;
    Napi::Value* pyobj_K = NULL;
    UMat K;
    Napi::Value* pyobj_rvec = NULL;
    UMat rvec;
    Napi::Value* pyobj_tvec = NULL;
    UMat tvec;
    double rmsd;
    float retval;

    const char* keywords[] = { "img", "num", "len", "pts3d", "tris", "K", "rvec", "tvec", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOOOOO:rapid", (char**)keywords, &pyobj_img, &pyobj_num, &pyobj_len, &pyobj_pts3d, &pyobj_tris, &pyobj_K, &pyobj_rvec, &pyobj_tvec) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_num, num, ArgInfo("num", 0)) &&
        jsopencv_to_safe(info, pyobj_len, len, ArgInfo("len", 0)) &&
        jsopencv_to_safe(info, pyobj_pts3d, pts3d, ArgInfo("pts3d", 0)) &&
        jsopencv_to_safe(info, pyobj_tris, tris, ArgInfo("tris", 0)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_rvec, rvec, ArgInfo("rvec", 1)) &&
        jsopencv_to_safe(info, pyobj_tvec, tvec, ArgInfo("tvec", 1)))
    {
        ERRWRAP2(retval = cv::rapid::rapid(img, num, len, pts3d, tris, K, rvec, tvec, &rmsd));
        return Py_BuildValue("(NNNN)", jsopencv_from(retval), jsopencv_from(rvec), jsopencv_from(tvec), jsopencv_from(rmsd));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("rapid");

    return NULL;
}

static Napi::Value pyopencv_cv_samples_addSamplesDataSearchPath(const Napi::CallbackInfo &info)
{
    using namespace cv::samples;

    Napi::Value* pyobj_path = NULL;
    String path;

    const char* keywords[] = { "path", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:addSamplesDataSearchPath", (char**)keywords, &pyobj_path) &&
        jsopencv_to_safe(info, pyobj_path, path, ArgInfo("path", 0)))
    {
        ERRWRAP2(cv::samples::addSamplesDataSearchPath(path));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_samples_addSamplesDataSearchSubDirectory(const Napi::CallbackInfo &info)
{
    using namespace cv::samples;

    Napi::Value* pyobj_subdir = NULL;
    String subdir;

    const char* keywords[] = { "subdir", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:addSamplesDataSearchSubDirectory", (char**)keywords, &pyobj_subdir) &&
        jsopencv_to_safe(info, pyobj_subdir, subdir, ArgInfo("subdir", 0)))
    {
        ERRWRAP2(cv::samples::addSamplesDataSearchSubDirectory(subdir));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_samples_findFile(const Napi::CallbackInfo &info)
{
    using namespace cv::samples;

    Napi::Value* pyobj_relative_path = NULL;
    String relative_path;
    Napi::Value* pyobj_required = NULL;
    bool required=true;
    Napi::Value* pyobj_silentMode = NULL;
    bool silentMode=false;
    cv::String retval;

    const char* keywords[] = { "relative_path", "required", "silentMode", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:findFile", (char**)keywords, &pyobj_relative_path, &pyobj_required, &pyobj_silentMode) &&
        jsopencv_to_safe(info, pyobj_relative_path, relative_path, ArgInfo("relative_path", 0)) &&
        jsopencv_to_safe(info, pyobj_required, required, ArgInfo("required", 0)) &&
        jsopencv_to_safe(info, pyobj_silentMode, silentMode, ArgInfo("silentMode", 0)))
    {
        ERRWRAP2(retval = cv::samples::findFile(relative_path, required, silentMode));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_samples_findFileOrKeep(const Napi::CallbackInfo &info)
{
    using namespace cv::samples;

    Napi::Value* pyobj_relative_path = NULL;
    String relative_path;
    Napi::Value* pyobj_silentMode = NULL;
    bool silentMode=false;
    cv::String retval;

    const char* keywords[] = { "relative_path", "silentMode", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:findFileOrKeep", (char**)keywords, &pyobj_relative_path, &pyobj_silentMode) &&
        jsopencv_to_safe(info, pyobj_relative_path, relative_path, ArgInfo("relative_path", 0)) &&
        jsopencv_to_safe(info, pyobj_silentMode, silentMode, ArgInfo("silentMode", 0)))
    {
        ERRWRAP2(retval = cv::samples::findFileOrKeep(relative_path, silentMode));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_text_OCRBeamSearchDecoder_create(const Napi::CallbackInfo &info)
{
    using namespace cv::text;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_classifier = NULL;
    Ptr<OCRBeamSearchDecoder::ClassifierCallback> classifier;
    Napi::Value* pyobj_vocabulary = NULL;
    std::string vocabulary;
    Napi::Value* pyobj_transition_probabilities_table = NULL;
    Mat transition_probabilities_table;
    Napi::Value* pyobj_emission_probabilities_table = NULL;
    Mat emission_probabilities_table;
    Napi::Value* pyobj_mode = NULL;
    text_decoder_mode mode=OCR_DECODER_VITERBI;
    Napi::Value* pyobj_beam_size = NULL;
    int beam_size=500;
    Ptr<OCRBeamSearchDecoder> retval;

    const char* keywords[] = { "classifier", "vocabulary", "transition_probabilities_table", "emission_probabilities_table", "mode", "beam_size", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OO:OCRBeamSearchDecoder_create", (char**)keywords, &pyobj_classifier, &pyobj_vocabulary, &pyobj_transition_probabilities_table, &pyobj_emission_probabilities_table, &pyobj_mode, &pyobj_beam_size) &&
        jsopencv_to_safe(info, pyobj_classifier, classifier, ArgInfo("classifier", 0)) &&
        jsopencv_to_safe(info, pyobj_vocabulary, vocabulary, ArgInfo("vocabulary", 0)) &&
        jsopencv_to_safe(info, pyobj_transition_probabilities_table, transition_probabilities_table, ArgInfo("transition_probabilities_table", 0)) &&
        jsopencv_to_safe(info, pyobj_emission_probabilities_table, emission_probabilities_table, ArgInfo("emission_probabilities_table", 0)) &&
        jsopencv_to_safe(info, pyobj_mode, mode, ArgInfo("mode", 0)) &&
        jsopencv_to_safe(info, pyobj_beam_size, beam_size, ArgInfo("beam_size", 0)))
    {
        ERRWRAP2(retval = cv::text::OCRBeamSearchDecoder::create(classifier, vocabulary, transition_probabilities_table, emission_probabilities_table, mode, beam_size));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_classifier = NULL;
    Ptr<OCRBeamSearchDecoder::ClassifierCallback> classifier;
    Napi::Value* pyobj_vocabulary = NULL;
    std::string vocabulary;
    Napi::Value* pyobj_transition_probabilities_table = NULL;
    UMat transition_probabilities_table;
    Napi::Value* pyobj_emission_probabilities_table = NULL;
    UMat emission_probabilities_table;
    Napi::Value* pyobj_mode = NULL;
    text_decoder_mode mode=OCR_DECODER_VITERBI;
    Napi::Value* pyobj_beam_size = NULL;
    int beam_size=500;
    Ptr<OCRBeamSearchDecoder> retval;

    const char* keywords[] = { "classifier", "vocabulary", "transition_probabilities_table", "emission_probabilities_table", "mode", "beam_size", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OO:OCRBeamSearchDecoder_create", (char**)keywords, &pyobj_classifier, &pyobj_vocabulary, &pyobj_transition_probabilities_table, &pyobj_emission_probabilities_table, &pyobj_mode, &pyobj_beam_size) &&
        jsopencv_to_safe(info, pyobj_classifier, classifier, ArgInfo("classifier", 0)) &&
        jsopencv_to_safe(info, pyobj_vocabulary, vocabulary, ArgInfo("vocabulary", 0)) &&
        jsopencv_to_safe(info, pyobj_transition_probabilities_table, transition_probabilities_table, ArgInfo("transition_probabilities_table", 0)) &&
        jsopencv_to_safe(info, pyobj_emission_probabilities_table, emission_probabilities_table, ArgInfo("emission_probabilities_table", 0)) &&
        jsopencv_to_safe(info, pyobj_mode, mode, ArgInfo("mode", 0)) &&
        jsopencv_to_safe(info, pyobj_beam_size, beam_size, ArgInfo("beam_size", 0)))
    {
        ERRWRAP2(retval = cv::text::OCRBeamSearchDecoder::create(classifier, vocabulary, transition_probabilities_table, emission_probabilities_table, mode, beam_size));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("OCRBeamSearchDecoder_create");

    return NULL;
}

static Napi::Value pyopencv_cv_text_OCRHMMDecoder_create(const Napi::CallbackInfo &info)
{
    using namespace cv::text;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_classifier = NULL;
    Ptr<OCRHMMDecoder::ClassifierCallback> classifier;
    Napi::Value* pyobj_vocabulary = NULL;
    String vocabulary;
    Napi::Value* pyobj_transition_probabilities_table = NULL;
    Mat transition_probabilities_table;
    Napi::Value* pyobj_emission_probabilities_table = NULL;
    Mat emission_probabilities_table;
    Napi::Value* pyobj_mode = NULL;
    int mode=OCR_DECODER_VITERBI;
    Ptr<OCRHMMDecoder> retval;

    const char* keywords[] = { "classifier", "vocabulary", "transition_probabilities_table", "emission_probabilities_table", "mode", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:OCRHMMDecoder_create", (char**)keywords, &pyobj_classifier, &pyobj_vocabulary, &pyobj_transition_probabilities_table, &pyobj_emission_probabilities_table, &pyobj_mode) &&
        jsopencv_to_safe(info, pyobj_classifier, classifier, ArgInfo("classifier", 0)) &&
        jsopencv_to_safe(info, pyobj_vocabulary, vocabulary, ArgInfo("vocabulary", 0)) &&
        jsopencv_to_safe(info, pyobj_transition_probabilities_table, transition_probabilities_table, ArgInfo("transition_probabilities_table", 0)) &&
        jsopencv_to_safe(info, pyobj_emission_probabilities_table, emission_probabilities_table, ArgInfo("emission_probabilities_table", 0)) &&
        jsopencv_to_safe(info, pyobj_mode, mode, ArgInfo("mode", 0)))
    {
        ERRWRAP2(retval = cv::text::OCRHMMDecoder::create(classifier, vocabulary, transition_probabilities_table, emission_probabilities_table, mode));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_classifier = NULL;
    Ptr<OCRHMMDecoder::ClassifierCallback> classifier;
    Napi::Value* pyobj_vocabulary = NULL;
    String vocabulary;
    Napi::Value* pyobj_transition_probabilities_table = NULL;
    UMat transition_probabilities_table;
    Napi::Value* pyobj_emission_probabilities_table = NULL;
    UMat emission_probabilities_table;
    Napi::Value* pyobj_mode = NULL;
    int mode=OCR_DECODER_VITERBI;
    Ptr<OCRHMMDecoder> retval;

    const char* keywords[] = { "classifier", "vocabulary", "transition_probabilities_table", "emission_probabilities_table", "mode", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:OCRHMMDecoder_create", (char**)keywords, &pyobj_classifier, &pyobj_vocabulary, &pyobj_transition_probabilities_table, &pyobj_emission_probabilities_table, &pyobj_mode) &&
        jsopencv_to_safe(info, pyobj_classifier, classifier, ArgInfo("classifier", 0)) &&
        jsopencv_to_safe(info, pyobj_vocabulary, vocabulary, ArgInfo("vocabulary", 0)) &&
        jsopencv_to_safe(info, pyobj_transition_probabilities_table, transition_probabilities_table, ArgInfo("transition_probabilities_table", 0)) &&
        jsopencv_to_safe(info, pyobj_emission_probabilities_table, emission_probabilities_table, ArgInfo("emission_probabilities_table", 0)) &&
        jsopencv_to_safe(info, pyobj_mode, mode, ArgInfo("mode", 0)))
    {
        ERRWRAP2(retval = cv::text::OCRHMMDecoder::create(classifier, vocabulary, transition_probabilities_table, emission_probabilities_table, mode));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_filename = NULL;
    String filename;
    Napi::Value* pyobj_vocabulary = NULL;
    String vocabulary;
    Napi::Value* pyobj_transition_probabilities_table = NULL;
    Mat transition_probabilities_table;
    Napi::Value* pyobj_emission_probabilities_table = NULL;
    Mat emission_probabilities_table;
    Napi::Value* pyobj_mode = NULL;
    int mode=OCR_DECODER_VITERBI;
    Napi::Value* pyobj_classifier = NULL;
    int classifier=OCR_KNN_CLASSIFIER;
    Ptr<OCRHMMDecoder> retval;

    const char* keywords[] = { "filename", "vocabulary", "transition_probabilities_table", "emission_probabilities_table", "mode", "classifier", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OO:OCRHMMDecoder_create", (char**)keywords, &pyobj_filename, &pyobj_vocabulary, &pyobj_transition_probabilities_table, &pyobj_emission_probabilities_table, &pyobj_mode, &pyobj_classifier) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)) &&
        jsopencv_to_safe(info, pyobj_vocabulary, vocabulary, ArgInfo("vocabulary", 0)) &&
        jsopencv_to_safe(info, pyobj_transition_probabilities_table, transition_probabilities_table, ArgInfo("transition_probabilities_table", 0)) &&
        jsopencv_to_safe(info, pyobj_emission_probabilities_table, emission_probabilities_table, ArgInfo("emission_probabilities_table", 0)) &&
        jsopencv_to_safe(info, pyobj_mode, mode, ArgInfo("mode", 0)) &&
        jsopencv_to_safe(info, pyobj_classifier, classifier, ArgInfo("classifier", 0)))
    {
        ERRWRAP2(retval = cv::text::OCRHMMDecoder::create(filename, vocabulary, transition_probabilities_table, emission_probabilities_table, mode, classifier));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_filename = NULL;
    String filename;
    Napi::Value* pyobj_vocabulary = NULL;
    String vocabulary;
    Napi::Value* pyobj_transition_probabilities_table = NULL;
    UMat transition_probabilities_table;
    Napi::Value* pyobj_emission_probabilities_table = NULL;
    UMat emission_probabilities_table;
    Napi::Value* pyobj_mode = NULL;
    int mode=OCR_DECODER_VITERBI;
    Napi::Value* pyobj_classifier = NULL;
    int classifier=OCR_KNN_CLASSIFIER;
    Ptr<OCRHMMDecoder> retval;

    const char* keywords[] = { "filename", "vocabulary", "transition_probabilities_table", "emission_probabilities_table", "mode", "classifier", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OO:OCRHMMDecoder_create", (char**)keywords, &pyobj_filename, &pyobj_vocabulary, &pyobj_transition_probabilities_table, &pyobj_emission_probabilities_table, &pyobj_mode, &pyobj_classifier) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)) &&
        jsopencv_to_safe(info, pyobj_vocabulary, vocabulary, ArgInfo("vocabulary", 0)) &&
        jsopencv_to_safe(info, pyobj_transition_probabilities_table, transition_probabilities_table, ArgInfo("transition_probabilities_table", 0)) &&
        jsopencv_to_safe(info, pyobj_emission_probabilities_table, emission_probabilities_table, ArgInfo("emission_probabilities_table", 0)) &&
        jsopencv_to_safe(info, pyobj_mode, mode, ArgInfo("mode", 0)) &&
        jsopencv_to_safe(info, pyobj_classifier, classifier, ArgInfo("classifier", 0)))
    {
        ERRWRAP2(retval = cv::text::OCRHMMDecoder::create(filename, vocabulary, transition_probabilities_table, emission_probabilities_table, mode, classifier));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("OCRHMMDecoder_create");

    return NULL;
}

static Napi::Value pyopencv_cv_text_OCRTesseract_create(const Napi::CallbackInfo &info)
{
    using namespace cv::text;

    char* datapath=0;
    char* language=0;
    char* char_whitelist=0;
    Napi::Value* pyobj_oem = NULL;
    int oem=OEM_DEFAULT;
    Napi::Value* pyobj_psmode = NULL;
    int psmode=PSM_AUTO;
    Ptr<OCRTesseract> retval;

    const char* keywords[] = { "datapath", "language", "char_whitelist", "oem", "psmode", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|sssOO:OCRTesseract_create", (char**)keywords, &datapath, &language, &char_whitelist, &pyobj_oem, &pyobj_psmode) &&
        jsopencv_to_safe(info, pyobj_oem, oem, ArgInfo("oem", 0)) &&
        jsopencv_to_safe(info, pyobj_psmode, psmode, ArgInfo("psmode", 0)))
    {
        ERRWRAP2(retval = cv::text::OCRTesseract::create(datapath, language, char_whitelist, oem, psmode));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_text_TextDetectorCNN_create(const Napi::CallbackInfo &info)
{
    using namespace cv::text;

    Napi::Value* pyobj_modelArchFilename = NULL;
    String modelArchFilename;
    Napi::Value* pyobj_modelWeightsFilename = NULL;
    String modelWeightsFilename;
    Ptr<TextDetectorCNN> retval;

    const char* keywords[] = { "modelArchFilename", "modelWeightsFilename", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:TextDetectorCNN_create", (char**)keywords, &pyobj_modelArchFilename, &pyobj_modelWeightsFilename) &&
        jsopencv_to_safe(info, pyobj_modelArchFilename, modelArchFilename, ArgInfo("modelArchFilename", 0)) &&
        jsopencv_to_safe(info, pyobj_modelWeightsFilename, modelWeightsFilename, ArgInfo("modelWeightsFilename", 0)))
    {
        ERRWRAP2(retval = cv::text::TextDetectorCNN::create(modelArchFilename, modelWeightsFilename));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_text_computeNMChannels(const Napi::CallbackInfo &info)
{
    using namespace cv::text;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj__src = NULL;
    Mat _src;
    Napi::Value* pyobj__channels = NULL;
    vector_Mat _channels;
    Napi::Value* pyobj__mode = NULL;
    int _mode=ERFILTER_NM_RGBLGrad;

    const char* keywords[] = { "_src", "_channels", "_mode", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:computeNMChannels", (char**)keywords, &pyobj__src, &pyobj__channels, &pyobj__mode) &&
        jsopencv_to_safe(info, pyobj__src, _src, ArgInfo("_src", 0)) &&
        jsopencv_to_safe(info, pyobj__channels, _channels, ArgInfo("_channels", 1)) &&
        jsopencv_to_safe(info, pyobj__mode, _mode, ArgInfo("_mode", 0)))
    {
        ERRWRAP2(cv::text::computeNMChannels(_src, _channels, _mode));
        return jsopencv_from(_channels);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj__src = NULL;
    UMat _src;
    Napi::Value* pyobj__channels = NULL;
    vector_UMat _channels;
    Napi::Value* pyobj__mode = NULL;
    int _mode=ERFILTER_NM_RGBLGrad;

    const char* keywords[] = { "_src", "_channels", "_mode", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:computeNMChannels", (char**)keywords, &pyobj__src, &pyobj__channels, &pyobj__mode) &&
        jsopencv_to_safe(info, pyobj__src, _src, ArgInfo("_src", 0)) &&
        jsopencv_to_safe(info, pyobj__channels, _channels, ArgInfo("_channels", 1)) &&
        jsopencv_to_safe(info, pyobj__mode, _mode, ArgInfo("_mode", 0)))
    {
        ERRWRAP2(cv::text::computeNMChannels(_src, _channels, _mode));
        return jsopencv_from(_channels);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("computeNMChannels");

    return NULL;
}

static Napi::Value pyopencv_cv_text_createERFilterNM1(const Napi::CallbackInfo &info)
{
    using namespace cv::text;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_cb = NULL;
    Ptr<ERFilter::Callback> cb;
    Napi::Value* pyobj_thresholdDelta = NULL;
    int thresholdDelta=1;
    Napi::Value* pyobj_minArea = NULL;
    float minArea=(float)0.00025;
    Napi::Value* pyobj_maxArea = NULL;
    float maxArea=(float)0.13;
    Napi::Value* pyobj_minProbability = NULL;
    float minProbability=(float)0.4;
    Napi::Value* pyobj_nonMaxSuppression = NULL;
    bool nonMaxSuppression=true;
    Napi::Value* pyobj_minProbabilityDiff = NULL;
    float minProbabilityDiff=(float)0.1;
    Ptr<ERFilter> retval;

    const char* keywords[] = { "cb", "thresholdDelta", "minArea", "maxArea", "minProbability", "nonMaxSuppression", "minProbabilityDiff", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOOO:createERFilterNM1", (char**)keywords, &pyobj_cb, &pyobj_thresholdDelta, &pyobj_minArea, &pyobj_maxArea, &pyobj_minProbability, &pyobj_nonMaxSuppression, &pyobj_minProbabilityDiff) &&
        jsopencv_to_safe(info, pyobj_cb, cb, ArgInfo("cb", 0)) &&
        jsopencv_to_safe(info, pyobj_thresholdDelta, thresholdDelta, ArgInfo("thresholdDelta", 0)) &&
        jsopencv_to_safe(info, pyobj_minArea, minArea, ArgInfo("minArea", 0)) &&
        jsopencv_to_safe(info, pyobj_maxArea, maxArea, ArgInfo("maxArea", 0)) &&
        jsopencv_to_safe(info, pyobj_minProbability, minProbability, ArgInfo("minProbability", 0)) &&
        jsopencv_to_safe(info, pyobj_nonMaxSuppression, nonMaxSuppression, ArgInfo("nonMaxSuppression", 0)) &&
        jsopencv_to_safe(info, pyobj_minProbabilityDiff, minProbabilityDiff, ArgInfo("minProbabilityDiff", 0)))
    {
        ERRWRAP2(retval = cv::text::createERFilterNM1(cb, thresholdDelta, minArea, maxArea, minProbability, nonMaxSuppression, minProbabilityDiff));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_filename = NULL;
    String filename;
    Napi::Value* pyobj_thresholdDelta = NULL;
    int thresholdDelta=1;
    Napi::Value* pyobj_minArea = NULL;
    float minArea=(float)0.00025;
    Napi::Value* pyobj_maxArea = NULL;
    float maxArea=(float)0.13;
    Napi::Value* pyobj_minProbability = NULL;
    float minProbability=(float)0.4;
    Napi::Value* pyobj_nonMaxSuppression = NULL;
    bool nonMaxSuppression=true;
    Napi::Value* pyobj_minProbabilityDiff = NULL;
    float minProbabilityDiff=(float)0.1;
    Ptr<ERFilter> retval;

    const char* keywords[] = { "filename", "thresholdDelta", "minArea", "maxArea", "minProbability", "nonMaxSuppression", "minProbabilityDiff", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOOO:createERFilterNM1", (char**)keywords, &pyobj_filename, &pyobj_thresholdDelta, &pyobj_minArea, &pyobj_maxArea, &pyobj_minProbability, &pyobj_nonMaxSuppression, &pyobj_minProbabilityDiff) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)) &&
        jsopencv_to_safe(info, pyobj_thresholdDelta, thresholdDelta, ArgInfo("thresholdDelta", 0)) &&
        jsopencv_to_safe(info, pyobj_minArea, minArea, ArgInfo("minArea", 0)) &&
        jsopencv_to_safe(info, pyobj_maxArea, maxArea, ArgInfo("maxArea", 0)) &&
        jsopencv_to_safe(info, pyobj_minProbability, minProbability, ArgInfo("minProbability", 0)) &&
        jsopencv_to_safe(info, pyobj_nonMaxSuppression, nonMaxSuppression, ArgInfo("nonMaxSuppression", 0)) &&
        jsopencv_to_safe(info, pyobj_minProbabilityDiff, minProbabilityDiff, ArgInfo("minProbabilityDiff", 0)))
    {
        ERRWRAP2(retval = cv::text::createERFilterNM1(filename, thresholdDelta, minArea, maxArea, minProbability, nonMaxSuppression, minProbabilityDiff));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("createERFilterNM1");

    return NULL;
}

static Napi::Value pyopencv_cv_text_createERFilterNM2(const Napi::CallbackInfo &info)
{
    using namespace cv::text;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_cb = NULL;
    Ptr<ERFilter::Callback> cb;
    Napi::Value* pyobj_minProbability = NULL;
    float minProbability=(float)0.3;
    Ptr<ERFilter> retval;

    const char* keywords[] = { "cb", "minProbability", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:createERFilterNM2", (char**)keywords, &pyobj_cb, &pyobj_minProbability) &&
        jsopencv_to_safe(info, pyobj_cb, cb, ArgInfo("cb", 0)) &&
        jsopencv_to_safe(info, pyobj_minProbability, minProbability, ArgInfo("minProbability", 0)))
    {
        ERRWRAP2(retval = cv::text::createERFilterNM2(cb, minProbability));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_filename = NULL;
    String filename;
    Napi::Value* pyobj_minProbability = NULL;
    float minProbability=(float)0.3;
    Ptr<ERFilter> retval;

    const char* keywords[] = { "filename", "minProbability", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:createERFilterNM2", (char**)keywords, &pyobj_filename, &pyobj_minProbability) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)) &&
        jsopencv_to_safe(info, pyobj_minProbability, minProbability, ArgInfo("minProbability", 0)))
    {
        ERRWRAP2(retval = cv::text::createERFilterNM2(filename, minProbability));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("createERFilterNM2");

    return NULL;
}

static Napi::Value pyopencv_cv_text_createOCRHMMTransitionsTable(const Napi::CallbackInfo &info)
{
    using namespace cv::text;

    Napi::Value* pyobj_vocabulary = NULL;
    String vocabulary;
    Napi::Value* pyobj_lexicon = NULL;
    vector_String lexicon;
    Mat retval;

    const char* keywords[] = { "vocabulary", "lexicon", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:createOCRHMMTransitionsTable", (char**)keywords, &pyobj_vocabulary, &pyobj_lexicon) &&
        jsopencv_to_safe(info, pyobj_vocabulary, vocabulary, ArgInfo("vocabulary", 0)) &&
        jsopencv_to_safe(info, pyobj_lexicon, lexicon, ArgInfo("lexicon", 0)))
    {
        ERRWRAP2(retval = cv::text::createOCRHMMTransitionsTable(vocabulary, lexicon));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_text_detectRegions(const Napi::CallbackInfo &info)
{
    using namespace cv::text;

    pyPrepareArgumentConversionErrorsStorage(4);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_er_filter1 = NULL;
    Ptr<ERFilter> er_filter1;
    Napi::Value* pyobj_er_filter2 = NULL;
    Ptr<ERFilter> er_filter2;
    vector_vector_Point regions;

    const char* keywords[] = { "image", "er_filter1", "er_filter2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:detectRegions", (char**)keywords, &pyobj_image, &pyobj_er_filter1, &pyobj_er_filter2) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_er_filter1, er_filter1, ArgInfo("er_filter1", 0)) &&
        jsopencv_to_safe(info, pyobj_er_filter2, er_filter2, ArgInfo("er_filter2", 0)))
    {
        ERRWRAP2(cv::text::detectRegions(image, er_filter1, er_filter2, regions));
        return jsopencv_from(regions);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_er_filter1 = NULL;
    Ptr<ERFilter> er_filter1;
    Napi::Value* pyobj_er_filter2 = NULL;
    Ptr<ERFilter> er_filter2;
    vector_vector_Point regions;

    const char* keywords[] = { "image", "er_filter1", "er_filter2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:detectRegions", (char**)keywords, &pyobj_image, &pyobj_er_filter1, &pyobj_er_filter2) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_er_filter1, er_filter1, ArgInfo("er_filter1", 0)) &&
        jsopencv_to_safe(info, pyobj_er_filter2, er_filter2, ArgInfo("er_filter2", 0)))
    {
        ERRWRAP2(cv::text::detectRegions(image, er_filter1, er_filter2, regions));
        return jsopencv_from(regions);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_er_filter1 = NULL;
    Ptr<ERFilter> er_filter1;
    Napi::Value* pyobj_er_filter2 = NULL;
    Ptr<ERFilter> er_filter2;
    vector_Rect groups_rects;
    Napi::Value* pyobj_method = NULL;
    int method=ERGROUPING_ORIENTATION_HORIZ;
    Napi::Value* pyobj_filename = NULL;
    String filename;
    Napi::Value* pyobj_minProbability = NULL;
    float minProbability=(float)0.5;

    const char* keywords[] = { "image", "er_filter1", "er_filter2", "method", "filename", "minProbability", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:detectRegions", (char**)keywords, &pyobj_image, &pyobj_er_filter1, &pyobj_er_filter2, &pyobj_method, &pyobj_filename, &pyobj_minProbability) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_er_filter1, er_filter1, ArgInfo("er_filter1", 0)) &&
        jsopencv_to_safe(info, pyobj_er_filter2, er_filter2, ArgInfo("er_filter2", 0)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)) &&
        jsopencv_to_safe(info, pyobj_minProbability, minProbability, ArgInfo("minProbability", 0)))
    {
        ERRWRAP2(cv::text::detectRegions(image, er_filter1, er_filter2, groups_rects, method, filename, minProbability));
        return jsopencv_from(groups_rects);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_er_filter1 = NULL;
    Ptr<ERFilter> er_filter1;
    Napi::Value* pyobj_er_filter2 = NULL;
    Ptr<ERFilter> er_filter2;
    vector_Rect groups_rects;
    Napi::Value* pyobj_method = NULL;
    int method=ERGROUPING_ORIENTATION_HORIZ;
    Napi::Value* pyobj_filename = NULL;
    String filename;
    Napi::Value* pyobj_minProbability = NULL;
    float minProbability=(float)0.5;

    const char* keywords[] = { "image", "er_filter1", "er_filter2", "method", "filename", "minProbability", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:detectRegions", (char**)keywords, &pyobj_image, &pyobj_er_filter1, &pyobj_er_filter2, &pyobj_method, &pyobj_filename, &pyobj_minProbability) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_er_filter1, er_filter1, ArgInfo("er_filter1", 0)) &&
        jsopencv_to_safe(info, pyobj_er_filter2, er_filter2, ArgInfo("er_filter2", 0)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)) &&
        jsopencv_to_safe(info, pyobj_minProbability, minProbability, ArgInfo("minProbability", 0)))
    {
        ERRWRAP2(cv::text::detectRegions(image, er_filter1, er_filter2, groups_rects, method, filename, minProbability));
        return jsopencv_from(groups_rects);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("detectRegions");

    return NULL;
}

static Napi::Value pyopencv_cv_text_detectTextSWT(const Napi::CallbackInfo &info)
{
    using namespace cv::text;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_input = NULL;
    Mat input;
    vector_Rect result;
    Napi::Value* pyobj_dark_on_light = NULL;
    bool dark_on_light=0;
    Napi::Value* pyobj_draw = NULL;
    Mat draw;
    Napi::Value* pyobj_chainBBs = NULL;
    Mat chainBBs;

    const char* keywords[] = { "input", "dark_on_light", "draw", "chainBBs", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:detectTextSWT", (char**)keywords, &pyobj_input, &pyobj_dark_on_light, &pyobj_draw, &pyobj_chainBBs) &&
        jsopencv_to_safe(info, pyobj_input, input, ArgInfo("input", 0)) &&
        jsopencv_to_safe(info, pyobj_dark_on_light, dark_on_light, ArgInfo("dark_on_light", 0)) &&
        jsopencv_to_safe(info, pyobj_draw, draw, ArgInfo("draw", 1)) &&
        jsopencv_to_safe(info, pyobj_chainBBs, chainBBs, ArgInfo("chainBBs", 1)))
    {
        ERRWRAP2(cv::text::detectTextSWT(input, result, dark_on_light, draw, chainBBs));
        return Py_BuildValue("(NNN)", jsopencv_from(result), jsopencv_from(draw), jsopencv_from(chainBBs));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_input = NULL;
    UMat input;
    vector_Rect result;
    Napi::Value* pyobj_dark_on_light = NULL;
    bool dark_on_light=0;
    Napi::Value* pyobj_draw = NULL;
    UMat draw;
    Napi::Value* pyobj_chainBBs = NULL;
    UMat chainBBs;

    const char* keywords[] = { "input", "dark_on_light", "draw", "chainBBs", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:detectTextSWT", (char**)keywords, &pyobj_input, &pyobj_dark_on_light, &pyobj_draw, &pyobj_chainBBs) &&
        jsopencv_to_safe(info, pyobj_input, input, ArgInfo("input", 0)) &&
        jsopencv_to_safe(info, pyobj_dark_on_light, dark_on_light, ArgInfo("dark_on_light", 0)) &&
        jsopencv_to_safe(info, pyobj_draw, draw, ArgInfo("draw", 1)) &&
        jsopencv_to_safe(info, pyobj_chainBBs, chainBBs, ArgInfo("chainBBs", 1)))
    {
        ERRWRAP2(cv::text::detectTextSWT(input, result, dark_on_light, draw, chainBBs));
        return Py_BuildValue("(NNN)", jsopencv_from(result), jsopencv_from(draw), jsopencv_from(chainBBs));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("detectTextSWT");

    return NULL;
}

static Napi::Value pyopencv_cv_text_erGrouping(const Napi::CallbackInfo &info)
{
    using namespace cv::text;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_channel = NULL;
    Mat channel;
    Napi::Value* pyobj_regions = NULL;
    vector_vector_Point regions;
    vector_Rect groups_rects;
    Napi::Value* pyobj_method = NULL;
    int method=ERGROUPING_ORIENTATION_HORIZ;
    Napi::Value* pyobj_filename = NULL;
    String filename;
    Napi::Value* pyobj_minProbablity = NULL;
    float minProbablity=(float)0.5;

    const char* keywords[] = { "image", "channel", "regions", "method", "filename", "minProbablity", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:erGrouping", (char**)keywords, &pyobj_image, &pyobj_channel, &pyobj_regions, &pyobj_method, &pyobj_filename, &pyobj_minProbablity) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_channel, channel, ArgInfo("channel", 0)) &&
        jsopencv_to_safe(info, pyobj_regions, regions, ArgInfo("regions", 0)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)) &&
        jsopencv_to_safe(info, pyobj_minProbablity, minProbablity, ArgInfo("minProbablity", 0)))
    {
        ERRWRAP2(cv::text::erGrouping(image, channel, regions, groups_rects, method, filename, minProbablity));
        return jsopencv_from(groups_rects);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_channel = NULL;
    UMat channel;
    Napi::Value* pyobj_regions = NULL;
    vector_vector_Point regions;
    vector_Rect groups_rects;
    Napi::Value* pyobj_method = NULL;
    int method=ERGROUPING_ORIENTATION_HORIZ;
    Napi::Value* pyobj_filename = NULL;
    String filename;
    Napi::Value* pyobj_minProbablity = NULL;
    float minProbablity=(float)0.5;

    const char* keywords[] = { "image", "channel", "regions", "method", "filename", "minProbablity", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOO:erGrouping", (char**)keywords, &pyobj_image, &pyobj_channel, &pyobj_regions, &pyobj_method, &pyobj_filename, &pyobj_minProbablity) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_channel, channel, ArgInfo("channel", 0)) &&
        jsopencv_to_safe(info, pyobj_regions, regions, ArgInfo("regions", 0)) &&
        jsopencv_to_safe(info, pyobj_method, method, ArgInfo("method", 0)) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)) &&
        jsopencv_to_safe(info, pyobj_minProbablity, minProbablity, ArgInfo("minProbablity", 0)))
    {
        ERRWRAP2(cv::text::erGrouping(image, channel, regions, groups_rects, method, filename, minProbablity));
        return jsopencv_from(groups_rects);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("erGrouping");

    return NULL;
}

static Napi::Value pyopencv_cv_text_loadClassifierNM1(const Napi::CallbackInfo &info)
{
    using namespace cv::text;

    Napi::Value* pyobj_filename = NULL;
    String filename;
    Ptr<ERFilter::Callback> retval;

    const char* keywords[] = { "filename", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:loadClassifierNM1", (char**)keywords, &pyobj_filename) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)))
    {
        ERRWRAP2(retval = cv::text::loadClassifierNM1(filename));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_text_loadClassifierNM2(const Napi::CallbackInfo &info)
{
    using namespace cv::text;

    Napi::Value* pyobj_filename = NULL;
    String filename;
    Ptr<ERFilter::Callback> retval;

    const char* keywords[] = { "filename", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:loadClassifierNM2", (char**)keywords, &pyobj_filename) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)))
    {
        ERRWRAP2(retval = cv::text::loadClassifierNM2(filename));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_text_loadOCRBeamSearchClassifierCNN(const Napi::CallbackInfo &info)
{
    using namespace cv::text;

    Napi::Value* pyobj_filename = NULL;
    String filename;
    Ptr<OCRBeamSearchDecoder::ClassifierCallback> retval;

    const char* keywords[] = { "filename", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:loadOCRBeamSearchClassifierCNN", (char**)keywords, &pyobj_filename) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)))
    {
        ERRWRAP2(retval = cv::text::loadOCRBeamSearchClassifierCNN(filename));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_text_loadOCRHMMClassifier(const Napi::CallbackInfo &info)
{
    using namespace cv::text;

    Napi::Value* pyobj_filename = NULL;
    String filename;
    Napi::Value* pyobj_classifier = NULL;
    int classifier=0;
    Ptr<OCRHMMDecoder::ClassifierCallback> retval;

    const char* keywords[] = { "filename", "classifier", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:loadOCRHMMClassifier", (char**)keywords, &pyobj_filename, &pyobj_classifier) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)) &&
        jsopencv_to_safe(info, pyobj_classifier, classifier, ArgInfo("classifier", 0)))
    {
        ERRWRAP2(retval = cv::text::loadOCRHMMClassifier(filename, classifier));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_text_loadOCRHMMClassifierCNN(const Napi::CallbackInfo &info)
{
    using namespace cv::text;

    Napi::Value* pyobj_filename = NULL;
    String filename;
    Ptr<OCRHMMDecoder::ClassifierCallback> retval;

    const char* keywords[] = { "filename", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:loadOCRHMMClassifierCNN", (char**)keywords, &pyobj_filename) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)))
    {
        ERRWRAP2(retval = cv::text::loadOCRHMMClassifierCNN(filename));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_text_loadOCRHMMClassifierNM(const Napi::CallbackInfo &info)
{
    using namespace cv::text;

    Napi::Value* pyobj_filename = NULL;
    String filename;
    Ptr<OCRHMMDecoder::ClassifierCallback> retval;

    const char* keywords[] = { "filename", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:loadOCRHMMClassifierNM", (char**)keywords, &pyobj_filename) &&
        jsopencv_to_safe(info, pyobj_filename, filename, ArgInfo("filename", 0)))
    {
        ERRWRAP2(retval = cv::text::loadOCRHMMClassifierNM(filename));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_dumpBool(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    Napi::Value* pyobj_argument = NULL;
    bool argument=0;
    String retval;

    const char* keywords[] = { "argument", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:dumpBool", (char**)keywords, &pyobj_argument) &&
        jsopencv_to_safe(info, pyobj_argument, argument, ArgInfo("argument", 0)))
    {
        ERRWRAP2(retval = cv::utils::dumpBool(argument));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_dumpCString(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    char* argument=(char*)"";
    String retval;

    const char* keywords[] = { "argument", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "s:dumpCString", (char**)keywords, &argument))
    {
        ERRWRAP2(retval = cv::utils::dumpCString(argument));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_dumpDouble(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    Napi::Value* pyobj_argument = NULL;
    double argument=0;
    String retval;

    const char* keywords[] = { "argument", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:dumpDouble", (char**)keywords, &pyobj_argument) &&
        jsopencv_to_safe(info, pyobj_argument, argument, ArgInfo("argument", 0)))
    {
        ERRWRAP2(retval = cv::utils::dumpDouble(argument));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_dumpFloat(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    Napi::Value* pyobj_argument = NULL;
    float argument=0.f;
    String retval;

    const char* keywords[] = { "argument", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:dumpFloat", (char**)keywords, &pyobj_argument) &&
        jsopencv_to_safe(info, pyobj_argument, argument, ArgInfo("argument", 0)))
    {
        ERRWRAP2(retval = cv::utils::dumpFloat(argument));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_dumpInputArray(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_argument = NULL;
    Mat argument;
    String retval;

    const char* keywords[] = { "argument", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:dumpInputArray", (char**)keywords, &pyobj_argument) &&
        jsopencv_to_safe(info, pyobj_argument, argument, ArgInfo("argument", 0)))
    {
        ERRWRAP2(retval = cv::utils::dumpInputArray(argument));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_argument = NULL;
    UMat argument;
    String retval;

    const char* keywords[] = { "argument", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:dumpInputArray", (char**)keywords, &pyobj_argument) &&
        jsopencv_to_safe(info, pyobj_argument, argument, ArgInfo("argument", 0)))
    {
        ERRWRAP2(retval = cv::utils::dumpInputArray(argument));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("dumpInputArray");

    return NULL;
}

static Napi::Value pyopencv_cv_utils_dumpInputArrayOfArrays(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_argument = NULL;
    vector_Mat argument;
    String retval;

    const char* keywords[] = { "argument", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:dumpInputArrayOfArrays", (char**)keywords, &pyobj_argument) &&
        jsopencv_to_safe(info, pyobj_argument, argument, ArgInfo("argument", 0)))
    {
        ERRWRAP2(retval = cv::utils::dumpInputArrayOfArrays(argument));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_argument = NULL;
    vector_UMat argument;
    String retval;

    const char* keywords[] = { "argument", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:dumpInputArrayOfArrays", (char**)keywords, &pyobj_argument) &&
        jsopencv_to_safe(info, pyobj_argument, argument, ArgInfo("argument", 0)))
    {
        ERRWRAP2(retval = cv::utils::dumpInputArrayOfArrays(argument));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("dumpInputArrayOfArrays");

    return NULL;
}

static Napi::Value pyopencv_cv_utils_dumpInputOutputArray(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_argument = NULL;
    Mat argument;
    String retval;

    const char* keywords[] = { "argument", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:dumpInputOutputArray", (char**)keywords, &pyobj_argument) &&
        jsopencv_to_safe(info, pyobj_argument, argument, ArgInfo("argument", 1)))
    {
        ERRWRAP2(retval = cv::utils::dumpInputOutputArray(argument));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(argument));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_argument = NULL;
    UMat argument;
    String retval;

    const char* keywords[] = { "argument", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:dumpInputOutputArray", (char**)keywords, &pyobj_argument) &&
        jsopencv_to_safe(info, pyobj_argument, argument, ArgInfo("argument", 1)))
    {
        ERRWRAP2(retval = cv::utils::dumpInputOutputArray(argument));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(argument));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("dumpInputOutputArray");

    return NULL;
}

static Napi::Value pyopencv_cv_utils_dumpInputOutputArrayOfArrays(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_argument = NULL;
    vector_Mat argument;
    String retval;

    const char* keywords[] = { "argument", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:dumpInputOutputArrayOfArrays", (char**)keywords, &pyobj_argument) &&
        jsopencv_to_safe(info, pyobj_argument, argument, ArgInfo("argument", 1)))
    {
        ERRWRAP2(retval = cv::utils::dumpInputOutputArrayOfArrays(argument));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(argument));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_argument = NULL;
    vector_UMat argument;
    String retval;

    const char* keywords[] = { "argument", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:dumpInputOutputArrayOfArrays", (char**)keywords, &pyobj_argument) &&
        jsopencv_to_safe(info, pyobj_argument, argument, ArgInfo("argument", 1)))
    {
        ERRWRAP2(retval = cv::utils::dumpInputOutputArrayOfArrays(argument));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(argument));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("dumpInputOutputArrayOfArrays");

    return NULL;
}

static Napi::Value pyopencv_cv_utils_dumpInt(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    Napi::Value* pyobj_argument = NULL;
    int argument=0;
    String retval;

    const char* keywords[] = { "argument", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:dumpInt", (char**)keywords, &pyobj_argument) &&
        jsopencv_to_safe(info, pyobj_argument, argument, ArgInfo("argument", 0)))
    {
        ERRWRAP2(retval = cv::utils::dumpInt(argument));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_dumpInt64(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    Napi::Value* pyobj_argument = NULL;
    int64 argument;
    String retval;

    const char* keywords[] = { "argument", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:dumpInt64", (char**)keywords, &pyobj_argument) &&
        jsopencv_to_safe(info, pyobj_argument, argument, ArgInfo("argument", 0)))
    {
        ERRWRAP2(retval = cv::utils::dumpInt64(argument));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_dumpRange(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    Napi::Value* pyobj_argument = NULL;
    Range argument;
    String retval;

    const char* keywords[] = { "argument", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:dumpRange", (char**)keywords, &pyobj_argument) &&
        jsopencv_to_safe(info, pyobj_argument, argument, ArgInfo("argument", 0)))
    {
        ERRWRAP2(retval = cv::utils::dumpRange(argument));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_dumpRect(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    Napi::Value* pyobj_argument = NULL;
    Rect argument;
    String retval;

    const char* keywords[] = { "argument", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:dumpRect", (char**)keywords, &pyobj_argument) &&
        jsopencv_to_safe(info, pyobj_argument, argument, ArgInfo("argument", 0)))
    {
        ERRWRAP2(retval = cv::utils::dumpRect(argument));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_dumpRotatedRect(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    Napi::Value* pyobj_argument = NULL;
    RotatedRect argument;
    String retval;

    const char* keywords[] = { "argument", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:dumpRotatedRect", (char**)keywords, &pyobj_argument) &&
        jsopencv_to_safe(info, pyobj_argument, argument, ArgInfo("argument", 0)))
    {
        ERRWRAP2(retval = cv::utils::dumpRotatedRect(argument));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_dumpSizeT(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    Napi::Value* pyobj_argument = NULL;
    size_t argument=0;
    String retval;

    const char* keywords[] = { "argument", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:dumpSizeT", (char**)keywords, &pyobj_argument) &&
        jsopencv_to_safe(info, pyobj_argument, argument, ArgInfo("argument", 0)))
    {
        ERRWRAP2(retval = cv::utils::dumpSizeT(argument));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_dumpString(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    Napi::Value* pyobj_argument = NULL;
    String argument;
    String retval;

    const char* keywords[] = { "argument", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:dumpString", (char**)keywords, &pyobj_argument) &&
        jsopencv_to_safe(info, pyobj_argument, argument, ArgInfo("argument", 0)))
    {
        ERRWRAP2(retval = cv::utils::dumpString(argument));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_dumpTermCriteria(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    Napi::Value* pyobj_argument = NULL;
    TermCriteria argument;
    String retval;

    const char* keywords[] = { "argument", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:dumpTermCriteria", (char**)keywords, &pyobj_argument) &&
        jsopencv_to_safe(info, pyobj_argument, argument, ArgInfo("argument", 0)))
    {
        ERRWRAP2(retval = cv::utils::dumpTermCriteria(argument));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_dumpVec2i(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    Napi::Value* pyobj_value = NULL;
    Vec2i value=cv::Vec2i(42, 24);
    String retval;

    const char* keywords[] = { "value", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|O:dumpVec2i", (char**)keywords, &pyobj_value) &&
        jsopencv_to_safe(info, pyobj_value, value, ArgInfo("value", 0)))
    {
        ERRWRAP2(retval = cv::utils::dumpVec2i(value));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_dumpVectorOfDouble(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    Napi::Value* pyobj_vec = NULL;
    vector_double vec;
    String retval;

    const char* keywords[] = { "vec", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:dumpVectorOfDouble", (char**)keywords, &pyobj_vec) &&
        jsopencv_to_safe(info, pyobj_vec, vec, ArgInfo("vec", 0)))
    {
        ERRWRAP2(retval = cv::utils::dumpVectorOfDouble(vec));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_dumpVectorOfInt(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    Napi::Value* pyobj_vec = NULL;
    vector_int vec;
    String retval;

    const char* keywords[] = { "vec", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:dumpVectorOfInt", (char**)keywords, &pyobj_vec) &&
        jsopencv_to_safe(info, pyobj_vec, vec, ArgInfo("vec", 0)))
    {
        ERRWRAP2(retval = cv::utils::dumpVectorOfInt(vec));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_dumpVectorOfRect(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    Napi::Value* pyobj_vec = NULL;
    vector_Rect vec;
    String retval;

    const char* keywords[] = { "vec", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:dumpVectorOfRect", (char**)keywords, &pyobj_vec) &&
        jsopencv_to_safe(info, pyobj_vec, vec, ArgInfo("vec", 0)))
    {
        ERRWRAP2(retval = cv::utils::dumpVectorOfRect(vec));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_generateVectorOfInt(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    Napi::Value* pyobj_len = NULL;
    size_t len=0;
    vector_int vec;

    const char* keywords[] = { "len", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:generateVectorOfInt", (char**)keywords, &pyobj_len) &&
        jsopencv_to_safe(info, pyobj_len, len, ArgInfo("len", 0)))
    {
        ERRWRAP2(cv::utils::generateVectorOfInt(len, vec));
        return jsopencv_from(vec);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_generateVectorOfMat(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    Napi::Value* pyobj_len = NULL;
    size_t len=0;
    Napi::Value* pyobj_rows = NULL;
    int rows=0;
    Napi::Value* pyobj_cols = NULL;
    int cols=0;
    Napi::Value* pyobj_dtype = NULL;
    int dtype=0;
    Napi::Value* pyobj_vec = NULL;
    vector_Mat vec;

    const char* keywords[] = { "len", "rows", "cols", "dtype", "vec", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:generateVectorOfMat", (char**)keywords, &pyobj_len, &pyobj_rows, &pyobj_cols, &pyobj_dtype, &pyobj_vec) &&
        jsopencv_to_safe(info, pyobj_len, len, ArgInfo("len", 0)) &&
        jsopencv_to_safe(info, pyobj_rows, rows, ArgInfo("rows", 0)) &&
        jsopencv_to_safe(info, pyobj_cols, cols, ArgInfo("cols", 0)) &&
        jsopencv_to_safe(info, pyobj_dtype, dtype, ArgInfo("dtype", 0)) &&
        jsopencv_to_safe(info, pyobj_vec, vec, ArgInfo("vec", 1)))
    {
        ERRWRAP2(cv::utils::generateVectorOfMat(len, rows, cols, dtype, vec));
        return jsopencv_from(vec);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_generateVectorOfRect(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    Napi::Value* pyobj_len = NULL;
    size_t len=0;
    vector_Rect vec;

    const char* keywords[] = { "len", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:generateVectorOfRect", (char**)keywords, &pyobj_len) &&
        jsopencv_to_safe(info, pyobj_len, len, ArgInfo("len", 0)))
    {
        ERRWRAP2(cv::utils::generateVectorOfRect(len, vec));
        return jsopencv_from(vec);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_testAsyncArray(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_argument = NULL;
    Mat argument;
    AsyncArray retval;

    const char* keywords[] = { "argument", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:testAsyncArray", (char**)keywords, &pyobj_argument) &&
        jsopencv_to_safe(info, pyobj_argument, argument, ArgInfo("argument", 0)))
    {
        ERRWRAP2(retval = cv::utils::testAsyncArray(argument));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_argument = NULL;
    UMat argument;
    AsyncArray retval;

    const char* keywords[] = { "argument", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:testAsyncArray", (char**)keywords, &pyobj_argument) &&
        jsopencv_to_safe(info, pyobj_argument, argument, ArgInfo("argument", 0)))
    {
        ERRWRAP2(retval = cv::utils::testAsyncArray(argument));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("testAsyncArray");

    return NULL;
}

static Napi::Value pyopencv_cv_utils_testAsyncException(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    AsyncArray retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::utils::testAsyncException());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_testOverloadResolution(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_value = NULL;
    int value=0;
    Napi::Value* pyobj_point = NULL;
    Point point=Point(42, 24);
    String retval;

    const char* keywords[] = { "value", "point", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:testOverloadResolution", (char**)keywords, &pyobj_value, &pyobj_point) &&
        jsopencv_to_safe(info, pyobj_value, value, ArgInfo("value", 0)) &&
        jsopencv_to_safe(info, pyobj_point, point, ArgInfo("point", 0)))
    {
        ERRWRAP2(retval = cv::utils::testOverloadResolution(value, point));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_rect = NULL;
    Rect rect;
    String retval;

    const char* keywords[] = { "rect", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:testOverloadResolution", (char**)keywords, &pyobj_rect) &&
        jsopencv_to_safe(info, pyobj_rect, rect, ArgInfo("rect", 0)))
    {
        ERRWRAP2(retval = cv::utils::testOverloadResolution(rect));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("testOverloadResolution");

    return NULL;
}

static Napi::Value pyopencv_cv_utils_testOverwriteNativeMethod(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    Napi::Value* pyobj_argument = NULL;
    int argument=0;
    int retval;

    const char* keywords[] = { "argument", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:testOverwriteNativeMethod", (char**)keywords, &pyobj_argument) &&
        jsopencv_to_safe(info, pyobj_argument, argument, ArgInfo("argument", 0)))
    {
        ERRWRAP2(retval = cv::utils::testOverwriteNativeMethod(argument));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_testRaiseGeneralException(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;


    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(cv::utils::testRaiseGeneralException());
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_testReservedKeywordConversion(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    Napi::Value* pyobj_positional_argument = NULL;
    int positional_argument=0;
    Napi::Value* pyobj_lambda = NULL;
    int lambda=2;
    Napi::Value* pyobj_from = NULL;
    int from=3;
    String retval;

    const char* keywords[] = { "positional_argument", "lambda_", "from_", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:testReservedKeywordConversion", (char**)keywords, &pyobj_positional_argument, &pyobj_lambda, &pyobj_from) &&
        jsopencv_to_safe(info, pyobj_positional_argument, positional_argument, ArgInfo("positional_argument", 0)) &&
        jsopencv_to_safe(info, pyobj_lambda, lambda, ArgInfo("lambda", 0)) &&
        jsopencv_to_safe(info, pyobj_from, from, ArgInfo("from", 0)))
    {
        ERRWRAP2(retval = cv::utils::testReservedKeywordConversion(positional_argument, lambda, from));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_testRotatedRect(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    Napi::Value* pyobj_x = NULL;
    float x=0.f;
    Napi::Value* pyobj_y = NULL;
    float y=0.f;
    Napi::Value* pyobj_w = NULL;
    float w=0.f;
    Napi::Value* pyobj_h = NULL;
    float h=0.f;
    Napi::Value* pyobj_angle = NULL;
    float angle=0.f;
    RotatedRect retval;

    const char* keywords[] = { "x", "y", "w", "h", "angle", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO:testRotatedRect", (char**)keywords, &pyobj_x, &pyobj_y, &pyobj_w, &pyobj_h, &pyobj_angle) &&
        jsopencv_to_safe(info, pyobj_x, x, ArgInfo("x", 0)) &&
        jsopencv_to_safe(info, pyobj_y, y, ArgInfo("y", 0)) &&
        jsopencv_to_safe(info, pyobj_w, w, ArgInfo("w", 0)) &&
        jsopencv_to_safe(info, pyobj_h, h, ArgInfo("h", 0)) &&
        jsopencv_to_safe(info, pyobj_angle, angle, ArgInfo("angle", 0)))
    {
        ERRWRAP2(retval = cv::utils::testRotatedRect(x, y, w, h, angle));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_testRotatedRectVector(const Napi::CallbackInfo &info)
{
    using namespace cv::utils;

    Napi::Value* pyobj_x = NULL;
    float x=0.f;
    Napi::Value* pyobj_y = NULL;
    float y=0.f;
    Napi::Value* pyobj_w = NULL;
    float w=0.f;
    Napi::Value* pyobj_h = NULL;
    float h=0.f;
    Napi::Value* pyobj_angle = NULL;
    float angle=0.f;
    std::vector<RotatedRect> retval;

    const char* keywords[] = { "x", "y", "w", "h", "angle", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO:testRotatedRectVector", (char**)keywords, &pyobj_x, &pyobj_y, &pyobj_w, &pyobj_h, &pyobj_angle) &&
        jsopencv_to_safe(info, pyobj_x, x, ArgInfo("x", 0)) &&
        jsopencv_to_safe(info, pyobj_y, y, ArgInfo("y", 0)) &&
        jsopencv_to_safe(info, pyobj_w, w, ArgInfo("w", 0)) &&
        jsopencv_to_safe(info, pyobj_h, h, ArgInfo("h", 0)) &&
        jsopencv_to_safe(info, pyobj_angle, angle, ArgInfo("angle", 0)))
    {
        ERRWRAP2(retval = cv::utils::testRotatedRectVector(x, y, w, h, angle));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_fs_getCacheDirectoryForDownloads(const Napi::CallbackInfo &info)
{
    using namespace cv::utils::fs;

    cv::String retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::utils::fs::getCacheDirectoryForDownloads());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_nested_ExportClassName_create(const Napi::CallbackInfo &info)
{
    using namespace cv::utils::nested;

    Napi::Value* pyobj_params = NULL;
    OriginalClassName_Params params=OriginalClassName::Params();
    Ptr<OriginalClassName> retval;

    const char* keywords[] = { "params", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|O:ExportClassName_create", (char**)keywords, &pyobj_params) &&
        jsopencv_to_safe(info, pyobj_params, params, ArgInfo("params", 0)))
    {
        ERRWRAP2(retval = cv::utils::nested::OriginalClassName::create(params));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_nested_ExportClassName_originalName(const Napi::CallbackInfo &info)
{
    using namespace cv::utils::nested;

    std::string retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::utils::nested::OriginalClassName::originalName());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_nested_OriginalClassName_create(const Napi::CallbackInfo &info)
{
    using namespace cv::utils::nested;

    Napi::Value* pyobj_params = NULL;
    OriginalClassName_Params params=OriginalClassName::Params();
    Ptr<OriginalClassName> retval;

    const char* keywords[] = { "params", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|O:OriginalClassName_create", (char**)keywords, &pyobj_params) &&
        jsopencv_to_safe(info, pyobj_params, params, ArgInfo("params", 0)))
    {
        ERRWRAP2(retval = cv::utils::nested::OriginalClassName::create(params));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_nested_OriginalClassName_originalName(const Napi::CallbackInfo &info)
{
    using namespace cv::utils::nested;

    std::string retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::utils::nested::OriginalClassName::originalName());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_utils_nested_testEchoBooleanFunction(const Napi::CallbackInfo &info)
{
    using namespace cv::utils::nested;

    Napi::Value* pyobj_flag = NULL;
    bool flag=0;
    bool retval;

    const char* keywords[] = { "flag", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:testEchoBooleanFunction", (char**)keywords, &pyobj_flag) &&
        jsopencv_to_safe(info, pyobj_flag, flag, ArgInfo("flag", 0)))
    {
        ERRWRAP2(retval = cv::utils::nested::testEchoBooleanFunction(flag));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_videoio_registry_getBackendName(const Napi::CallbackInfo &info)
{
    using namespace cv::videoio_registry;

    Napi::Value* pyobj_api = NULL;
    VideoCaptureAPIs api=static_cast<VideoCaptureAPIs>(0);
    cv::String retval;

    const char* keywords[] = { "api", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:getBackendName", (char**)keywords, &pyobj_api) &&
        jsopencv_to_safe(info, pyobj_api, api, ArgInfo("api", 0)))
    {
        ERRWRAP2(retval = cv::videoio_registry::getBackendName(api));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_videoio_registry_getBackends(const Napi::CallbackInfo &info)
{
    using namespace cv::videoio_registry;

    std::vector<VideoCaptureAPIs> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::videoio_registry::getBackends());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_videoio_registry_getCameraBackendPluginVersion(const Napi::CallbackInfo &info)
{
    using namespace cv::videoio_registry;

    Napi::Value* pyobj_api = NULL;
    VideoCaptureAPIs api=static_cast<VideoCaptureAPIs>(0);
    int version_ABI;
    int version_API;
    std::string retval;

    const char* keywords[] = { "api", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:getCameraBackendPluginVersion", (char**)keywords, &pyobj_api) &&
        jsopencv_to_safe(info, pyobj_api, api, ArgInfo("api", 0)))
    {
        ERRWRAP2(retval = cv::videoio_registry::getCameraBackendPluginVersion(api, version_ABI, version_API));
        return Py_BuildValue("(NNN)", jsopencv_from(retval), jsopencv_from(version_ABI), jsopencv_from(version_API));
    }

    return NULL;
}

static Napi::Value pyopencv_cv_videoio_registry_getCameraBackends(const Napi::CallbackInfo &info)
{
    using namespace cv::videoio_registry;

    std::vector<VideoCaptureAPIs> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::videoio_registry::getCameraBackends());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_videoio_registry_getStreamBackendPluginVersion(const Napi::CallbackInfo &info)
{
    using namespace cv::videoio_registry;

    Napi::Value* pyobj_api = NULL;
    VideoCaptureAPIs api=static_cast<VideoCaptureAPIs>(0);
    int version_ABI;
    int version_API;
    std::string retval;

    const char* keywords[] = { "api", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:getStreamBackendPluginVersion", (char**)keywords, &pyobj_api) &&
        jsopencv_to_safe(info, pyobj_api, api, ArgInfo("api", 0)))
    {
        ERRWRAP2(retval = cv::videoio_registry::getStreamBackendPluginVersion(api, version_ABI, version_API));
        return Py_BuildValue("(NNN)", jsopencv_from(retval), jsopencv_from(version_ABI), jsopencv_from(version_API));
    }

    return NULL;
}

static Napi::Value pyopencv_cv_videoio_registry_getStreamBackends(const Napi::CallbackInfo &info)
{
    using namespace cv::videoio_registry;

    std::vector<VideoCaptureAPIs> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::videoio_registry::getStreamBackends());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_videoio_registry_getWriterBackendPluginVersion(const Napi::CallbackInfo &info)
{
    using namespace cv::videoio_registry;

    Napi::Value* pyobj_api = NULL;
    VideoCaptureAPIs api=static_cast<VideoCaptureAPIs>(0);
    int version_ABI;
    int version_API;
    std::string retval;

    const char* keywords[] = { "api", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:getWriterBackendPluginVersion", (char**)keywords, &pyobj_api) &&
        jsopencv_to_safe(info, pyobj_api, api, ArgInfo("api", 0)))
    {
        ERRWRAP2(retval = cv::videoio_registry::getWriterBackendPluginVersion(api, version_ABI, version_API));
        return Py_BuildValue("(NNN)", jsopencv_from(retval), jsopencv_from(version_ABI), jsopencv_from(version_API));
    }

    return NULL;
}

static Napi::Value pyopencv_cv_videoio_registry_getWriterBackends(const Napi::CallbackInfo &info)
{
    using namespace cv::videoio_registry;

    std::vector<VideoCaptureAPIs> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::videoio_registry::getWriterBackends());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_videoio_registry_hasBackend(const Napi::CallbackInfo &info)
{
    using namespace cv::videoio_registry;

    Napi::Value* pyobj_api = NULL;
    VideoCaptureAPIs api=static_cast<VideoCaptureAPIs>(0);
    bool retval;

    const char* keywords[] = { "api", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:hasBackend", (char**)keywords, &pyobj_api) &&
        jsopencv_to_safe(info, pyobj_api, api, ArgInfo("api", 0)))
    {
        ERRWRAP2(retval = cv::videoio_registry::hasBackend(api));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_videoio_registry_isBackendBuiltIn(const Napi::CallbackInfo &info)
{
    using namespace cv::videoio_registry;

    Napi::Value* pyobj_api = NULL;
    VideoCaptureAPIs api=static_cast<VideoCaptureAPIs>(0);
    bool retval;

    const char* keywords[] = { "api", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:isBackendBuiltIn", (char**)keywords, &pyobj_api) &&
        jsopencv_to_safe(info, pyobj_api, api, ArgInfo("api", 0)))
    {
        ERRWRAP2(retval = cv::videoio_registry::isBackendBuiltIn(api));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_xfeatures2d_BEBLID_create(const Napi::CallbackInfo &info)
{
    using namespace cv::xfeatures2d;

    Napi::Value* pyobj_scale_factor = NULL;
    float scale_factor=0.f;
    Napi::Value* pyobj_n_bits = NULL;
    int n_bits=BEBLID::SIZE_512_BITS;
    Ptr<BEBLID> retval;

    const char* keywords[] = { "scale_factor", "n_bits", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:BEBLID_create", (char**)keywords, &pyobj_scale_factor, &pyobj_n_bits) &&
        jsopencv_to_safe(info, pyobj_scale_factor, scale_factor, ArgInfo("scale_factor", 0)) &&
        jsopencv_to_safe(info, pyobj_n_bits, n_bits, ArgInfo("n_bits", 0)))
    {
        ERRWRAP2(retval = cv::xfeatures2d::BEBLID::create(scale_factor, n_bits));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_xfeatures2d_BoostDesc_create(const Napi::CallbackInfo &info)
{
    using namespace cv::xfeatures2d;

    Napi::Value* pyobj_desc = NULL;
    int desc=BoostDesc::BINBOOST_256;
    Napi::Value* pyobj_use_scale_orientation = NULL;
    bool use_scale_orientation=true;
    Napi::Value* pyobj_scale_factor = NULL;
    float scale_factor=6.25f;
    Ptr<BoostDesc> retval;

    const char* keywords[] = { "desc", "use_scale_orientation", "scale_factor", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOO:BoostDesc_create", (char**)keywords, &pyobj_desc, &pyobj_use_scale_orientation, &pyobj_scale_factor) &&
        jsopencv_to_safe(info, pyobj_desc, desc, ArgInfo("desc", 0)) &&
        jsopencv_to_safe(info, pyobj_use_scale_orientation, use_scale_orientation, ArgInfo("use_scale_orientation", 0)) &&
        jsopencv_to_safe(info, pyobj_scale_factor, scale_factor, ArgInfo("scale_factor", 0)))
    {
        ERRWRAP2(retval = cv::xfeatures2d::BoostDesc::create(desc, use_scale_orientation, scale_factor));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_xfeatures2d_BriefDescriptorExtractor_create(const Napi::CallbackInfo &info)
{
    using namespace cv::xfeatures2d;

    Napi::Value* pyobj_bytes = NULL;
    int bytes=32;
    Napi::Value* pyobj_use_orientation = NULL;
    bool use_orientation=false;
    Ptr<BriefDescriptorExtractor> retval;

    const char* keywords[] = { "bytes", "use_orientation", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OO:BriefDescriptorExtractor_create", (char**)keywords, &pyobj_bytes, &pyobj_use_orientation) &&
        jsopencv_to_safe(info, pyobj_bytes, bytes, ArgInfo("bytes", 0)) &&
        jsopencv_to_safe(info, pyobj_use_orientation, use_orientation, ArgInfo("use_orientation", 0)))
    {
        ERRWRAP2(retval = cv::xfeatures2d::BriefDescriptorExtractor::create(bytes, use_orientation));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_xfeatures2d_DAISY_create(const Napi::CallbackInfo &info)
{
    using namespace cv::xfeatures2d;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_radius = NULL;
    float radius=15;
    Napi::Value* pyobj_q_radius = NULL;
    int q_radius=3;
    Napi::Value* pyobj_q_theta = NULL;
    int q_theta=8;
    Napi::Value* pyobj_q_hist = NULL;
    int q_hist=8;
    Napi::Value* pyobj_norm = NULL;
    DAISY_NormalizationType norm=DAISY::NRM_NONE;
    Napi::Value* pyobj_H = NULL;
    Mat H;
    Napi::Value* pyobj_interpolation = NULL;
    bool interpolation=true;
    Napi::Value* pyobj_use_orientation = NULL;
    bool use_orientation=false;
    Ptr<DAISY> retval;

    const char* keywords[] = { "radius", "q_radius", "q_theta", "q_hist", "norm", "H", "interpolation", "use_orientation", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOOOOOO:DAISY_create", (char**)keywords, &pyobj_radius, &pyobj_q_radius, &pyobj_q_theta, &pyobj_q_hist, &pyobj_norm, &pyobj_H, &pyobj_interpolation, &pyobj_use_orientation) &&
        jsopencv_to_safe(info, pyobj_radius, radius, ArgInfo("radius", 0)) &&
        jsopencv_to_safe(info, pyobj_q_radius, q_radius, ArgInfo("q_radius", 0)) &&
        jsopencv_to_safe(info, pyobj_q_theta, q_theta, ArgInfo("q_theta", 0)) &&
        jsopencv_to_safe(info, pyobj_q_hist, q_hist, ArgInfo("q_hist", 0)) &&
        jsopencv_to_safe(info, pyobj_norm, norm, ArgInfo("norm", 0)) &&
        jsopencv_to_safe(info, pyobj_H, H, ArgInfo("H", 0)) &&
        jsopencv_to_safe(info, pyobj_interpolation, interpolation, ArgInfo("interpolation", 0)) &&
        jsopencv_to_safe(info, pyobj_use_orientation, use_orientation, ArgInfo("use_orientation", 0)))
    {
        ERRWRAP2(retval = cv::xfeatures2d::DAISY::create(radius, q_radius, q_theta, q_hist, norm, H, interpolation, use_orientation));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_radius = NULL;
    float radius=15;
    Napi::Value* pyobj_q_radius = NULL;
    int q_radius=3;
    Napi::Value* pyobj_q_theta = NULL;
    int q_theta=8;
    Napi::Value* pyobj_q_hist = NULL;
    int q_hist=8;
    Napi::Value* pyobj_norm = NULL;
    DAISY_NormalizationType norm=DAISY::NRM_NONE;
    Napi::Value* pyobj_H = NULL;
    UMat H;
    Napi::Value* pyobj_interpolation = NULL;
    bool interpolation=true;
    Napi::Value* pyobj_use_orientation = NULL;
    bool use_orientation=false;
    Ptr<DAISY> retval;

    const char* keywords[] = { "radius", "q_radius", "q_theta", "q_hist", "norm", "H", "interpolation", "use_orientation", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOOOOOO:DAISY_create", (char**)keywords, &pyobj_radius, &pyobj_q_radius, &pyobj_q_theta, &pyobj_q_hist, &pyobj_norm, &pyobj_H, &pyobj_interpolation, &pyobj_use_orientation) &&
        jsopencv_to_safe(info, pyobj_radius, radius, ArgInfo("radius", 0)) &&
        jsopencv_to_safe(info, pyobj_q_radius, q_radius, ArgInfo("q_radius", 0)) &&
        jsopencv_to_safe(info, pyobj_q_theta, q_theta, ArgInfo("q_theta", 0)) &&
        jsopencv_to_safe(info, pyobj_q_hist, q_hist, ArgInfo("q_hist", 0)) &&
        jsopencv_to_safe(info, pyobj_norm, norm, ArgInfo("norm", 0)) &&
        jsopencv_to_safe(info, pyobj_H, H, ArgInfo("H", 0)) &&
        jsopencv_to_safe(info, pyobj_interpolation, interpolation, ArgInfo("interpolation", 0)) &&
        jsopencv_to_safe(info, pyobj_use_orientation, use_orientation, ArgInfo("use_orientation", 0)))
    {
        ERRWRAP2(retval = cv::xfeatures2d::DAISY::create(radius, q_radius, q_theta, q_hist, norm, H, interpolation, use_orientation));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("DAISY_create");

    return NULL;
}

static Napi::Value pyopencv_cv_xfeatures2d_FREAK_create(const Napi::CallbackInfo &info)
{
    using namespace cv::xfeatures2d;

    Napi::Value* pyobj_orientationNormalized = NULL;
    bool orientationNormalized=true;
    Napi::Value* pyobj_scaleNormalized = NULL;
    bool scaleNormalized=true;
    Napi::Value* pyobj_patternScale = NULL;
    float patternScale=22.0f;
    Napi::Value* pyobj_nOctaves = NULL;
    int nOctaves=4;
    Napi::Value* pyobj_selectedPairs = NULL;
    vector_int selectedPairs=std::vector<int>();
    Ptr<FREAK> retval;

    const char* keywords[] = { "orientationNormalized", "scaleNormalized", "patternScale", "nOctaves", "selectedPairs", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOOO:FREAK_create", (char**)keywords, &pyobj_orientationNormalized, &pyobj_scaleNormalized, &pyobj_patternScale, &pyobj_nOctaves, &pyobj_selectedPairs) &&
        jsopencv_to_safe(info, pyobj_orientationNormalized, orientationNormalized, ArgInfo("orientationNormalized", 0)) &&
        jsopencv_to_safe(info, pyobj_scaleNormalized, scaleNormalized, ArgInfo("scaleNormalized", 0)) &&
        jsopencv_to_safe(info, pyobj_patternScale, patternScale, ArgInfo("patternScale", 0)) &&
        jsopencv_to_safe(info, pyobj_nOctaves, nOctaves, ArgInfo("nOctaves", 0)) &&
        jsopencv_to_safe(info, pyobj_selectedPairs, selectedPairs, ArgInfo("selectedPairs", 0)))
    {
        ERRWRAP2(retval = cv::xfeatures2d::FREAK::create(orientationNormalized, scaleNormalized, patternScale, nOctaves, selectedPairs));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_xfeatures2d_HarrisLaplaceFeatureDetector_create(const Napi::CallbackInfo &info)
{
    using namespace cv::xfeatures2d;

    Napi::Value* pyobj_numOctaves = NULL;
    int numOctaves=6;
    Napi::Value* pyobj_corn_thresh = NULL;
    float corn_thresh=0.01f;
    Napi::Value* pyobj_DOG_thresh = NULL;
    float DOG_thresh=0.01f;
    Napi::Value* pyobj_maxCorners = NULL;
    int maxCorners=5000;
    Napi::Value* pyobj_num_layers = NULL;
    int num_layers=4;
    Ptr<HarrisLaplaceFeatureDetector> retval;

    const char* keywords[] = { "numOctaves", "corn_thresh", "DOG_thresh", "maxCorners", "num_layers", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOOO:HarrisLaplaceFeatureDetector_create", (char**)keywords, &pyobj_numOctaves, &pyobj_corn_thresh, &pyobj_DOG_thresh, &pyobj_maxCorners, &pyobj_num_layers) &&
        jsopencv_to_safe(info, pyobj_numOctaves, numOctaves, ArgInfo("numOctaves", 0)) &&
        jsopencv_to_safe(info, pyobj_corn_thresh, corn_thresh, ArgInfo("corn_thresh", 0)) &&
        jsopencv_to_safe(info, pyobj_DOG_thresh, DOG_thresh, ArgInfo("DOG_thresh", 0)) &&
        jsopencv_to_safe(info, pyobj_maxCorners, maxCorners, ArgInfo("maxCorners", 0)) &&
        jsopencv_to_safe(info, pyobj_num_layers, num_layers, ArgInfo("num_layers", 0)))
    {
        ERRWRAP2(retval = cv::xfeatures2d::HarrisLaplaceFeatureDetector::create(numOctaves, corn_thresh, DOG_thresh, maxCorners, num_layers));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_xfeatures2d_LATCH_create(const Napi::CallbackInfo &info)
{
    using namespace cv::xfeatures2d;

    Napi::Value* pyobj_bytes = NULL;
    int bytes=32;
    Napi::Value* pyobj_rotationInvariance = NULL;
    bool rotationInvariance=true;
    Napi::Value* pyobj_half_ssd_size = NULL;
    int half_ssd_size=3;
    Napi::Value* pyobj_sigma = NULL;
    double sigma=2.0;
    Ptr<LATCH> retval;

    const char* keywords[] = { "bytes", "rotationInvariance", "half_ssd_size", "sigma", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOO:LATCH_create", (char**)keywords, &pyobj_bytes, &pyobj_rotationInvariance, &pyobj_half_ssd_size, &pyobj_sigma) &&
        jsopencv_to_safe(info, pyobj_bytes, bytes, ArgInfo("bytes", 0)) &&
        jsopencv_to_safe(info, pyobj_rotationInvariance, rotationInvariance, ArgInfo("rotationInvariance", 0)) &&
        jsopencv_to_safe(info, pyobj_half_ssd_size, half_ssd_size, ArgInfo("half_ssd_size", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma, sigma, ArgInfo("sigma", 0)))
    {
        ERRWRAP2(retval = cv::xfeatures2d::LATCH::create(bytes, rotationInvariance, half_ssd_size, sigma));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_xfeatures2d_LUCID_create(const Napi::CallbackInfo &info)
{
    using namespace cv::xfeatures2d;

    Napi::Value* pyobj_lucid_kernel = NULL;
    int lucid_kernel=1;
    Napi::Value* pyobj_blur_kernel = NULL;
    int blur_kernel=2;
    Ptr<LUCID> retval;

    const char* keywords[] = { "lucid_kernel", "blur_kernel", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OO:LUCID_create", (char**)keywords, &pyobj_lucid_kernel, &pyobj_blur_kernel) &&
        jsopencv_to_safe(info, pyobj_lucid_kernel, lucid_kernel, ArgInfo("lucid_kernel", 0)) &&
        jsopencv_to_safe(info, pyobj_blur_kernel, blur_kernel, ArgInfo("blur_kernel", 0)))
    {
        ERRWRAP2(retval = cv::xfeatures2d::LUCID::create(lucid_kernel, blur_kernel));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_xfeatures2d_MSDDetector_create(const Napi::CallbackInfo &info)
{
    using namespace cv::xfeatures2d;

    Napi::Value* pyobj_m_patch_radius = NULL;
    int m_patch_radius=3;
    Napi::Value* pyobj_m_search_area_radius = NULL;
    int m_search_area_radius=5;
    Napi::Value* pyobj_m_nms_radius = NULL;
    int m_nms_radius=5;
    Napi::Value* pyobj_m_nms_scale_radius = NULL;
    int m_nms_scale_radius=0;
    Napi::Value* pyobj_m_th_saliency = NULL;
    float m_th_saliency=250.0f;
    Napi::Value* pyobj_m_kNN = NULL;
    int m_kNN=4;
    Napi::Value* pyobj_m_scale_factor = NULL;
    float m_scale_factor=1.25f;
    Napi::Value* pyobj_m_n_scales = NULL;
    int m_n_scales=-1;
    Napi::Value* pyobj_m_compute_orientation = NULL;
    bool m_compute_orientation=false;
    Ptr<MSDDetector> retval;

    const char* keywords[] = { "m_patch_radius", "m_search_area_radius", "m_nms_radius", "m_nms_scale_radius", "m_th_saliency", "m_kNN", "m_scale_factor", "m_n_scales", "m_compute_orientation", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOOOOOOO:MSDDetector_create", (char**)keywords, &pyobj_m_patch_radius, &pyobj_m_search_area_radius, &pyobj_m_nms_radius, &pyobj_m_nms_scale_radius, &pyobj_m_th_saliency, &pyobj_m_kNN, &pyobj_m_scale_factor, &pyobj_m_n_scales, &pyobj_m_compute_orientation) &&
        jsopencv_to_safe(info, pyobj_m_patch_radius, m_patch_radius, ArgInfo("m_patch_radius", 0)) &&
        jsopencv_to_safe(info, pyobj_m_search_area_radius, m_search_area_radius, ArgInfo("m_search_area_radius", 0)) &&
        jsopencv_to_safe(info, pyobj_m_nms_radius, m_nms_radius, ArgInfo("m_nms_radius", 0)) &&
        jsopencv_to_safe(info, pyobj_m_nms_scale_radius, m_nms_scale_radius, ArgInfo("m_nms_scale_radius", 0)) &&
        jsopencv_to_safe(info, pyobj_m_th_saliency, m_th_saliency, ArgInfo("m_th_saliency", 0)) &&
        jsopencv_to_safe(info, pyobj_m_kNN, m_kNN, ArgInfo("m_kNN", 0)) &&
        jsopencv_to_safe(info, pyobj_m_scale_factor, m_scale_factor, ArgInfo("m_scale_factor", 0)) &&
        jsopencv_to_safe(info, pyobj_m_n_scales, m_n_scales, ArgInfo("m_n_scales", 0)) &&
        jsopencv_to_safe(info, pyobj_m_compute_orientation, m_compute_orientation, ArgInfo("m_compute_orientation", 0)))
    {
        ERRWRAP2(retval = cv::xfeatures2d::MSDDetector::create(m_patch_radius, m_search_area_radius, m_nms_radius, m_nms_scale_radius, m_th_saliency, m_kNN, m_scale_factor, m_n_scales, m_compute_orientation));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_xfeatures2d_PCTSignaturesSQFD_create(const Napi::CallbackInfo &info)
{
    using namespace cv::xfeatures2d;

    Napi::Value* pyobj_distanceFunction = NULL;
    int distanceFunction=3;
    Napi::Value* pyobj_similarityFunction = NULL;
    int similarityFunction=2;
    Napi::Value* pyobj_similarityParameter = NULL;
    float similarityParameter=1.0f;
    Ptr<PCTSignaturesSQFD> retval;

    const char* keywords[] = { "distanceFunction", "similarityFunction", "similarityParameter", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOO:PCTSignaturesSQFD_create", (char**)keywords, &pyobj_distanceFunction, &pyobj_similarityFunction, &pyobj_similarityParameter) &&
        jsopencv_to_safe(info, pyobj_distanceFunction, distanceFunction, ArgInfo("distanceFunction", 0)) &&
        jsopencv_to_safe(info, pyobj_similarityFunction, similarityFunction, ArgInfo("similarityFunction", 0)) &&
        jsopencv_to_safe(info, pyobj_similarityParameter, similarityParameter, ArgInfo("similarityParameter", 0)))
    {
        ERRWRAP2(retval = cv::xfeatures2d::PCTSignaturesSQFD::create(distanceFunction, similarityFunction, similarityParameter));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_xfeatures2d_PCTSignatures_create(const Napi::CallbackInfo &info)
{
    using namespace cv::xfeatures2d;

    pyPrepareArgumentConversionErrorsStorage(3);

    {
    Napi::Value* pyobj_initSampleCount = NULL;
    int initSampleCount=2000;
    Napi::Value* pyobj_initSeedCount = NULL;
    int initSeedCount=400;
    Napi::Value* pyobj_pointDistribution = NULL;
    int pointDistribution=0;
    Ptr<PCTSignatures> retval;

    const char* keywords[] = { "initSampleCount", "initSeedCount", "pointDistribution", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOO:PCTSignatures_create", (char**)keywords, &pyobj_initSampleCount, &pyobj_initSeedCount, &pyobj_pointDistribution) &&
        jsopencv_to_safe(info, pyobj_initSampleCount, initSampleCount, ArgInfo("initSampleCount", 0)) &&
        jsopencv_to_safe(info, pyobj_initSeedCount, initSeedCount, ArgInfo("initSeedCount", 0)) &&
        jsopencv_to_safe(info, pyobj_pointDistribution, pointDistribution, ArgInfo("pointDistribution", 0)))
    {
        ERRWRAP2(retval = cv::xfeatures2d::PCTSignatures::create(initSampleCount, initSeedCount, pointDistribution));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_initSamplingPoints = NULL;
    vector_Point2f initSamplingPoints;
    Napi::Value* pyobj_initSeedCount = NULL;
    int initSeedCount=0;
    Ptr<PCTSignatures> retval;

    const char* keywords[] = { "initSamplingPoints", "initSeedCount", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:PCTSignatures_create", (char**)keywords, &pyobj_initSamplingPoints, &pyobj_initSeedCount) &&
        jsopencv_to_safe(info, pyobj_initSamplingPoints, initSamplingPoints, ArgInfo("initSamplingPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_initSeedCount, initSeedCount, ArgInfo("initSeedCount", 0)))
    {
        ERRWRAP2(retval = cv::xfeatures2d::PCTSignatures::create(initSamplingPoints, initSeedCount));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_initSamplingPoints = NULL;
    vector_Point2f initSamplingPoints;
    Napi::Value* pyobj_initClusterSeedIndexes = NULL;
    vector_int initClusterSeedIndexes;
    Ptr<PCTSignatures> retval;

    const char* keywords[] = { "initSamplingPoints", "initClusterSeedIndexes", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:PCTSignatures_create", (char**)keywords, &pyobj_initSamplingPoints, &pyobj_initClusterSeedIndexes) &&
        jsopencv_to_safe(info, pyobj_initSamplingPoints, initSamplingPoints, ArgInfo("initSamplingPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_initClusterSeedIndexes, initClusterSeedIndexes, ArgInfo("initClusterSeedIndexes", 0)))
    {
        ERRWRAP2(retval = cv::xfeatures2d::PCTSignatures::create(initSamplingPoints, initClusterSeedIndexes));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("PCTSignatures_create");

    return NULL;
}

static Napi::Value pyopencv_cv_xfeatures2d_PCTSignatures_drawSignature(const Napi::CallbackInfo &info)
{
    using namespace cv::xfeatures2d;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_source = NULL;
    Mat source;
    Napi::Value* pyobj_signature = NULL;
    Mat signature;
    Napi::Value* pyobj_result = NULL;
    Mat result;
    Napi::Value* pyobj_radiusToShorterSideRatio = NULL;
    float radiusToShorterSideRatio=1.0 / 8;
    Napi::Value* pyobj_borderThickness = NULL;
    int borderThickness=1;

    const char* keywords[] = { "source", "signature", "result", "radiusToShorterSideRatio", "borderThickness", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:PCTSignatures_drawSignature", (char**)keywords, &pyobj_source, &pyobj_signature, &pyobj_result, &pyobj_radiusToShorterSideRatio, &pyobj_borderThickness) &&
        jsopencv_to_safe(info, pyobj_source, source, ArgInfo("source", 0)) &&
        jsopencv_to_safe(info, pyobj_signature, signature, ArgInfo("signature", 0)) &&
        jsopencv_to_safe(info, pyobj_result, result, ArgInfo("result", 1)) &&
        jsopencv_to_safe(info, pyobj_radiusToShorterSideRatio, radiusToShorterSideRatio, ArgInfo("radiusToShorterSideRatio", 0)) &&
        jsopencv_to_safe(info, pyobj_borderThickness, borderThickness, ArgInfo("borderThickness", 0)))
    {
        ERRWRAP2(cv::xfeatures2d::PCTSignatures::drawSignature(source, signature, result, radiusToShorterSideRatio, borderThickness));
        return jsopencv_from(result);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_source = NULL;
    UMat source;
    Napi::Value* pyobj_signature = NULL;
    UMat signature;
    Napi::Value* pyobj_result = NULL;
    UMat result;
    Napi::Value* pyobj_radiusToShorterSideRatio = NULL;
    float radiusToShorterSideRatio=1.0 / 8;
    Napi::Value* pyobj_borderThickness = NULL;
    int borderThickness=1;

    const char* keywords[] = { "source", "signature", "result", "radiusToShorterSideRatio", "borderThickness", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:PCTSignatures_drawSignature", (char**)keywords, &pyobj_source, &pyobj_signature, &pyobj_result, &pyobj_radiusToShorterSideRatio, &pyobj_borderThickness) &&
        jsopencv_to_safe(info, pyobj_source, source, ArgInfo("source", 0)) &&
        jsopencv_to_safe(info, pyobj_signature, signature, ArgInfo("signature", 0)) &&
        jsopencv_to_safe(info, pyobj_result, result, ArgInfo("result", 1)) &&
        jsopencv_to_safe(info, pyobj_radiusToShorterSideRatio, radiusToShorterSideRatio, ArgInfo("radiusToShorterSideRatio", 0)) &&
        jsopencv_to_safe(info, pyobj_borderThickness, borderThickness, ArgInfo("borderThickness", 0)))
    {
        ERRWRAP2(cv::xfeatures2d::PCTSignatures::drawSignature(source, signature, result, radiusToShorterSideRatio, borderThickness));
        return jsopencv_from(result);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("PCTSignatures_drawSignature");

    return NULL;
}

static Napi::Value pyopencv_cv_xfeatures2d_PCTSignatures_generateInitPoints(const Napi::CallbackInfo &info)
{
    using namespace cv::xfeatures2d;

    Napi::Value* pyobj_initPoints = NULL;
    vector_Point2f initPoints;
    Napi::Value* pyobj_count = NULL;
    int count=0;
    Napi::Value* pyobj_pointDistribution = NULL;
    int pointDistribution=0;

    const char* keywords[] = { "initPoints", "count", "pointDistribution", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:PCTSignatures_generateInitPoints", (char**)keywords, &pyobj_initPoints, &pyobj_count, &pyobj_pointDistribution) &&
        jsopencv_to_safe(info, pyobj_initPoints, initPoints, ArgInfo("initPoints", 0)) &&
        jsopencv_to_safe(info, pyobj_count, count, ArgInfo("count", 0)) &&
        jsopencv_to_safe(info, pyobj_pointDistribution, pointDistribution, ArgInfo("pointDistribution", 0)))
    {
        ERRWRAP2(cv::xfeatures2d::PCTSignatures::generateInitPoints(initPoints, count, pointDistribution));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_xfeatures2d_SIFT_create(const Napi::CallbackInfo &info)
{
    using namespace cv::xfeatures2d;

    Napi::Value* pyobj_nfeatures = NULL;
    int nfeatures=0;
    Napi::Value* pyobj_nOctaveLayers = NULL;
    int nOctaveLayers=3;
    Napi::Value* pyobj_contrastThreshold = NULL;
    double contrastThreshold=0.04;
    Napi::Value* pyobj_edgeThreshold = NULL;
    double edgeThreshold=10;
    Napi::Value* pyobj_sigma = NULL;
    double sigma=1.6;
    Ptr<cv::SIFT> retval;

    const char* keywords[] = { "nfeatures", "nOctaveLayers", "contrastThreshold", "edgeThreshold", "sigma", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOOO:SIFT_create", (char**)keywords, &pyobj_nfeatures, &pyobj_nOctaveLayers, &pyobj_contrastThreshold, &pyobj_edgeThreshold, &pyobj_sigma) &&
        jsopencv_to_safe(info, pyobj_nfeatures, nfeatures, ArgInfo("nfeatures", 0)) &&
        jsopencv_to_safe(info, pyobj_nOctaveLayers, nOctaveLayers, ArgInfo("nOctaveLayers", 0)) &&
        jsopencv_to_safe(info, pyobj_contrastThreshold, contrastThreshold, ArgInfo("contrastThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_edgeThreshold, edgeThreshold, ArgInfo("edgeThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma, sigma, ArgInfo("sigma", 0)))
    {
        ERRWRAP2(retval = cv::xfeatures2d::SIFT_create(nfeatures, nOctaveLayers, contrastThreshold, edgeThreshold, sigma));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_xfeatures2d_SURF_create(const Napi::CallbackInfo &info)
{
    using namespace cv::xfeatures2d;

    Napi::Value* pyobj_hessianThreshold = NULL;
    double hessianThreshold=100;
    Napi::Value* pyobj_nOctaves = NULL;
    int nOctaves=4;
    Napi::Value* pyobj_nOctaveLayers = NULL;
    int nOctaveLayers=3;
    Napi::Value* pyobj_extended = NULL;
    bool extended=false;
    Napi::Value* pyobj_upright = NULL;
    bool upright=false;
    Ptr<SURF> retval;

    const char* keywords[] = { "hessianThreshold", "nOctaves", "nOctaveLayers", "extended", "upright", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOOO:SURF_create", (char**)keywords, &pyobj_hessianThreshold, &pyobj_nOctaves, &pyobj_nOctaveLayers, &pyobj_extended, &pyobj_upright) &&
        jsopencv_to_safe(info, pyobj_hessianThreshold, hessianThreshold, ArgInfo("hessianThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_nOctaves, nOctaves, ArgInfo("nOctaves", 0)) &&
        jsopencv_to_safe(info, pyobj_nOctaveLayers, nOctaveLayers, ArgInfo("nOctaveLayers", 0)) &&
        jsopencv_to_safe(info, pyobj_extended, extended, ArgInfo("extended", 0)) &&
        jsopencv_to_safe(info, pyobj_upright, upright, ArgInfo("upright", 0)))
    {
        ERRWRAP2(retval = cv::xfeatures2d::SURF::create(hessianThreshold, nOctaves, nOctaveLayers, extended, upright));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_xfeatures2d_StarDetector_create(const Napi::CallbackInfo &info)
{
    using namespace cv::xfeatures2d;

    Napi::Value* pyobj_maxSize = NULL;
    int maxSize=45;
    Napi::Value* pyobj_responseThreshold = NULL;
    int responseThreshold=30;
    Napi::Value* pyobj_lineThresholdProjected = NULL;
    int lineThresholdProjected=10;
    Napi::Value* pyobj_lineThresholdBinarized = NULL;
    int lineThresholdBinarized=8;
    Napi::Value* pyobj_suppressNonmaxSize = NULL;
    int suppressNonmaxSize=5;
    Ptr<StarDetector> retval;

    const char* keywords[] = { "maxSize", "responseThreshold", "lineThresholdProjected", "lineThresholdBinarized", "suppressNonmaxSize", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOOO:StarDetector_create", (char**)keywords, &pyobj_maxSize, &pyobj_responseThreshold, &pyobj_lineThresholdProjected, &pyobj_lineThresholdBinarized, &pyobj_suppressNonmaxSize) &&
        jsopencv_to_safe(info, pyobj_maxSize, maxSize, ArgInfo("maxSize", 0)) &&
        jsopencv_to_safe(info, pyobj_responseThreshold, responseThreshold, ArgInfo("responseThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_lineThresholdProjected, lineThresholdProjected, ArgInfo("lineThresholdProjected", 0)) &&
        jsopencv_to_safe(info, pyobj_lineThresholdBinarized, lineThresholdBinarized, ArgInfo("lineThresholdBinarized", 0)) &&
        jsopencv_to_safe(info, pyobj_suppressNonmaxSize, suppressNonmaxSize, ArgInfo("suppressNonmaxSize", 0)))
    {
        ERRWRAP2(retval = cv::xfeatures2d::StarDetector::create(maxSize, responseThreshold, lineThresholdProjected, lineThresholdBinarized, suppressNonmaxSize));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_xfeatures2d_TBMR_create(const Napi::CallbackInfo &info)
{
    using namespace cv::xfeatures2d;

    Napi::Value* pyobj_min_area = NULL;
    int min_area=60;
    Napi::Value* pyobj_max_area_relative = NULL;
    float max_area_relative=0.01f;
    Napi::Value* pyobj_scale_factor = NULL;
    float scale_factor=1.25f;
    Napi::Value* pyobj_n_scales = NULL;
    int n_scales=-1;
    Ptr<TBMR> retval;

    const char* keywords[] = { "min_area", "max_area_relative", "scale_factor", "n_scales", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOO:TBMR_create", (char**)keywords, &pyobj_min_area, &pyobj_max_area_relative, &pyobj_scale_factor, &pyobj_n_scales) &&
        jsopencv_to_safe(info, pyobj_min_area, min_area, ArgInfo("min_area", 0)) &&
        jsopencv_to_safe(info, pyobj_max_area_relative, max_area_relative, ArgInfo("max_area_relative", 0)) &&
        jsopencv_to_safe(info, pyobj_scale_factor, scale_factor, ArgInfo("scale_factor", 0)) &&
        jsopencv_to_safe(info, pyobj_n_scales, n_scales, ArgInfo("n_scales", 0)))
    {
        ERRWRAP2(retval = cv::xfeatures2d::TBMR::create(min_area, max_area_relative, scale_factor, n_scales));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_xfeatures2d_TEBLID_create(const Napi::CallbackInfo &info)
{
    using namespace cv::xfeatures2d;

    Napi::Value* pyobj_scale_factor = NULL;
    float scale_factor=0.f;
    Napi::Value* pyobj_n_bits = NULL;
    int n_bits=TEBLID::SIZE_256_BITS;
    Ptr<TEBLID> retval;

    const char* keywords[] = { "scale_factor", "n_bits", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:TEBLID_create", (char**)keywords, &pyobj_scale_factor, &pyobj_n_bits) &&
        jsopencv_to_safe(info, pyobj_scale_factor, scale_factor, ArgInfo("scale_factor", 0)) &&
        jsopencv_to_safe(info, pyobj_n_bits, n_bits, ArgInfo("n_bits", 0)))
    {
        ERRWRAP2(retval = cv::xfeatures2d::TEBLID::create(scale_factor, n_bits));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_xfeatures2d_VGG_create(const Napi::CallbackInfo &info)
{
    using namespace cv::xfeatures2d;

    Napi::Value* pyobj_desc = NULL;
    int desc=VGG::VGG_120;
    Napi::Value* pyobj_isigma = NULL;
    float isigma=1.4f;
    Napi::Value* pyobj_img_normalize = NULL;
    bool img_normalize=true;
    Napi::Value* pyobj_use_scale_orientation = NULL;
    bool use_scale_orientation=true;
    Napi::Value* pyobj_scale_factor = NULL;
    float scale_factor=6.25f;
    Napi::Value* pyobj_dsc_normalize = NULL;
    bool dsc_normalize=false;
    Ptr<VGG> retval;

    const char* keywords[] = { "desc", "isigma", "img_normalize", "use_scale_orientation", "scale_factor", "dsc_normalize", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOOOO:VGG_create", (char**)keywords, &pyobj_desc, &pyobj_isigma, &pyobj_img_normalize, &pyobj_use_scale_orientation, &pyobj_scale_factor, &pyobj_dsc_normalize) &&
        jsopencv_to_safe(info, pyobj_desc, desc, ArgInfo("desc", 0)) &&
        jsopencv_to_safe(info, pyobj_isigma, isigma, ArgInfo("isigma", 0)) &&
        jsopencv_to_safe(info, pyobj_img_normalize, img_normalize, ArgInfo("img_normalize", 0)) &&
        jsopencv_to_safe(info, pyobj_use_scale_orientation, use_scale_orientation, ArgInfo("use_scale_orientation", 0)) &&
        jsopencv_to_safe(info, pyobj_scale_factor, scale_factor, ArgInfo("scale_factor", 0)) &&
        jsopencv_to_safe(info, pyobj_dsc_normalize, dsc_normalize, ArgInfo("dsc_normalize", 0)))
    {
        ERRWRAP2(retval = cv::xfeatures2d::VGG::create(desc, isigma, img_normalize, use_scale_orientation, scale_factor, dsc_normalize));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_xfeatures2d_matchGMS(const Napi::CallbackInfo &info)
{
    using namespace cv::xfeatures2d;

    Napi::Value* pyobj_size1 = NULL;
    Size size1;
    Napi::Value* pyobj_size2 = NULL;
    Size size2;
    Napi::Value* pyobj_keypoints1 = NULL;
    vector_KeyPoint keypoints1;
    Napi::Value* pyobj_keypoints2 = NULL;
    vector_KeyPoint keypoints2;
    Napi::Value* pyobj_matches1to2 = NULL;
    vector_DMatch matches1to2;
    vector_DMatch matchesGMS;
    Napi::Value* pyobj_withRotation = NULL;
    bool withRotation=false;
    Napi::Value* pyobj_withScale = NULL;
    bool withScale=false;
    Napi::Value* pyobj_thresholdFactor = NULL;
    double thresholdFactor=6.0;

    const char* keywords[] = { "size1", "size2", "keypoints1", "keypoints2", "matches1to2", "withRotation", "withScale", "thresholdFactor", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OOO:matchGMS", (char**)keywords, &pyobj_size1, &pyobj_size2, &pyobj_keypoints1, &pyobj_keypoints2, &pyobj_matches1to2, &pyobj_withRotation, &pyobj_withScale, &pyobj_thresholdFactor) &&
        jsopencv_to_safe(info, pyobj_size1, size1, ArgInfo("size1", 0)) &&
        jsopencv_to_safe(info, pyobj_size2, size2, ArgInfo("size2", 0)) &&
        jsopencv_to_safe(info, pyobj_keypoints1, keypoints1, ArgInfo("keypoints1", 0)) &&
        jsopencv_to_safe(info, pyobj_keypoints2, keypoints2, ArgInfo("keypoints2", 0)) &&
        jsopencv_to_safe(info, pyobj_matches1to2, matches1to2, ArgInfo("matches1to2", 0)) &&
        jsopencv_to_safe(info, pyobj_withRotation, withRotation, ArgInfo("withRotation", 0)) &&
        jsopencv_to_safe(info, pyobj_withScale, withScale, ArgInfo("withScale", 0)) &&
        jsopencv_to_safe(info, pyobj_thresholdFactor, thresholdFactor, ArgInfo("thresholdFactor", 0)))
    {
        ERRWRAP2(cv::xfeatures2d::matchGMS(size1, size2, keypoints1, keypoints2, matches1to2, matchesGMS, withRotation, withScale, thresholdFactor));
        return jsopencv_from(matchesGMS);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_xfeatures2d_matchLOGOS(const Napi::CallbackInfo &info)
{
    using namespace cv::xfeatures2d;

    Napi::Value* pyobj_keypoints1 = NULL;
    vector_KeyPoint keypoints1;
    Napi::Value* pyobj_keypoints2 = NULL;
    vector_KeyPoint keypoints2;
    Napi::Value* pyobj_nn1 = NULL;
    vector_int nn1;
    Napi::Value* pyobj_nn2 = NULL;
    vector_int nn2;
    Napi::Value* pyobj_matches1to2 = NULL;
    vector_DMatch matches1to2;

    const char* keywords[] = { "keypoints1", "keypoints2", "nn1", "nn2", "matches1to2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO:matchLOGOS", (char**)keywords, &pyobj_keypoints1, &pyobj_keypoints2, &pyobj_nn1, &pyobj_nn2, &pyobj_matches1to2) &&
        jsopencv_to_safe(info, pyobj_keypoints1, keypoints1, ArgInfo("keypoints1", 0)) &&
        jsopencv_to_safe(info, pyobj_keypoints2, keypoints2, ArgInfo("keypoints2", 0)) &&
        jsopencv_to_safe(info, pyobj_nn1, nn1, ArgInfo("nn1", 0)) &&
        jsopencv_to_safe(info, pyobj_nn2, nn2, ArgInfo("nn2", 0)) &&
        jsopencv_to_safe(info, pyobj_matches1to2, matches1to2, ArgInfo("matches1to2", 0)))
    {
        ERRWRAP2(cv::xfeatures2d::matchLOGOS(keypoints1, keypoints2, nn1, nn2, matches1to2));
        Py_RETURN_NONE;
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_AdaptiveManifoldFilter_create(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    Ptr<AdaptiveManifoldFilter> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ximgproc::AdaptiveManifoldFilter::create());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_FastHoughTransform(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_dstMatDepth = NULL;
    int dstMatDepth=0;
    Napi::Value* pyobj_angleRange = NULL;
    int angleRange=ARO_315_135;
    Napi::Value* pyobj_op = NULL;
    int op=FHT_ADD;
    Napi::Value* pyobj_makeSkew = NULL;
    int makeSkew=HDO_DESKEW;

    const char* keywords[] = { "src", "dstMatDepth", "dst", "angleRange", "op", "makeSkew", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOO:FastHoughTransform", (char**)keywords, &pyobj_src, &pyobj_dstMatDepth, &pyobj_dst, &pyobj_angleRange, &pyobj_op, &pyobj_makeSkew) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_dstMatDepth, dstMatDepth, ArgInfo("dstMatDepth", 0)) &&
        jsopencv_to_safe(info, pyobj_angleRange, angleRange, ArgInfo("angleRange", 0)) &&
        jsopencv_to_safe(info, pyobj_op, op, ArgInfo("op", 0)) &&
        jsopencv_to_safe(info, pyobj_makeSkew, makeSkew, ArgInfo("makeSkew", 0)))
    {
        ERRWRAP2(cv::ximgproc::FastHoughTransform(src, dst, dstMatDepth, angleRange, op, makeSkew));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_dstMatDepth = NULL;
    int dstMatDepth=0;
    Napi::Value* pyobj_angleRange = NULL;
    int angleRange=ARO_315_135;
    Napi::Value* pyobj_op = NULL;
    int op=FHT_ADD;
    Napi::Value* pyobj_makeSkew = NULL;
    int makeSkew=HDO_DESKEW;

    const char* keywords[] = { "src", "dstMatDepth", "dst", "angleRange", "op", "makeSkew", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOOO:FastHoughTransform", (char**)keywords, &pyobj_src, &pyobj_dstMatDepth, &pyobj_dst, &pyobj_angleRange, &pyobj_op, &pyobj_makeSkew) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_dstMatDepth, dstMatDepth, ArgInfo("dstMatDepth", 0)) &&
        jsopencv_to_safe(info, pyobj_angleRange, angleRange, ArgInfo("angleRange", 0)) &&
        jsopencv_to_safe(info, pyobj_op, op, ArgInfo("op", 0)) &&
        jsopencv_to_safe(info, pyobj_makeSkew, makeSkew, ArgInfo("makeSkew", 0)))
    {
        ERRWRAP2(cv::ximgproc::FastHoughTransform(src, dst, dstMatDepth, angleRange, op, makeSkew));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("FastHoughTransform");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_GradientDericheX(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_op = NULL;
    Mat op;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=0;
    Napi::Value* pyobj_omega = NULL;
    double omega=0;

    const char* keywords[] = { "op", "alpha", "omega", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:GradientDericheX", (char**)keywords, &pyobj_op, &pyobj_alpha, &pyobj_omega, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_op, op, ArgInfo("op", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_omega, omega, ArgInfo("omega", 0)))
    {
        ERRWRAP2(cv::ximgproc::GradientDericheX(op, dst, alpha, omega));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_op = NULL;
    UMat op;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=0;
    Napi::Value* pyobj_omega = NULL;
    double omega=0;

    const char* keywords[] = { "op", "alpha", "omega", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:GradientDericheX", (char**)keywords, &pyobj_op, &pyobj_alpha, &pyobj_omega, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_op, op, ArgInfo("op", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_omega, omega, ArgInfo("omega", 0)))
    {
        ERRWRAP2(cv::ximgproc::GradientDericheX(op, dst, alpha, omega));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("GradientDericheX");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_GradientDericheY(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_op = NULL;
    Mat op;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=0;
    Napi::Value* pyobj_omega = NULL;
    double omega=0;

    const char* keywords[] = { "op", "alpha", "omega", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:GradientDericheY", (char**)keywords, &pyobj_op, &pyobj_alpha, &pyobj_omega, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_op, op, ArgInfo("op", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_omega, omega, ArgInfo("omega", 0)))
    {
        ERRWRAP2(cv::ximgproc::GradientDericheY(op, dst, alpha, omega));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_op = NULL;
    UMat op;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_alpha = NULL;
    double alpha=0;
    Napi::Value* pyobj_omega = NULL;
    double omega=0;

    const char* keywords[] = { "op", "alpha", "omega", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:GradientDericheY", (char**)keywords, &pyobj_op, &pyobj_alpha, &pyobj_omega, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_op, op, ArgInfo("op", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_omega, omega, ArgInfo("omega", 0)))
    {
        ERRWRAP2(cv::ximgproc::GradientDericheY(op, dst, alpha, omega));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("GradientDericheY");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_HoughPoint2Line(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_houghPoint = NULL;
    Point houghPoint;
    Napi::Value* pyobj_srcImgInfo = NULL;
    Mat srcImgInfo;
    Napi::Value* pyobj_angleRange = NULL;
    int angleRange=ARO_315_135;
    Napi::Value* pyobj_makeSkew = NULL;
    int makeSkew=HDO_DESKEW;
    Napi::Value* pyobj_rules = NULL;
    int rules=RO_IGNORE_BORDERS;
    Vec4i retval;

    const char* keywords[] = { "houghPoint", "srcImgInfo", "angleRange", "makeSkew", "rules", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:HoughPoint2Line", (char**)keywords, &pyobj_houghPoint, &pyobj_srcImgInfo, &pyobj_angleRange, &pyobj_makeSkew, &pyobj_rules) &&
        jsopencv_to_safe(info, pyobj_houghPoint, houghPoint, ArgInfo("houghPoint", 0)) &&
        jsopencv_to_safe(info, pyobj_srcImgInfo, srcImgInfo, ArgInfo("srcImgInfo", 0)) &&
        jsopencv_to_safe(info, pyobj_angleRange, angleRange, ArgInfo("angleRange", 0)) &&
        jsopencv_to_safe(info, pyobj_makeSkew, makeSkew, ArgInfo("makeSkew", 0)) &&
        jsopencv_to_safe(info, pyobj_rules, rules, ArgInfo("rules", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::HoughPoint2Line(houghPoint, srcImgInfo, angleRange, makeSkew, rules));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_houghPoint = NULL;
    Point houghPoint;
    Napi::Value* pyobj_srcImgInfo = NULL;
    UMat srcImgInfo;
    Napi::Value* pyobj_angleRange = NULL;
    int angleRange=ARO_315_135;
    Napi::Value* pyobj_makeSkew = NULL;
    int makeSkew=HDO_DESKEW;
    Napi::Value* pyobj_rules = NULL;
    int rules=RO_IGNORE_BORDERS;
    Vec4i retval;

    const char* keywords[] = { "houghPoint", "srcImgInfo", "angleRange", "makeSkew", "rules", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OOO:HoughPoint2Line", (char**)keywords, &pyobj_houghPoint, &pyobj_srcImgInfo, &pyobj_angleRange, &pyobj_makeSkew, &pyobj_rules) &&
        jsopencv_to_safe(info, pyobj_houghPoint, houghPoint, ArgInfo("houghPoint", 0)) &&
        jsopencv_to_safe(info, pyobj_srcImgInfo, srcImgInfo, ArgInfo("srcImgInfo", 0)) &&
        jsopencv_to_safe(info, pyobj_angleRange, angleRange, ArgInfo("angleRange", 0)) &&
        jsopencv_to_safe(info, pyobj_makeSkew, makeSkew, ArgInfo("makeSkew", 0)) &&
        jsopencv_to_safe(info, pyobj_rules, rules, ArgInfo("rules", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::HoughPoint2Line(houghPoint, srcImgInfo, angleRange, makeSkew, rules));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("HoughPoint2Line");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_PeiLinNormalization(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_I = NULL;
    Mat I;
    Napi::Value* pyobj_T = NULL;
    Mat T;

    const char* keywords[] = { "I", "T", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:PeiLinNormalization", (char**)keywords, &pyobj_I, &pyobj_T) &&
        jsopencv_to_safe(info, pyobj_I, I, ArgInfo("I", 0)) &&
        jsopencv_to_safe(info, pyobj_T, T, ArgInfo("T", 1)))
    {
        ERRWRAP2(cv::ximgproc::PeiLinNormalization(I, T));
        return jsopencv_from(T);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_I = NULL;
    UMat I;
    Napi::Value* pyobj_T = NULL;
    UMat T;

    const char* keywords[] = { "I", "T", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:PeiLinNormalization", (char**)keywords, &pyobj_I, &pyobj_T) &&
        jsopencv_to_safe(info, pyobj_I, I, ArgInfo("I", 0)) &&
        jsopencv_to_safe(info, pyobj_T, T, ArgInfo("T", 1)))
    {
        ERRWRAP2(cv::ximgproc::PeiLinNormalization(I, T));
        return jsopencv_from(T);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("PeiLinNormalization");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_RadonTransform(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_theta = NULL;
    double theta=1;
    Napi::Value* pyobj_start_angle = NULL;
    double start_angle=0;
    Napi::Value* pyobj_end_angle = NULL;
    double end_angle=180;
    Napi::Value* pyobj_crop = NULL;
    bool crop=false;
    Napi::Value* pyobj_norm = NULL;
    bool norm=false;

    const char* keywords[] = { "src", "dst", "theta", "start_angle", "end_angle", "crop", "norm", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOOO:RadonTransform", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_theta, &pyobj_start_angle, &pyobj_end_angle, &pyobj_crop, &pyobj_norm) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_theta, theta, ArgInfo("theta", 0)) &&
        jsopencv_to_safe(info, pyobj_start_angle, start_angle, ArgInfo("start_angle", 0)) &&
        jsopencv_to_safe(info, pyobj_end_angle, end_angle, ArgInfo("end_angle", 0)) &&
        jsopencv_to_safe(info, pyobj_crop, crop, ArgInfo("crop", 0)) &&
        jsopencv_to_safe(info, pyobj_norm, norm, ArgInfo("norm", 0)))
    {
        ERRWRAP2(cv::ximgproc::RadonTransform(src, dst, theta, start_angle, end_angle, crop, norm));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_theta = NULL;
    double theta=1;
    Napi::Value* pyobj_start_angle = NULL;
    double start_angle=0;
    Napi::Value* pyobj_end_angle = NULL;
    double end_angle=180;
    Napi::Value* pyobj_crop = NULL;
    bool crop=false;
    Napi::Value* pyobj_norm = NULL;
    bool norm=false;

    const char* keywords[] = { "src", "dst", "theta", "start_angle", "end_angle", "crop", "norm", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOOO:RadonTransform", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_theta, &pyobj_start_angle, &pyobj_end_angle, &pyobj_crop, &pyobj_norm) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_theta, theta, ArgInfo("theta", 0)) &&
        jsopencv_to_safe(info, pyobj_start_angle, start_angle, ArgInfo("start_angle", 0)) &&
        jsopencv_to_safe(info, pyobj_end_angle, end_angle, ArgInfo("end_angle", 0)) &&
        jsopencv_to_safe(info, pyobj_crop, crop, ArgInfo("crop", 0)) &&
        jsopencv_to_safe(info, pyobj_norm, norm, ArgInfo("norm", 0)))
    {
        ERRWRAP2(cv::ximgproc::RadonTransform(src, dst, theta, start_angle, end_angle, crop, norm));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("RadonTransform");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_RidgeDetectionFilter_create(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    Napi::Value* pyobj_ddepth = NULL;
    int ddepth=CV_32FC1;
    Napi::Value* pyobj_dx = NULL;
    int dx=1;
    Napi::Value* pyobj_dy = NULL;
    int dy=1;
    Napi::Value* pyobj_ksize = NULL;
    int ksize=3;
    Napi::Value* pyobj_out_dtype = NULL;
    int out_dtype=CV_8UC1;
    Napi::Value* pyobj_scale = NULL;
    double scale=1;
    Napi::Value* pyobj_delta = NULL;
    double delta=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;
    Ptr<RidgeDetectionFilter> retval;

    const char* keywords[] = { "ddepth", "dx", "dy", "ksize", "out_dtype", "scale", "delta", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOOOOOO:RidgeDetectionFilter_create", (char**)keywords, &pyobj_ddepth, &pyobj_dx, &pyobj_dy, &pyobj_ksize, &pyobj_out_dtype, &pyobj_scale, &pyobj_delta, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_ddepth, ddepth, ArgInfo("ddepth", 0)) &&
        jsopencv_to_safe(info, pyobj_dx, dx, ArgInfo("dx", 0)) &&
        jsopencv_to_safe(info, pyobj_dy, dy, ArgInfo("dy", 0)) &&
        jsopencv_to_safe(info, pyobj_ksize, ksize, ArgInfo("ksize", 0)) &&
        jsopencv_to_safe(info, pyobj_out_dtype, out_dtype, ArgInfo("out_dtype", 0)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)) &&
        jsopencv_to_safe(info, pyobj_delta, delta, ArgInfo("delta", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::RidgeDetectionFilter::create(ddepth, dx, dy, ksize, out_dtype, scale, delta, borderType));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_amFilter(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_joint = NULL;
    Mat joint;
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_sigma_s = NULL;
    double sigma_s=0;
    Napi::Value* pyobj_sigma_r = NULL;
    double sigma_r=0;
    Napi::Value* pyobj_adjust_outliers = NULL;
    bool adjust_outliers=false;

    const char* keywords[] = { "joint", "src", "sigma_s", "sigma_r", "dst", "adjust_outliers", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OO:amFilter", (char**)keywords, &pyobj_joint, &pyobj_src, &pyobj_sigma_s, &pyobj_sigma_r, &pyobj_dst, &pyobj_adjust_outliers) &&
        jsopencv_to_safe(info, pyobj_joint, joint, ArgInfo("joint", 0)) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_sigma_s, sigma_s, ArgInfo("sigma_s", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_r, sigma_r, ArgInfo("sigma_r", 0)) &&
        jsopencv_to_safe(info, pyobj_adjust_outliers, adjust_outliers, ArgInfo("adjust_outliers", 0)))
    {
        ERRWRAP2(cv::ximgproc::amFilter(joint, src, dst, sigma_s, sigma_r, adjust_outliers));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_joint = NULL;
    UMat joint;
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_sigma_s = NULL;
    double sigma_s=0;
    Napi::Value* pyobj_sigma_r = NULL;
    double sigma_r=0;
    Napi::Value* pyobj_adjust_outliers = NULL;
    bool adjust_outliers=false;

    const char* keywords[] = { "joint", "src", "sigma_s", "sigma_r", "dst", "adjust_outliers", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OO:amFilter", (char**)keywords, &pyobj_joint, &pyobj_src, &pyobj_sigma_s, &pyobj_sigma_r, &pyobj_dst, &pyobj_adjust_outliers) &&
        jsopencv_to_safe(info, pyobj_joint, joint, ArgInfo("joint", 0)) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_sigma_s, sigma_s, ArgInfo("sigma_s", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_r, sigma_r, ArgInfo("sigma_r", 0)) &&
        jsopencv_to_safe(info, pyobj_adjust_outliers, adjust_outliers, ArgInfo("adjust_outliers", 0)))
    {
        ERRWRAP2(cv::ximgproc::amFilter(joint, src, dst, sigma_s, sigma_r, adjust_outliers));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("amFilter");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_anisotropicDiffusion(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_alpha = NULL;
    float alpha=0.f;
    Napi::Value* pyobj_K = NULL;
    float K=0.f;
    Napi::Value* pyobj_niters = NULL;
    int niters=0;

    const char* keywords[] = { "src", "alpha", "K", "niters", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:anisotropicDiffusion", (char**)keywords, &pyobj_src, &pyobj_alpha, &pyobj_K, &pyobj_niters, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_niters, niters, ArgInfo("niters", 0)))
    {
        ERRWRAP2(cv::ximgproc::anisotropicDiffusion(src, dst, alpha, K, niters));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_alpha = NULL;
    float alpha=0.f;
    Napi::Value* pyobj_K = NULL;
    float K=0.f;
    Napi::Value* pyobj_niters = NULL;
    int niters=0;

    const char* keywords[] = { "src", "alpha", "K", "niters", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|O:anisotropicDiffusion", (char**)keywords, &pyobj_src, &pyobj_alpha, &pyobj_K, &pyobj_niters, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_K, K, ArgInfo("K", 0)) &&
        jsopencv_to_safe(info, pyobj_niters, niters, ArgInfo("niters", 0)))
    {
        ERRWRAP2(cv::ximgproc::anisotropicDiffusion(src, dst, alpha, K, niters));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("anisotropicDiffusion");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_bilateralTextureFilter(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_fr = NULL;
    int fr=3;
    Napi::Value* pyobj_numIter = NULL;
    int numIter=1;
    Napi::Value* pyobj_sigmaAlpha = NULL;
    double sigmaAlpha=-1.;
    Napi::Value* pyobj_sigmaAvg = NULL;
    double sigmaAvg=-1.;

    const char* keywords[] = { "src", "dst", "fr", "numIter", "sigmaAlpha", "sigmaAvg", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOO:bilateralTextureFilter", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_fr, &pyobj_numIter, &pyobj_sigmaAlpha, &pyobj_sigmaAvg) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_fr, fr, ArgInfo("fr", 0)) &&
        jsopencv_to_safe(info, pyobj_numIter, numIter, ArgInfo("numIter", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaAlpha, sigmaAlpha, ArgInfo("sigmaAlpha", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaAvg, sigmaAvg, ArgInfo("sigmaAvg", 0)))
    {
        ERRWRAP2(cv::ximgproc::bilateralTextureFilter(src, dst, fr, numIter, sigmaAlpha, sigmaAvg));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_fr = NULL;
    int fr=3;
    Napi::Value* pyobj_numIter = NULL;
    int numIter=1;
    Napi::Value* pyobj_sigmaAlpha = NULL;
    double sigmaAlpha=-1.;
    Napi::Value* pyobj_sigmaAvg = NULL;
    double sigmaAvg=-1.;

    const char* keywords[] = { "src", "dst", "fr", "numIter", "sigmaAlpha", "sigmaAvg", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOO:bilateralTextureFilter", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_fr, &pyobj_numIter, &pyobj_sigmaAlpha, &pyobj_sigmaAvg) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_fr, fr, ArgInfo("fr", 0)) &&
        jsopencv_to_safe(info, pyobj_numIter, numIter, ArgInfo("numIter", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaAlpha, sigmaAlpha, ArgInfo("sigmaAlpha", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaAvg, sigmaAvg, ArgInfo("sigmaAvg", 0)))
    {
        ERRWRAP2(cv::ximgproc::bilateralTextureFilter(src, dst, fr, numIter, sigmaAlpha, sigmaAvg));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("bilateralTextureFilter");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_colorMatchTemplate(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_templ = NULL;
    Mat templ;
    Napi::Value* pyobj_result = NULL;
    Mat result;

    const char* keywords[] = { "img", "templ", "result", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:colorMatchTemplate", (char**)keywords, &pyobj_img, &pyobj_templ, &pyobj_result) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_templ, templ, ArgInfo("templ", 0)) &&
        jsopencv_to_safe(info, pyobj_result, result, ArgInfo("result", 1)))
    {
        ERRWRAP2(cv::ximgproc::colorMatchTemplate(img, templ, result));
        return jsopencv_from(result);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_templ = NULL;
    UMat templ;
    Napi::Value* pyobj_result = NULL;
    UMat result;

    const char* keywords[] = { "img", "templ", "result", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:colorMatchTemplate", (char**)keywords, &pyobj_img, &pyobj_templ, &pyobj_result) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_templ, templ, ArgInfo("templ", 0)) &&
        jsopencv_to_safe(info, pyobj_result, result, ArgInfo("result", 1)))
    {
        ERRWRAP2(cv::ximgproc::colorMatchTemplate(img, templ, result));
        return jsopencv_from(result);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("colorMatchTemplate");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_computeBadPixelPercent(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_GT = NULL;
    Mat GT;
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_ROI = NULL;
    Rect ROI;
    Napi::Value* pyobj_thresh = NULL;
    int thresh=24;
    double retval;

    const char* keywords[] = { "GT", "src", "ROI", "thresh", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:computeBadPixelPercent", (char**)keywords, &pyobj_GT, &pyobj_src, &pyobj_ROI, &pyobj_thresh) &&
        jsopencv_to_safe(info, pyobj_GT, GT, ArgInfo("GT", 0)) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_ROI, ROI, ArgInfo("ROI", 0)) &&
        jsopencv_to_safe(info, pyobj_thresh, thresh, ArgInfo("thresh", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::computeBadPixelPercent(GT, src, ROI, thresh));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_GT = NULL;
    UMat GT;
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_ROI = NULL;
    Rect ROI;
    Napi::Value* pyobj_thresh = NULL;
    int thresh=24;
    double retval;

    const char* keywords[] = { "GT", "src", "ROI", "thresh", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:computeBadPixelPercent", (char**)keywords, &pyobj_GT, &pyobj_src, &pyobj_ROI, &pyobj_thresh) &&
        jsopencv_to_safe(info, pyobj_GT, GT, ArgInfo("GT", 0)) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_ROI, ROI, ArgInfo("ROI", 0)) &&
        jsopencv_to_safe(info, pyobj_thresh, thresh, ArgInfo("thresh", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::computeBadPixelPercent(GT, src, ROI, thresh));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("computeBadPixelPercent");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_computeMSE(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_GT = NULL;
    Mat GT;
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_ROI = NULL;
    Rect ROI;
    double retval;

    const char* keywords[] = { "GT", "src", "ROI", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:computeMSE", (char**)keywords, &pyobj_GT, &pyobj_src, &pyobj_ROI) &&
        jsopencv_to_safe(info, pyobj_GT, GT, ArgInfo("GT", 0)) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_ROI, ROI, ArgInfo("ROI", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::computeMSE(GT, src, ROI));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_GT = NULL;
    UMat GT;
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_ROI = NULL;
    Rect ROI;
    double retval;

    const char* keywords[] = { "GT", "src", "ROI", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:computeMSE", (char**)keywords, &pyobj_GT, &pyobj_src, &pyobj_ROI) &&
        jsopencv_to_safe(info, pyobj_GT, GT, ArgInfo("GT", 0)) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_ROI, ROI, ArgInfo("ROI", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::computeMSE(GT, src, ROI));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("computeMSE");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_contourSampling(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_out = NULL;
    Mat out;
    Napi::Value* pyobj_nbElt = NULL;
    int nbElt=0;

    const char* keywords[] = { "src", "nbElt", "out", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:contourSampling", (char**)keywords, &pyobj_src, &pyobj_nbElt, &pyobj_out) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_out, out, ArgInfo("out", 1)) &&
        jsopencv_to_safe(info, pyobj_nbElt, nbElt, ArgInfo("nbElt", 0)))
    {
        ERRWRAP2(cv::ximgproc::contourSampling(src, out, nbElt));
        return jsopencv_from(out);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_out = NULL;
    UMat out;
    Napi::Value* pyobj_nbElt = NULL;
    int nbElt=0;

    const char* keywords[] = { "src", "nbElt", "out", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:contourSampling", (char**)keywords, &pyobj_src, &pyobj_nbElt, &pyobj_out) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_out, out, ArgInfo("out", 1)) &&
        jsopencv_to_safe(info, pyobj_nbElt, nbElt, ArgInfo("nbElt", 0)))
    {
        ERRWRAP2(cv::ximgproc::contourSampling(src, out, nbElt));
        return jsopencv_from(out);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("contourSampling");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_covarianceEstimation(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_windowRows = NULL;
    int windowRows=0;
    Napi::Value* pyobj_windowCols = NULL;
    int windowCols=0;

    const char* keywords[] = { "src", "windowRows", "windowCols", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:covarianceEstimation", (char**)keywords, &pyobj_src, &pyobj_windowRows, &pyobj_windowCols, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_windowRows, windowRows, ArgInfo("windowRows", 0)) &&
        jsopencv_to_safe(info, pyobj_windowCols, windowCols, ArgInfo("windowCols", 0)))
    {
        ERRWRAP2(cv::ximgproc::covarianceEstimation(src, dst, windowRows, windowCols));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_windowRows = NULL;
    int windowRows=0;
    Napi::Value* pyobj_windowCols = NULL;
    int windowCols=0;

    const char* keywords[] = { "src", "windowRows", "windowCols", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:covarianceEstimation", (char**)keywords, &pyobj_src, &pyobj_windowRows, &pyobj_windowCols, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_windowRows, windowRows, ArgInfo("windowRows", 0)) &&
        jsopencv_to_safe(info, pyobj_windowCols, windowCols, ArgInfo("windowCols", 0)))
    {
        ERRWRAP2(cv::ximgproc::covarianceEstimation(src, dst, windowRows, windowCols));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("covarianceEstimation");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_createAMFilter(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    Napi::Value* pyobj_sigma_s = NULL;
    double sigma_s=0;
    Napi::Value* pyobj_sigma_r = NULL;
    double sigma_r=0;
    Napi::Value* pyobj_adjust_outliers = NULL;
    bool adjust_outliers=false;
    Ptr<AdaptiveManifoldFilter> retval;

    const char* keywords[] = { "sigma_s", "sigma_r", "adjust_outliers", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:createAMFilter", (char**)keywords, &pyobj_sigma_s, &pyobj_sigma_r, &pyobj_adjust_outliers) &&
        jsopencv_to_safe(info, pyobj_sigma_s, sigma_s, ArgInfo("sigma_s", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_r, sigma_r, ArgInfo("sigma_r", 0)) &&
        jsopencv_to_safe(info, pyobj_adjust_outliers, adjust_outliers, ArgInfo("adjust_outliers", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::createAMFilter(sigma_s, sigma_r, adjust_outliers));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_createContourFitting(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    Napi::Value* pyobj_ctr = NULL;
    int ctr=1024;
    Napi::Value* pyobj_fd = NULL;
    int fd=16;
    Ptr<ContourFitting> retval;

    const char* keywords[] = { "ctr", "fd", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OO:createContourFitting", (char**)keywords, &pyobj_ctr, &pyobj_fd) &&
        jsopencv_to_safe(info, pyobj_ctr, ctr, ArgInfo("ctr", 0)) &&
        jsopencv_to_safe(info, pyobj_fd, fd, ArgInfo("fd", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::createContourFitting(ctr, fd));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_createDTFilter(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_guide = NULL;
    Mat guide;
    Napi::Value* pyobj_sigmaSpatial = NULL;
    double sigmaSpatial=0;
    Napi::Value* pyobj_sigmaColor = NULL;
    double sigmaColor=0;
    Napi::Value* pyobj_mode = NULL;
    int mode=DTF_NC;
    Napi::Value* pyobj_numIters = NULL;
    int numIters=3;
    Ptr<DTFilter> retval;

    const char* keywords[] = { "guide", "sigmaSpatial", "sigmaColor", "mode", "numIters", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:createDTFilter", (char**)keywords, &pyobj_guide, &pyobj_sigmaSpatial, &pyobj_sigmaColor, &pyobj_mode, &pyobj_numIters) &&
        jsopencv_to_safe(info, pyobj_guide, guide, ArgInfo("guide", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaSpatial, sigmaSpatial, ArgInfo("sigmaSpatial", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaColor, sigmaColor, ArgInfo("sigmaColor", 0)) &&
        jsopencv_to_safe(info, pyobj_mode, mode, ArgInfo("mode", 0)) &&
        jsopencv_to_safe(info, pyobj_numIters, numIters, ArgInfo("numIters", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::createDTFilter(guide, sigmaSpatial, sigmaColor, mode, numIters));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_guide = NULL;
    UMat guide;
    Napi::Value* pyobj_sigmaSpatial = NULL;
    double sigmaSpatial=0;
    Napi::Value* pyobj_sigmaColor = NULL;
    double sigmaColor=0;
    Napi::Value* pyobj_mode = NULL;
    int mode=DTF_NC;
    Napi::Value* pyobj_numIters = NULL;
    int numIters=3;
    Ptr<DTFilter> retval;

    const char* keywords[] = { "guide", "sigmaSpatial", "sigmaColor", "mode", "numIters", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:createDTFilter", (char**)keywords, &pyobj_guide, &pyobj_sigmaSpatial, &pyobj_sigmaColor, &pyobj_mode, &pyobj_numIters) &&
        jsopencv_to_safe(info, pyobj_guide, guide, ArgInfo("guide", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaSpatial, sigmaSpatial, ArgInfo("sigmaSpatial", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaColor, sigmaColor, ArgInfo("sigmaColor", 0)) &&
        jsopencv_to_safe(info, pyobj_mode, mode, ArgInfo("mode", 0)) &&
        jsopencv_to_safe(info, pyobj_numIters, numIters, ArgInfo("numIters", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::createDTFilter(guide, sigmaSpatial, sigmaColor, mode, numIters));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("createDTFilter");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_createDisparityWLSFilter(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    Napi::Value* pyobj_matcher_left = NULL;
    Ptr<StereoMatcher> matcher_left;
    Ptr<DisparityWLSFilter> retval;

    const char* keywords[] = { "matcher_left", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:createDisparityWLSFilter", (char**)keywords, &pyobj_matcher_left) &&
        jsopencv_to_safe(info, pyobj_matcher_left, matcher_left, ArgInfo("matcher_left", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::createDisparityWLSFilter(matcher_left));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_createDisparityWLSFilterGeneric(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    Napi::Value* pyobj_use_confidence = NULL;
    bool use_confidence=0;
    Ptr<DisparityWLSFilter> retval;

    const char* keywords[] = { "use_confidence", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:createDisparityWLSFilterGeneric", (char**)keywords, &pyobj_use_confidence) &&
        jsopencv_to_safe(info, pyobj_use_confidence, use_confidence, ArgInfo("use_confidence", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::createDisparityWLSFilterGeneric(use_confidence));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_createEdgeAwareInterpolator(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    Ptr<EdgeAwareInterpolator> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ximgproc::createEdgeAwareInterpolator());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_createEdgeBoxes(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    Napi::Value* pyobj_alpha = NULL;
    float alpha=0.65f;
    Napi::Value* pyobj_beta = NULL;
    float beta=0.75f;
    Napi::Value* pyobj_eta = NULL;
    float eta=1;
    Napi::Value* pyobj_minScore = NULL;
    float minScore=0.01f;
    Napi::Value* pyobj_maxBoxes = NULL;
    int maxBoxes=10000;
    Napi::Value* pyobj_edgeMinMag = NULL;
    float edgeMinMag=0.1f;
    Napi::Value* pyobj_edgeMergeThr = NULL;
    float edgeMergeThr=0.5f;
    Napi::Value* pyobj_clusterMinMag = NULL;
    float clusterMinMag=0.5f;
    Napi::Value* pyobj_maxAspectRatio = NULL;
    float maxAspectRatio=3;
    Napi::Value* pyobj_minBoxArea = NULL;
    float minBoxArea=1000;
    Napi::Value* pyobj_gamma = NULL;
    float gamma=2;
    Napi::Value* pyobj_kappa = NULL;
    float kappa=1.5f;
    Ptr<EdgeBoxes> retval;

    const char* keywords[] = { "alpha", "beta", "eta", "minScore", "maxBoxes", "edgeMinMag", "edgeMergeThr", "clusterMinMag", "maxAspectRatio", "minBoxArea", "gamma", "kappa", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOOOOOOOOOO:createEdgeBoxes", (char**)keywords, &pyobj_alpha, &pyobj_beta, &pyobj_eta, &pyobj_minScore, &pyobj_maxBoxes, &pyobj_edgeMinMag, &pyobj_edgeMergeThr, &pyobj_clusterMinMag, &pyobj_maxAspectRatio, &pyobj_minBoxArea, &pyobj_gamma, &pyobj_kappa) &&
        jsopencv_to_safe(info, pyobj_alpha, alpha, ArgInfo("alpha", 0)) &&
        jsopencv_to_safe(info, pyobj_beta, beta, ArgInfo("beta", 0)) &&
        jsopencv_to_safe(info, pyobj_eta, eta, ArgInfo("eta", 0)) &&
        jsopencv_to_safe(info, pyobj_minScore, minScore, ArgInfo("minScore", 0)) &&
        jsopencv_to_safe(info, pyobj_maxBoxes, maxBoxes, ArgInfo("maxBoxes", 0)) &&
        jsopencv_to_safe(info, pyobj_edgeMinMag, edgeMinMag, ArgInfo("edgeMinMag", 0)) &&
        jsopencv_to_safe(info, pyobj_edgeMergeThr, edgeMergeThr, ArgInfo("edgeMergeThr", 0)) &&
        jsopencv_to_safe(info, pyobj_clusterMinMag, clusterMinMag, ArgInfo("clusterMinMag", 0)) &&
        jsopencv_to_safe(info, pyobj_maxAspectRatio, maxAspectRatio, ArgInfo("maxAspectRatio", 0)) &&
        jsopencv_to_safe(info, pyobj_minBoxArea, minBoxArea, ArgInfo("minBoxArea", 0)) &&
        jsopencv_to_safe(info, pyobj_gamma, gamma, ArgInfo("gamma", 0)) &&
        jsopencv_to_safe(info, pyobj_kappa, kappa, ArgInfo("kappa", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::createEdgeBoxes(alpha, beta, eta, minScore, maxBoxes, edgeMinMag, edgeMergeThr, clusterMinMag, maxAspectRatio, minBoxArea, gamma, kappa));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_createEdgeDrawing(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    Ptr<EdgeDrawing> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ximgproc::createEdgeDrawing());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_createFastBilateralSolverFilter(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_guide = NULL;
    Mat guide;
    Napi::Value* pyobj_sigma_spatial = NULL;
    double sigma_spatial=0;
    Napi::Value* pyobj_sigma_luma = NULL;
    double sigma_luma=0;
    Napi::Value* pyobj_sigma_chroma = NULL;
    double sigma_chroma=0;
    Napi::Value* pyobj_lambda = NULL;
    double lambda=128.0;
    Napi::Value* pyobj_num_iter = NULL;
    int num_iter=25;
    Napi::Value* pyobj_max_tol = NULL;
    double max_tol=1e-5;
    Ptr<FastBilateralSolverFilter> retval;

    const char* keywords[] = { "guide", "sigma_spatial", "sigma_luma", "sigma_chroma", "lambda_", "num_iter", "max_tol", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:createFastBilateralSolverFilter", (char**)keywords, &pyobj_guide, &pyobj_sigma_spatial, &pyobj_sigma_luma, &pyobj_sigma_chroma, &pyobj_lambda, &pyobj_num_iter, &pyobj_max_tol) &&
        jsopencv_to_safe(info, pyobj_guide, guide, ArgInfo("guide", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_spatial, sigma_spatial, ArgInfo("sigma_spatial", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_luma, sigma_luma, ArgInfo("sigma_luma", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_chroma, sigma_chroma, ArgInfo("sigma_chroma", 0)) &&
        jsopencv_to_safe(info, pyobj_lambda, lambda, ArgInfo("lambda", 0)) &&
        jsopencv_to_safe(info, pyobj_num_iter, num_iter, ArgInfo("num_iter", 0)) &&
        jsopencv_to_safe(info, pyobj_max_tol, max_tol, ArgInfo("max_tol", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::createFastBilateralSolverFilter(guide, sigma_spatial, sigma_luma, sigma_chroma, lambda, num_iter, max_tol));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_guide = NULL;
    UMat guide;
    Napi::Value* pyobj_sigma_spatial = NULL;
    double sigma_spatial=0;
    Napi::Value* pyobj_sigma_luma = NULL;
    double sigma_luma=0;
    Napi::Value* pyobj_sigma_chroma = NULL;
    double sigma_chroma=0;
    Napi::Value* pyobj_lambda = NULL;
    double lambda=128.0;
    Napi::Value* pyobj_num_iter = NULL;
    int num_iter=25;
    Napi::Value* pyobj_max_tol = NULL;
    double max_tol=1e-5;
    Ptr<FastBilateralSolverFilter> retval;

    const char* keywords[] = { "guide", "sigma_spatial", "sigma_luma", "sigma_chroma", "lambda_", "num_iter", "max_tol", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:createFastBilateralSolverFilter", (char**)keywords, &pyobj_guide, &pyobj_sigma_spatial, &pyobj_sigma_luma, &pyobj_sigma_chroma, &pyobj_lambda, &pyobj_num_iter, &pyobj_max_tol) &&
        jsopencv_to_safe(info, pyobj_guide, guide, ArgInfo("guide", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_spatial, sigma_spatial, ArgInfo("sigma_spatial", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_luma, sigma_luma, ArgInfo("sigma_luma", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_chroma, sigma_chroma, ArgInfo("sigma_chroma", 0)) &&
        jsopencv_to_safe(info, pyobj_lambda, lambda, ArgInfo("lambda", 0)) &&
        jsopencv_to_safe(info, pyobj_num_iter, num_iter, ArgInfo("num_iter", 0)) &&
        jsopencv_to_safe(info, pyobj_max_tol, max_tol, ArgInfo("max_tol", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::createFastBilateralSolverFilter(guide, sigma_spatial, sigma_luma, sigma_chroma, lambda, num_iter, max_tol));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("createFastBilateralSolverFilter");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_createFastGlobalSmootherFilter(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_guide = NULL;
    Mat guide;
    Napi::Value* pyobj_lambda = NULL;
    double lambda=0;
    Napi::Value* pyobj_sigma_color = NULL;
    double sigma_color=0;
    Napi::Value* pyobj_lambda_attenuation = NULL;
    double lambda_attenuation=0.25;
    Napi::Value* pyobj_num_iter = NULL;
    int num_iter=3;
    Ptr<FastGlobalSmootherFilter> retval;

    const char* keywords[] = { "guide", "lambda_", "sigma_color", "lambda_attenuation", "num_iter", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:createFastGlobalSmootherFilter", (char**)keywords, &pyobj_guide, &pyobj_lambda, &pyobj_sigma_color, &pyobj_lambda_attenuation, &pyobj_num_iter) &&
        jsopencv_to_safe(info, pyobj_guide, guide, ArgInfo("guide", 0)) &&
        jsopencv_to_safe(info, pyobj_lambda, lambda, ArgInfo("lambda", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_color, sigma_color, ArgInfo("sigma_color", 0)) &&
        jsopencv_to_safe(info, pyobj_lambda_attenuation, lambda_attenuation, ArgInfo("lambda_attenuation", 0)) &&
        jsopencv_to_safe(info, pyobj_num_iter, num_iter, ArgInfo("num_iter", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::createFastGlobalSmootherFilter(guide, lambda, sigma_color, lambda_attenuation, num_iter));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_guide = NULL;
    UMat guide;
    Napi::Value* pyobj_lambda = NULL;
    double lambda=0;
    Napi::Value* pyobj_sigma_color = NULL;
    double sigma_color=0;
    Napi::Value* pyobj_lambda_attenuation = NULL;
    double lambda_attenuation=0.25;
    Napi::Value* pyobj_num_iter = NULL;
    int num_iter=3;
    Ptr<FastGlobalSmootherFilter> retval;

    const char* keywords[] = { "guide", "lambda_", "sigma_color", "lambda_attenuation", "num_iter", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:createFastGlobalSmootherFilter", (char**)keywords, &pyobj_guide, &pyobj_lambda, &pyobj_sigma_color, &pyobj_lambda_attenuation, &pyobj_num_iter) &&
        jsopencv_to_safe(info, pyobj_guide, guide, ArgInfo("guide", 0)) &&
        jsopencv_to_safe(info, pyobj_lambda, lambda, ArgInfo("lambda", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_color, sigma_color, ArgInfo("sigma_color", 0)) &&
        jsopencv_to_safe(info, pyobj_lambda_attenuation, lambda_attenuation, ArgInfo("lambda_attenuation", 0)) &&
        jsopencv_to_safe(info, pyobj_num_iter, num_iter, ArgInfo("num_iter", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::createFastGlobalSmootherFilter(guide, lambda, sigma_color, lambda_attenuation, num_iter));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("createFastGlobalSmootherFilter");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_createFastLineDetector(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    Napi::Value* pyobj_length_threshold = NULL;
    int length_threshold=10;
    Napi::Value* pyobj_distance_threshold = NULL;
    float distance_threshold=1.414213562f;
    Napi::Value* pyobj_canny_th1 = NULL;
    double canny_th1=50.0;
    Napi::Value* pyobj_canny_th2 = NULL;
    double canny_th2=50.0;
    Napi::Value* pyobj_canny_aperture_size = NULL;
    int canny_aperture_size=3;
    Napi::Value* pyobj_do_merge = NULL;
    bool do_merge=false;
    Ptr<FastLineDetector> retval;

    const char* keywords[] = { "length_threshold", "distance_threshold", "canny_th1", "canny_th2", "canny_aperture_size", "do_merge", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOOOOO:createFastLineDetector", (char**)keywords, &pyobj_length_threshold, &pyobj_distance_threshold, &pyobj_canny_th1, &pyobj_canny_th2, &pyobj_canny_aperture_size, &pyobj_do_merge) &&
        jsopencv_to_safe(info, pyobj_length_threshold, length_threshold, ArgInfo("length_threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_distance_threshold, distance_threshold, ArgInfo("distance_threshold", 0)) &&
        jsopencv_to_safe(info, pyobj_canny_th1, canny_th1, ArgInfo("canny_th1", 0)) &&
        jsopencv_to_safe(info, pyobj_canny_th2, canny_th2, ArgInfo("canny_th2", 0)) &&
        jsopencv_to_safe(info, pyobj_canny_aperture_size, canny_aperture_size, ArgInfo("canny_aperture_size", 0)) &&
        jsopencv_to_safe(info, pyobj_do_merge, do_merge, ArgInfo("do_merge", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::createFastLineDetector(length_threshold, distance_threshold, canny_th1, canny_th2, canny_aperture_size, do_merge));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_createGuidedFilter(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_guide = NULL;
    Mat guide;
    Napi::Value* pyobj_radius = NULL;
    int radius=0;
    Napi::Value* pyobj_eps = NULL;
    double eps=0;
    Ptr<GuidedFilter> retval;

    const char* keywords[] = { "guide", "radius", "eps", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:createGuidedFilter", (char**)keywords, &pyobj_guide, &pyobj_radius, &pyobj_eps) &&
        jsopencv_to_safe(info, pyobj_guide, guide, ArgInfo("guide", 0)) &&
        jsopencv_to_safe(info, pyobj_radius, radius, ArgInfo("radius", 0)) &&
        jsopencv_to_safe(info, pyobj_eps, eps, ArgInfo("eps", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::createGuidedFilter(guide, radius, eps));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_guide = NULL;
    UMat guide;
    Napi::Value* pyobj_radius = NULL;
    int radius=0;
    Napi::Value* pyobj_eps = NULL;
    double eps=0;
    Ptr<GuidedFilter> retval;

    const char* keywords[] = { "guide", "radius", "eps", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:createGuidedFilter", (char**)keywords, &pyobj_guide, &pyobj_radius, &pyobj_eps) &&
        jsopencv_to_safe(info, pyobj_guide, guide, ArgInfo("guide", 0)) &&
        jsopencv_to_safe(info, pyobj_radius, radius, ArgInfo("radius", 0)) &&
        jsopencv_to_safe(info, pyobj_eps, eps, ArgInfo("eps", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::createGuidedFilter(guide, radius, eps));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("createGuidedFilter");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_createQuaternionImage(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_qimg = NULL;
    Mat qimg;

    const char* keywords[] = { "img", "qimg", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:createQuaternionImage", (char**)keywords, &pyobj_img, &pyobj_qimg) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_qimg, qimg, ArgInfo("qimg", 1)))
    {
        ERRWRAP2(cv::ximgproc::createQuaternionImage(img, qimg));
        return jsopencv_from(qimg);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_qimg = NULL;
    UMat qimg;

    const char* keywords[] = { "img", "qimg", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:createQuaternionImage", (char**)keywords, &pyobj_img, &pyobj_qimg) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_qimg, qimg, ArgInfo("qimg", 1)))
    {
        ERRWRAP2(cv::ximgproc::createQuaternionImage(img, qimg));
        return jsopencv_from(qimg);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("createQuaternionImage");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_createRFFeatureGetter(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    Ptr<RFFeatureGetter> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ximgproc::createRFFeatureGetter());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_createRICInterpolator(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    Ptr<RICInterpolator> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ximgproc::createRICInterpolator());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_createRightMatcher(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    Napi::Value* pyobj_matcher_left = NULL;
    Ptr<StereoMatcher> matcher_left;
    Ptr<StereoMatcher> retval;

    const char* keywords[] = { "matcher_left", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:createRightMatcher", (char**)keywords, &pyobj_matcher_left) &&
        jsopencv_to_safe(info, pyobj_matcher_left, matcher_left, ArgInfo("matcher_left", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::createRightMatcher(matcher_left));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_createScanSegment(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    Napi::Value* pyobj_image_width = NULL;
    int image_width=0;
    Napi::Value* pyobj_image_height = NULL;
    int image_height=0;
    Napi::Value* pyobj_num_superpixels = NULL;
    int num_superpixels=0;
    Napi::Value* pyobj_slices = NULL;
    int slices=8;
    Napi::Value* pyobj_merge_small = NULL;
    bool merge_small=true;
    cv::Ptr<ScanSegment> retval;

    const char* keywords[] = { "image_width", "image_height", "num_superpixels", "slices", "merge_small", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OO:createScanSegment", (char**)keywords, &pyobj_image_width, &pyobj_image_height, &pyobj_num_superpixels, &pyobj_slices, &pyobj_merge_small) &&
        jsopencv_to_safe(info, pyobj_image_width, image_width, ArgInfo("image_width", 0)) &&
        jsopencv_to_safe(info, pyobj_image_height, image_height, ArgInfo("image_height", 0)) &&
        jsopencv_to_safe(info, pyobj_num_superpixels, num_superpixels, ArgInfo("num_superpixels", 0)) &&
        jsopencv_to_safe(info, pyobj_slices, slices, ArgInfo("slices", 0)) &&
        jsopencv_to_safe(info, pyobj_merge_small, merge_small, ArgInfo("merge_small", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::createScanSegment(image_width, image_height, num_superpixels, slices, merge_small));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_createStructuredEdgeDetection(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    Napi::Value* pyobj_model = NULL;
    String model;
    Napi::Value* pyobj_howToGetFeatures = NULL;
    Ptr<RFFeatureGetter> howToGetFeatures;
    Ptr<StructuredEdgeDetection> retval;

    const char* keywords[] = { "model", "howToGetFeatures", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:createStructuredEdgeDetection", (char**)keywords, &pyobj_model, &pyobj_howToGetFeatures) &&
        jsopencv_to_safe(info, pyobj_model, model, ArgInfo("model", 0)) &&
        jsopencv_to_safe(info, pyobj_howToGetFeatures, howToGetFeatures, ArgInfo("howToGetFeatures", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::createStructuredEdgeDetection(model, howToGetFeatures));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_createSuperpixelLSC(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_region_size = NULL;
    int region_size=10;
    Napi::Value* pyobj_ratio = NULL;
    float ratio=0.075f;
    Ptr<SuperpixelLSC> retval;

    const char* keywords[] = { "image", "region_size", "ratio", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:createSuperpixelLSC", (char**)keywords, &pyobj_image, &pyobj_region_size, &pyobj_ratio) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_region_size, region_size, ArgInfo("region_size", 0)) &&
        jsopencv_to_safe(info, pyobj_ratio, ratio, ArgInfo("ratio", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::createSuperpixelLSC(image, region_size, ratio));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_region_size = NULL;
    int region_size=10;
    Napi::Value* pyobj_ratio = NULL;
    float ratio=0.075f;
    Ptr<SuperpixelLSC> retval;

    const char* keywords[] = { "image", "region_size", "ratio", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:createSuperpixelLSC", (char**)keywords, &pyobj_image, &pyobj_region_size, &pyobj_ratio) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_region_size, region_size, ArgInfo("region_size", 0)) &&
        jsopencv_to_safe(info, pyobj_ratio, ratio, ArgInfo("ratio", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::createSuperpixelLSC(image, region_size, ratio));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("createSuperpixelLSC");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_createSuperpixelSEEDS(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    Napi::Value* pyobj_image_width = NULL;
    int image_width=0;
    Napi::Value* pyobj_image_height = NULL;
    int image_height=0;
    Napi::Value* pyobj_image_channels = NULL;
    int image_channels=0;
    Napi::Value* pyobj_num_superpixels = NULL;
    int num_superpixels=0;
    Napi::Value* pyobj_num_levels = NULL;
    int num_levels=0;
    Napi::Value* pyobj_prior = NULL;
    int prior=2;
    Napi::Value* pyobj_histogram_bins = NULL;
    int histogram_bins=5;
    Napi::Value* pyobj_double_step = NULL;
    bool double_step=false;
    Ptr<SuperpixelSEEDS> retval;

    const char* keywords[] = { "image_width", "image_height", "image_channels", "num_superpixels", "num_levels", "prior", "histogram_bins", "double_step", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OOO:createSuperpixelSEEDS", (char**)keywords, &pyobj_image_width, &pyobj_image_height, &pyobj_image_channels, &pyobj_num_superpixels, &pyobj_num_levels, &pyobj_prior, &pyobj_histogram_bins, &pyobj_double_step) &&
        jsopencv_to_safe(info, pyobj_image_width, image_width, ArgInfo("image_width", 0)) &&
        jsopencv_to_safe(info, pyobj_image_height, image_height, ArgInfo("image_height", 0)) &&
        jsopencv_to_safe(info, pyobj_image_channels, image_channels, ArgInfo("image_channels", 0)) &&
        jsopencv_to_safe(info, pyobj_num_superpixels, num_superpixels, ArgInfo("num_superpixels", 0)) &&
        jsopencv_to_safe(info, pyobj_num_levels, num_levels, ArgInfo("num_levels", 0)) &&
        jsopencv_to_safe(info, pyobj_prior, prior, ArgInfo("prior", 0)) &&
        jsopencv_to_safe(info, pyobj_histogram_bins, histogram_bins, ArgInfo("histogram_bins", 0)) &&
        jsopencv_to_safe(info, pyobj_double_step, double_step, ArgInfo("double_step", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::createSuperpixelSEEDS(image_width, image_height, image_channels, num_superpixels, num_levels, prior, histogram_bins, double_step));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_createSuperpixelSLIC(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_algorithm = NULL;
    int algorithm=SLICO;
    Napi::Value* pyobj_region_size = NULL;
    int region_size=10;
    Napi::Value* pyobj_ruler = NULL;
    float ruler=10.0f;
    Ptr<SuperpixelSLIC> retval;

    const char* keywords[] = { "image", "algorithm", "region_size", "ruler", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:createSuperpixelSLIC", (char**)keywords, &pyobj_image, &pyobj_algorithm, &pyobj_region_size, &pyobj_ruler) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_algorithm, algorithm, ArgInfo("algorithm", 0)) &&
        jsopencv_to_safe(info, pyobj_region_size, region_size, ArgInfo("region_size", 0)) &&
        jsopencv_to_safe(info, pyobj_ruler, ruler, ArgInfo("ruler", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::createSuperpixelSLIC(image, algorithm, region_size, ruler));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_algorithm = NULL;
    int algorithm=SLICO;
    Napi::Value* pyobj_region_size = NULL;
    int region_size=10;
    Napi::Value* pyobj_ruler = NULL;
    float ruler=10.0f;
    Ptr<SuperpixelSLIC> retval;

    const char* keywords[] = { "image", "algorithm", "region_size", "ruler", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:createSuperpixelSLIC", (char**)keywords, &pyobj_image, &pyobj_algorithm, &pyobj_region_size, &pyobj_ruler) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_algorithm, algorithm, ArgInfo("algorithm", 0)) &&
        jsopencv_to_safe(info, pyobj_region_size, region_size, ArgInfo("region_size", 0)) &&
        jsopencv_to_safe(info, pyobj_ruler, ruler, ArgInfo("ruler", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::createSuperpixelSLIC(image, algorithm, region_size, ruler));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("createSuperpixelSLIC");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_dtFilter(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_guide = NULL;
    Mat guide;
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_sigmaSpatial = NULL;
    double sigmaSpatial=0;
    Napi::Value* pyobj_sigmaColor = NULL;
    double sigmaColor=0;
    Napi::Value* pyobj_mode = NULL;
    int mode=DTF_NC;
    Napi::Value* pyobj_numIters = NULL;
    int numIters=3;

    const char* keywords[] = { "guide", "src", "sigmaSpatial", "sigmaColor", "dst", "mode", "numIters", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:dtFilter", (char**)keywords, &pyobj_guide, &pyobj_src, &pyobj_sigmaSpatial, &pyobj_sigmaColor, &pyobj_dst, &pyobj_mode, &pyobj_numIters) &&
        jsopencv_to_safe(info, pyobj_guide, guide, ArgInfo("guide", 0)) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_sigmaSpatial, sigmaSpatial, ArgInfo("sigmaSpatial", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaColor, sigmaColor, ArgInfo("sigmaColor", 0)) &&
        jsopencv_to_safe(info, pyobj_mode, mode, ArgInfo("mode", 0)) &&
        jsopencv_to_safe(info, pyobj_numIters, numIters, ArgInfo("numIters", 0)))
    {
        ERRWRAP2(cv::ximgproc::dtFilter(guide, src, dst, sigmaSpatial, sigmaColor, mode, numIters));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_guide = NULL;
    UMat guide;
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_sigmaSpatial = NULL;
    double sigmaSpatial=0;
    Napi::Value* pyobj_sigmaColor = NULL;
    double sigmaColor=0;
    Napi::Value* pyobj_mode = NULL;
    int mode=DTF_NC;
    Napi::Value* pyobj_numIters = NULL;
    int numIters=3;

    const char* keywords[] = { "guide", "src", "sigmaSpatial", "sigmaColor", "dst", "mode", "numIters", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:dtFilter", (char**)keywords, &pyobj_guide, &pyobj_src, &pyobj_sigmaSpatial, &pyobj_sigmaColor, &pyobj_dst, &pyobj_mode, &pyobj_numIters) &&
        jsopencv_to_safe(info, pyobj_guide, guide, ArgInfo("guide", 0)) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_sigmaSpatial, sigmaSpatial, ArgInfo("sigmaSpatial", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaColor, sigmaColor, ArgInfo("sigmaColor", 0)) &&
        jsopencv_to_safe(info, pyobj_mode, mode, ArgInfo("mode", 0)) &&
        jsopencv_to_safe(info, pyobj_numIters, numIters, ArgInfo("numIters", 0)))
    {
        ERRWRAP2(cv::ximgproc::dtFilter(guide, src, dst, sigmaSpatial, sigmaColor, mode, numIters));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("dtFilter");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_edgePreservingFilter(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_d = NULL;
    int d=0;
    Napi::Value* pyobj_threshold = NULL;
    double threshold=0;

    const char* keywords[] = { "src", "d", "threshold", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:edgePreservingFilter", (char**)keywords, &pyobj_src, &pyobj_d, &pyobj_threshold, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_d, d, ArgInfo("d", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)))
    {
        ERRWRAP2(cv::ximgproc::edgePreservingFilter(src, dst, d, threshold));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_d = NULL;
    int d=0;
    Napi::Value* pyobj_threshold = NULL;
    double threshold=0;

    const char* keywords[] = { "src", "d", "threshold", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:edgePreservingFilter", (char**)keywords, &pyobj_src, &pyobj_d, &pyobj_threshold, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_d, d, ArgInfo("d", 0)) &&
        jsopencv_to_safe(info, pyobj_threshold, threshold, ArgInfo("threshold", 0)))
    {
        ERRWRAP2(cv::ximgproc::edgePreservingFilter(src, dst, d, threshold));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("edgePreservingFilter");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_fastBilateralSolverFilter(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_guide = NULL;
    Mat guide;
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_confidence = NULL;
    Mat confidence;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_sigma_spatial = NULL;
    double sigma_spatial=8;
    Napi::Value* pyobj_sigma_luma = NULL;
    double sigma_luma=8;
    Napi::Value* pyobj_sigma_chroma = NULL;
    double sigma_chroma=8;
    Napi::Value* pyobj_lambda = NULL;
    double lambda=128.0;
    Napi::Value* pyobj_num_iter = NULL;
    int num_iter=25;
    Napi::Value* pyobj_max_tol = NULL;
    double max_tol=1e-5;

    const char* keywords[] = { "guide", "src", "confidence", "dst", "sigma_spatial", "sigma_luma", "sigma_chroma", "lambda_", "num_iter", "max_tol", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOOOOO:fastBilateralSolverFilter", (char**)keywords, &pyobj_guide, &pyobj_src, &pyobj_confidence, &pyobj_dst, &pyobj_sigma_spatial, &pyobj_sigma_luma, &pyobj_sigma_chroma, &pyobj_lambda, &pyobj_num_iter, &pyobj_max_tol) &&
        jsopencv_to_safe(info, pyobj_guide, guide, ArgInfo("guide", 0)) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_confidence, confidence, ArgInfo("confidence", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_sigma_spatial, sigma_spatial, ArgInfo("sigma_spatial", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_luma, sigma_luma, ArgInfo("sigma_luma", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_chroma, sigma_chroma, ArgInfo("sigma_chroma", 0)) &&
        jsopencv_to_safe(info, pyobj_lambda, lambda, ArgInfo("lambda", 0)) &&
        jsopencv_to_safe(info, pyobj_num_iter, num_iter, ArgInfo("num_iter", 0)) &&
        jsopencv_to_safe(info, pyobj_max_tol, max_tol, ArgInfo("max_tol", 0)))
    {
        ERRWRAP2(cv::ximgproc::fastBilateralSolverFilter(guide, src, confidence, dst, sigma_spatial, sigma_luma, sigma_chroma, lambda, num_iter, max_tol));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_guide = NULL;
    UMat guide;
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_confidence = NULL;
    UMat confidence;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_sigma_spatial = NULL;
    double sigma_spatial=8;
    Napi::Value* pyobj_sigma_luma = NULL;
    double sigma_luma=8;
    Napi::Value* pyobj_sigma_chroma = NULL;
    double sigma_chroma=8;
    Napi::Value* pyobj_lambda = NULL;
    double lambda=128.0;
    Napi::Value* pyobj_num_iter = NULL;
    int num_iter=25;
    Napi::Value* pyobj_max_tol = NULL;
    double max_tol=1e-5;

    const char* keywords[] = { "guide", "src", "confidence", "dst", "sigma_spatial", "sigma_luma", "sigma_chroma", "lambda_", "num_iter", "max_tol", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOOOOO:fastBilateralSolverFilter", (char**)keywords, &pyobj_guide, &pyobj_src, &pyobj_confidence, &pyobj_dst, &pyobj_sigma_spatial, &pyobj_sigma_luma, &pyobj_sigma_chroma, &pyobj_lambda, &pyobj_num_iter, &pyobj_max_tol) &&
        jsopencv_to_safe(info, pyobj_guide, guide, ArgInfo("guide", 0)) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_confidence, confidence, ArgInfo("confidence", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_sigma_spatial, sigma_spatial, ArgInfo("sigma_spatial", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_luma, sigma_luma, ArgInfo("sigma_luma", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_chroma, sigma_chroma, ArgInfo("sigma_chroma", 0)) &&
        jsopencv_to_safe(info, pyobj_lambda, lambda, ArgInfo("lambda", 0)) &&
        jsopencv_to_safe(info, pyobj_num_iter, num_iter, ArgInfo("num_iter", 0)) &&
        jsopencv_to_safe(info, pyobj_max_tol, max_tol, ArgInfo("max_tol", 0)))
    {
        ERRWRAP2(cv::ximgproc::fastBilateralSolverFilter(guide, src, confidence, dst, sigma_spatial, sigma_luma, sigma_chroma, lambda, num_iter, max_tol));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("fastBilateralSolverFilter");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_fastGlobalSmootherFilter(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_guide = NULL;
    Mat guide;
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_lambda = NULL;
    double lambda=0;
    Napi::Value* pyobj_sigma_color = NULL;
    double sigma_color=0;
    Napi::Value* pyobj_lambda_attenuation = NULL;
    double lambda_attenuation=0.25;
    Napi::Value* pyobj_num_iter = NULL;
    int num_iter=3;

    const char* keywords[] = { "guide", "src", "lambda_", "sigma_color", "dst", "lambda_attenuation", "num_iter", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:fastGlobalSmootherFilter", (char**)keywords, &pyobj_guide, &pyobj_src, &pyobj_lambda, &pyobj_sigma_color, &pyobj_dst, &pyobj_lambda_attenuation, &pyobj_num_iter) &&
        jsopencv_to_safe(info, pyobj_guide, guide, ArgInfo("guide", 0)) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_lambda, lambda, ArgInfo("lambda", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_color, sigma_color, ArgInfo("sigma_color", 0)) &&
        jsopencv_to_safe(info, pyobj_lambda_attenuation, lambda_attenuation, ArgInfo("lambda_attenuation", 0)) &&
        jsopencv_to_safe(info, pyobj_num_iter, num_iter, ArgInfo("num_iter", 0)))
    {
        ERRWRAP2(cv::ximgproc::fastGlobalSmootherFilter(guide, src, dst, lambda, sigma_color, lambda_attenuation, num_iter));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_guide = NULL;
    UMat guide;
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_lambda = NULL;
    double lambda=0;
    Napi::Value* pyobj_sigma_color = NULL;
    double sigma_color=0;
    Napi::Value* pyobj_lambda_attenuation = NULL;
    double lambda_attenuation=0.25;
    Napi::Value* pyobj_num_iter = NULL;
    int num_iter=3;

    const char* keywords[] = { "guide", "src", "lambda_", "sigma_color", "dst", "lambda_attenuation", "num_iter", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OOO:fastGlobalSmootherFilter", (char**)keywords, &pyobj_guide, &pyobj_src, &pyobj_lambda, &pyobj_sigma_color, &pyobj_dst, &pyobj_lambda_attenuation, &pyobj_num_iter) &&
        jsopencv_to_safe(info, pyobj_guide, guide, ArgInfo("guide", 0)) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_lambda, lambda, ArgInfo("lambda", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma_color, sigma_color, ArgInfo("sigma_color", 0)) &&
        jsopencv_to_safe(info, pyobj_lambda_attenuation, lambda_attenuation, ArgInfo("lambda_attenuation", 0)) &&
        jsopencv_to_safe(info, pyobj_num_iter, num_iter, ArgInfo("num_iter", 0)))
    {
        ERRWRAP2(cv::ximgproc::fastGlobalSmootherFilter(guide, src, dst, lambda, sigma_color, lambda_attenuation, num_iter));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("fastGlobalSmootherFilter");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_findEllipses(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_image = NULL;
    Mat image;
    Napi::Value* pyobj_ellipses = NULL;
    Mat ellipses;
    Napi::Value* pyobj_scoreThreshold = NULL;
    float scoreThreshold=0.7f;
    Napi::Value* pyobj_reliabilityThreshold = NULL;
    float reliabilityThreshold=0.5f;
    Napi::Value* pyobj_centerDistanceThreshold = NULL;
    float centerDistanceThreshold=0.05f;

    const char* keywords[] = { "image", "ellipses", "scoreThreshold", "reliabilityThreshold", "centerDistanceThreshold", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOO:findEllipses", (char**)keywords, &pyobj_image, &pyobj_ellipses, &pyobj_scoreThreshold, &pyobj_reliabilityThreshold, &pyobj_centerDistanceThreshold) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_ellipses, ellipses, ArgInfo("ellipses", 1)) &&
        jsopencv_to_safe(info, pyobj_scoreThreshold, scoreThreshold, ArgInfo("scoreThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_reliabilityThreshold, reliabilityThreshold, ArgInfo("reliabilityThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_centerDistanceThreshold, centerDistanceThreshold, ArgInfo("centerDistanceThreshold", 0)))
    {
        ERRWRAP2(cv::ximgproc::findEllipses(image, ellipses, scoreThreshold, reliabilityThreshold, centerDistanceThreshold));
        return jsopencv_from(ellipses);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_image = NULL;
    UMat image;
    Napi::Value* pyobj_ellipses = NULL;
    UMat ellipses;
    Napi::Value* pyobj_scoreThreshold = NULL;
    float scoreThreshold=0.7f;
    Napi::Value* pyobj_reliabilityThreshold = NULL;
    float reliabilityThreshold=0.5f;
    Napi::Value* pyobj_centerDistanceThreshold = NULL;
    float centerDistanceThreshold=0.05f;

    const char* keywords[] = { "image", "ellipses", "scoreThreshold", "reliabilityThreshold", "centerDistanceThreshold", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOO:findEllipses", (char**)keywords, &pyobj_image, &pyobj_ellipses, &pyobj_scoreThreshold, &pyobj_reliabilityThreshold, &pyobj_centerDistanceThreshold) &&
        jsopencv_to_safe(info, pyobj_image, image, ArgInfo("image", 0)) &&
        jsopencv_to_safe(info, pyobj_ellipses, ellipses, ArgInfo("ellipses", 1)) &&
        jsopencv_to_safe(info, pyobj_scoreThreshold, scoreThreshold, ArgInfo("scoreThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_reliabilityThreshold, reliabilityThreshold, ArgInfo("reliabilityThreshold", 0)) &&
        jsopencv_to_safe(info, pyobj_centerDistanceThreshold, centerDistanceThreshold, ArgInfo("centerDistanceThreshold", 0)))
    {
        ERRWRAP2(cv::ximgproc::findEllipses(image, ellipses, scoreThreshold, reliabilityThreshold, centerDistanceThreshold));
        return jsopencv_from(ellipses);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("findEllipses");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_fourierDescriptor(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_nbElt = NULL;
    int nbElt=-1;
    Napi::Value* pyobj_nbFD = NULL;
    int nbFD=-1;

    const char* keywords[] = { "src", "dst", "nbElt", "nbFD", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:fourierDescriptor", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_nbElt, &pyobj_nbFD) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_nbElt, nbElt, ArgInfo("nbElt", 0)) &&
        jsopencv_to_safe(info, pyobj_nbFD, nbFD, ArgInfo("nbFD", 0)))
    {
        ERRWRAP2(cv::ximgproc::fourierDescriptor(src, dst, nbElt, nbFD));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_nbElt = NULL;
    int nbElt=-1;
    Napi::Value* pyobj_nbFD = NULL;
    int nbFD=-1;

    const char* keywords[] = { "src", "dst", "nbElt", "nbFD", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:fourierDescriptor", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_nbElt, &pyobj_nbFD) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_nbElt, nbElt, ArgInfo("nbElt", 0)) &&
        jsopencv_to_safe(info, pyobj_nbFD, nbFD, ArgInfo("nbFD", 0)))
    {
        ERRWRAP2(cv::ximgproc::fourierDescriptor(src, dst, nbElt, nbFD));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("fourierDescriptor");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_getDisparityVis(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_scale = NULL;
    double scale=1.0;

    const char* keywords[] = { "src", "dst", "scale", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:getDisparityVis", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_scale) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)))
    {
        ERRWRAP2(cv::ximgproc::getDisparityVis(src, dst, scale));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_scale = NULL;
    double scale=1.0;

    const char* keywords[] = { "src", "dst", "scale", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:getDisparityVis", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_scale) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_scale, scale, ArgInfo("scale", 0)))
    {
        ERRWRAP2(cv::ximgproc::getDisparityVis(src, dst, scale));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("getDisparityVis");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_guidedFilter(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_guide = NULL;
    Mat guide;
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_radius = NULL;
    int radius=0;
    Napi::Value* pyobj_eps = NULL;
    double eps=0;
    Napi::Value* pyobj_dDepth = NULL;
    int dDepth=-1;

    const char* keywords[] = { "guide", "src", "radius", "eps", "dst", "dDepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OO:guidedFilter", (char**)keywords, &pyobj_guide, &pyobj_src, &pyobj_radius, &pyobj_eps, &pyobj_dst, &pyobj_dDepth) &&
        jsopencv_to_safe(info, pyobj_guide, guide, ArgInfo("guide", 0)) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_radius, radius, ArgInfo("radius", 0)) &&
        jsopencv_to_safe(info, pyobj_eps, eps, ArgInfo("eps", 0)) &&
        jsopencv_to_safe(info, pyobj_dDepth, dDepth, ArgInfo("dDepth", 0)))
    {
        ERRWRAP2(cv::ximgproc::guidedFilter(guide, src, dst, radius, eps, dDepth));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_guide = NULL;
    UMat guide;
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_radius = NULL;
    int radius=0;
    Napi::Value* pyobj_eps = NULL;
    double eps=0;
    Napi::Value* pyobj_dDepth = NULL;
    int dDepth=-1;

    const char* keywords[] = { "guide", "src", "radius", "eps", "dst", "dDepth", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO|OO:guidedFilter", (char**)keywords, &pyobj_guide, &pyobj_src, &pyobj_radius, &pyobj_eps, &pyobj_dst, &pyobj_dDepth) &&
        jsopencv_to_safe(info, pyobj_guide, guide, ArgInfo("guide", 0)) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_radius, radius, ArgInfo("radius", 0)) &&
        jsopencv_to_safe(info, pyobj_eps, eps, ArgInfo("eps", 0)) &&
        jsopencv_to_safe(info, pyobj_dDepth, dDepth, ArgInfo("dDepth", 0)))
    {
        ERRWRAP2(cv::ximgproc::guidedFilter(guide, src, dst, radius, eps, dDepth));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("guidedFilter");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_jointBilateralFilter(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_joint = NULL;
    Mat joint;
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_d = NULL;
    int d=0;
    Napi::Value* pyobj_sigmaColor = NULL;
    double sigmaColor=0;
    Napi::Value* pyobj_sigmaSpace = NULL;
    double sigmaSpace=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "joint", "src", "d", "sigmaColor", "sigmaSpace", "dst", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OO:jointBilateralFilter", (char**)keywords, &pyobj_joint, &pyobj_src, &pyobj_d, &pyobj_sigmaColor, &pyobj_sigmaSpace, &pyobj_dst, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_joint, joint, ArgInfo("joint", 0)) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_d, d, ArgInfo("d", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaColor, sigmaColor, ArgInfo("sigmaColor", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaSpace, sigmaSpace, ArgInfo("sigmaSpace", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::ximgproc::jointBilateralFilter(joint, src, dst, d, sigmaColor, sigmaSpace, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_joint = NULL;
    UMat joint;
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_d = NULL;
    int d=0;
    Napi::Value* pyobj_sigmaColor = NULL;
    double sigmaColor=0;
    Napi::Value* pyobj_sigmaSpace = NULL;
    double sigmaSpace=0;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "joint", "src", "d", "sigmaColor", "sigmaSpace", "dst", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OO:jointBilateralFilter", (char**)keywords, &pyobj_joint, &pyobj_src, &pyobj_d, &pyobj_sigmaColor, &pyobj_sigmaSpace, &pyobj_dst, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_joint, joint, ArgInfo("joint", 0)) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_d, d, ArgInfo("d", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaColor, sigmaColor, ArgInfo("sigmaColor", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaSpace, sigmaSpace, ArgInfo("sigmaSpace", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::ximgproc::jointBilateralFilter(joint, src, dst, d, sigmaColor, sigmaSpace, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("jointBilateralFilter");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_l0Smooth(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_lambda = NULL;
    double lambda=0.02;
    Napi::Value* pyobj_kappa = NULL;
    double kappa=2.0;

    const char* keywords[] = { "src", "dst", "lambda_", "kappa", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:l0Smooth", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_lambda, &pyobj_kappa) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_lambda, lambda, ArgInfo("lambda", 0)) &&
        jsopencv_to_safe(info, pyobj_kappa, kappa, ArgInfo("kappa", 0)))
    {
        ERRWRAP2(cv::ximgproc::l0Smooth(src, dst, lambda, kappa));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_lambda = NULL;
    double lambda=0.02;
    Napi::Value* pyobj_kappa = NULL;
    double kappa=2.0;

    const char* keywords[] = { "src", "dst", "lambda_", "kappa", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOO:l0Smooth", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_lambda, &pyobj_kappa) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_lambda, lambda, ArgInfo("lambda", 0)) &&
        jsopencv_to_safe(info, pyobj_kappa, kappa, ArgInfo("kappa", 0)))
    {
        ERRWRAP2(cv::ximgproc::l0Smooth(src, dst, lambda, kappa));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("l0Smooth");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_niBlackThreshold(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj__src = NULL;
    Mat _src;
    Napi::Value* pyobj__dst = NULL;
    Mat _dst;
    Napi::Value* pyobj_maxValue = NULL;
    double maxValue=0;
    Napi::Value* pyobj_type = NULL;
    int type=0;
    Napi::Value* pyobj_blockSize = NULL;
    int blockSize=0;
    Napi::Value* pyobj_k = NULL;
    double k=0;
    Napi::Value* pyobj_binarizationMethod = NULL;
    int binarizationMethod=BINARIZATION_NIBLACK;
    Napi::Value* pyobj_r = NULL;
    double r=128;

    const char* keywords[] = { "_src", "maxValue", "type", "blockSize", "k", "_dst", "binarizationMethod", "r", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OOO:niBlackThreshold", (char**)keywords, &pyobj__src, &pyobj_maxValue, &pyobj_type, &pyobj_blockSize, &pyobj_k, &pyobj__dst, &pyobj_binarizationMethod, &pyobj_r) &&
        jsopencv_to_safe(info, pyobj__src, _src, ArgInfo("_src", 0)) &&
        jsopencv_to_safe(info, pyobj__dst, _dst, ArgInfo("_dst", 1)) &&
        jsopencv_to_safe(info, pyobj_maxValue, maxValue, ArgInfo("maxValue", 0)) &&
        jsopencv_to_safe(info, pyobj_type, type, ArgInfo("type", 0)) &&
        jsopencv_to_safe(info, pyobj_blockSize, blockSize, ArgInfo("blockSize", 0)) &&
        jsopencv_to_safe(info, pyobj_k, k, ArgInfo("k", 0)) &&
        jsopencv_to_safe(info, pyobj_binarizationMethod, binarizationMethod, ArgInfo("binarizationMethod", 0)) &&
        jsopencv_to_safe(info, pyobj_r, r, ArgInfo("r", 0)))
    {
        ERRWRAP2(cv::ximgproc::niBlackThreshold(_src, _dst, maxValue, type, blockSize, k, binarizationMethod, r));
        return jsopencv_from(_dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj__src = NULL;
    UMat _src;
    Napi::Value* pyobj__dst = NULL;
    UMat _dst;
    Napi::Value* pyobj_maxValue = NULL;
    double maxValue=0;
    Napi::Value* pyobj_type = NULL;
    int type=0;
    Napi::Value* pyobj_blockSize = NULL;
    int blockSize=0;
    Napi::Value* pyobj_k = NULL;
    double k=0;
    Napi::Value* pyobj_binarizationMethod = NULL;
    int binarizationMethod=BINARIZATION_NIBLACK;
    Napi::Value* pyobj_r = NULL;
    double r=128;

    const char* keywords[] = { "_src", "maxValue", "type", "blockSize", "k", "_dst", "binarizationMethod", "r", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOOO|OOO:niBlackThreshold", (char**)keywords, &pyobj__src, &pyobj_maxValue, &pyobj_type, &pyobj_blockSize, &pyobj_k, &pyobj__dst, &pyobj_binarizationMethod, &pyobj_r) &&
        jsopencv_to_safe(info, pyobj__src, _src, ArgInfo("_src", 0)) &&
        jsopencv_to_safe(info, pyobj__dst, _dst, ArgInfo("_dst", 1)) &&
        jsopencv_to_safe(info, pyobj_maxValue, maxValue, ArgInfo("maxValue", 0)) &&
        jsopencv_to_safe(info, pyobj_type, type, ArgInfo("type", 0)) &&
        jsopencv_to_safe(info, pyobj_blockSize, blockSize, ArgInfo("blockSize", 0)) &&
        jsopencv_to_safe(info, pyobj_k, k, ArgInfo("k", 0)) &&
        jsopencv_to_safe(info, pyobj_binarizationMethod, binarizationMethod, ArgInfo("binarizationMethod", 0)) &&
        jsopencv_to_safe(info, pyobj_r, r, ArgInfo("r", 0)))
    {
        ERRWRAP2(cv::ximgproc::niBlackThreshold(_src, _dst, maxValue, type, blockSize, k, binarizationMethod, r));
        return jsopencv_from(_dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("niBlackThreshold");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_qconj(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_qimg = NULL;
    Mat qimg;
    Napi::Value* pyobj_qcimg = NULL;
    Mat qcimg;

    const char* keywords[] = { "qimg", "qcimg", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:qconj", (char**)keywords, &pyobj_qimg, &pyobj_qcimg) &&
        jsopencv_to_safe(info, pyobj_qimg, qimg, ArgInfo("qimg", 0)) &&
        jsopencv_to_safe(info, pyobj_qcimg, qcimg, ArgInfo("qcimg", 1)))
    {
        ERRWRAP2(cv::ximgproc::qconj(qimg, qcimg));
        return jsopencv_from(qcimg);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_qimg = NULL;
    UMat qimg;
    Napi::Value* pyobj_qcimg = NULL;
    UMat qcimg;

    const char* keywords[] = { "qimg", "qcimg", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:qconj", (char**)keywords, &pyobj_qimg, &pyobj_qcimg) &&
        jsopencv_to_safe(info, pyobj_qimg, qimg, ArgInfo("qimg", 0)) &&
        jsopencv_to_safe(info, pyobj_qcimg, qcimg, ArgInfo("qcimg", 1)))
    {
        ERRWRAP2(cv::ximgproc::qconj(qimg, qcimg));
        return jsopencv_from(qcimg);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("qconj");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_qdft(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_img = NULL;
    Mat img;
    Napi::Value* pyobj_qimg = NULL;
    Mat qimg;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_sideLeft = NULL;
    bool sideLeft=0;

    const char* keywords[] = { "img", "flags", "sideLeft", "qimg", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:qdft", (char**)keywords, &pyobj_img, &pyobj_flags, &pyobj_sideLeft, &pyobj_qimg) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_qimg, qimg, ArgInfo("qimg", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_sideLeft, sideLeft, ArgInfo("sideLeft", 0)))
    {
        ERRWRAP2(cv::ximgproc::qdft(img, qimg, flags, sideLeft));
        return jsopencv_from(qimg);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_img = NULL;
    UMat img;
    Napi::Value* pyobj_qimg = NULL;
    UMat qimg;
    Napi::Value* pyobj_flags = NULL;
    int flags=0;
    Napi::Value* pyobj_sideLeft = NULL;
    bool sideLeft=0;

    const char* keywords[] = { "img", "flags", "sideLeft", "qimg", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|O:qdft", (char**)keywords, &pyobj_img, &pyobj_flags, &pyobj_sideLeft, &pyobj_qimg) &&
        jsopencv_to_safe(info, pyobj_img, img, ArgInfo("img", 0)) &&
        jsopencv_to_safe(info, pyobj_qimg, qimg, ArgInfo("qimg", 1)) &&
        jsopencv_to_safe(info, pyobj_flags, flags, ArgInfo("flags", 0)) &&
        jsopencv_to_safe(info, pyobj_sideLeft, sideLeft, ArgInfo("sideLeft", 0)))
    {
        ERRWRAP2(cv::ximgproc::qdft(img, qimg, flags, sideLeft));
        return jsopencv_from(qimg);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("qdft");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_qmultiply(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src1 = NULL;
    Mat src1;
    Napi::Value* pyobj_src2 = NULL;
    Mat src2;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;

    const char* keywords[] = { "src1", "src2", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:qmultiply", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::ximgproc::qmultiply(src1, src2, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src1 = NULL;
    UMat src1;
    Napi::Value* pyobj_src2 = NULL;
    UMat src2;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;

    const char* keywords[] = { "src1", "src2", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|O:qmultiply", (char**)keywords, &pyobj_src1, &pyobj_src2, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src1, src1, ArgInfo("src1", 0)) &&
        jsopencv_to_safe(info, pyobj_src2, src2, ArgInfo("src2", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(cv::ximgproc::qmultiply(src1, src2, dst));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("qmultiply");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_qunitary(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_qimg = NULL;
    Mat qimg;
    Napi::Value* pyobj_qnimg = NULL;
    Mat qnimg;

    const char* keywords[] = { "qimg", "qnimg", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:qunitary", (char**)keywords, &pyobj_qimg, &pyobj_qnimg) &&
        jsopencv_to_safe(info, pyobj_qimg, qimg, ArgInfo("qimg", 0)) &&
        jsopencv_to_safe(info, pyobj_qnimg, qnimg, ArgInfo("qnimg", 1)))
    {
        ERRWRAP2(cv::ximgproc::qunitary(qimg, qnimg));
        return jsopencv_from(qnimg);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_qimg = NULL;
    UMat qimg;
    Napi::Value* pyobj_qnimg = NULL;
    UMat qnimg;

    const char* keywords[] = { "qimg", "qnimg", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:qunitary", (char**)keywords, &pyobj_qimg, &pyobj_qnimg) &&
        jsopencv_to_safe(info, pyobj_qimg, qimg, ArgInfo("qimg", 0)) &&
        jsopencv_to_safe(info, pyobj_qnimg, qnimg, ArgInfo("qnimg", 1)))
    {
        ERRWRAP2(cv::ximgproc::qunitary(qimg, qnimg));
        return jsopencv_from(qnimg);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("qunitary");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_readGT(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src_path = NULL;
    String src_path;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    int retval;

    const char* keywords[] = { "src_path", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:readGT", (char**)keywords, &pyobj_src_path, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src_path, src_path, ArgInfo("src_path", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(retval = cv::ximgproc::readGT(src_path, dst));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(dst));
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src_path = NULL;
    String src_path;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    int retval;

    const char* keywords[] = { "src_path", "dst", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|O:readGT", (char**)keywords, &pyobj_src_path, &pyobj_dst) &&
        jsopencv_to_safe(info, pyobj_src_path, src_path, ArgInfo("src_path", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)))
    {
        ERRWRAP2(retval = cv::ximgproc::readGT(src_path, dst));
        return Py_BuildValue("(NN)", jsopencv_from(retval), jsopencv_from(dst));
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("readGT");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_rollingGuidanceFilter(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_d = NULL;
    int d=-1;
    Napi::Value* pyobj_sigmaColor = NULL;
    double sigmaColor=25;
    Napi::Value* pyobj_sigmaSpace = NULL;
    double sigmaSpace=3;
    Napi::Value* pyobj_numOfIter = NULL;
    int numOfIter=4;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "dst", "d", "sigmaColor", "sigmaSpace", "numOfIter", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOOO:rollingGuidanceFilter", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_d, &pyobj_sigmaColor, &pyobj_sigmaSpace, &pyobj_numOfIter, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_d, d, ArgInfo("d", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaColor, sigmaColor, ArgInfo("sigmaColor", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaSpace, sigmaSpace, ArgInfo("sigmaSpace", 0)) &&
        jsopencv_to_safe(info, pyobj_numOfIter, numOfIter, ArgInfo("numOfIter", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::ximgproc::rollingGuidanceFilter(src, dst, d, sigmaColor, sigmaSpace, numOfIter, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_d = NULL;
    int d=-1;
    Napi::Value* pyobj_sigmaColor = NULL;
    double sigmaColor=25;
    Napi::Value* pyobj_sigmaSpace = NULL;
    double sigmaSpace=3;
    Napi::Value* pyobj_numOfIter = NULL;
    int numOfIter=4;
    Napi::Value* pyobj_borderType = NULL;
    int borderType=BORDER_DEFAULT;

    const char* keywords[] = { "src", "dst", "d", "sigmaColor", "sigmaSpace", "numOfIter", "borderType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OOOOOO:rollingGuidanceFilter", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_d, &pyobj_sigmaColor, &pyobj_sigmaSpace, &pyobj_numOfIter, &pyobj_borderType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_d, d, ArgInfo("d", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaColor, sigmaColor, ArgInfo("sigmaColor", 0)) &&
        jsopencv_to_safe(info, pyobj_sigmaSpace, sigmaSpace, ArgInfo("sigmaSpace", 0)) &&
        jsopencv_to_safe(info, pyobj_numOfIter, numOfIter, ArgInfo("numOfIter", 0)) &&
        jsopencv_to_safe(info, pyobj_borderType, borderType, ArgInfo("borderType", 0)))
    {
        ERRWRAP2(cv::ximgproc::rollingGuidanceFilter(src, dst, d, sigmaColor, sigmaSpace, numOfIter, borderType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("rollingGuidanceFilter");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_thinning(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_thinningType = NULL;
    int thinningType=THINNING_ZHANGSUEN;

    const char* keywords[] = { "src", "dst", "thinningType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:thinning", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_thinningType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_thinningType, thinningType, ArgInfo("thinningType", 0)))
    {
        ERRWRAP2(cv::ximgproc::thinning(src, dst, thinningType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_thinningType = NULL;
    int thinningType=THINNING_ZHANGSUEN;

    const char* keywords[] = { "src", "dst", "thinningType", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O|OO:thinning", (char**)keywords, &pyobj_src, &pyobj_dst, &pyobj_thinningType) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_thinningType, thinningType, ArgInfo("thinningType", 0)))
    {
        ERRWRAP2(cv::ximgproc::thinning(src, dst, thinningType));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("thinning");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_transformFD(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_t = NULL;
    Mat t;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_fdContour = NULL;
    bool fdContour=true;

    const char* keywords[] = { "src", "t", "dst", "fdContour", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:transformFD", (char**)keywords, &pyobj_src, &pyobj_t, &pyobj_dst, &pyobj_fdContour) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_t, t, ArgInfo("t", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_fdContour, fdContour, ArgInfo("fdContour", 0)))
    {
        ERRWRAP2(cv::ximgproc::transformFD(src, t, dst, fdContour));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_t = NULL;
    UMat t;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_fdContour = NULL;
    bool fdContour=true;

    const char* keywords[] = { "src", "t", "dst", "fdContour", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO|OO:transformFD", (char**)keywords, &pyobj_src, &pyobj_t, &pyobj_dst, &pyobj_fdContour) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_t, t, ArgInfo("t", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_fdContour, fdContour, ArgInfo("fdContour", 0)))
    {
        ERRWRAP2(cv::ximgproc::transformFD(src, t, dst, fdContour));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("transformFD");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_weightedMedianFilter(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc;

    pyPrepareArgumentConversionErrorsStorage(2);

    {
    Napi::Value* pyobj_joint = NULL;
    Mat joint;
    Napi::Value* pyobj_src = NULL;
    Mat src;
    Napi::Value* pyobj_dst = NULL;
    Mat dst;
    Napi::Value* pyobj_r = NULL;
    int r=0;
    Napi::Value* pyobj_sigma = NULL;
    double sigma=25.5;
    Napi::Value* pyobj_weightType = NULL;
    int weightType=WMF_EXP;
    Napi::Value* pyobj_mask = NULL;
    Mat mask;

    const char* keywords[] = { "joint", "src", "r", "dst", "sigma", "weightType", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:weightedMedianFilter", (char**)keywords, &pyobj_joint, &pyobj_src, &pyobj_r, &pyobj_dst, &pyobj_sigma, &pyobj_weightType, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_joint, joint, ArgInfo("joint", 0)) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_r, r, ArgInfo("r", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma, sigma, ArgInfo("sigma", 0)) &&
        jsopencv_to_safe(info, pyobj_weightType, weightType, ArgInfo("weightType", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::ximgproc::weightedMedianFilter(joint, src, dst, r, sigma, weightType, mask));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_joint = NULL;
    UMat joint;
    Napi::Value* pyobj_src = NULL;
    UMat src;
    Napi::Value* pyobj_dst = NULL;
    UMat dst;
    Napi::Value* pyobj_r = NULL;
    int r=0;
    Napi::Value* pyobj_sigma = NULL;
    double sigma=25.5;
    Napi::Value* pyobj_weightType = NULL;
    int weightType=WMF_EXP;
    Napi::Value* pyobj_mask = NULL;
    UMat mask;

    const char* keywords[] = { "joint", "src", "r", "dst", "sigma", "weightType", "mask", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO|OOOO:weightedMedianFilter", (char**)keywords, &pyobj_joint, &pyobj_src, &pyobj_r, &pyobj_dst, &pyobj_sigma, &pyobj_weightType, &pyobj_mask) &&
        jsopencv_to_safe(info, pyobj_joint, joint, ArgInfo("joint", 0)) &&
        jsopencv_to_safe(info, pyobj_src, src, ArgInfo("src", 0)) &&
        jsopencv_to_safe(info, pyobj_dst, dst, ArgInfo("dst", 1)) &&
        jsopencv_to_safe(info, pyobj_r, r, ArgInfo("r", 0)) &&
        jsopencv_to_safe(info, pyobj_sigma, sigma, ArgInfo("sigma", 0)) &&
        jsopencv_to_safe(info, pyobj_weightType, weightType, ArgInfo("weightType", 0)) &&
        jsopencv_to_safe(info, pyobj_mask, mask, ArgInfo("mask", 0)))
    {
        ERRWRAP2(cv::ximgproc::weightedMedianFilter(joint, src, dst, r, sigma, weightType, mask));
        return jsopencv_from(dst);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("weightedMedianFilter");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_segmentation_createGraphSegmentation(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc::segmentation;

    Napi::Value* pyobj_sigma = NULL;
    double sigma=0.5;
    Napi::Value* pyobj_k = NULL;
    float k=300;
    Napi::Value* pyobj_min_size = NULL;
    int min_size=100;
    Ptr<GraphSegmentation> retval;

    const char* keywords[] = { "sigma", "k", "min_size", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "|OOO:createGraphSegmentation", (char**)keywords, &pyobj_sigma, &pyobj_k, &pyobj_min_size) &&
        jsopencv_to_safe(info, pyobj_sigma, sigma, ArgInfo("sigma", 0)) &&
        jsopencv_to_safe(info, pyobj_k, k, ArgInfo("k", 0)) &&
        jsopencv_to_safe(info, pyobj_min_size, min_size, ArgInfo("min_size", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::segmentation::createGraphSegmentation(sigma, k, min_size));
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_segmentation_createSelectiveSearchSegmentation(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc::segmentation;

    Ptr<SelectiveSearchSegmentation> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ximgproc::segmentation::createSelectiveSearchSegmentation());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_segmentation_createSelectiveSearchSegmentationStrategyColor(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc::segmentation;

    Ptr<SelectiveSearchSegmentationStrategyColor> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ximgproc::segmentation::createSelectiveSearchSegmentationStrategyColor());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_segmentation_createSelectiveSearchSegmentationStrategyFill(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc::segmentation;

    Ptr<SelectiveSearchSegmentationStrategyFill> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ximgproc::segmentation::createSelectiveSearchSegmentationStrategyFill());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_segmentation_createSelectiveSearchSegmentationStrategyMultiple(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc::segmentation;

    pyPrepareArgumentConversionErrorsStorage(5);

    {
    Ptr<SelectiveSearchSegmentationStrategyMultiple> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ximgproc::segmentation::createSelectiveSearchSegmentationStrategyMultiple());
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_s1 = NULL;
    Ptr<SelectiveSearchSegmentationStrategy> s1;
    Ptr<SelectiveSearchSegmentationStrategyMultiple> retval;

    const char* keywords[] = { "s1", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "O:createSelectiveSearchSegmentationStrategyMultiple", (char**)keywords, &pyobj_s1) &&
        jsopencv_to_safe(info, pyobj_s1, s1, ArgInfo("s1", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::segmentation::createSelectiveSearchSegmentationStrategyMultiple(s1));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_s1 = NULL;
    Ptr<SelectiveSearchSegmentationStrategy> s1;
    Napi::Value* pyobj_s2 = NULL;
    Ptr<SelectiveSearchSegmentationStrategy> s2;
    Ptr<SelectiveSearchSegmentationStrategyMultiple> retval;

    const char* keywords[] = { "s1", "s2", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OO:createSelectiveSearchSegmentationStrategyMultiple", (char**)keywords, &pyobj_s1, &pyobj_s2) &&
        jsopencv_to_safe(info, pyobj_s1, s1, ArgInfo("s1", 0)) &&
        jsopencv_to_safe(info, pyobj_s2, s2, ArgInfo("s2", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::segmentation::createSelectiveSearchSegmentationStrategyMultiple(s1, s2));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_s1 = NULL;
    Ptr<SelectiveSearchSegmentationStrategy> s1;
    Napi::Value* pyobj_s2 = NULL;
    Ptr<SelectiveSearchSegmentationStrategy> s2;
    Napi::Value* pyobj_s3 = NULL;
    Ptr<SelectiveSearchSegmentationStrategy> s3;
    Ptr<SelectiveSearchSegmentationStrategyMultiple> retval;

    const char* keywords[] = { "s1", "s2", "s3", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOO:createSelectiveSearchSegmentationStrategyMultiple", (char**)keywords, &pyobj_s1, &pyobj_s2, &pyobj_s3) &&
        jsopencv_to_safe(info, pyobj_s1, s1, ArgInfo("s1", 0)) &&
        jsopencv_to_safe(info, pyobj_s2, s2, ArgInfo("s2", 0)) &&
        jsopencv_to_safe(info, pyobj_s3, s3, ArgInfo("s3", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::segmentation::createSelectiveSearchSegmentationStrategyMultiple(s1, s2, s3));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    

    {
    Napi::Value* pyobj_s1 = NULL;
    Ptr<SelectiveSearchSegmentationStrategy> s1;
    Napi::Value* pyobj_s2 = NULL;
    Ptr<SelectiveSearchSegmentationStrategy> s2;
    Napi::Value* pyobj_s3 = NULL;
    Ptr<SelectiveSearchSegmentationStrategy> s3;
    Napi::Value* pyobj_s4 = NULL;
    Ptr<SelectiveSearchSegmentationStrategy> s4;
    Ptr<SelectiveSearchSegmentationStrategyMultiple> retval;

    const char* keywords[] = { "s1", "s2", "s3", "s4", NULL };
    if (JsArg_ParseTupleAndKeywords(py_args, kw, "OOOO:createSelectiveSearchSegmentationStrategyMultiple", (char**)keywords, &pyobj_s1, &pyobj_s2, &pyobj_s3, &pyobj_s4) &&
        jsopencv_to_safe(info, pyobj_s1, s1, ArgInfo("s1", 0)) &&
        jsopencv_to_safe(info, pyobj_s2, s2, ArgInfo("s2", 0)) &&
        jsopencv_to_safe(info, pyobj_s3, s3, ArgInfo("s3", 0)) &&
        jsopencv_to_safe(info, pyobj_s4, s4, ArgInfo("s4", 0)))
    {
        ERRWRAP2(retval = cv::ximgproc::segmentation::createSelectiveSearchSegmentationStrategyMultiple(s1, s2, s3, s4));
        return jsopencv_from(retval);
    }


        pyPopulateArgumentConversionErrors();
    }
    pyRaiseCVOverloadException("createSelectiveSearchSegmentationStrategyMultiple");

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_segmentation_createSelectiveSearchSegmentationStrategySize(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc::segmentation;

    Ptr<SelectiveSearchSegmentationStrategySize> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ximgproc::segmentation::createSelectiveSearchSegmentationStrategySize());
        return jsopencv_from(retval);
    }

    return NULL;
}

static Napi::Value pyopencv_cv_ximgproc_segmentation_createSelectiveSearchSegmentationStrategyTexture(const Napi::CallbackInfo &info)
{
    using namespace cv::ximgproc::segmentation;

    Ptr<SelectiveSearchSegmentationStrategyTexture> retval;

    if (PyObject_Size(py_args) == 0 && (!kw || PyObject_Size(kw) == 0))
    {
        ERRWRAP2(retval = cv::ximgproc::segmentation::createSelectiveSearchSegmentationStrategyTexture());
        return jsopencv_from(retval);
    }

    return NULL;
}

